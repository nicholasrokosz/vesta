import { z } from 'zod';
import type { Prisma } from '@prisma/client';

/////////////////////////////////////////
// HELPER FUNCTIONS
/////////////////////////////////////////

// DECIMAL
//------------------------------------------------------

export const DecimalJSLikeSchema: z.ZodType<Prisma.DecimalJsLike> = z.object({ d: z.array(z.number()), e: z.number(), s: z.number(), toFixed: z.function().args().returns(z.string()), });

export const DecimalJSLikeListSchema: z.ZodType<Prisma.DecimalJsLike[]> = z.object({ d: z.array(z.number()), e: z.number(), s: z.number(), toFixed: z.function().args().returns(z.string()), }).array();

export const DECIMAL_STRING_REGEX = /^[0-9.,e+-bxffo_cp]+$|Infinity|NaN/;

export const isValidDecimalInput =
  (v?: null | string | number | Prisma.DecimalJsLike): v is string | number | Prisma.DecimalJsLike => {
    if (v === undefined || v === null) return false;
    return (
      (typeof v === 'object' && 'd' in v && 'e' in v && 's' in v && 'toFixed' in v) ||
      (typeof v === 'string' && DECIMAL_STRING_REGEX.test(v)) ||
      typeof v === 'number'
    )
  };

/////////////////////////////////////////
// ENUMS
/////////////////////////////////////////

export const TransactionIsolationLevelSchema = z.enum(['ReadUncommitted','ReadCommitted','RepeatableRead','Serializable']);

export const AccountScalarFieldEnumSchema = z.enum(['id','userId','type','provider','providerAccountId','refresh_token','access_token','expires_at','token_type','scope','id_token','session_state']);

export const SessionScalarFieldEnumSchema = z.enum(['id','sessionToken','userId','expires']);

export const UserScalarFieldEnumSchema = z.enum(['id','name','email','emailVerified','image','phone','globalRole','organizationId','organizationRole','ownerEntity']);

export const VerificationTokenScalarFieldEnumSchema = z.enum(['identifier','token','expires']);

export const OrganizationScalarFieldEnumSchema = z.enum(['id','createdAt','updatedAt','name','language','adminName','line1','line2','city','state','zip','country','website','phone','currency','startDate','directBooking','logoUrl']);

export const BookingPalConnectionScalarFieldEnumSchema = z.enum(['id','createdAt','updatedAt','organizationId','companyId','email','password','ownerId']);

export const PriceLabsConnectionScalarFieldEnumSchema = z.enum(['id','createdAt','updatedAt','accountEmail','organizationId']);

export const StripeConnectionScalarFieldEnumSchema = z.enum(['id','createdAt','updatedAt','organizationId','accountId','detailsSubmitted']);

export const ListingScalarFieldEnumSchema = z.enum(['id','createdAt','updatedAt','name','unitType','beds','baths','guests','line1','line2','city','state','zip','country','latitude','longitude','timeZone','airbnbRemitsTaxes','organizationId','propertyManagerId','propertyOwnerId','wifiName','wifiPassword','notes','bpProductId','doorCode','url','basePrice','iCalKey']);

export const ListingKeyScalarFieldEnumSchema = z.enum(['id','createdAt','updatedAt','listingId','keyType']);

export const ContentScalarFieldEnumSchema = z.enum(['id','listingId','photos','title','description','aiInfo']);

export const RulesScalarFieldEnumSchema = z.enum(['id','listingId','pets','children','smoking','deposit','house']);

export const PricingScalarFieldEnumSchema = z.enum(['id','listingId','minimum','weekday','weekend','minStay','maxStay','dynamicPricing']);

export const PricingDateScalarFieldEnumSchema = z.enum(['id','pricingId','startDate','endDate','percent']);

export const DiscountScalarFieldEnumSchema = z.enum(['id','pricingId','days','percent']);

export const AvailabilityScalarFieldEnumSchema = z.enum(['id','listingId','checkIn','checkOut','leadTime']);

export const AmenityScalarFieldEnumSchema = z.enum(['id','listingId','typeId','note']);

export const FeeScalarFieldEnumSchema = z.enum(['id','listingId','name','value','unit','taxable','type','share']);

export const TaxRatesScalarFieldEnumSchema = z.enum(['id','listingId','municipal','county','state']);

export const DeductionsScalarFieldEnumSchema = z.enum(['id','listingId','channelFees','creditCardFees','discounts','municipalTaxes','countyTaxes','stateTaxes','otherGuestFees','pmcShare']);

export const BedroomScalarFieldEnumSchema = z.enum(['id','contentId','type','bathroom','beds']);

export const CalendarEventScalarFieldEnumSchema = z.enum(['id','createdAt','updatedAt','listingId','fromDate','toDate','type','notes','bookedOn']);

export const ReservationScalarFieldEnumSchema = z.enum(['id','createdAt','updatedAt','calendarEventId','channel','bpReservationId','confirmationCode','adults','children','pets','status','guestId']);

export const ReservationBpRequestScalarFieldEnumSchema = z.enum(['id','createdAt','updatedAt','organizationId','listingId','reservationId','fromDate','toDate','available','status']);

export const GuestScalarFieldEnumSchema = z.enum(['id','createdAt','updatedAt','name','email','phone','organizationId']);

export const MessageThreadScalarFieldEnumSchema = z.enum(['id','createdAt','listingId','guestId','bpThreadId','channelThreadId','lastMessageSentAt','dateFrom','dateTo','replyTo','archived','enableReminder','channel']);

export const MessageScalarFieldEnumSchema = z.enum(['id','createdAt','messageThreadId','message','user','timestamp','bpMessageId','channelMessageId','read']);

export const MessageTemplateScalarFieldEnumSchema = z.enum(['id','createdAt','updatedAt','title','body','bodyHtml','enabled','trigger','triggerRange','triggerUnit','triggerValue','allListings','organizationId']);

export const ScheduledMessageScalarFieldEnumSchema = z.enum(['id','createdAt','updatedAt','scheduledAt','reservationId','messageTemplateId','status','completedAt','failureMessage']);

export const RevenueScalarFieldEnumSchema = z.enum(['id','createdAt','updatedAt','reservationId','accommodation','pmcShare','discount','channelCommission','ownerStatementId','payoutStatus']);

export const RevenueTaxScalarFieldEnumSchema = z.enum(['id','revenueId','createdAt','updatedAt','description','value','revenueFeeId','type']);

export const RevenueFeeScalarFieldEnumSchema = z.enum(['id','revenueId','createdAt','updatedAt','name','value','unit','pmcShare','taxable','type']);

export const ExpenseScalarFieldEnumSchema = z.enum(['id','createdAt','updatedAt','date','amount','vendor','description','workOrder','receiptUrl','invoiceUrl','userId','plaidTransactionId']);

export const ListingExpenseScalarFieldEnumSchema = z.enum(['id','confirmationCode','expenseId','listingId','createdAt','updatedAt','amount','amountPaid','ownerStatementId']);

export const OwnerStatementScalarFieldEnumSchema = z.enum(['id','listingId','month','year','locked','isCoHost']);

export const PlaidItemScalarFieldEnumSchema = z.enum(['id','createdAt','updatedAt','accessToken','cursor','institution','institutionId','creatorId','organizationId']);

export const PlaidAccountScalarFieldEnumSchema = z.enum(['id','createdAt','updatedAt','itemId','plaidId','name','mask','type','subtype','verificationStatus']);

export const PlaidTransactionScalarFieldEnumSchema = z.enum(['id','accountId','plaidId','status','date','amount','vendor','name']);

export const DailyRateScalarFieldEnumSchema = z.enum(['id','listingId','date','rate','minStay']);

export const PayoutScalarFieldEnumSchema = z.enum(['id','createdAt','updatedAt','date','amount','allocated','plaidTransactionId']);

export const RevenuePayoutScalarFieldEnumSchema = z.enum(['id','createdAt','updatedAt','createdById','payoutId','revenueId','amount']);

export const SortOrderSchema = z.enum(['asc','desc']);

export const QueryModeSchema = z.enum(['default','insensitive']);

export const NullsOrderSchema = z.enum(['first','last']);

export const GlobalRoleSchema = z.enum(['SUPERADMIN','CUSTOMER']);

export type GlobalRoleType = `${z.infer<typeof GlobalRoleSchema>}`

export const OrganizationRoleSchema = z.enum(['ADMIN','PROPERTY_MANAGER','PROPERTY_OWNER']);

export type OrganizationRoleType = `${z.infer<typeof OrganizationRoleSchema>}`

export const KeyTypeSchema = z.enum(['iCal','Direct']);

export type KeyTypeType = `${z.infer<typeof KeyTypeSchema>}`

export const UnitTypeSchema = z.enum(['House','Apartment','Condo','SecondaryUnit','BedAndBreakfast','BoutiqueHotel']);

export type UnitTypeType = `${z.infer<typeof UnitTypeSchema>}`

export const DynamicPricingSchema = z.enum(['None','PriceLabs']);

export type DynamicPricingType = `${z.infer<typeof DynamicPricingSchema>}`

export const CalendarEventTypeSchema = z.enum(['Reservation','Blocked','Maintenance']);

export type CalendarEventTypeType = `${z.infer<typeof CalendarEventTypeSchema>}`

export const QueueStatusSchema = z.enum(['PENDING','SENT','FAILED']);

export type QueueStatusType = `${z.infer<typeof QueueStatusSchema>}`

export const MessageUserSchema = z.enum(['GUEST','PROPERTY_MANAGER']);

export type MessageUserType = `${z.infer<typeof MessageUserSchema>}`

export const ReservationStatusSchema = z.enum(['CANCELLED','CONFIRMED','FULLY_PAID','PROVISIONAL','RESERVED','EXCEPTION','FAILED']);

export type ReservationStatusType = `${z.infer<typeof ReservationStatusSchema>}`

export const TriggerSchema = z.enum(['CheckIn','CheckOut','ReservationConfirmed']);

export type TriggerType = `${z.infer<typeof TriggerSchema>}`

export const TriggerRangeSchema = z.enum(['Immediately','After','Before']);

export type TriggerRangeType = `${z.infer<typeof TriggerRangeSchema>}`

export const TriggerUnitSchema = z.enum(['Minutes','Hours','Days']);

export type TriggerUnitType = `${z.infer<typeof TriggerUnitSchema>}`

export const ScheduledMessageStatusSchema = z.enum(['PENDING','SENT','FAILED']);

export type ScheduledMessageStatusType = `${z.infer<typeof ScheduledMessageStatusSchema>}`

export const ChannelSchema = z.enum(['Airbnb','Booking','VRBO','Direct']);

export type ChannelType = `${z.infer<typeof ChannelSchema>}`

export const RevenuePayoutStatusSchema = z.enum(['FULL','PARTIAL','UNPAID']);

export type RevenuePayoutStatusType = `${z.infer<typeof RevenuePayoutStatusSchema>}`

export const RevenueEntryTypeSchema = z.enum(['ACCOMMODATION','GUEST_FEE','CANCELLATION_FEE','SECURITY_DEPOSIT']);

export type RevenueEntryTypeType = `${z.infer<typeof RevenueEntryTypeSchema>}`

export const RevenueDeductionTypeSchema = z.enum(['TAX','DISCOUNT','CHANNEL_COMMISSION','CREDIT_CARD']);

export type RevenueDeductionTypeType = `${z.infer<typeof RevenueDeductionTypeSchema>}`

export const PlaidImportStatusSchema = z.enum(['PENDING','ACCEPTED','DISMISSED']);

export type PlaidImportStatusType = `${z.infer<typeof PlaidImportStatusSchema>}`

/////////////////////////////////////////
// MODELS
/////////////////////////////////////////

/////////////////////////////////////////
// ACCOUNT SCHEMA
/////////////////////////////////////////

export const AccountSchema = z.object({
  id: z.string().cuid(),
  userId: z.string(),
  type: z.string(),
  provider: z.string(),
  providerAccountId: z.string(),
  refresh_token: z.string().nullable(),
  access_token: z.string().nullable(),
  expires_at: z.number().int().nullable(),
  token_type: z.string().nullable(),
  scope: z.string().nullable(),
  id_token: z.string().nullable(),
  session_state: z.string().nullable(),
})

export type Account = z.infer<typeof AccountSchema>

/////////////////////////////////////////
// SESSION SCHEMA
/////////////////////////////////////////

export const SessionSchema = z.object({
  id: z.string().cuid(),
  sessionToken: z.string(),
  userId: z.string(),
  expires: z.coerce.date(),
})

export type Session = z.infer<typeof SessionSchema>

/////////////////////////////////////////
// USER SCHEMA
/////////////////////////////////////////

export const UserSchema = z.object({
  globalRole: GlobalRoleSchema,
  organizationRole: OrganizationRoleSchema.nullable(),
  id: z.string().cuid(),
  name: z.string().nullable(),
  email: z.string(),
  emailVerified: z.coerce.date().nullable(),
  image: z.string().nullable(),
  phone: z.string().nullable(),
  organizationId: z.string().nullable(),
  ownerEntity: z.string().nullable(),
})

export type User = z.infer<typeof UserSchema>

/////////////////////////////////////////
// VERIFICATION TOKEN SCHEMA
/////////////////////////////////////////

export const VerificationTokenSchema = z.object({
  identifier: z.string(),
  token: z.string(),
  expires: z.coerce.date(),
})

export type VerificationToken = z.infer<typeof VerificationTokenSchema>

/////////////////////////////////////////
// ORGANIZATION SCHEMA
/////////////////////////////////////////

export const OrganizationSchema = z.object({
  id: z.string().cuid(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  name: z.string(),
  language: z.string(),
  adminName: z.string(),
  line1: z.string(),
  line2: z.string().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string(),
  website: z.string(),
  phone: z.string(),
  currency: z.string(),
  startDate: z.coerce.date(),
  directBooking: z.boolean(),
  logoUrl: z.string().nullable(),
})

export type Organization = z.infer<typeof OrganizationSchema>

/////////////////////////////////////////
// BOOKING PAL CONNECTION SCHEMA
/////////////////////////////////////////

export const BookingPalConnectionSchema = z.object({
  id: z.string().cuid(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  organizationId: z.string().nullable(),
  companyId: z.number().int(),
  email: z.string(),
  password: z.string(),
  ownerId: z.string().nullable(),
})

export type BookingPalConnection = z.infer<typeof BookingPalConnectionSchema>

/////////////////////////////////////////
// PRICE LABS CONNECTION SCHEMA
/////////////////////////////////////////

export const PriceLabsConnectionSchema = z.object({
  id: z.string().cuid(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  accountEmail: z.string(),
  organizationId: z.string().nullable(),
})

export type PriceLabsConnection = z.infer<typeof PriceLabsConnectionSchema>

/////////////////////////////////////////
// STRIPE CONNECTION SCHEMA
/////////////////////////////////////////

export const StripeConnectionSchema = z.object({
  id: z.string().cuid(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  organizationId: z.string(),
  accountId: z.string(),
  detailsSubmitted: z.boolean(),
})

export type StripeConnection = z.infer<typeof StripeConnectionSchema>

/////////////////////////////////////////
// LISTING SCHEMA
/////////////////////////////////////////

export const ListingSchema = z.object({
  unitType: UnitTypeSchema,
  id: z.string().cuid(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  name: z.string(),
  beds: z.number().int(),
  baths: z.number(),
  guests: z.number().int(),
  line1: z.string(),
  line2: z.string().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string(),
  latitude: z.number().nullable(),
  longitude: z.number().nullable(),
  timeZone: z.string(),
  airbnbRemitsTaxes: z.boolean(),
  organizationId: z.string(),
  propertyManagerId: z.string(),
  propertyOwnerId: z.string().nullable(),
  wifiName: z.string().nullable(),
  wifiPassword: z.string().nullable(),
  notes: z.string().nullable(),
  bpProductId: z.string().nullable(),
  doorCode: z.string().nullable(),
  url: z.string().nullable(),
  basePrice: z.number(),
  iCalKey: z.string().nullable(),
})

export type Listing = z.infer<typeof ListingSchema>

/////////////////////////////////////////
// LISTING KEY SCHEMA
/////////////////////////////////////////

export const ListingKeySchema = z.object({
  keyType: KeyTypeSchema,
  id: z.string().cuid(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  listingId: z.string(),
})

export type ListingKey = z.infer<typeof ListingKeySchema>

/////////////////////////////////////////
// CONTENT SCHEMA
/////////////////////////////////////////

export const ContentSchema = z.object({
  id: z.string().cuid(),
  listingId: z.string(),
  photos: z.string().array(),
  title: z.string(),
  description: z.string(),
  aiInfo: z.string().nullable(),
})

export type Content = z.infer<typeof ContentSchema>

/////////////////////////////////////////
// RULES SCHEMA
/////////////////////////////////////////

export const RulesSchema = z.object({
  id: z.string().cuid(),
  listingId: z.string(),
  pets: z.boolean(),
  children: z.boolean(),
  smoking: z.boolean(),
  deposit: z.boolean(),
  house: z.string().nullable(),
})

export type Rules = z.infer<typeof RulesSchema>

/////////////////////////////////////////
// PRICING SCHEMA
/////////////////////////////////////////

export const PricingSchema = z.object({
  dynamicPricing: DynamicPricingSchema,
  id: z.string().cuid(),
  listingId: z.string(),
  minimum: z.number().int(),
  weekday: z.number().int(),
  weekend: z.number().int(),
  minStay: z.number().int(),
  maxStay: z.number().int(),
})

export type Pricing = z.infer<typeof PricingSchema>

/////////////////////////////////////////
// PRICING DATE SCHEMA
/////////////////////////////////////////

export const PricingDateSchema = z.object({
  id: z.string().cuid(),
  pricingId: z.string(),
  startDate: z.coerce.date(),
  endDate: z.coerce.date(),
  percent: z.number(),
})

export type PricingDate = z.infer<typeof PricingDateSchema>

/////////////////////////////////////////
// DISCOUNT SCHEMA
/////////////////////////////////////////

export const DiscountSchema = z.object({
  id: z.string().cuid(),
  pricingId: z.string(),
  days: z.number().int(),
  percent: z.number().int(),
})

export type Discount = z.infer<typeof DiscountSchema>

/////////////////////////////////////////
// AVAILABILITY SCHEMA
/////////////////////////////////////////

export const AvailabilitySchema = z.object({
  id: z.string().cuid(),
  listingId: z.string(),
  checkIn: z.string(),
  checkOut: z.string(),
  leadTime: z.number().int(),
})

export type Availability = z.infer<typeof AvailabilitySchema>

/////////////////////////////////////////
// AMENITY SCHEMA
/////////////////////////////////////////

export const AmenitySchema = z.object({
  id: z.string().cuid(),
  listingId: z.string(),
  typeId: z.string(),
  note: z.string().nullable(),
})

export type Amenity = z.infer<typeof AmenitySchema>

/////////////////////////////////////////
// FEE SCHEMA
/////////////////////////////////////////

export const FeeSchema = z.object({
  id: z.string().cuid(),
  listingId: z.string(),
  name: z.string(),
  value: z.number().int(),
  unit: z.string(),
  taxable: z.boolean(),
  type: z.string(),
  share: z.number(),
})

export type Fee = z.infer<typeof FeeSchema>

/////////////////////////////////////////
// TAX RATES SCHEMA
/////////////////////////////////////////

export const TaxRatesSchema = z.object({
  id: z.string().cuid(),
  listingId: z.string(),
  municipal: z.number(),
  county: z.number(),
  state: z.number(),
})

export type TaxRates = z.infer<typeof TaxRatesSchema>

/////////////////////////////////////////
// DEDUCTIONS SCHEMA
/////////////////////////////////////////

export const DeductionsSchema = z.object({
  id: z.string().cuid(),
  listingId: z.string(),
  channelFees: z.boolean(),
  creditCardFees: z.boolean(),
  discounts: z.boolean(),
  municipalTaxes: z.boolean(),
  countyTaxes: z.boolean(),
  stateTaxes: z.boolean(),
  otherGuestFees: z.boolean(),
  pmcShare: z.number(),
})

export type Deductions = z.infer<typeof DeductionsSchema>

/////////////////////////////////////////
// BEDROOM SCHEMA
/////////////////////////////////////////

export const BedroomSchema = z.object({
  id: z.string().cuid(),
  contentId: z.string(),
  type: z.string(),
  bathroom: z.boolean(),
  beds: z.string().array(),
})

export type Bedroom = z.infer<typeof BedroomSchema>

/////////////////////////////////////////
// CALENDAR EVENT SCHEMA
/////////////////////////////////////////

export const CalendarEventSchema = z.object({
  type: CalendarEventTypeSchema,
  id: z.string().cuid(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  listingId: z.string(),
  fromDate: z.coerce.date(),
  toDate: z.coerce.date(),
  notes: z.string().nullable(),
  bookedOn: z.coerce.date().nullable(),
})

export type CalendarEvent = z.infer<typeof CalendarEventSchema>

/////////////////////////////////////////
// RESERVATION SCHEMA
/////////////////////////////////////////

export const ReservationSchema = z.object({
  channel: ChannelSchema,
  status: ReservationStatusSchema,
  id: z.string().cuid(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  calendarEventId: z.string(),
  bpReservationId: z.string().nullable(),
  confirmationCode: z.string().nullable(),
  adults: z.number().int(),
  children: z.number().int(),
  pets: z.number().int(),
  guestId: z.string(),
})

export type Reservation = z.infer<typeof ReservationSchema>

/////////////////////////////////////////
// RESERVATION BP REQUEST SCHEMA
/////////////////////////////////////////

export const ReservationBpRequestSchema = z.object({
  status: QueueStatusSchema,
  id: z.string().cuid(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  organizationId: z.string(),
  listingId: z.string(),
  reservationId: z.string(),
  fromDate: z.coerce.date(),
  toDate: z.coerce.date(),
  available: z.boolean(),
})

export type ReservationBpRequest = z.infer<typeof ReservationBpRequestSchema>

/////////////////////////////////////////
// GUEST SCHEMA
/////////////////////////////////////////

export const GuestSchema = z.object({
  id: z.string().cuid(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  name: z.string(),
  email: z.string().nullable(),
  phone: z.string().nullable(),
  organizationId: z.string(),
})

export type Guest = z.infer<typeof GuestSchema>

/////////////////////////////////////////
// MESSAGE THREAD SCHEMA
/////////////////////////////////////////

export const MessageThreadSchema = z.object({
  channel: ChannelSchema,
  id: z.string().cuid(),
  createdAt: z.coerce.date(),
  listingId: z.string(),
  guestId: z.string(),
  bpThreadId: z.string().nullable(),
  channelThreadId: z.string().nullable(),
  lastMessageSentAt: z.string().nullable(),
  dateFrom: z.string(),
  dateTo: z.string(),
  replyTo: z.string().nullable(),
  archived: z.boolean(),
  enableReminder: z.boolean(),
})

export type MessageThread = z.infer<typeof MessageThreadSchema>

/////////////////////////////////////////
// MESSAGE SCHEMA
/////////////////////////////////////////

export const MessageSchema = z.object({
  user: MessageUserSchema,
  id: z.string().cuid(),
  createdAt: z.coerce.date(),
  messageThreadId: z.string(),
  message: z.string(),
  timestamp: z.coerce.date(),
  bpMessageId: z.string().nullable(),
  channelMessageId: z.string().nullable(),
  read: z.boolean(),
})

export type Message = z.infer<typeof MessageSchema>

/////////////////////////////////////////
// MESSAGE TEMPLATE SCHEMA
/////////////////////////////////////////

export const MessageTemplateSchema = z.object({
  trigger: TriggerSchema.nullable(),
  triggerRange: TriggerRangeSchema.nullable(),
  triggerUnit: TriggerUnitSchema.nullable(),
  id: z.string().cuid(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  title: z.string(),
  body: z.string(),
  bodyHtml: z.string(),
  enabled: z.boolean(),
  triggerValue: z.number().int().nullable(),
  allListings: z.boolean(),
  organizationId: z.string(),
})

export type MessageTemplate = z.infer<typeof MessageTemplateSchema>

/////////////////////////////////////////
// SCHEDULED MESSAGE SCHEMA
/////////////////////////////////////////

export const ScheduledMessageSchema = z.object({
  status: ScheduledMessageStatusSchema,
  id: z.string().cuid(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  scheduledAt: z.coerce.date(),
  reservationId: z.string(),
  messageTemplateId: z.string(),
  completedAt: z.coerce.date().nullable(),
  failureMessage: z.string().nullable(),
})

export type ScheduledMessage = z.infer<typeof ScheduledMessageSchema>

/////////////////////////////////////////
// REVENUE SCHEMA
/////////////////////////////////////////

export const RevenueSchema = z.object({
  payoutStatus: RevenuePayoutStatusSchema,
  id: z.string().cuid(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  reservationId: z.string(),
  accommodation: z.number().nullable(),
  pmcShare: z.number(),
  discount: z.number().nullable(),
  channelCommission: z.number().nullable(),
  ownerStatementId: z.string().nullable(),
})

export type Revenue = z.infer<typeof RevenueSchema>

/////////////////////////////////////////
// REVENUE TAX SCHEMA
/////////////////////////////////////////

export const RevenueTaxSchema = z.object({
  type: RevenueDeductionTypeSchema,
  id: z.string().cuid(),
  revenueId: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  description: z.string(),
  value: z.number(),
  revenueFeeId: z.string(),
})

export type RevenueTax = z.infer<typeof RevenueTaxSchema>

/////////////////////////////////////////
// REVENUE FEE SCHEMA
/////////////////////////////////////////

export const RevenueFeeSchema = z.object({
  type: RevenueEntryTypeSchema,
  id: z.string().cuid(),
  revenueId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  name: z.string(),
  value: z.number(),
  unit: z.string(),
  pmcShare: z.number(),
  taxable: z.boolean(),
})

export type RevenueFee = z.infer<typeof RevenueFeeSchema>

/////////////////////////////////////////
// EXPENSE SCHEMA
/////////////////////////////////////////

export const ExpenseSchema = z.object({
  id: z.string().cuid(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  date: z.coerce.date(),
  amount: z.number(),
  vendor: z.string(),
  description: z.string().nullable(),
  workOrder: z.string().nullable(),
  receiptUrl: z.string().nullable(),
  invoiceUrl: z.string().nullable(),
  userId: z.string().nullable(),
  plaidTransactionId: z.string().nullable(),
})

export type Expense = z.infer<typeof ExpenseSchema>

/////////////////////////////////////////
// LISTING EXPENSE SCHEMA
/////////////////////////////////////////

export const ListingExpenseSchema = z.object({
  id: z.string().cuid(),
  confirmationCode: z.string().nullable(),
  expenseId: z.string(),
  listingId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  amount: z.number(),
  amountPaid: z.number(),
  ownerStatementId: z.string().nullable(),
})

export type ListingExpense = z.infer<typeof ListingExpenseSchema>

/////////////////////////////////////////
// OWNER STATEMENT SCHEMA
/////////////////////////////////////////

export const OwnerStatementSchema = z.object({
  id: z.string().cuid(),
  listingId: z.string(),
  month: z.number().int(),
  year: z.number().int(),
  locked: z.boolean(),
  isCoHost: z.boolean(),
})

export type OwnerStatement = z.infer<typeof OwnerStatementSchema>

/////////////////////////////////////////
// PLAID ITEM SCHEMA
/////////////////////////////////////////

export const PlaidItemSchema = z.object({
  id: z.string().cuid(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  accessToken: z.string(),
  cursor: z.string().nullable(),
  institution: z.string(),
  institutionId: z.string(),
  creatorId: z.string(),
  organizationId: z.string(),
})

export type PlaidItem = z.infer<typeof PlaidItemSchema>

/////////////////////////////////////////
// PLAID ACCOUNT SCHEMA
/////////////////////////////////////////

export const PlaidAccountSchema = z.object({
  id: z.string().cuid(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  itemId: z.string(),
  plaidId: z.string(),
  name: z.string(),
  mask: z.string(),
  type: z.string(),
  subtype: z.string(),
  verificationStatus: z.string().nullable(),
})

export type PlaidAccount = z.infer<typeof PlaidAccountSchema>

/////////////////////////////////////////
// PLAID TRANSACTION SCHEMA
/////////////////////////////////////////

export const PlaidTransactionSchema = z.object({
  status: PlaidImportStatusSchema,
  id: z.string().cuid(),
  accountId: z.string(),
  plaidId: z.string(),
  date: z.coerce.date(),
  amount: z.number(),
  vendor: z.string(),
  name: z.string(),
})

export type PlaidTransaction = z.infer<typeof PlaidTransactionSchema>

/////////////////////////////////////////
// DAILY RATE SCHEMA
/////////////////////////////////////////

export const DailyRateSchema = z.object({
  id: z.string().cuid(),
  listingId: z.string(),
  date: z.coerce.date(),
  rate: z.number().int(),
  minStay: z.number().int(),
})

export type DailyRate = z.infer<typeof DailyRateSchema>

/////////////////////////////////////////
// PAYOUT SCHEMA
/////////////////////////////////////////

export const PayoutSchema = z.object({
  id: z.string().cuid(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  date: z.coerce.date(),
  amount: z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: "Field 'amount' must be a Decimal. Location: ['Models', 'Payout']",  }),
  allocated: z.boolean(),
  plaidTransactionId: z.string().nullable(),
})

export type Payout = z.infer<typeof PayoutSchema>

/////////////////////////////////////////
// REVENUE PAYOUT SCHEMA
/////////////////////////////////////////

export const RevenuePayoutSchema = z.object({
  id: z.string().cuid(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  createdById: z.string().nullable(),
  payoutId: z.string(),
  revenueId: z.string(),
  amount: z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: "Field 'amount' must be a Decimal. Location: ['Models', 'RevenuePayout']",  }),
})

export type RevenuePayout = z.infer<typeof RevenuePayoutSchema>

/////////////////////////////////////////
// SELECT & INCLUDE
/////////////////////////////////////////

// ACCOUNT
//------------------------------------------------------

export const AccountIncludeSchema: z.ZodType<Prisma.AccountInclude> = z.object({
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const AccountArgsSchema: z.ZodType<Prisma.AccountDefaultArgs> = z.object({
  select: z.lazy(() => AccountSelectSchema).optional(),
  include: z.lazy(() => AccountIncludeSchema).optional(),
}).strict();

export const AccountSelectSchema: z.ZodType<Prisma.AccountSelect> = z.object({
  id: z.boolean().optional(),
  userId: z.boolean().optional(),
  type: z.boolean().optional(),
  provider: z.boolean().optional(),
  providerAccountId: z.boolean().optional(),
  refresh_token: z.boolean().optional(),
  access_token: z.boolean().optional(),
  expires_at: z.boolean().optional(),
  token_type: z.boolean().optional(),
  scope: z.boolean().optional(),
  id_token: z.boolean().optional(),
  session_state: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// SESSION
//------------------------------------------------------

export const SessionIncludeSchema: z.ZodType<Prisma.SessionInclude> = z.object({
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const SessionArgsSchema: z.ZodType<Prisma.SessionDefaultArgs> = z.object({
  select: z.lazy(() => SessionSelectSchema).optional(),
  include: z.lazy(() => SessionIncludeSchema).optional(),
}).strict();

export const SessionSelectSchema: z.ZodType<Prisma.SessionSelect> = z.object({
  id: z.boolean().optional(),
  sessionToken: z.boolean().optional(),
  userId: z.boolean().optional(),
  expires: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// USER
//------------------------------------------------------

export const UserIncludeSchema: z.ZodType<Prisma.UserInclude> = z.object({
  accounts: z.union([z.boolean(),z.lazy(() => AccountFindManyArgsSchema)]).optional(),
  sessions: z.union([z.boolean(),z.lazy(() => SessionFindManyArgsSchema)]).optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  managedListings: z.union([z.boolean(),z.lazy(() => ListingFindManyArgsSchema)]).optional(),
  ownedListings: z.union([z.boolean(),z.lazy(() => ListingFindManyArgsSchema)]).optional(),
  expenses: z.union([z.boolean(),z.lazy(() => ExpenseFindManyArgsSchema)]).optional(),
  bookingPalConnection: z.union([z.boolean(),z.lazy(() => BookingPalConnectionArgsSchema)]).optional(),
  plaidItems: z.union([z.boolean(),z.lazy(() => PlaidItemFindManyArgsSchema)]).optional(),
  revenuePayouts: z.union([z.boolean(),z.lazy(() => RevenuePayoutFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UserCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const UserArgsSchema: z.ZodType<Prisma.UserDefaultArgs> = z.object({
  select: z.lazy(() => UserSelectSchema).optional(),
  include: z.lazy(() => UserIncludeSchema).optional(),
}).strict();

export const UserCountOutputTypeArgsSchema: z.ZodType<Prisma.UserCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => UserCountOutputTypeSelectSchema).nullish(),
}).strict();

export const UserCountOutputTypeSelectSchema: z.ZodType<Prisma.UserCountOutputTypeSelect> = z.object({
  accounts: z.boolean().optional(),
  sessions: z.boolean().optional(),
  managedListings: z.boolean().optional(),
  ownedListings: z.boolean().optional(),
  expenses: z.boolean().optional(),
  plaidItems: z.boolean().optional(),
  revenuePayouts: z.boolean().optional(),
}).strict();

export const UserSelectSchema: z.ZodType<Prisma.UserSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  email: z.boolean().optional(),
  emailVerified: z.boolean().optional(),
  image: z.boolean().optional(),
  phone: z.boolean().optional(),
  globalRole: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  organizationRole: z.boolean().optional(),
  ownerEntity: z.boolean().optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountFindManyArgsSchema)]).optional(),
  sessions: z.union([z.boolean(),z.lazy(() => SessionFindManyArgsSchema)]).optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  managedListings: z.union([z.boolean(),z.lazy(() => ListingFindManyArgsSchema)]).optional(),
  ownedListings: z.union([z.boolean(),z.lazy(() => ListingFindManyArgsSchema)]).optional(),
  expenses: z.union([z.boolean(),z.lazy(() => ExpenseFindManyArgsSchema)]).optional(),
  bookingPalConnection: z.union([z.boolean(),z.lazy(() => BookingPalConnectionArgsSchema)]).optional(),
  plaidItems: z.union([z.boolean(),z.lazy(() => PlaidItemFindManyArgsSchema)]).optional(),
  revenuePayouts: z.union([z.boolean(),z.lazy(() => RevenuePayoutFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UserCountOutputTypeArgsSchema)]).optional(),
}).strict()

// VERIFICATION TOKEN
//------------------------------------------------------

export const VerificationTokenSelectSchema: z.ZodType<Prisma.VerificationTokenSelect> = z.object({
  identifier: z.boolean().optional(),
  token: z.boolean().optional(),
  expires: z.boolean().optional(),
}).strict()

// ORGANIZATION
//------------------------------------------------------

export const OrganizationIncludeSchema: z.ZodType<Prisma.OrganizationInclude> = z.object({
  users: z.union([z.boolean(),z.lazy(() => UserFindManyArgsSchema)]).optional(),
  listings: z.union([z.boolean(),z.lazy(() => ListingFindManyArgsSchema)]).optional(),
  bookingPalConnection: z.union([z.boolean(),z.lazy(() => BookingPalConnectionArgsSchema)]).optional(),
  messageTemplates: z.union([z.boolean(),z.lazy(() => MessageTemplateFindManyArgsSchema)]).optional(),
  guests: z.union([z.boolean(),z.lazy(() => GuestFindManyArgsSchema)]).optional(),
  plaidItems: z.union([z.boolean(),z.lazy(() => PlaidItemFindManyArgsSchema)]).optional(),
  priceLabsConnection: z.union([z.boolean(),z.lazy(() => PriceLabsConnectionArgsSchema)]).optional(),
  stripeConnection: z.union([z.boolean(),z.lazy(() => StripeConnectionArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => OrganizationCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const OrganizationArgsSchema: z.ZodType<Prisma.OrganizationDefaultArgs> = z.object({
  select: z.lazy(() => OrganizationSelectSchema).optional(),
  include: z.lazy(() => OrganizationIncludeSchema).optional(),
}).strict();

export const OrganizationCountOutputTypeArgsSchema: z.ZodType<Prisma.OrganizationCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => OrganizationCountOutputTypeSelectSchema).nullish(),
}).strict();

export const OrganizationCountOutputTypeSelectSchema: z.ZodType<Prisma.OrganizationCountOutputTypeSelect> = z.object({
  users: z.boolean().optional(),
  listings: z.boolean().optional(),
  messageTemplates: z.boolean().optional(),
  guests: z.boolean().optional(),
  plaidItems: z.boolean().optional(),
}).strict();

export const OrganizationSelectSchema: z.ZodType<Prisma.OrganizationSelect> = z.object({
  id: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  name: z.boolean().optional(),
  language: z.boolean().optional(),
  adminName: z.boolean().optional(),
  line1: z.boolean().optional(),
  line2: z.boolean().optional(),
  city: z.boolean().optional(),
  state: z.boolean().optional(),
  zip: z.boolean().optional(),
  country: z.boolean().optional(),
  website: z.boolean().optional(),
  phone: z.boolean().optional(),
  currency: z.boolean().optional(),
  startDate: z.boolean().optional(),
  directBooking: z.boolean().optional(),
  logoUrl: z.boolean().optional(),
  users: z.union([z.boolean(),z.lazy(() => UserFindManyArgsSchema)]).optional(),
  listings: z.union([z.boolean(),z.lazy(() => ListingFindManyArgsSchema)]).optional(),
  bookingPalConnection: z.union([z.boolean(),z.lazy(() => BookingPalConnectionArgsSchema)]).optional(),
  messageTemplates: z.union([z.boolean(),z.lazy(() => MessageTemplateFindManyArgsSchema)]).optional(),
  guests: z.union([z.boolean(),z.lazy(() => GuestFindManyArgsSchema)]).optional(),
  plaidItems: z.union([z.boolean(),z.lazy(() => PlaidItemFindManyArgsSchema)]).optional(),
  priceLabsConnection: z.union([z.boolean(),z.lazy(() => PriceLabsConnectionArgsSchema)]).optional(),
  stripeConnection: z.union([z.boolean(),z.lazy(() => StripeConnectionArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => OrganizationCountOutputTypeArgsSchema)]).optional(),
}).strict()

// BOOKING PAL CONNECTION
//------------------------------------------------------

export const BookingPalConnectionIncludeSchema: z.ZodType<Prisma.BookingPalConnectionInclude> = z.object({
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  owner: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const BookingPalConnectionArgsSchema: z.ZodType<Prisma.BookingPalConnectionDefaultArgs> = z.object({
  select: z.lazy(() => BookingPalConnectionSelectSchema).optional(),
  include: z.lazy(() => BookingPalConnectionIncludeSchema).optional(),
}).strict();

export const BookingPalConnectionSelectSchema: z.ZodType<Prisma.BookingPalConnectionSelect> = z.object({
  id: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  companyId: z.boolean().optional(),
  email: z.boolean().optional(),
  password: z.boolean().optional(),
  ownerId: z.boolean().optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  owner: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// PRICE LABS CONNECTION
//------------------------------------------------------

export const PriceLabsConnectionIncludeSchema: z.ZodType<Prisma.PriceLabsConnectionInclude> = z.object({
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
}).strict()

export const PriceLabsConnectionArgsSchema: z.ZodType<Prisma.PriceLabsConnectionDefaultArgs> = z.object({
  select: z.lazy(() => PriceLabsConnectionSelectSchema).optional(),
  include: z.lazy(() => PriceLabsConnectionIncludeSchema).optional(),
}).strict();

export const PriceLabsConnectionSelectSchema: z.ZodType<Prisma.PriceLabsConnectionSelect> = z.object({
  id: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  accountEmail: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
}).strict()

// STRIPE CONNECTION
//------------------------------------------------------

export const StripeConnectionIncludeSchema: z.ZodType<Prisma.StripeConnectionInclude> = z.object({
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
}).strict()

export const StripeConnectionArgsSchema: z.ZodType<Prisma.StripeConnectionDefaultArgs> = z.object({
  select: z.lazy(() => StripeConnectionSelectSchema).optional(),
  include: z.lazy(() => StripeConnectionIncludeSchema).optional(),
}).strict();

export const StripeConnectionSelectSchema: z.ZodType<Prisma.StripeConnectionSelect> = z.object({
  id: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  accountId: z.boolean().optional(),
  detailsSubmitted: z.boolean().optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
}).strict()

// LISTING
//------------------------------------------------------

export const ListingIncludeSchema: z.ZodType<Prisma.ListingInclude> = z.object({
  content: z.union([z.boolean(),z.lazy(() => ContentArgsSchema)]).optional(),
  rules: z.union([z.boolean(),z.lazy(() => RulesArgsSchema)]).optional(),
  pricing: z.union([z.boolean(),z.lazy(() => PricingArgsSchema)]).optional(),
  availability: z.union([z.boolean(),z.lazy(() => AvailabilityArgsSchema)]).optional(),
  amenities: z.union([z.boolean(),z.lazy(() => AmenityFindManyArgsSchema)]).optional(),
  fees: z.union([z.boolean(),z.lazy(() => FeeFindManyArgsSchema)]).optional(),
  taxRates: z.union([z.boolean(),z.lazy(() => TaxRatesArgsSchema)]).optional(),
  events: z.union([z.boolean(),z.lazy(() => CalendarEventFindManyArgsSchema)]).optional(),
  messageTemplates: z.union([z.boolean(),z.lazy(() => MessageTemplateFindManyArgsSchema)]).optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  deductions: z.union([z.boolean(),z.lazy(() => DeductionsArgsSchema)]).optional(),
  propertyManager: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  propertyOwner: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  messageThreads: z.union([z.boolean(),z.lazy(() => MessageThreadFindManyArgsSchema)]).optional(),
  listingExpenses: z.union([z.boolean(),z.lazy(() => ListingExpenseFindManyArgsSchema)]).optional(),
  ownerStatements: z.union([z.boolean(),z.lazy(() => OwnerStatementFindManyArgsSchema)]).optional(),
  dailyRates: z.union([z.boolean(),z.lazy(() => DailyRateFindManyArgsSchema)]).optional(),
  keys: z.union([z.boolean(),z.lazy(() => ListingKeyFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ListingCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const ListingArgsSchema: z.ZodType<Prisma.ListingDefaultArgs> = z.object({
  select: z.lazy(() => ListingSelectSchema).optional(),
  include: z.lazy(() => ListingIncludeSchema).optional(),
}).strict();

export const ListingCountOutputTypeArgsSchema: z.ZodType<Prisma.ListingCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => ListingCountOutputTypeSelectSchema).nullish(),
}).strict();

export const ListingCountOutputTypeSelectSchema: z.ZodType<Prisma.ListingCountOutputTypeSelect> = z.object({
  amenities: z.boolean().optional(),
  fees: z.boolean().optional(),
  events: z.boolean().optional(),
  messageTemplates: z.boolean().optional(),
  messageThreads: z.boolean().optional(),
  listingExpenses: z.boolean().optional(),
  ownerStatements: z.boolean().optional(),
  dailyRates: z.boolean().optional(),
  keys: z.boolean().optional(),
}).strict();

export const ListingSelectSchema: z.ZodType<Prisma.ListingSelect> = z.object({
  id: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  name: z.boolean().optional(),
  unitType: z.boolean().optional(),
  beds: z.boolean().optional(),
  baths: z.boolean().optional(),
  guests: z.boolean().optional(),
  line1: z.boolean().optional(),
  line2: z.boolean().optional(),
  city: z.boolean().optional(),
  state: z.boolean().optional(),
  zip: z.boolean().optional(),
  country: z.boolean().optional(),
  latitude: z.boolean().optional(),
  longitude: z.boolean().optional(),
  timeZone: z.boolean().optional(),
  airbnbRemitsTaxes: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  propertyManagerId: z.boolean().optional(),
  propertyOwnerId: z.boolean().optional(),
  wifiName: z.boolean().optional(),
  wifiPassword: z.boolean().optional(),
  notes: z.boolean().optional(),
  bpProductId: z.boolean().optional(),
  doorCode: z.boolean().optional(),
  url: z.boolean().optional(),
  basePrice: z.boolean().optional(),
  iCalKey: z.boolean().optional(),
  content: z.union([z.boolean(),z.lazy(() => ContentArgsSchema)]).optional(),
  rules: z.union([z.boolean(),z.lazy(() => RulesArgsSchema)]).optional(),
  pricing: z.union([z.boolean(),z.lazy(() => PricingArgsSchema)]).optional(),
  availability: z.union([z.boolean(),z.lazy(() => AvailabilityArgsSchema)]).optional(),
  amenities: z.union([z.boolean(),z.lazy(() => AmenityFindManyArgsSchema)]).optional(),
  fees: z.union([z.boolean(),z.lazy(() => FeeFindManyArgsSchema)]).optional(),
  taxRates: z.union([z.boolean(),z.lazy(() => TaxRatesArgsSchema)]).optional(),
  events: z.union([z.boolean(),z.lazy(() => CalendarEventFindManyArgsSchema)]).optional(),
  messageTemplates: z.union([z.boolean(),z.lazy(() => MessageTemplateFindManyArgsSchema)]).optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  deductions: z.union([z.boolean(),z.lazy(() => DeductionsArgsSchema)]).optional(),
  propertyManager: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  propertyOwner: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  messageThreads: z.union([z.boolean(),z.lazy(() => MessageThreadFindManyArgsSchema)]).optional(),
  listingExpenses: z.union([z.boolean(),z.lazy(() => ListingExpenseFindManyArgsSchema)]).optional(),
  ownerStatements: z.union([z.boolean(),z.lazy(() => OwnerStatementFindManyArgsSchema)]).optional(),
  dailyRates: z.union([z.boolean(),z.lazy(() => DailyRateFindManyArgsSchema)]).optional(),
  keys: z.union([z.boolean(),z.lazy(() => ListingKeyFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ListingCountOutputTypeArgsSchema)]).optional(),
}).strict()

// LISTING KEY
//------------------------------------------------------

export const ListingKeyIncludeSchema: z.ZodType<Prisma.ListingKeyInclude> = z.object({
  listing: z.union([z.boolean(),z.lazy(() => ListingArgsSchema)]).optional(),
}).strict()

export const ListingKeyArgsSchema: z.ZodType<Prisma.ListingKeyDefaultArgs> = z.object({
  select: z.lazy(() => ListingKeySelectSchema).optional(),
  include: z.lazy(() => ListingKeyIncludeSchema).optional(),
}).strict();

export const ListingKeySelectSchema: z.ZodType<Prisma.ListingKeySelect> = z.object({
  id: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  listingId: z.boolean().optional(),
  keyType: z.boolean().optional(),
  listing: z.union([z.boolean(),z.lazy(() => ListingArgsSchema)]).optional(),
}).strict()

// CONTENT
//------------------------------------------------------

export const ContentIncludeSchema: z.ZodType<Prisma.ContentInclude> = z.object({
  listing: z.union([z.boolean(),z.lazy(() => ListingArgsSchema)]).optional(),
  bedrooms: z.union([z.boolean(),z.lazy(() => BedroomFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ContentCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const ContentArgsSchema: z.ZodType<Prisma.ContentDefaultArgs> = z.object({
  select: z.lazy(() => ContentSelectSchema).optional(),
  include: z.lazy(() => ContentIncludeSchema).optional(),
}).strict();

export const ContentCountOutputTypeArgsSchema: z.ZodType<Prisma.ContentCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => ContentCountOutputTypeSelectSchema).nullish(),
}).strict();

export const ContentCountOutputTypeSelectSchema: z.ZodType<Prisma.ContentCountOutputTypeSelect> = z.object({
  bedrooms: z.boolean().optional(),
}).strict();

export const ContentSelectSchema: z.ZodType<Prisma.ContentSelect> = z.object({
  id: z.boolean().optional(),
  listingId: z.boolean().optional(),
  photos: z.boolean().optional(),
  title: z.boolean().optional(),
  description: z.boolean().optional(),
  aiInfo: z.boolean().optional(),
  listing: z.union([z.boolean(),z.lazy(() => ListingArgsSchema)]).optional(),
  bedrooms: z.union([z.boolean(),z.lazy(() => BedroomFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ContentCountOutputTypeArgsSchema)]).optional(),
}).strict()

// RULES
//------------------------------------------------------

export const RulesIncludeSchema: z.ZodType<Prisma.RulesInclude> = z.object({
  listing: z.union([z.boolean(),z.lazy(() => ListingArgsSchema)]).optional(),
}).strict()

export const RulesArgsSchema: z.ZodType<Prisma.RulesDefaultArgs> = z.object({
  select: z.lazy(() => RulesSelectSchema).optional(),
  include: z.lazy(() => RulesIncludeSchema).optional(),
}).strict();

export const RulesSelectSchema: z.ZodType<Prisma.RulesSelect> = z.object({
  id: z.boolean().optional(),
  listingId: z.boolean().optional(),
  pets: z.boolean().optional(),
  children: z.boolean().optional(),
  smoking: z.boolean().optional(),
  deposit: z.boolean().optional(),
  house: z.boolean().optional(),
  listing: z.union([z.boolean(),z.lazy(() => ListingArgsSchema)]).optional(),
}).strict()

// PRICING
//------------------------------------------------------

export const PricingIncludeSchema: z.ZodType<Prisma.PricingInclude> = z.object({
  listing: z.union([z.boolean(),z.lazy(() => ListingArgsSchema)]).optional(),
  dates: z.union([z.boolean(),z.lazy(() => PricingDateFindManyArgsSchema)]).optional(),
  discounts: z.union([z.boolean(),z.lazy(() => DiscountFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => PricingCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const PricingArgsSchema: z.ZodType<Prisma.PricingDefaultArgs> = z.object({
  select: z.lazy(() => PricingSelectSchema).optional(),
  include: z.lazy(() => PricingIncludeSchema).optional(),
}).strict();

export const PricingCountOutputTypeArgsSchema: z.ZodType<Prisma.PricingCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => PricingCountOutputTypeSelectSchema).nullish(),
}).strict();

export const PricingCountOutputTypeSelectSchema: z.ZodType<Prisma.PricingCountOutputTypeSelect> = z.object({
  dates: z.boolean().optional(),
  discounts: z.boolean().optional(),
}).strict();

export const PricingSelectSchema: z.ZodType<Prisma.PricingSelect> = z.object({
  id: z.boolean().optional(),
  listingId: z.boolean().optional(),
  minimum: z.boolean().optional(),
  weekday: z.boolean().optional(),
  weekend: z.boolean().optional(),
  minStay: z.boolean().optional(),
  maxStay: z.boolean().optional(),
  dynamicPricing: z.boolean().optional(),
  listing: z.union([z.boolean(),z.lazy(() => ListingArgsSchema)]).optional(),
  dates: z.union([z.boolean(),z.lazy(() => PricingDateFindManyArgsSchema)]).optional(),
  discounts: z.union([z.boolean(),z.lazy(() => DiscountFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => PricingCountOutputTypeArgsSchema)]).optional(),
}).strict()

// PRICING DATE
//------------------------------------------------------

export const PricingDateIncludeSchema: z.ZodType<Prisma.PricingDateInclude> = z.object({
  pricing: z.union([z.boolean(),z.lazy(() => PricingArgsSchema)]).optional(),
}).strict()

export const PricingDateArgsSchema: z.ZodType<Prisma.PricingDateDefaultArgs> = z.object({
  select: z.lazy(() => PricingDateSelectSchema).optional(),
  include: z.lazy(() => PricingDateIncludeSchema).optional(),
}).strict();

export const PricingDateSelectSchema: z.ZodType<Prisma.PricingDateSelect> = z.object({
  id: z.boolean().optional(),
  pricingId: z.boolean().optional(),
  startDate: z.boolean().optional(),
  endDate: z.boolean().optional(),
  percent: z.boolean().optional(),
  pricing: z.union([z.boolean(),z.lazy(() => PricingArgsSchema)]).optional(),
}).strict()

// DISCOUNT
//------------------------------------------------------

export const DiscountIncludeSchema: z.ZodType<Prisma.DiscountInclude> = z.object({
  pricing: z.union([z.boolean(),z.lazy(() => PricingArgsSchema)]).optional(),
}).strict()

export const DiscountArgsSchema: z.ZodType<Prisma.DiscountDefaultArgs> = z.object({
  select: z.lazy(() => DiscountSelectSchema).optional(),
  include: z.lazy(() => DiscountIncludeSchema).optional(),
}).strict();

export const DiscountSelectSchema: z.ZodType<Prisma.DiscountSelect> = z.object({
  id: z.boolean().optional(),
  pricingId: z.boolean().optional(),
  days: z.boolean().optional(),
  percent: z.boolean().optional(),
  pricing: z.union([z.boolean(),z.lazy(() => PricingArgsSchema)]).optional(),
}).strict()

// AVAILABILITY
//------------------------------------------------------

export const AvailabilityIncludeSchema: z.ZodType<Prisma.AvailabilityInclude> = z.object({
  listing: z.union([z.boolean(),z.lazy(() => ListingArgsSchema)]).optional(),
}).strict()

export const AvailabilityArgsSchema: z.ZodType<Prisma.AvailabilityDefaultArgs> = z.object({
  select: z.lazy(() => AvailabilitySelectSchema).optional(),
  include: z.lazy(() => AvailabilityIncludeSchema).optional(),
}).strict();

export const AvailabilitySelectSchema: z.ZodType<Prisma.AvailabilitySelect> = z.object({
  id: z.boolean().optional(),
  listingId: z.boolean().optional(),
  checkIn: z.boolean().optional(),
  checkOut: z.boolean().optional(),
  leadTime: z.boolean().optional(),
  listing: z.union([z.boolean(),z.lazy(() => ListingArgsSchema)]).optional(),
}).strict()

// AMENITY
//------------------------------------------------------

export const AmenityIncludeSchema: z.ZodType<Prisma.AmenityInclude> = z.object({
  listing: z.union([z.boolean(),z.lazy(() => ListingArgsSchema)]).optional(),
}).strict()

export const AmenityArgsSchema: z.ZodType<Prisma.AmenityDefaultArgs> = z.object({
  select: z.lazy(() => AmenitySelectSchema).optional(),
  include: z.lazy(() => AmenityIncludeSchema).optional(),
}).strict();

export const AmenitySelectSchema: z.ZodType<Prisma.AmenitySelect> = z.object({
  id: z.boolean().optional(),
  listingId: z.boolean().optional(),
  typeId: z.boolean().optional(),
  note: z.boolean().optional(),
  listing: z.union([z.boolean(),z.lazy(() => ListingArgsSchema)]).optional(),
}).strict()

// FEE
//------------------------------------------------------

export const FeeIncludeSchema: z.ZodType<Prisma.FeeInclude> = z.object({
  listing: z.union([z.boolean(),z.lazy(() => ListingArgsSchema)]).optional(),
}).strict()

export const FeeArgsSchema: z.ZodType<Prisma.FeeDefaultArgs> = z.object({
  select: z.lazy(() => FeeSelectSchema).optional(),
  include: z.lazy(() => FeeIncludeSchema).optional(),
}).strict();

export const FeeSelectSchema: z.ZodType<Prisma.FeeSelect> = z.object({
  id: z.boolean().optional(),
  listingId: z.boolean().optional(),
  name: z.boolean().optional(),
  value: z.boolean().optional(),
  unit: z.boolean().optional(),
  taxable: z.boolean().optional(),
  type: z.boolean().optional(),
  share: z.boolean().optional(),
  listing: z.union([z.boolean(),z.lazy(() => ListingArgsSchema)]).optional(),
}).strict()

// TAX RATES
//------------------------------------------------------

export const TaxRatesIncludeSchema: z.ZodType<Prisma.TaxRatesInclude> = z.object({
  listing: z.union([z.boolean(),z.lazy(() => ListingArgsSchema)]).optional(),
}).strict()

export const TaxRatesArgsSchema: z.ZodType<Prisma.TaxRatesDefaultArgs> = z.object({
  select: z.lazy(() => TaxRatesSelectSchema).optional(),
  include: z.lazy(() => TaxRatesIncludeSchema).optional(),
}).strict();

export const TaxRatesSelectSchema: z.ZodType<Prisma.TaxRatesSelect> = z.object({
  id: z.boolean().optional(),
  listingId: z.boolean().optional(),
  municipal: z.boolean().optional(),
  county: z.boolean().optional(),
  state: z.boolean().optional(),
  listing: z.union([z.boolean(),z.lazy(() => ListingArgsSchema)]).optional(),
}).strict()

// DEDUCTIONS
//------------------------------------------------------

export const DeductionsIncludeSchema: z.ZodType<Prisma.DeductionsInclude> = z.object({
  listing: z.union([z.boolean(),z.lazy(() => ListingArgsSchema)]).optional(),
}).strict()

export const DeductionsArgsSchema: z.ZodType<Prisma.DeductionsDefaultArgs> = z.object({
  select: z.lazy(() => DeductionsSelectSchema).optional(),
  include: z.lazy(() => DeductionsIncludeSchema).optional(),
}).strict();

export const DeductionsSelectSchema: z.ZodType<Prisma.DeductionsSelect> = z.object({
  id: z.boolean().optional(),
  listingId: z.boolean().optional(),
  channelFees: z.boolean().optional(),
  creditCardFees: z.boolean().optional(),
  discounts: z.boolean().optional(),
  municipalTaxes: z.boolean().optional(),
  countyTaxes: z.boolean().optional(),
  stateTaxes: z.boolean().optional(),
  otherGuestFees: z.boolean().optional(),
  pmcShare: z.boolean().optional(),
  listing: z.union([z.boolean(),z.lazy(() => ListingArgsSchema)]).optional(),
}).strict()

// BEDROOM
//------------------------------------------------------

export const BedroomIncludeSchema: z.ZodType<Prisma.BedroomInclude> = z.object({
  content: z.union([z.boolean(),z.lazy(() => ContentArgsSchema)]).optional(),
}).strict()

export const BedroomArgsSchema: z.ZodType<Prisma.BedroomDefaultArgs> = z.object({
  select: z.lazy(() => BedroomSelectSchema).optional(),
  include: z.lazy(() => BedroomIncludeSchema).optional(),
}).strict();

export const BedroomSelectSchema: z.ZodType<Prisma.BedroomSelect> = z.object({
  id: z.boolean().optional(),
  contentId: z.boolean().optional(),
  type: z.boolean().optional(),
  bathroom: z.boolean().optional(),
  beds: z.boolean().optional(),
  content: z.union([z.boolean(),z.lazy(() => ContentArgsSchema)]).optional(),
}).strict()

// CALENDAR EVENT
//------------------------------------------------------

export const CalendarEventIncludeSchema: z.ZodType<Prisma.CalendarEventInclude> = z.object({
  listing: z.union([z.boolean(),z.lazy(() => ListingArgsSchema)]).optional(),
  reservation: z.union([z.boolean(),z.lazy(() => ReservationArgsSchema)]).optional(),
}).strict()

export const CalendarEventArgsSchema: z.ZodType<Prisma.CalendarEventDefaultArgs> = z.object({
  select: z.lazy(() => CalendarEventSelectSchema).optional(),
  include: z.lazy(() => CalendarEventIncludeSchema).optional(),
}).strict();

export const CalendarEventSelectSchema: z.ZodType<Prisma.CalendarEventSelect> = z.object({
  id: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  listingId: z.boolean().optional(),
  fromDate: z.boolean().optional(),
  toDate: z.boolean().optional(),
  type: z.boolean().optional(),
  notes: z.boolean().optional(),
  bookedOn: z.boolean().optional(),
  listing: z.union([z.boolean(),z.lazy(() => ListingArgsSchema)]).optional(),
  reservation: z.union([z.boolean(),z.lazy(() => ReservationArgsSchema)]).optional(),
}).strict()

// RESERVATION
//------------------------------------------------------

export const ReservationIncludeSchema: z.ZodType<Prisma.ReservationInclude> = z.object({
  calendarEvent: z.union([z.boolean(),z.lazy(() => CalendarEventArgsSchema)]).optional(),
  scheduledMessages: z.union([z.boolean(),z.lazy(() => ScheduledMessageFindManyArgsSchema)]).optional(),
  revenue: z.union([z.boolean(),z.lazy(() => RevenueArgsSchema)]).optional(),
  guest: z.union([z.boolean(),z.lazy(() => GuestArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ReservationCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const ReservationArgsSchema: z.ZodType<Prisma.ReservationDefaultArgs> = z.object({
  select: z.lazy(() => ReservationSelectSchema).optional(),
  include: z.lazy(() => ReservationIncludeSchema).optional(),
}).strict();

export const ReservationCountOutputTypeArgsSchema: z.ZodType<Prisma.ReservationCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => ReservationCountOutputTypeSelectSchema).nullish(),
}).strict();

export const ReservationCountOutputTypeSelectSchema: z.ZodType<Prisma.ReservationCountOutputTypeSelect> = z.object({
  scheduledMessages: z.boolean().optional(),
}).strict();

export const ReservationSelectSchema: z.ZodType<Prisma.ReservationSelect> = z.object({
  id: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  calendarEventId: z.boolean().optional(),
  channel: z.boolean().optional(),
  bpReservationId: z.boolean().optional(),
  confirmationCode: z.boolean().optional(),
  adults: z.boolean().optional(),
  children: z.boolean().optional(),
  pets: z.boolean().optional(),
  status: z.boolean().optional(),
  guestId: z.boolean().optional(),
  calendarEvent: z.union([z.boolean(),z.lazy(() => CalendarEventArgsSchema)]).optional(),
  scheduledMessages: z.union([z.boolean(),z.lazy(() => ScheduledMessageFindManyArgsSchema)]).optional(),
  revenue: z.union([z.boolean(),z.lazy(() => RevenueArgsSchema)]).optional(),
  guest: z.union([z.boolean(),z.lazy(() => GuestArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ReservationCountOutputTypeArgsSchema)]).optional(),
}).strict()

// RESERVATION BP REQUEST
//------------------------------------------------------

export const ReservationBpRequestSelectSchema: z.ZodType<Prisma.ReservationBpRequestSelect> = z.object({
  id: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  listingId: z.boolean().optional(),
  reservationId: z.boolean().optional(),
  fromDate: z.boolean().optional(),
  toDate: z.boolean().optional(),
  available: z.boolean().optional(),
  status: z.boolean().optional(),
}).strict()

// GUEST
//------------------------------------------------------

export const GuestIncludeSchema: z.ZodType<Prisma.GuestInclude> = z.object({
  reservations: z.union([z.boolean(),z.lazy(() => ReservationFindManyArgsSchema)]).optional(),
  messageThreads: z.union([z.boolean(),z.lazy(() => MessageThreadFindManyArgsSchema)]).optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => GuestCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const GuestArgsSchema: z.ZodType<Prisma.GuestDefaultArgs> = z.object({
  select: z.lazy(() => GuestSelectSchema).optional(),
  include: z.lazy(() => GuestIncludeSchema).optional(),
}).strict();

export const GuestCountOutputTypeArgsSchema: z.ZodType<Prisma.GuestCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => GuestCountOutputTypeSelectSchema).nullish(),
}).strict();

export const GuestCountOutputTypeSelectSchema: z.ZodType<Prisma.GuestCountOutputTypeSelect> = z.object({
  reservations: z.boolean().optional(),
  messageThreads: z.boolean().optional(),
}).strict();

export const GuestSelectSchema: z.ZodType<Prisma.GuestSelect> = z.object({
  id: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  name: z.boolean().optional(),
  email: z.boolean().optional(),
  phone: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  reservations: z.union([z.boolean(),z.lazy(() => ReservationFindManyArgsSchema)]).optional(),
  messageThreads: z.union([z.boolean(),z.lazy(() => MessageThreadFindManyArgsSchema)]).optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => GuestCountOutputTypeArgsSchema)]).optional(),
}).strict()

// MESSAGE THREAD
//------------------------------------------------------

export const MessageThreadIncludeSchema: z.ZodType<Prisma.MessageThreadInclude> = z.object({
  listing: z.union([z.boolean(),z.lazy(() => ListingArgsSchema)]).optional(),
  guest: z.union([z.boolean(),z.lazy(() => GuestArgsSchema)]).optional(),
  messages: z.union([z.boolean(),z.lazy(() => MessageFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => MessageThreadCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const MessageThreadArgsSchema: z.ZodType<Prisma.MessageThreadDefaultArgs> = z.object({
  select: z.lazy(() => MessageThreadSelectSchema).optional(),
  include: z.lazy(() => MessageThreadIncludeSchema).optional(),
}).strict();

export const MessageThreadCountOutputTypeArgsSchema: z.ZodType<Prisma.MessageThreadCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => MessageThreadCountOutputTypeSelectSchema).nullish(),
}).strict();

export const MessageThreadCountOutputTypeSelectSchema: z.ZodType<Prisma.MessageThreadCountOutputTypeSelect> = z.object({
  messages: z.boolean().optional(),
}).strict();

export const MessageThreadSelectSchema: z.ZodType<Prisma.MessageThreadSelect> = z.object({
  id: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  listingId: z.boolean().optional(),
  guestId: z.boolean().optional(),
  bpThreadId: z.boolean().optional(),
  channelThreadId: z.boolean().optional(),
  lastMessageSentAt: z.boolean().optional(),
  dateFrom: z.boolean().optional(),
  dateTo: z.boolean().optional(),
  replyTo: z.boolean().optional(),
  archived: z.boolean().optional(),
  enableReminder: z.boolean().optional(),
  channel: z.boolean().optional(),
  listing: z.union([z.boolean(),z.lazy(() => ListingArgsSchema)]).optional(),
  guest: z.union([z.boolean(),z.lazy(() => GuestArgsSchema)]).optional(),
  messages: z.union([z.boolean(),z.lazy(() => MessageFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => MessageThreadCountOutputTypeArgsSchema)]).optional(),
}).strict()

// MESSAGE
//------------------------------------------------------

export const MessageIncludeSchema: z.ZodType<Prisma.MessageInclude> = z.object({
  messageThread: z.union([z.boolean(),z.lazy(() => MessageThreadArgsSchema)]).optional(),
}).strict()

export const MessageArgsSchema: z.ZodType<Prisma.MessageDefaultArgs> = z.object({
  select: z.lazy(() => MessageSelectSchema).optional(),
  include: z.lazy(() => MessageIncludeSchema).optional(),
}).strict();

export const MessageSelectSchema: z.ZodType<Prisma.MessageSelect> = z.object({
  id: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  messageThreadId: z.boolean().optional(),
  message: z.boolean().optional(),
  user: z.boolean().optional(),
  timestamp: z.boolean().optional(),
  bpMessageId: z.boolean().optional(),
  channelMessageId: z.boolean().optional(),
  read: z.boolean().optional(),
  messageThread: z.union([z.boolean(),z.lazy(() => MessageThreadArgsSchema)]).optional(),
}).strict()

// MESSAGE TEMPLATE
//------------------------------------------------------

export const MessageTemplateIncludeSchema: z.ZodType<Prisma.MessageTemplateInclude> = z.object({
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  scheduledMessages: z.union([z.boolean(),z.lazy(() => ScheduledMessageFindManyArgsSchema)]).optional(),
  listings: z.union([z.boolean(),z.lazy(() => ListingFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => MessageTemplateCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const MessageTemplateArgsSchema: z.ZodType<Prisma.MessageTemplateDefaultArgs> = z.object({
  select: z.lazy(() => MessageTemplateSelectSchema).optional(),
  include: z.lazy(() => MessageTemplateIncludeSchema).optional(),
}).strict();

export const MessageTemplateCountOutputTypeArgsSchema: z.ZodType<Prisma.MessageTemplateCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => MessageTemplateCountOutputTypeSelectSchema).nullish(),
}).strict();

export const MessageTemplateCountOutputTypeSelectSchema: z.ZodType<Prisma.MessageTemplateCountOutputTypeSelect> = z.object({
  scheduledMessages: z.boolean().optional(),
  listings: z.boolean().optional(),
}).strict();

export const MessageTemplateSelectSchema: z.ZodType<Prisma.MessageTemplateSelect> = z.object({
  id: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  title: z.boolean().optional(),
  body: z.boolean().optional(),
  bodyHtml: z.boolean().optional(),
  enabled: z.boolean().optional(),
  trigger: z.boolean().optional(),
  triggerRange: z.boolean().optional(),
  triggerUnit: z.boolean().optional(),
  triggerValue: z.boolean().optional(),
  allListings: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  scheduledMessages: z.union([z.boolean(),z.lazy(() => ScheduledMessageFindManyArgsSchema)]).optional(),
  listings: z.union([z.boolean(),z.lazy(() => ListingFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => MessageTemplateCountOutputTypeArgsSchema)]).optional(),
}).strict()

// SCHEDULED MESSAGE
//------------------------------------------------------

export const ScheduledMessageIncludeSchema: z.ZodType<Prisma.ScheduledMessageInclude> = z.object({
  reservation: z.union([z.boolean(),z.lazy(() => ReservationArgsSchema)]).optional(),
  messageTemplate: z.union([z.boolean(),z.lazy(() => MessageTemplateArgsSchema)]).optional(),
}).strict()

export const ScheduledMessageArgsSchema: z.ZodType<Prisma.ScheduledMessageDefaultArgs> = z.object({
  select: z.lazy(() => ScheduledMessageSelectSchema).optional(),
  include: z.lazy(() => ScheduledMessageIncludeSchema).optional(),
}).strict();

export const ScheduledMessageSelectSchema: z.ZodType<Prisma.ScheduledMessageSelect> = z.object({
  id: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  scheduledAt: z.boolean().optional(),
  reservationId: z.boolean().optional(),
  messageTemplateId: z.boolean().optional(),
  status: z.boolean().optional(),
  completedAt: z.boolean().optional(),
  failureMessage: z.boolean().optional(),
  reservation: z.union([z.boolean(),z.lazy(() => ReservationArgsSchema)]).optional(),
  messageTemplate: z.union([z.boolean(),z.lazy(() => MessageTemplateArgsSchema)]).optional(),
}).strict()

// REVENUE
//------------------------------------------------------

export const RevenueIncludeSchema: z.ZodType<Prisma.RevenueInclude> = z.object({
  reservation: z.union([z.boolean(),z.lazy(() => ReservationArgsSchema)]).optional(),
  fees: z.union([z.boolean(),z.lazy(() => RevenueFeeFindManyArgsSchema)]).optional(),
  ownerStatement: z.union([z.boolean(),z.lazy(() => OwnerStatementArgsSchema)]).optional(),
  payout: z.union([z.boolean(),z.lazy(() => RevenuePayoutFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => RevenueCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const RevenueArgsSchema: z.ZodType<Prisma.RevenueDefaultArgs> = z.object({
  select: z.lazy(() => RevenueSelectSchema).optional(),
  include: z.lazy(() => RevenueIncludeSchema).optional(),
}).strict();

export const RevenueCountOutputTypeArgsSchema: z.ZodType<Prisma.RevenueCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => RevenueCountOutputTypeSelectSchema).nullish(),
}).strict();

export const RevenueCountOutputTypeSelectSchema: z.ZodType<Prisma.RevenueCountOutputTypeSelect> = z.object({
  fees: z.boolean().optional(),
  payout: z.boolean().optional(),
}).strict();

export const RevenueSelectSchema: z.ZodType<Prisma.RevenueSelect> = z.object({
  id: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  reservationId: z.boolean().optional(),
  accommodation: z.boolean().optional(),
  pmcShare: z.boolean().optional(),
  discount: z.boolean().optional(),
  channelCommission: z.boolean().optional(),
  ownerStatementId: z.boolean().optional(),
  payoutStatus: z.boolean().optional(),
  reservation: z.union([z.boolean(),z.lazy(() => ReservationArgsSchema)]).optional(),
  fees: z.union([z.boolean(),z.lazy(() => RevenueFeeFindManyArgsSchema)]).optional(),
  ownerStatement: z.union([z.boolean(),z.lazy(() => OwnerStatementArgsSchema)]).optional(),
  payout: z.union([z.boolean(),z.lazy(() => RevenuePayoutFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => RevenueCountOutputTypeArgsSchema)]).optional(),
}).strict()

// REVENUE TAX
//------------------------------------------------------

export const RevenueTaxIncludeSchema: z.ZodType<Prisma.RevenueTaxInclude> = z.object({
  revenueFee: z.union([z.boolean(),z.lazy(() => RevenueFeeArgsSchema)]).optional(),
}).strict()

export const RevenueTaxArgsSchema: z.ZodType<Prisma.RevenueTaxDefaultArgs> = z.object({
  select: z.lazy(() => RevenueTaxSelectSchema).optional(),
  include: z.lazy(() => RevenueTaxIncludeSchema).optional(),
}).strict();

export const RevenueTaxSelectSchema: z.ZodType<Prisma.RevenueTaxSelect> = z.object({
  id: z.boolean().optional(),
  revenueId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  description: z.boolean().optional(),
  value: z.boolean().optional(),
  revenueFeeId: z.boolean().optional(),
  type: z.boolean().optional(),
  revenueFee: z.union([z.boolean(),z.lazy(() => RevenueFeeArgsSchema)]).optional(),
}).strict()

// REVENUE FEE
//------------------------------------------------------

export const RevenueFeeIncludeSchema: z.ZodType<Prisma.RevenueFeeInclude> = z.object({
  revenue: z.union([z.boolean(),z.lazy(() => RevenueArgsSchema)]).optional(),
  deductions: z.union([z.boolean(),z.lazy(() => RevenueTaxFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => RevenueFeeCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const RevenueFeeArgsSchema: z.ZodType<Prisma.RevenueFeeDefaultArgs> = z.object({
  select: z.lazy(() => RevenueFeeSelectSchema).optional(),
  include: z.lazy(() => RevenueFeeIncludeSchema).optional(),
}).strict();

export const RevenueFeeCountOutputTypeArgsSchema: z.ZodType<Prisma.RevenueFeeCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => RevenueFeeCountOutputTypeSelectSchema).nullish(),
}).strict();

export const RevenueFeeCountOutputTypeSelectSchema: z.ZodType<Prisma.RevenueFeeCountOutputTypeSelect> = z.object({
  deductions: z.boolean().optional(),
}).strict();

export const RevenueFeeSelectSchema: z.ZodType<Prisma.RevenueFeeSelect> = z.object({
  id: z.boolean().optional(),
  revenueId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  name: z.boolean().optional(),
  value: z.boolean().optional(),
  unit: z.boolean().optional(),
  pmcShare: z.boolean().optional(),
  taxable: z.boolean().optional(),
  type: z.boolean().optional(),
  revenue: z.union([z.boolean(),z.lazy(() => RevenueArgsSchema)]).optional(),
  deductions: z.union([z.boolean(),z.lazy(() => RevenueTaxFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => RevenueFeeCountOutputTypeArgsSchema)]).optional(),
}).strict()

// EXPENSE
//------------------------------------------------------

export const ExpenseIncludeSchema: z.ZodType<Prisma.ExpenseInclude> = z.object({
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  listingExpenses: z.union([z.boolean(),z.lazy(() => ListingExpenseFindManyArgsSchema)]).optional(),
  plaidTransaction: z.union([z.boolean(),z.lazy(() => PlaidTransactionArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ExpenseCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const ExpenseArgsSchema: z.ZodType<Prisma.ExpenseDefaultArgs> = z.object({
  select: z.lazy(() => ExpenseSelectSchema).optional(),
  include: z.lazy(() => ExpenseIncludeSchema).optional(),
}).strict();

export const ExpenseCountOutputTypeArgsSchema: z.ZodType<Prisma.ExpenseCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => ExpenseCountOutputTypeSelectSchema).nullish(),
}).strict();

export const ExpenseCountOutputTypeSelectSchema: z.ZodType<Prisma.ExpenseCountOutputTypeSelect> = z.object({
  listingExpenses: z.boolean().optional(),
}).strict();

export const ExpenseSelectSchema: z.ZodType<Prisma.ExpenseSelect> = z.object({
  id: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  date: z.boolean().optional(),
  amount: z.boolean().optional(),
  vendor: z.boolean().optional(),
  description: z.boolean().optional(),
  workOrder: z.boolean().optional(),
  receiptUrl: z.boolean().optional(),
  invoiceUrl: z.boolean().optional(),
  userId: z.boolean().optional(),
  plaidTransactionId: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  listingExpenses: z.union([z.boolean(),z.lazy(() => ListingExpenseFindManyArgsSchema)]).optional(),
  plaidTransaction: z.union([z.boolean(),z.lazy(() => PlaidTransactionArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ExpenseCountOutputTypeArgsSchema)]).optional(),
}).strict()

// LISTING EXPENSE
//------------------------------------------------------

export const ListingExpenseIncludeSchema: z.ZodType<Prisma.ListingExpenseInclude> = z.object({
  expense: z.union([z.boolean(),z.lazy(() => ExpenseArgsSchema)]).optional(),
  listing: z.union([z.boolean(),z.lazy(() => ListingArgsSchema)]).optional(),
  ownerStatement: z.union([z.boolean(),z.lazy(() => OwnerStatementArgsSchema)]).optional(),
}).strict()

export const ListingExpenseArgsSchema: z.ZodType<Prisma.ListingExpenseDefaultArgs> = z.object({
  select: z.lazy(() => ListingExpenseSelectSchema).optional(),
  include: z.lazy(() => ListingExpenseIncludeSchema).optional(),
}).strict();

export const ListingExpenseSelectSchema: z.ZodType<Prisma.ListingExpenseSelect> = z.object({
  id: z.boolean().optional(),
  confirmationCode: z.boolean().optional(),
  expenseId: z.boolean().optional(),
  listingId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  amount: z.boolean().optional(),
  amountPaid: z.boolean().optional(),
  ownerStatementId: z.boolean().optional(),
  expense: z.union([z.boolean(),z.lazy(() => ExpenseArgsSchema)]).optional(),
  listing: z.union([z.boolean(),z.lazy(() => ListingArgsSchema)]).optional(),
  ownerStatement: z.union([z.boolean(),z.lazy(() => OwnerStatementArgsSchema)]).optional(),
}).strict()

// OWNER STATEMENT
//------------------------------------------------------

export const OwnerStatementIncludeSchema: z.ZodType<Prisma.OwnerStatementInclude> = z.object({
  listing: z.union([z.boolean(),z.lazy(() => ListingArgsSchema)]).optional(),
  listingExpenses: z.union([z.boolean(),z.lazy(() => ListingExpenseFindManyArgsSchema)]).optional(),
  revenue: z.union([z.boolean(),z.lazy(() => RevenueFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => OwnerStatementCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const OwnerStatementArgsSchema: z.ZodType<Prisma.OwnerStatementDefaultArgs> = z.object({
  select: z.lazy(() => OwnerStatementSelectSchema).optional(),
  include: z.lazy(() => OwnerStatementIncludeSchema).optional(),
}).strict();

export const OwnerStatementCountOutputTypeArgsSchema: z.ZodType<Prisma.OwnerStatementCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => OwnerStatementCountOutputTypeSelectSchema).nullish(),
}).strict();

export const OwnerStatementCountOutputTypeSelectSchema: z.ZodType<Prisma.OwnerStatementCountOutputTypeSelect> = z.object({
  listingExpenses: z.boolean().optional(),
  revenue: z.boolean().optional(),
}).strict();

export const OwnerStatementSelectSchema: z.ZodType<Prisma.OwnerStatementSelect> = z.object({
  id: z.boolean().optional(),
  listingId: z.boolean().optional(),
  month: z.boolean().optional(),
  year: z.boolean().optional(),
  locked: z.boolean().optional(),
  isCoHost: z.boolean().optional(),
  listing: z.union([z.boolean(),z.lazy(() => ListingArgsSchema)]).optional(),
  listingExpenses: z.union([z.boolean(),z.lazy(() => ListingExpenseFindManyArgsSchema)]).optional(),
  revenue: z.union([z.boolean(),z.lazy(() => RevenueFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => OwnerStatementCountOutputTypeArgsSchema)]).optional(),
}).strict()

// PLAID ITEM
//------------------------------------------------------

export const PlaidItemIncludeSchema: z.ZodType<Prisma.PlaidItemInclude> = z.object({
  creator: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  accounts: z.union([z.boolean(),z.lazy(() => PlaidAccountFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => PlaidItemCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const PlaidItemArgsSchema: z.ZodType<Prisma.PlaidItemDefaultArgs> = z.object({
  select: z.lazy(() => PlaidItemSelectSchema).optional(),
  include: z.lazy(() => PlaidItemIncludeSchema).optional(),
}).strict();

export const PlaidItemCountOutputTypeArgsSchema: z.ZodType<Prisma.PlaidItemCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => PlaidItemCountOutputTypeSelectSchema).nullish(),
}).strict();

export const PlaidItemCountOutputTypeSelectSchema: z.ZodType<Prisma.PlaidItemCountOutputTypeSelect> = z.object({
  accounts: z.boolean().optional(),
}).strict();

export const PlaidItemSelectSchema: z.ZodType<Prisma.PlaidItemSelect> = z.object({
  id: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  accessToken: z.boolean().optional(),
  cursor: z.boolean().optional(),
  institution: z.boolean().optional(),
  institutionId: z.boolean().optional(),
  creatorId: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  creator: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  accounts: z.union([z.boolean(),z.lazy(() => PlaidAccountFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => PlaidItemCountOutputTypeArgsSchema)]).optional(),
}).strict()

// PLAID ACCOUNT
//------------------------------------------------------

export const PlaidAccountIncludeSchema: z.ZodType<Prisma.PlaidAccountInclude> = z.object({
  item: z.union([z.boolean(),z.lazy(() => PlaidItemArgsSchema)]).optional(),
  transactions: z.union([z.boolean(),z.lazy(() => PlaidTransactionFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => PlaidAccountCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const PlaidAccountArgsSchema: z.ZodType<Prisma.PlaidAccountDefaultArgs> = z.object({
  select: z.lazy(() => PlaidAccountSelectSchema).optional(),
  include: z.lazy(() => PlaidAccountIncludeSchema).optional(),
}).strict();

export const PlaidAccountCountOutputTypeArgsSchema: z.ZodType<Prisma.PlaidAccountCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => PlaidAccountCountOutputTypeSelectSchema).nullish(),
}).strict();

export const PlaidAccountCountOutputTypeSelectSchema: z.ZodType<Prisma.PlaidAccountCountOutputTypeSelect> = z.object({
  transactions: z.boolean().optional(),
}).strict();

export const PlaidAccountSelectSchema: z.ZodType<Prisma.PlaidAccountSelect> = z.object({
  id: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  itemId: z.boolean().optional(),
  plaidId: z.boolean().optional(),
  name: z.boolean().optional(),
  mask: z.boolean().optional(),
  type: z.boolean().optional(),
  subtype: z.boolean().optional(),
  verificationStatus: z.boolean().optional(),
  item: z.union([z.boolean(),z.lazy(() => PlaidItemArgsSchema)]).optional(),
  transactions: z.union([z.boolean(),z.lazy(() => PlaidTransactionFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => PlaidAccountCountOutputTypeArgsSchema)]).optional(),
}).strict()

// PLAID TRANSACTION
//------------------------------------------------------

export const PlaidTransactionIncludeSchema: z.ZodType<Prisma.PlaidTransactionInclude> = z.object({
  account: z.union([z.boolean(),z.lazy(() => PlaidAccountArgsSchema)]).optional(),
  expense: z.union([z.boolean(),z.lazy(() => ExpenseArgsSchema)]).optional(),
  payout: z.union([z.boolean(),z.lazy(() => PayoutArgsSchema)]).optional(),
}).strict()

export const PlaidTransactionArgsSchema: z.ZodType<Prisma.PlaidTransactionDefaultArgs> = z.object({
  select: z.lazy(() => PlaidTransactionSelectSchema).optional(),
  include: z.lazy(() => PlaidTransactionIncludeSchema).optional(),
}).strict();

export const PlaidTransactionSelectSchema: z.ZodType<Prisma.PlaidTransactionSelect> = z.object({
  id: z.boolean().optional(),
  accountId: z.boolean().optional(),
  plaidId: z.boolean().optional(),
  status: z.boolean().optional(),
  date: z.boolean().optional(),
  amount: z.boolean().optional(),
  vendor: z.boolean().optional(),
  name: z.boolean().optional(),
  account: z.union([z.boolean(),z.lazy(() => PlaidAccountArgsSchema)]).optional(),
  expense: z.union([z.boolean(),z.lazy(() => ExpenseArgsSchema)]).optional(),
  payout: z.union([z.boolean(),z.lazy(() => PayoutArgsSchema)]).optional(),
}).strict()

// DAILY RATE
//------------------------------------------------------

export const DailyRateIncludeSchema: z.ZodType<Prisma.DailyRateInclude> = z.object({
  listing: z.union([z.boolean(),z.lazy(() => ListingArgsSchema)]).optional(),
}).strict()

export const DailyRateArgsSchema: z.ZodType<Prisma.DailyRateDefaultArgs> = z.object({
  select: z.lazy(() => DailyRateSelectSchema).optional(),
  include: z.lazy(() => DailyRateIncludeSchema).optional(),
}).strict();

export const DailyRateSelectSchema: z.ZodType<Prisma.DailyRateSelect> = z.object({
  id: z.boolean().optional(),
  listingId: z.boolean().optional(),
  date: z.boolean().optional(),
  rate: z.boolean().optional(),
  minStay: z.boolean().optional(),
  listing: z.union([z.boolean(),z.lazy(() => ListingArgsSchema)]).optional(),
}).strict()

// PAYOUT
//------------------------------------------------------

export const PayoutIncludeSchema: z.ZodType<Prisma.PayoutInclude> = z.object({
  plaidTransaction: z.union([z.boolean(),z.lazy(() => PlaidTransactionArgsSchema)]).optional(),
  revenuePayout: z.union([z.boolean(),z.lazy(() => RevenuePayoutFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => PayoutCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const PayoutArgsSchema: z.ZodType<Prisma.PayoutDefaultArgs> = z.object({
  select: z.lazy(() => PayoutSelectSchema).optional(),
  include: z.lazy(() => PayoutIncludeSchema).optional(),
}).strict();

export const PayoutCountOutputTypeArgsSchema: z.ZodType<Prisma.PayoutCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => PayoutCountOutputTypeSelectSchema).nullish(),
}).strict();

export const PayoutCountOutputTypeSelectSchema: z.ZodType<Prisma.PayoutCountOutputTypeSelect> = z.object({
  revenuePayout: z.boolean().optional(),
}).strict();

export const PayoutSelectSchema: z.ZodType<Prisma.PayoutSelect> = z.object({
  id: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  date: z.boolean().optional(),
  amount: z.boolean().optional(),
  allocated: z.boolean().optional(),
  plaidTransactionId: z.boolean().optional(),
  plaidTransaction: z.union([z.boolean(),z.lazy(() => PlaidTransactionArgsSchema)]).optional(),
  revenuePayout: z.union([z.boolean(),z.lazy(() => RevenuePayoutFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => PayoutCountOutputTypeArgsSchema)]).optional(),
}).strict()

// REVENUE PAYOUT
//------------------------------------------------------

export const RevenuePayoutIncludeSchema: z.ZodType<Prisma.RevenuePayoutInclude> = z.object({
  createdBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  payout: z.union([z.boolean(),z.lazy(() => PayoutArgsSchema)]).optional(),
  revenue: z.union([z.boolean(),z.lazy(() => RevenueArgsSchema)]).optional(),
}).strict()

export const RevenuePayoutArgsSchema: z.ZodType<Prisma.RevenuePayoutDefaultArgs> = z.object({
  select: z.lazy(() => RevenuePayoutSelectSchema).optional(),
  include: z.lazy(() => RevenuePayoutIncludeSchema).optional(),
}).strict();

export const RevenuePayoutSelectSchema: z.ZodType<Prisma.RevenuePayoutSelect> = z.object({
  id: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  createdById: z.boolean().optional(),
  payoutId: z.boolean().optional(),
  revenueId: z.boolean().optional(),
  amount: z.boolean().optional(),
  createdBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  payout: z.union([z.boolean(),z.lazy(() => PayoutArgsSchema)]).optional(),
  revenue: z.union([z.boolean(),z.lazy(() => RevenueArgsSchema)]).optional(),
}).strict()


/////////////////////////////////////////
// INPUT TYPES
/////////////////////////////////////////

export const AccountWhereInputSchema: z.ZodType<Prisma.AccountWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AccountWhereInputSchema),z.lazy(() => AccountWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AccountWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AccountWhereInputSchema),z.lazy(() => AccountWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  provider: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  providerAccountId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  refresh_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  access_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  expires_at: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  token_type: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  scope: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  id_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  session_state: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const AccountOrderByWithRelationInputSchema: z.ZodType<Prisma.AccountOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  provider: z.lazy(() => SortOrderSchema).optional(),
  providerAccountId: z.lazy(() => SortOrderSchema).optional(),
  refresh_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  access_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  expires_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  token_type: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  scope: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  id_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  session_state: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const AccountWhereUniqueInputSchema: z.ZodType<Prisma.AccountWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    provider_providerAccountId: z.lazy(() => AccountProviderProviderAccountIdCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    provider_providerAccountId: z.lazy(() => AccountProviderProviderAccountIdCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.string().optional(),
  provider_providerAccountId: z.lazy(() => AccountProviderProviderAccountIdCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => AccountWhereInputSchema),z.lazy(() => AccountWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AccountWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AccountWhereInputSchema),z.lazy(() => AccountWhereInputSchema).array() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  provider: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  providerAccountId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  refresh_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  access_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  expires_at: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  token_type: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  scope: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  id_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  session_state: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const AccountOrderByWithAggregationInputSchema: z.ZodType<Prisma.AccountOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  provider: z.lazy(() => SortOrderSchema).optional(),
  providerAccountId: z.lazy(() => SortOrderSchema).optional(),
  refresh_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  access_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  expires_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  token_type: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  scope: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  id_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  session_state: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => AccountCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => AccountAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => AccountMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => AccountMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => AccountSumOrderByAggregateInputSchema).optional()
}).strict();

export const AccountScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.AccountScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => AccountScalarWhereWithAggregatesInputSchema),z.lazy(() => AccountScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => AccountScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AccountScalarWhereWithAggregatesInputSchema),z.lazy(() => AccountScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  provider: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  providerAccountId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  refresh_token: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  access_token: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  expires_at: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  token_type: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  scope: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  id_token: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  session_state: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const SessionWhereInputSchema: z.ZodType<Prisma.SessionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SessionWhereInputSchema),z.lazy(() => SessionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionWhereInputSchema),z.lazy(() => SessionWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  sessionToken: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expires: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const SessionOrderByWithRelationInputSchema: z.ZodType<Prisma.SessionOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  sessionToken: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const SessionWhereUniqueInputSchema: z.ZodType<Prisma.SessionWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    sessionToken: z.string()
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    sessionToken: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  sessionToken: z.string().optional(),
  AND: z.union([ z.lazy(() => SessionWhereInputSchema),z.lazy(() => SessionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionWhereInputSchema),z.lazy(() => SessionWhereInputSchema).array() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expires: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const SessionOrderByWithAggregationInputSchema: z.ZodType<Prisma.SessionOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  sessionToken: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => SessionCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => SessionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => SessionMinOrderByAggregateInputSchema).optional()
}).strict();

export const SessionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SessionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => SessionScalarWhereWithAggregatesInputSchema),z.lazy(() => SessionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionScalarWhereWithAggregatesInputSchema),z.lazy(() => SessionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  sessionToken: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  expires: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const UserWhereInputSchema: z.ZodType<Prisma.UserWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  emailVerified: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  image: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  globalRole: z.union([ z.lazy(() => EnumGlobalRoleFilterSchema),z.lazy(() => GlobalRoleSchema) ]).optional(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationRole: z.union([ z.lazy(() => EnumOrganizationRoleNullableFilterSchema),z.lazy(() => OrganizationRoleSchema) ]).optional().nullable(),
  ownerEntity: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  accounts: z.lazy(() => AccountListRelationFilterSchema).optional(),
  sessions: z.lazy(() => SessionListRelationFilterSchema).optional(),
  organization: z.union([ z.lazy(() => OrganizationNullableRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional().nullable(),
  managedListings: z.lazy(() => ListingListRelationFilterSchema).optional(),
  ownedListings: z.lazy(() => ListingListRelationFilterSchema).optional(),
  expenses: z.lazy(() => ExpenseListRelationFilterSchema).optional(),
  bookingPalConnection: z.union([ z.lazy(() => BookingPalConnectionNullableRelationFilterSchema),z.lazy(() => BookingPalConnectionWhereInputSchema) ]).optional().nullable(),
  plaidItems: z.lazy(() => PlaidItemListRelationFilterSchema).optional(),
  revenuePayouts: z.lazy(() => RevenuePayoutListRelationFilterSchema).optional()
}).strict();

export const UserOrderByWithRelationInputSchema: z.ZodType<Prisma.UserOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  emailVerified: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  image: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  globalRole: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organizationRole: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ownerEntity: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  accounts: z.lazy(() => AccountOrderByRelationAggregateInputSchema).optional(),
  sessions: z.lazy(() => SessionOrderByRelationAggregateInputSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  managedListings: z.lazy(() => ListingOrderByRelationAggregateInputSchema).optional(),
  ownedListings: z.lazy(() => ListingOrderByRelationAggregateInputSchema).optional(),
  expenses: z.lazy(() => ExpenseOrderByRelationAggregateInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionOrderByWithRelationInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemOrderByRelationAggregateInputSchema).optional(),
  revenuePayouts: z.lazy(() => RevenuePayoutOrderByRelationAggregateInputSchema).optional()
}).strict();

export const UserWhereUniqueInputSchema: z.ZodType<Prisma.UserWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    email: z.string()
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    email: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  email: z.string().optional(),
  AND: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  emailVerified: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  image: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  globalRole: z.union([ z.lazy(() => EnumGlobalRoleFilterSchema),z.lazy(() => GlobalRoleSchema) ]).optional(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationRole: z.union([ z.lazy(() => EnumOrganizationRoleNullableFilterSchema),z.lazy(() => OrganizationRoleSchema) ]).optional().nullable(),
  ownerEntity: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  accounts: z.lazy(() => AccountListRelationFilterSchema).optional(),
  sessions: z.lazy(() => SessionListRelationFilterSchema).optional(),
  organization: z.union([ z.lazy(() => OrganizationNullableRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional().nullable(),
  managedListings: z.lazy(() => ListingListRelationFilterSchema).optional(),
  ownedListings: z.lazy(() => ListingListRelationFilterSchema).optional(),
  expenses: z.lazy(() => ExpenseListRelationFilterSchema).optional(),
  bookingPalConnection: z.union([ z.lazy(() => BookingPalConnectionNullableRelationFilterSchema),z.lazy(() => BookingPalConnectionWhereInputSchema) ]).optional().nullable(),
  plaidItems: z.lazy(() => PlaidItemListRelationFilterSchema).optional(),
  revenuePayouts: z.lazy(() => RevenuePayoutListRelationFilterSchema).optional()
}).strict());

export const UserOrderByWithAggregationInputSchema: z.ZodType<Prisma.UserOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  emailVerified: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  image: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  globalRole: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organizationRole: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ownerEntity: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => UserCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => UserMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => UserMinOrderByAggregateInputSchema).optional()
}).strict();

export const UserScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.UserScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => UserScalarWhereWithAggregatesInputSchema),z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserScalarWhereWithAggregatesInputSchema),z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  emailVerified: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  image: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  globalRole: z.union([ z.lazy(() => EnumGlobalRoleWithAggregatesFilterSchema),z.lazy(() => GlobalRoleSchema) ]).optional(),
  organizationId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  organizationRole: z.union([ z.lazy(() => EnumOrganizationRoleNullableWithAggregatesFilterSchema),z.lazy(() => OrganizationRoleSchema) ]).optional().nullable(),
  ownerEntity: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const VerificationTokenWhereInputSchema: z.ZodType<Prisma.VerificationTokenWhereInput> = z.object({
  AND: z.union([ z.lazy(() => VerificationTokenWhereInputSchema),z.lazy(() => VerificationTokenWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => VerificationTokenWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => VerificationTokenWhereInputSchema),z.lazy(() => VerificationTokenWhereInputSchema).array() ]).optional(),
  identifier: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  token: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expires: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const VerificationTokenOrderByWithRelationInputSchema: z.ZodType<Prisma.VerificationTokenOrderByWithRelationInput> = z.object({
  identifier: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const VerificationTokenWhereUniqueInputSchema: z.ZodType<Prisma.VerificationTokenWhereUniqueInput> = z.union([
  z.object({
    token: z.string(),
    identifier_token: z.lazy(() => VerificationTokenIdentifierTokenCompoundUniqueInputSchema)
  }),
  z.object({
    token: z.string(),
  }),
  z.object({
    identifier_token: z.lazy(() => VerificationTokenIdentifierTokenCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  token: z.string().optional(),
  identifier_token: z.lazy(() => VerificationTokenIdentifierTokenCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => VerificationTokenWhereInputSchema),z.lazy(() => VerificationTokenWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => VerificationTokenWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => VerificationTokenWhereInputSchema),z.lazy(() => VerificationTokenWhereInputSchema).array() ]).optional(),
  identifier: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expires: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict());

export const VerificationTokenOrderByWithAggregationInputSchema: z.ZodType<Prisma.VerificationTokenOrderByWithAggregationInput> = z.object({
  identifier: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => VerificationTokenCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => VerificationTokenMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => VerificationTokenMinOrderByAggregateInputSchema).optional()
}).strict();

export const VerificationTokenScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.VerificationTokenScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => VerificationTokenScalarWhereWithAggregatesInputSchema),z.lazy(() => VerificationTokenScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => VerificationTokenScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => VerificationTokenScalarWhereWithAggregatesInputSchema),z.lazy(() => VerificationTokenScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  identifier: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  token: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  expires: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const OrganizationWhereInputSchema: z.ZodType<Prisma.OrganizationWhereInput> = z.object({
  AND: z.union([ z.lazy(() => OrganizationWhereInputSchema),z.lazy(() => OrganizationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrganizationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrganizationWhereInputSchema),z.lazy(() => OrganizationWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  language: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  adminName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  line1: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  line2: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  city: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  state: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  zip: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  country: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  website: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  phone: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  startDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  directBooking: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  logoUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  users: z.lazy(() => UserListRelationFilterSchema).optional(),
  listings: z.lazy(() => ListingListRelationFilterSchema).optional(),
  bookingPalConnection: z.union([ z.lazy(() => BookingPalConnectionNullableRelationFilterSchema),z.lazy(() => BookingPalConnectionWhereInputSchema) ]).optional().nullable(),
  messageTemplates: z.lazy(() => MessageTemplateListRelationFilterSchema).optional(),
  guests: z.lazy(() => GuestListRelationFilterSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemListRelationFilterSchema).optional(),
  priceLabsConnection: z.union([ z.lazy(() => PriceLabsConnectionNullableRelationFilterSchema),z.lazy(() => PriceLabsConnectionWhereInputSchema) ]).optional().nullable(),
  stripeConnection: z.union([ z.lazy(() => StripeConnectionNullableRelationFilterSchema),z.lazy(() => StripeConnectionWhereInputSchema) ]).optional().nullable(),
}).strict();

export const OrganizationOrderByWithRelationInputSchema: z.ZodType<Prisma.OrganizationOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  language: z.lazy(() => SortOrderSchema).optional(),
  adminName: z.lazy(() => SortOrderSchema).optional(),
  line1: z.lazy(() => SortOrderSchema).optional(),
  line2: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  city: z.lazy(() => SortOrderSchema).optional(),
  state: z.lazy(() => SortOrderSchema).optional(),
  zip: z.lazy(() => SortOrderSchema).optional(),
  country: z.lazy(() => SortOrderSchema).optional(),
  website: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  startDate: z.lazy(() => SortOrderSchema).optional(),
  directBooking: z.lazy(() => SortOrderSchema).optional(),
  logoUrl: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  users: z.lazy(() => UserOrderByRelationAggregateInputSchema).optional(),
  listings: z.lazy(() => ListingOrderByRelationAggregateInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionOrderByWithRelationInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateOrderByRelationAggregateInputSchema).optional(),
  guests: z.lazy(() => GuestOrderByRelationAggregateInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemOrderByRelationAggregateInputSchema).optional(),
  priceLabsConnection: z.lazy(() => PriceLabsConnectionOrderByWithRelationInputSchema).optional(),
  stripeConnection: z.lazy(() => StripeConnectionOrderByWithRelationInputSchema).optional()
}).strict();

export const OrganizationWhereUniqueInputSchema: z.ZodType<Prisma.OrganizationWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => OrganizationWhereInputSchema),z.lazy(() => OrganizationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrganizationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrganizationWhereInputSchema),z.lazy(() => OrganizationWhereInputSchema).array() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  language: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  adminName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  line1: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  line2: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  city: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  state: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  zip: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  country: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  website: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  phone: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  startDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  directBooking: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  logoUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  users: z.lazy(() => UserListRelationFilterSchema).optional(),
  listings: z.lazy(() => ListingListRelationFilterSchema).optional(),
  bookingPalConnection: z.union([ z.lazy(() => BookingPalConnectionNullableRelationFilterSchema),z.lazy(() => BookingPalConnectionWhereInputSchema) ]).optional().nullable(),
  messageTemplates: z.lazy(() => MessageTemplateListRelationFilterSchema).optional(),
  guests: z.lazy(() => GuestListRelationFilterSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemListRelationFilterSchema).optional(),
  priceLabsConnection: z.union([ z.lazy(() => PriceLabsConnectionNullableRelationFilterSchema),z.lazy(() => PriceLabsConnectionWhereInputSchema) ]).optional().nullable(),
  stripeConnection: z.union([ z.lazy(() => StripeConnectionNullableRelationFilterSchema),z.lazy(() => StripeConnectionWhereInputSchema) ]).optional().nullable(),
}).strict());

export const OrganizationOrderByWithAggregationInputSchema: z.ZodType<Prisma.OrganizationOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  language: z.lazy(() => SortOrderSchema).optional(),
  adminName: z.lazy(() => SortOrderSchema).optional(),
  line1: z.lazy(() => SortOrderSchema).optional(),
  line2: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  city: z.lazy(() => SortOrderSchema).optional(),
  state: z.lazy(() => SortOrderSchema).optional(),
  zip: z.lazy(() => SortOrderSchema).optional(),
  country: z.lazy(() => SortOrderSchema).optional(),
  website: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  startDate: z.lazy(() => SortOrderSchema).optional(),
  directBooking: z.lazy(() => SortOrderSchema).optional(),
  logoUrl: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => OrganizationCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => OrganizationMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => OrganizationMinOrderByAggregateInputSchema).optional()
}).strict();

export const OrganizationScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.OrganizationScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema),z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema),z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  language: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  adminName: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  line1: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  line2: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  city: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  state: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  zip: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  country: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  website: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  phone: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  currency: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  startDate: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  directBooking: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  logoUrl: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const BookingPalConnectionWhereInputSchema: z.ZodType<Prisma.BookingPalConnectionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => BookingPalConnectionWhereInputSchema),z.lazy(() => BookingPalConnectionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => BookingPalConnectionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => BookingPalConnectionWhereInputSchema),z.lazy(() => BookingPalConnectionWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  companyId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  password: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  ownerId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organization: z.union([ z.lazy(() => OrganizationNullableRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional().nullable(),
  owner: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
}).strict();

export const BookingPalConnectionOrderByWithRelationInputSchema: z.ZodType<Prisma.BookingPalConnectionOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  companyId: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  ownerId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  owner: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const BookingPalConnectionWhereUniqueInputSchema: z.ZodType<Prisma.BookingPalConnectionWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    organizationId: z.string(),
    companyId: z.number(),
    email: z.string(),
    ownerId: z.string()
  }),
  z.object({
    id: z.string(),
    organizationId: z.string(),
    companyId: z.number(),
    email: z.string(),
  }),
  z.object({
    id: z.string(),
    organizationId: z.string(),
    companyId: z.number(),
    ownerId: z.string(),
  }),
  z.object({
    id: z.string(),
    organizationId: z.string(),
    companyId: z.number(),
  }),
  z.object({
    id: z.string(),
    organizationId: z.string(),
    email: z.string(),
    ownerId: z.string(),
  }),
  z.object({
    id: z.string(),
    organizationId: z.string(),
    email: z.string(),
  }),
  z.object({
    id: z.string(),
    organizationId: z.string(),
    ownerId: z.string(),
  }),
  z.object({
    id: z.string(),
    organizationId: z.string(),
  }),
  z.object({
    id: z.string(),
    companyId: z.number(),
    email: z.string(),
    ownerId: z.string(),
  }),
  z.object({
    id: z.string(),
    companyId: z.number(),
    email: z.string(),
  }),
  z.object({
    id: z.string(),
    companyId: z.number(),
    ownerId: z.string(),
  }),
  z.object({
    id: z.string(),
    companyId: z.number(),
  }),
  z.object({
    id: z.string(),
    email: z.string(),
    ownerId: z.string(),
  }),
  z.object({
    id: z.string(),
    email: z.string(),
  }),
  z.object({
    id: z.string(),
    ownerId: z.string(),
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    organizationId: z.string(),
    companyId: z.number(),
    email: z.string(),
    ownerId: z.string(),
  }),
  z.object({
    organizationId: z.string(),
    companyId: z.number(),
    email: z.string(),
  }),
  z.object({
    organizationId: z.string(),
    companyId: z.number(),
    ownerId: z.string(),
  }),
  z.object({
    organizationId: z.string(),
    companyId: z.number(),
  }),
  z.object({
    organizationId: z.string(),
    email: z.string(),
    ownerId: z.string(),
  }),
  z.object({
    organizationId: z.string(),
    email: z.string(),
  }),
  z.object({
    organizationId: z.string(),
    ownerId: z.string(),
  }),
  z.object({
    organizationId: z.string(),
  }),
  z.object({
    companyId: z.number(),
    email: z.string(),
    ownerId: z.string(),
  }),
  z.object({
    companyId: z.number(),
    email: z.string(),
  }),
  z.object({
    companyId: z.number(),
    ownerId: z.string(),
  }),
  z.object({
    companyId: z.number(),
  }),
  z.object({
    email: z.string(),
    ownerId: z.string(),
  }),
  z.object({
    email: z.string(),
  }),
  z.object({
    ownerId: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  organizationId: z.string().optional(),
  companyId: z.number().optional(),
  email: z.string().optional(),
  ownerId: z.string().optional(),
  AND: z.union([ z.lazy(() => BookingPalConnectionWhereInputSchema),z.lazy(() => BookingPalConnectionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => BookingPalConnectionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => BookingPalConnectionWhereInputSchema),z.lazy(() => BookingPalConnectionWhereInputSchema).array() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  password: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationNullableRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional().nullable(),
  owner: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
}).strict());

export const BookingPalConnectionOrderByWithAggregationInputSchema: z.ZodType<Prisma.BookingPalConnectionOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  companyId: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  ownerId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => BookingPalConnectionCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => BookingPalConnectionAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => BookingPalConnectionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => BookingPalConnectionMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => BookingPalConnectionSumOrderByAggregateInputSchema).optional()
}).strict();

export const BookingPalConnectionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.BookingPalConnectionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => BookingPalConnectionScalarWhereWithAggregatesInputSchema),z.lazy(() => BookingPalConnectionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => BookingPalConnectionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => BookingPalConnectionScalarWhereWithAggregatesInputSchema),z.lazy(() => BookingPalConnectionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  companyId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  email: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  password: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  ownerId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const PriceLabsConnectionWhereInputSchema: z.ZodType<Prisma.PriceLabsConnectionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PriceLabsConnectionWhereInputSchema),z.lazy(() => PriceLabsConnectionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PriceLabsConnectionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PriceLabsConnectionWhereInputSchema),z.lazy(() => PriceLabsConnectionWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  accountEmail: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organization: z.union([ z.lazy(() => OrganizationNullableRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional().nullable(),
}).strict();

export const PriceLabsConnectionOrderByWithRelationInputSchema: z.ZodType<Prisma.PriceLabsConnectionOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  accountEmail: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional()
}).strict();

export const PriceLabsConnectionWhereUniqueInputSchema: z.ZodType<Prisma.PriceLabsConnectionWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    organizationId: z.string()
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    organizationId: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  organizationId: z.string().optional(),
  AND: z.union([ z.lazy(() => PriceLabsConnectionWhereInputSchema),z.lazy(() => PriceLabsConnectionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PriceLabsConnectionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PriceLabsConnectionWhereInputSchema),z.lazy(() => PriceLabsConnectionWhereInputSchema).array() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  accountEmail: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationNullableRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional().nullable(),
}).strict());

export const PriceLabsConnectionOrderByWithAggregationInputSchema: z.ZodType<Prisma.PriceLabsConnectionOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  accountEmail: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => PriceLabsConnectionCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => PriceLabsConnectionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => PriceLabsConnectionMinOrderByAggregateInputSchema).optional()
}).strict();

export const PriceLabsConnectionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.PriceLabsConnectionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => PriceLabsConnectionScalarWhereWithAggregatesInputSchema),z.lazy(() => PriceLabsConnectionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => PriceLabsConnectionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PriceLabsConnectionScalarWhereWithAggregatesInputSchema),z.lazy(() => PriceLabsConnectionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  accountEmail: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const StripeConnectionWhereInputSchema: z.ZodType<Prisma.StripeConnectionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => StripeConnectionWhereInputSchema),z.lazy(() => StripeConnectionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => StripeConnectionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => StripeConnectionWhereInputSchema),z.lazy(() => StripeConnectionWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  accountId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  detailsSubmitted: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
}).strict();

export const StripeConnectionOrderByWithRelationInputSchema: z.ZodType<Prisma.StripeConnectionOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  accountId: z.lazy(() => SortOrderSchema).optional(),
  detailsSubmitted: z.lazy(() => SortOrderSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional()
}).strict();

export const StripeConnectionWhereUniqueInputSchema: z.ZodType<Prisma.StripeConnectionWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    organizationId: z.string(),
    accountId: z.string()
  }),
  z.object({
    id: z.string(),
    organizationId: z.string(),
  }),
  z.object({
    id: z.string(),
    accountId: z.string(),
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    organizationId: z.string(),
    accountId: z.string(),
  }),
  z.object({
    organizationId: z.string(),
  }),
  z.object({
    accountId: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  organizationId: z.string().optional(),
  accountId: z.string().optional(),
  AND: z.union([ z.lazy(() => StripeConnectionWhereInputSchema),z.lazy(() => StripeConnectionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => StripeConnectionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => StripeConnectionWhereInputSchema),z.lazy(() => StripeConnectionWhereInputSchema).array() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  detailsSubmitted: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
}).strict());

export const StripeConnectionOrderByWithAggregationInputSchema: z.ZodType<Prisma.StripeConnectionOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  accountId: z.lazy(() => SortOrderSchema).optional(),
  detailsSubmitted: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => StripeConnectionCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => StripeConnectionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => StripeConnectionMinOrderByAggregateInputSchema).optional()
}).strict();

export const StripeConnectionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.StripeConnectionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => StripeConnectionScalarWhereWithAggregatesInputSchema),z.lazy(() => StripeConnectionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => StripeConnectionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => StripeConnectionScalarWhereWithAggregatesInputSchema),z.lazy(() => StripeConnectionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  accountId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  detailsSubmitted: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
}).strict();

export const ListingWhereInputSchema: z.ZodType<Prisma.ListingWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ListingWhereInputSchema),z.lazy(() => ListingWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ListingWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ListingWhereInputSchema),z.lazy(() => ListingWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  unitType: z.union([ z.lazy(() => EnumUnitTypeFilterSchema),z.lazy(() => UnitTypeSchema) ]).optional(),
  beds: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  baths: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  guests: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  line1: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  line2: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  city: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  state: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  zip: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  country: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  latitude: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  longitude: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  timeZone: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  airbnbRemitsTaxes: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  propertyManagerId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  propertyOwnerId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  wifiName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  wifiPassword: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  bpProductId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  doorCode: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  url: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  basePrice: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  iCalKey: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  content: z.union([ z.lazy(() => ContentNullableRelationFilterSchema),z.lazy(() => ContentWhereInputSchema) ]).optional().nullable(),
  rules: z.union([ z.lazy(() => RulesNullableRelationFilterSchema),z.lazy(() => RulesWhereInputSchema) ]).optional().nullable(),
  pricing: z.union([ z.lazy(() => PricingNullableRelationFilterSchema),z.lazy(() => PricingWhereInputSchema) ]).optional().nullable(),
  availability: z.union([ z.lazy(() => AvailabilityNullableRelationFilterSchema),z.lazy(() => AvailabilityWhereInputSchema) ]).optional().nullable(),
  amenities: z.lazy(() => AmenityListRelationFilterSchema).optional(),
  fees: z.lazy(() => FeeListRelationFilterSchema).optional(),
  taxRates: z.union([ z.lazy(() => TaxRatesNullableRelationFilterSchema),z.lazy(() => TaxRatesWhereInputSchema) ]).optional().nullable(),
  events: z.lazy(() => CalendarEventListRelationFilterSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateListRelationFilterSchema).optional(),
  organization: z.union([ z.lazy(() => OrganizationRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  deductions: z.union([ z.lazy(() => DeductionsNullableRelationFilterSchema),z.lazy(() => DeductionsWhereInputSchema) ]).optional().nullable(),
  propertyManager: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  propertyOwner: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  messageThreads: z.lazy(() => MessageThreadListRelationFilterSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseListRelationFilterSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementListRelationFilterSchema).optional(),
  dailyRates: z.lazy(() => DailyRateListRelationFilterSchema).optional(),
  keys: z.lazy(() => ListingKeyListRelationFilterSchema).optional()
}).strict();

export const ListingOrderByWithRelationInputSchema: z.ZodType<Prisma.ListingOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  unitType: z.lazy(() => SortOrderSchema).optional(),
  beds: z.lazy(() => SortOrderSchema).optional(),
  baths: z.lazy(() => SortOrderSchema).optional(),
  guests: z.lazy(() => SortOrderSchema).optional(),
  line1: z.lazy(() => SortOrderSchema).optional(),
  line2: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  city: z.lazy(() => SortOrderSchema).optional(),
  state: z.lazy(() => SortOrderSchema).optional(),
  zip: z.lazy(() => SortOrderSchema).optional(),
  country: z.lazy(() => SortOrderSchema).optional(),
  latitude: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  longitude: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  timeZone: z.lazy(() => SortOrderSchema).optional(),
  airbnbRemitsTaxes: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  propertyManagerId: z.lazy(() => SortOrderSchema).optional(),
  propertyOwnerId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  wifiName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  wifiPassword: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  notes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  bpProductId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  doorCode: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  url: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  basePrice: z.lazy(() => SortOrderSchema).optional(),
  iCalKey: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  content: z.lazy(() => ContentOrderByWithRelationInputSchema).optional(),
  rules: z.lazy(() => RulesOrderByWithRelationInputSchema).optional(),
  pricing: z.lazy(() => PricingOrderByWithRelationInputSchema).optional(),
  availability: z.lazy(() => AvailabilityOrderByWithRelationInputSchema).optional(),
  amenities: z.lazy(() => AmenityOrderByRelationAggregateInputSchema).optional(),
  fees: z.lazy(() => FeeOrderByRelationAggregateInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesOrderByWithRelationInputSchema).optional(),
  events: z.lazy(() => CalendarEventOrderByRelationAggregateInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateOrderByRelationAggregateInputSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  deductions: z.lazy(() => DeductionsOrderByWithRelationInputSchema).optional(),
  propertyManager: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  propertyOwner: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadOrderByRelationAggregateInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseOrderByRelationAggregateInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementOrderByRelationAggregateInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateOrderByRelationAggregateInputSchema).optional(),
  keys: z.lazy(() => ListingKeyOrderByRelationAggregateInputSchema).optional()
}).strict();

export const ListingWhereUniqueInputSchema: z.ZodType<Prisma.ListingWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    bpProductId: z.string(),
    iCalKey: z.string()
  }),
  z.object({
    id: z.string(),
    bpProductId: z.string(),
  }),
  z.object({
    id: z.string(),
    iCalKey: z.string(),
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    bpProductId: z.string(),
    iCalKey: z.string(),
  }),
  z.object({
    bpProductId: z.string(),
  }),
  z.object({
    iCalKey: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  bpProductId: z.string().optional(),
  iCalKey: z.string().optional(),
  AND: z.union([ z.lazy(() => ListingWhereInputSchema),z.lazy(() => ListingWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ListingWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ListingWhereInputSchema),z.lazy(() => ListingWhereInputSchema).array() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  unitType: z.union([ z.lazy(() => EnumUnitTypeFilterSchema),z.lazy(() => UnitTypeSchema) ]).optional(),
  beds: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  baths: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  guests: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  line1: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  line2: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  city: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  state: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  zip: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  country: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  latitude: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  longitude: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  timeZone: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  airbnbRemitsTaxes: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  propertyManagerId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  propertyOwnerId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  wifiName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  wifiPassword: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  doorCode: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  url: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  basePrice: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  content: z.union([ z.lazy(() => ContentNullableRelationFilterSchema),z.lazy(() => ContentWhereInputSchema) ]).optional().nullable(),
  rules: z.union([ z.lazy(() => RulesNullableRelationFilterSchema),z.lazy(() => RulesWhereInputSchema) ]).optional().nullable(),
  pricing: z.union([ z.lazy(() => PricingNullableRelationFilterSchema),z.lazy(() => PricingWhereInputSchema) ]).optional().nullable(),
  availability: z.union([ z.lazy(() => AvailabilityNullableRelationFilterSchema),z.lazy(() => AvailabilityWhereInputSchema) ]).optional().nullable(),
  amenities: z.lazy(() => AmenityListRelationFilterSchema).optional(),
  fees: z.lazy(() => FeeListRelationFilterSchema).optional(),
  taxRates: z.union([ z.lazy(() => TaxRatesNullableRelationFilterSchema),z.lazy(() => TaxRatesWhereInputSchema) ]).optional().nullable(),
  events: z.lazy(() => CalendarEventListRelationFilterSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateListRelationFilterSchema).optional(),
  organization: z.union([ z.lazy(() => OrganizationRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  deductions: z.union([ z.lazy(() => DeductionsNullableRelationFilterSchema),z.lazy(() => DeductionsWhereInputSchema) ]).optional().nullable(),
  propertyManager: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  propertyOwner: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  messageThreads: z.lazy(() => MessageThreadListRelationFilterSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseListRelationFilterSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementListRelationFilterSchema).optional(),
  dailyRates: z.lazy(() => DailyRateListRelationFilterSchema).optional(),
  keys: z.lazy(() => ListingKeyListRelationFilterSchema).optional()
}).strict());

export const ListingOrderByWithAggregationInputSchema: z.ZodType<Prisma.ListingOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  unitType: z.lazy(() => SortOrderSchema).optional(),
  beds: z.lazy(() => SortOrderSchema).optional(),
  baths: z.lazy(() => SortOrderSchema).optional(),
  guests: z.lazy(() => SortOrderSchema).optional(),
  line1: z.lazy(() => SortOrderSchema).optional(),
  line2: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  city: z.lazy(() => SortOrderSchema).optional(),
  state: z.lazy(() => SortOrderSchema).optional(),
  zip: z.lazy(() => SortOrderSchema).optional(),
  country: z.lazy(() => SortOrderSchema).optional(),
  latitude: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  longitude: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  timeZone: z.lazy(() => SortOrderSchema).optional(),
  airbnbRemitsTaxes: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  propertyManagerId: z.lazy(() => SortOrderSchema).optional(),
  propertyOwnerId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  wifiName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  wifiPassword: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  notes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  bpProductId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  doorCode: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  url: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  basePrice: z.lazy(() => SortOrderSchema).optional(),
  iCalKey: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => ListingCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => ListingAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ListingMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ListingMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => ListingSumOrderByAggregateInputSchema).optional()
}).strict();

export const ListingScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ListingScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ListingScalarWhereWithAggregatesInputSchema),z.lazy(() => ListingScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ListingScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ListingScalarWhereWithAggregatesInputSchema),z.lazy(() => ListingScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  unitType: z.union([ z.lazy(() => EnumUnitTypeWithAggregatesFilterSchema),z.lazy(() => UnitTypeSchema) ]).optional(),
  beds: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  baths: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  guests: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  line1: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  line2: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  city: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  state: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  zip: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  country: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  latitude: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  longitude: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  timeZone: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  airbnbRemitsTaxes: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  propertyManagerId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  propertyOwnerId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  wifiName: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  wifiPassword: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  notes: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  bpProductId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  doorCode: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  url: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  basePrice: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  iCalKey: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const ListingKeyWhereInputSchema: z.ZodType<Prisma.ListingKeyWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ListingKeyWhereInputSchema),z.lazy(() => ListingKeyWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ListingKeyWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ListingKeyWhereInputSchema),z.lazy(() => ListingKeyWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  listingId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  keyType: z.union([ z.lazy(() => EnumKeyTypeFilterSchema),z.lazy(() => KeyTypeSchema) ]).optional(),
  listing: z.union([ z.lazy(() => ListingRelationFilterSchema),z.lazy(() => ListingWhereInputSchema) ]).optional(),
}).strict();

export const ListingKeyOrderByWithRelationInputSchema: z.ZodType<Prisma.ListingKeyOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  keyType: z.lazy(() => SortOrderSchema).optional(),
  listing: z.lazy(() => ListingOrderByWithRelationInputSchema).optional()
}).strict();

export const ListingKeyWhereUniqueInputSchema: z.ZodType<Prisma.ListingKeyWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    listingId_keyType: z.lazy(() => ListingKeyListingIdKeyTypeCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    listingId_keyType: z.lazy(() => ListingKeyListingIdKeyTypeCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.string().optional(),
  listingId_keyType: z.lazy(() => ListingKeyListingIdKeyTypeCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => ListingKeyWhereInputSchema),z.lazy(() => ListingKeyWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ListingKeyWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ListingKeyWhereInputSchema),z.lazy(() => ListingKeyWhereInputSchema).array() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  listingId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  keyType: z.union([ z.lazy(() => EnumKeyTypeFilterSchema),z.lazy(() => KeyTypeSchema) ]).optional(),
  listing: z.union([ z.lazy(() => ListingRelationFilterSchema),z.lazy(() => ListingWhereInputSchema) ]).optional(),
}).strict());

export const ListingKeyOrderByWithAggregationInputSchema: z.ZodType<Prisma.ListingKeyOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  keyType: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ListingKeyCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ListingKeyMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ListingKeyMinOrderByAggregateInputSchema).optional()
}).strict();

export const ListingKeyScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ListingKeyScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ListingKeyScalarWhereWithAggregatesInputSchema),z.lazy(() => ListingKeyScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ListingKeyScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ListingKeyScalarWhereWithAggregatesInputSchema),z.lazy(() => ListingKeyScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  listingId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  keyType: z.union([ z.lazy(() => EnumKeyTypeWithAggregatesFilterSchema),z.lazy(() => KeyTypeSchema) ]).optional(),
}).strict();

export const ContentWhereInputSchema: z.ZodType<Prisma.ContentWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ContentWhereInputSchema),z.lazy(() => ContentWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ContentWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ContentWhereInputSchema),z.lazy(() => ContentWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  listingId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  photos: z.lazy(() => StringNullableListFilterSchema).optional(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  aiInfo: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  listing: z.union([ z.lazy(() => ListingRelationFilterSchema),z.lazy(() => ListingWhereInputSchema) ]).optional(),
  bedrooms: z.lazy(() => BedroomListRelationFilterSchema).optional()
}).strict();

export const ContentOrderByWithRelationInputSchema: z.ZodType<Prisma.ContentOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  photos: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  aiInfo: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  listing: z.lazy(() => ListingOrderByWithRelationInputSchema).optional(),
  bedrooms: z.lazy(() => BedroomOrderByRelationAggregateInputSchema).optional()
}).strict();

export const ContentWhereUniqueInputSchema: z.ZodType<Prisma.ContentWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    listingId: z.string()
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    listingId: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  listingId: z.string().optional(),
  AND: z.union([ z.lazy(() => ContentWhereInputSchema),z.lazy(() => ContentWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ContentWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ContentWhereInputSchema),z.lazy(() => ContentWhereInputSchema).array() ]).optional(),
  photos: z.lazy(() => StringNullableListFilterSchema).optional(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  aiInfo: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  listing: z.union([ z.lazy(() => ListingRelationFilterSchema),z.lazy(() => ListingWhereInputSchema) ]).optional(),
  bedrooms: z.lazy(() => BedroomListRelationFilterSchema).optional()
}).strict());

export const ContentOrderByWithAggregationInputSchema: z.ZodType<Prisma.ContentOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  photos: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  aiInfo: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => ContentCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ContentMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ContentMinOrderByAggregateInputSchema).optional()
}).strict();

export const ContentScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ContentScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ContentScalarWhereWithAggregatesInputSchema),z.lazy(() => ContentScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ContentScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ContentScalarWhereWithAggregatesInputSchema),z.lazy(() => ContentScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  listingId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  photos: z.lazy(() => StringNullableListFilterSchema).optional(),
  title: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  aiInfo: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const RulesWhereInputSchema: z.ZodType<Prisma.RulesWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RulesWhereInputSchema),z.lazy(() => RulesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RulesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RulesWhereInputSchema),z.lazy(() => RulesWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  listingId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  pets: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  children: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  smoking: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  deposit: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  house: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  listing: z.union([ z.lazy(() => ListingRelationFilterSchema),z.lazy(() => ListingWhereInputSchema) ]).optional(),
}).strict();

export const RulesOrderByWithRelationInputSchema: z.ZodType<Prisma.RulesOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  pets: z.lazy(() => SortOrderSchema).optional(),
  children: z.lazy(() => SortOrderSchema).optional(),
  smoking: z.lazy(() => SortOrderSchema).optional(),
  deposit: z.lazy(() => SortOrderSchema).optional(),
  house: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  listing: z.lazy(() => ListingOrderByWithRelationInputSchema).optional()
}).strict();

export const RulesWhereUniqueInputSchema: z.ZodType<Prisma.RulesWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    listingId: z.string()
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    listingId: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  listingId: z.string().optional(),
  AND: z.union([ z.lazy(() => RulesWhereInputSchema),z.lazy(() => RulesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RulesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RulesWhereInputSchema),z.lazy(() => RulesWhereInputSchema).array() ]).optional(),
  pets: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  children: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  smoking: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  deposit: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  house: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  listing: z.union([ z.lazy(() => ListingRelationFilterSchema),z.lazy(() => ListingWhereInputSchema) ]).optional(),
}).strict());

export const RulesOrderByWithAggregationInputSchema: z.ZodType<Prisma.RulesOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  pets: z.lazy(() => SortOrderSchema).optional(),
  children: z.lazy(() => SortOrderSchema).optional(),
  smoking: z.lazy(() => SortOrderSchema).optional(),
  deposit: z.lazy(() => SortOrderSchema).optional(),
  house: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => RulesCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => RulesMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => RulesMinOrderByAggregateInputSchema).optional()
}).strict();

export const RulesScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.RulesScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => RulesScalarWhereWithAggregatesInputSchema),z.lazy(() => RulesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => RulesScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RulesScalarWhereWithAggregatesInputSchema),z.lazy(() => RulesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  listingId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  pets: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  children: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  smoking: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  deposit: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  house: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const PricingWhereInputSchema: z.ZodType<Prisma.PricingWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PricingWhereInputSchema),z.lazy(() => PricingWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PricingWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PricingWhereInputSchema),z.lazy(() => PricingWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  listingId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  minimum: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  weekday: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  weekend: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  minStay: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  maxStay: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  dynamicPricing: z.union([ z.lazy(() => EnumDynamicPricingFilterSchema),z.lazy(() => DynamicPricingSchema) ]).optional(),
  listing: z.union([ z.lazy(() => ListingRelationFilterSchema),z.lazy(() => ListingWhereInputSchema) ]).optional(),
  dates: z.lazy(() => PricingDateListRelationFilterSchema).optional(),
  discounts: z.lazy(() => DiscountListRelationFilterSchema).optional()
}).strict();

export const PricingOrderByWithRelationInputSchema: z.ZodType<Prisma.PricingOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  minimum: z.lazy(() => SortOrderSchema).optional(),
  weekday: z.lazy(() => SortOrderSchema).optional(),
  weekend: z.lazy(() => SortOrderSchema).optional(),
  minStay: z.lazy(() => SortOrderSchema).optional(),
  maxStay: z.lazy(() => SortOrderSchema).optional(),
  dynamicPricing: z.lazy(() => SortOrderSchema).optional(),
  listing: z.lazy(() => ListingOrderByWithRelationInputSchema).optional(),
  dates: z.lazy(() => PricingDateOrderByRelationAggregateInputSchema).optional(),
  discounts: z.lazy(() => DiscountOrderByRelationAggregateInputSchema).optional()
}).strict();

export const PricingWhereUniqueInputSchema: z.ZodType<Prisma.PricingWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    listingId: z.string()
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    listingId: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  listingId: z.string().optional(),
  AND: z.union([ z.lazy(() => PricingWhereInputSchema),z.lazy(() => PricingWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PricingWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PricingWhereInputSchema),z.lazy(() => PricingWhereInputSchema).array() ]).optional(),
  minimum: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  weekday: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  weekend: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  minStay: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  maxStay: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  dynamicPricing: z.union([ z.lazy(() => EnumDynamicPricingFilterSchema),z.lazy(() => DynamicPricingSchema) ]).optional(),
  listing: z.union([ z.lazy(() => ListingRelationFilterSchema),z.lazy(() => ListingWhereInputSchema) ]).optional(),
  dates: z.lazy(() => PricingDateListRelationFilterSchema).optional(),
  discounts: z.lazy(() => DiscountListRelationFilterSchema).optional()
}).strict());

export const PricingOrderByWithAggregationInputSchema: z.ZodType<Prisma.PricingOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  minimum: z.lazy(() => SortOrderSchema).optional(),
  weekday: z.lazy(() => SortOrderSchema).optional(),
  weekend: z.lazy(() => SortOrderSchema).optional(),
  minStay: z.lazy(() => SortOrderSchema).optional(),
  maxStay: z.lazy(() => SortOrderSchema).optional(),
  dynamicPricing: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => PricingCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => PricingAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => PricingMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => PricingMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => PricingSumOrderByAggregateInputSchema).optional()
}).strict();

export const PricingScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.PricingScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => PricingScalarWhereWithAggregatesInputSchema),z.lazy(() => PricingScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => PricingScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PricingScalarWhereWithAggregatesInputSchema),z.lazy(() => PricingScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  listingId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  minimum: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  weekday: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  weekend: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  minStay: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  maxStay: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  dynamicPricing: z.union([ z.lazy(() => EnumDynamicPricingWithAggregatesFilterSchema),z.lazy(() => DynamicPricingSchema) ]).optional(),
}).strict();

export const PricingDateWhereInputSchema: z.ZodType<Prisma.PricingDateWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PricingDateWhereInputSchema),z.lazy(() => PricingDateWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PricingDateWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PricingDateWhereInputSchema),z.lazy(() => PricingDateWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  pricingId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  startDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  endDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  percent: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  pricing: z.union([ z.lazy(() => PricingRelationFilterSchema),z.lazy(() => PricingWhereInputSchema) ]).optional(),
}).strict();

export const PricingDateOrderByWithRelationInputSchema: z.ZodType<Prisma.PricingDateOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  pricingId: z.lazy(() => SortOrderSchema).optional(),
  startDate: z.lazy(() => SortOrderSchema).optional(),
  endDate: z.lazy(() => SortOrderSchema).optional(),
  percent: z.lazy(() => SortOrderSchema).optional(),
  pricing: z.lazy(() => PricingOrderByWithRelationInputSchema).optional()
}).strict();

export const PricingDateWhereUniqueInputSchema: z.ZodType<Prisma.PricingDateWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => PricingDateWhereInputSchema),z.lazy(() => PricingDateWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PricingDateWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PricingDateWhereInputSchema),z.lazy(() => PricingDateWhereInputSchema).array() ]).optional(),
  pricingId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  startDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  endDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  percent: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  pricing: z.union([ z.lazy(() => PricingRelationFilterSchema),z.lazy(() => PricingWhereInputSchema) ]).optional(),
}).strict());

export const PricingDateOrderByWithAggregationInputSchema: z.ZodType<Prisma.PricingDateOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  pricingId: z.lazy(() => SortOrderSchema).optional(),
  startDate: z.lazy(() => SortOrderSchema).optional(),
  endDate: z.lazy(() => SortOrderSchema).optional(),
  percent: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => PricingDateCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => PricingDateAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => PricingDateMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => PricingDateMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => PricingDateSumOrderByAggregateInputSchema).optional()
}).strict();

export const PricingDateScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.PricingDateScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => PricingDateScalarWhereWithAggregatesInputSchema),z.lazy(() => PricingDateScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => PricingDateScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PricingDateScalarWhereWithAggregatesInputSchema),z.lazy(() => PricingDateScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  pricingId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  startDate: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  endDate: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  percent: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
}).strict();

export const DiscountWhereInputSchema: z.ZodType<Prisma.DiscountWhereInput> = z.object({
  AND: z.union([ z.lazy(() => DiscountWhereInputSchema),z.lazy(() => DiscountWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => DiscountWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DiscountWhereInputSchema),z.lazy(() => DiscountWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  pricingId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  days: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  percent: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  pricing: z.union([ z.lazy(() => PricingRelationFilterSchema),z.lazy(() => PricingWhereInputSchema) ]).optional(),
}).strict();

export const DiscountOrderByWithRelationInputSchema: z.ZodType<Prisma.DiscountOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  pricingId: z.lazy(() => SortOrderSchema).optional(),
  days: z.lazy(() => SortOrderSchema).optional(),
  percent: z.lazy(() => SortOrderSchema).optional(),
  pricing: z.lazy(() => PricingOrderByWithRelationInputSchema).optional()
}).strict();

export const DiscountWhereUniqueInputSchema: z.ZodType<Prisma.DiscountWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => DiscountWhereInputSchema),z.lazy(() => DiscountWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => DiscountWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DiscountWhereInputSchema),z.lazy(() => DiscountWhereInputSchema).array() ]).optional(),
  pricingId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  days: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  percent: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  pricing: z.union([ z.lazy(() => PricingRelationFilterSchema),z.lazy(() => PricingWhereInputSchema) ]).optional(),
}).strict());

export const DiscountOrderByWithAggregationInputSchema: z.ZodType<Prisma.DiscountOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  pricingId: z.lazy(() => SortOrderSchema).optional(),
  days: z.lazy(() => SortOrderSchema).optional(),
  percent: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => DiscountCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => DiscountAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => DiscountMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => DiscountMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => DiscountSumOrderByAggregateInputSchema).optional()
}).strict();

export const DiscountScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.DiscountScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => DiscountScalarWhereWithAggregatesInputSchema),z.lazy(() => DiscountScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => DiscountScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DiscountScalarWhereWithAggregatesInputSchema),z.lazy(() => DiscountScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  pricingId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  days: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  percent: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
}).strict();

export const AvailabilityWhereInputSchema: z.ZodType<Prisma.AvailabilityWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AvailabilityWhereInputSchema),z.lazy(() => AvailabilityWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AvailabilityWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AvailabilityWhereInputSchema),z.lazy(() => AvailabilityWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  listingId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  checkIn: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  checkOut: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  leadTime: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  listing: z.union([ z.lazy(() => ListingRelationFilterSchema),z.lazy(() => ListingWhereInputSchema) ]).optional(),
}).strict();

export const AvailabilityOrderByWithRelationInputSchema: z.ZodType<Prisma.AvailabilityOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  checkIn: z.lazy(() => SortOrderSchema).optional(),
  checkOut: z.lazy(() => SortOrderSchema).optional(),
  leadTime: z.lazy(() => SortOrderSchema).optional(),
  listing: z.lazy(() => ListingOrderByWithRelationInputSchema).optional()
}).strict();

export const AvailabilityWhereUniqueInputSchema: z.ZodType<Prisma.AvailabilityWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    listingId: z.string()
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    listingId: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  listingId: z.string().optional(),
  AND: z.union([ z.lazy(() => AvailabilityWhereInputSchema),z.lazy(() => AvailabilityWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AvailabilityWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AvailabilityWhereInputSchema),z.lazy(() => AvailabilityWhereInputSchema).array() ]).optional(),
  checkIn: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  checkOut: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  leadTime: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  listing: z.union([ z.lazy(() => ListingRelationFilterSchema),z.lazy(() => ListingWhereInputSchema) ]).optional(),
}).strict());

export const AvailabilityOrderByWithAggregationInputSchema: z.ZodType<Prisma.AvailabilityOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  checkIn: z.lazy(() => SortOrderSchema).optional(),
  checkOut: z.lazy(() => SortOrderSchema).optional(),
  leadTime: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => AvailabilityCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => AvailabilityAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => AvailabilityMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => AvailabilityMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => AvailabilitySumOrderByAggregateInputSchema).optional()
}).strict();

export const AvailabilityScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.AvailabilityScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => AvailabilityScalarWhereWithAggregatesInputSchema),z.lazy(() => AvailabilityScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => AvailabilityScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AvailabilityScalarWhereWithAggregatesInputSchema),z.lazy(() => AvailabilityScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  listingId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  checkIn: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  checkOut: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  leadTime: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
}).strict();

export const AmenityWhereInputSchema: z.ZodType<Prisma.AmenityWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AmenityWhereInputSchema),z.lazy(() => AmenityWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AmenityWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AmenityWhereInputSchema),z.lazy(() => AmenityWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  listingId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  typeId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  note: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  listing: z.union([ z.lazy(() => ListingRelationFilterSchema),z.lazy(() => ListingWhereInputSchema) ]).optional(),
}).strict();

export const AmenityOrderByWithRelationInputSchema: z.ZodType<Prisma.AmenityOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  typeId: z.lazy(() => SortOrderSchema).optional(),
  note: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  listing: z.lazy(() => ListingOrderByWithRelationInputSchema).optional()
}).strict();

export const AmenityWhereUniqueInputSchema: z.ZodType<Prisma.AmenityWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => AmenityWhereInputSchema),z.lazy(() => AmenityWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AmenityWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AmenityWhereInputSchema),z.lazy(() => AmenityWhereInputSchema).array() ]).optional(),
  listingId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  typeId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  note: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  listing: z.union([ z.lazy(() => ListingRelationFilterSchema),z.lazy(() => ListingWhereInputSchema) ]).optional(),
}).strict());

export const AmenityOrderByWithAggregationInputSchema: z.ZodType<Prisma.AmenityOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  typeId: z.lazy(() => SortOrderSchema).optional(),
  note: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => AmenityCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => AmenityMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => AmenityMinOrderByAggregateInputSchema).optional()
}).strict();

export const AmenityScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.AmenityScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => AmenityScalarWhereWithAggregatesInputSchema),z.lazy(() => AmenityScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => AmenityScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AmenityScalarWhereWithAggregatesInputSchema),z.lazy(() => AmenityScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  listingId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  typeId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  note: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const FeeWhereInputSchema: z.ZodType<Prisma.FeeWhereInput> = z.object({
  AND: z.union([ z.lazy(() => FeeWhereInputSchema),z.lazy(() => FeeWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FeeWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FeeWhereInputSchema),z.lazy(() => FeeWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  listingId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  unit: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  taxable: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  share: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  listing: z.union([ z.lazy(() => ListingRelationFilterSchema),z.lazy(() => ListingWhereInputSchema) ]).optional(),
}).strict();

export const FeeOrderByWithRelationInputSchema: z.ZodType<Prisma.FeeOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  taxable: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  share: z.lazy(() => SortOrderSchema).optional(),
  listing: z.lazy(() => ListingOrderByWithRelationInputSchema).optional()
}).strict();

export const FeeWhereUniqueInputSchema: z.ZodType<Prisma.FeeWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => FeeWhereInputSchema),z.lazy(() => FeeWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FeeWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FeeWhereInputSchema),z.lazy(() => FeeWhereInputSchema).array() ]).optional(),
  listingId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  unit: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  taxable: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  share: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  listing: z.union([ z.lazy(() => ListingRelationFilterSchema),z.lazy(() => ListingWhereInputSchema) ]).optional(),
}).strict());

export const FeeOrderByWithAggregationInputSchema: z.ZodType<Prisma.FeeOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  taxable: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  share: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => FeeCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => FeeAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => FeeMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => FeeMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => FeeSumOrderByAggregateInputSchema).optional()
}).strict();

export const FeeScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.FeeScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => FeeScalarWhereWithAggregatesInputSchema),z.lazy(() => FeeScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => FeeScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FeeScalarWhereWithAggregatesInputSchema),z.lazy(() => FeeScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  listingId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  unit: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  taxable: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  type: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  share: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
}).strict();

export const TaxRatesWhereInputSchema: z.ZodType<Prisma.TaxRatesWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TaxRatesWhereInputSchema),z.lazy(() => TaxRatesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TaxRatesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TaxRatesWhereInputSchema),z.lazy(() => TaxRatesWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  listingId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  municipal: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  county: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  state: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  listing: z.union([ z.lazy(() => ListingRelationFilterSchema),z.lazy(() => ListingWhereInputSchema) ]).optional(),
}).strict();

export const TaxRatesOrderByWithRelationInputSchema: z.ZodType<Prisma.TaxRatesOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  municipal: z.lazy(() => SortOrderSchema).optional(),
  county: z.lazy(() => SortOrderSchema).optional(),
  state: z.lazy(() => SortOrderSchema).optional(),
  listing: z.lazy(() => ListingOrderByWithRelationInputSchema).optional()
}).strict();

export const TaxRatesWhereUniqueInputSchema: z.ZodType<Prisma.TaxRatesWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    listingId: z.string()
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    listingId: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  listingId: z.string().optional(),
  AND: z.union([ z.lazy(() => TaxRatesWhereInputSchema),z.lazy(() => TaxRatesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TaxRatesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TaxRatesWhereInputSchema),z.lazy(() => TaxRatesWhereInputSchema).array() ]).optional(),
  municipal: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  county: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  state: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  listing: z.union([ z.lazy(() => ListingRelationFilterSchema),z.lazy(() => ListingWhereInputSchema) ]).optional(),
}).strict());

export const TaxRatesOrderByWithAggregationInputSchema: z.ZodType<Prisma.TaxRatesOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  municipal: z.lazy(() => SortOrderSchema).optional(),
  county: z.lazy(() => SortOrderSchema).optional(),
  state: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => TaxRatesCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => TaxRatesAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TaxRatesMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TaxRatesMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => TaxRatesSumOrderByAggregateInputSchema).optional()
}).strict();

export const TaxRatesScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TaxRatesScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TaxRatesScalarWhereWithAggregatesInputSchema),z.lazy(() => TaxRatesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TaxRatesScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TaxRatesScalarWhereWithAggregatesInputSchema),z.lazy(() => TaxRatesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  listingId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  municipal: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  county: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  state: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
}).strict();

export const DeductionsWhereInputSchema: z.ZodType<Prisma.DeductionsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => DeductionsWhereInputSchema),z.lazy(() => DeductionsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => DeductionsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DeductionsWhereInputSchema),z.lazy(() => DeductionsWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  listingId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  channelFees: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  creditCardFees: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  discounts: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  municipalTaxes: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  countyTaxes: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  stateTaxes: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  otherGuestFees: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  pmcShare: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  listing: z.union([ z.lazy(() => ListingRelationFilterSchema),z.lazy(() => ListingWhereInputSchema) ]).optional(),
}).strict();

export const DeductionsOrderByWithRelationInputSchema: z.ZodType<Prisma.DeductionsOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  channelFees: z.lazy(() => SortOrderSchema).optional(),
  creditCardFees: z.lazy(() => SortOrderSchema).optional(),
  discounts: z.lazy(() => SortOrderSchema).optional(),
  municipalTaxes: z.lazy(() => SortOrderSchema).optional(),
  countyTaxes: z.lazy(() => SortOrderSchema).optional(),
  stateTaxes: z.lazy(() => SortOrderSchema).optional(),
  otherGuestFees: z.lazy(() => SortOrderSchema).optional(),
  pmcShare: z.lazy(() => SortOrderSchema).optional(),
  listing: z.lazy(() => ListingOrderByWithRelationInputSchema).optional()
}).strict();

export const DeductionsWhereUniqueInputSchema: z.ZodType<Prisma.DeductionsWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    listingId: z.string()
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    listingId: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  listingId: z.string().optional(),
  AND: z.union([ z.lazy(() => DeductionsWhereInputSchema),z.lazy(() => DeductionsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => DeductionsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DeductionsWhereInputSchema),z.lazy(() => DeductionsWhereInputSchema).array() ]).optional(),
  channelFees: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  creditCardFees: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  discounts: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  municipalTaxes: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  countyTaxes: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  stateTaxes: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  otherGuestFees: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  pmcShare: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  listing: z.union([ z.lazy(() => ListingRelationFilterSchema),z.lazy(() => ListingWhereInputSchema) ]).optional(),
}).strict());

export const DeductionsOrderByWithAggregationInputSchema: z.ZodType<Prisma.DeductionsOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  channelFees: z.lazy(() => SortOrderSchema).optional(),
  creditCardFees: z.lazy(() => SortOrderSchema).optional(),
  discounts: z.lazy(() => SortOrderSchema).optional(),
  municipalTaxes: z.lazy(() => SortOrderSchema).optional(),
  countyTaxes: z.lazy(() => SortOrderSchema).optional(),
  stateTaxes: z.lazy(() => SortOrderSchema).optional(),
  otherGuestFees: z.lazy(() => SortOrderSchema).optional(),
  pmcShare: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => DeductionsCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => DeductionsAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => DeductionsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => DeductionsMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => DeductionsSumOrderByAggregateInputSchema).optional()
}).strict();

export const DeductionsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.DeductionsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => DeductionsScalarWhereWithAggregatesInputSchema),z.lazy(() => DeductionsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => DeductionsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DeductionsScalarWhereWithAggregatesInputSchema),z.lazy(() => DeductionsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  listingId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  channelFees: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  creditCardFees: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  discounts: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  municipalTaxes: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  countyTaxes: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  stateTaxes: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  otherGuestFees: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  pmcShare: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
}).strict();

export const BedroomWhereInputSchema: z.ZodType<Prisma.BedroomWhereInput> = z.object({
  AND: z.union([ z.lazy(() => BedroomWhereInputSchema),z.lazy(() => BedroomWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => BedroomWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => BedroomWhereInputSchema),z.lazy(() => BedroomWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  contentId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  bathroom: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  beds: z.lazy(() => StringNullableListFilterSchema).optional(),
  content: z.union([ z.lazy(() => ContentRelationFilterSchema),z.lazy(() => ContentWhereInputSchema) ]).optional(),
}).strict();

export const BedroomOrderByWithRelationInputSchema: z.ZodType<Prisma.BedroomOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  contentId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  bathroom: z.lazy(() => SortOrderSchema).optional(),
  beds: z.lazy(() => SortOrderSchema).optional(),
  content: z.lazy(() => ContentOrderByWithRelationInputSchema).optional()
}).strict();

export const BedroomWhereUniqueInputSchema: z.ZodType<Prisma.BedroomWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => BedroomWhereInputSchema),z.lazy(() => BedroomWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => BedroomWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => BedroomWhereInputSchema),z.lazy(() => BedroomWhereInputSchema).array() ]).optional(),
  contentId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  bathroom: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  beds: z.lazy(() => StringNullableListFilterSchema).optional(),
  content: z.union([ z.lazy(() => ContentRelationFilterSchema),z.lazy(() => ContentWhereInputSchema) ]).optional(),
}).strict());

export const BedroomOrderByWithAggregationInputSchema: z.ZodType<Prisma.BedroomOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  contentId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  bathroom: z.lazy(() => SortOrderSchema).optional(),
  beds: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => BedroomCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => BedroomMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => BedroomMinOrderByAggregateInputSchema).optional()
}).strict();

export const BedroomScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.BedroomScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => BedroomScalarWhereWithAggregatesInputSchema),z.lazy(() => BedroomScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => BedroomScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => BedroomScalarWhereWithAggregatesInputSchema),z.lazy(() => BedroomScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  contentId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  bathroom: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  beds: z.lazy(() => StringNullableListFilterSchema).optional()
}).strict();

export const CalendarEventWhereInputSchema: z.ZodType<Prisma.CalendarEventWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CalendarEventWhereInputSchema),z.lazy(() => CalendarEventWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CalendarEventWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CalendarEventWhereInputSchema),z.lazy(() => CalendarEventWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  listingId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  fromDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  toDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  type: z.union([ z.lazy(() => EnumCalendarEventTypeFilterSchema),z.lazy(() => CalendarEventTypeSchema) ]).optional(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  bookedOn: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  listing: z.union([ z.lazy(() => ListingRelationFilterSchema),z.lazy(() => ListingWhereInputSchema) ]).optional(),
  reservation: z.union([ z.lazy(() => ReservationNullableRelationFilterSchema),z.lazy(() => ReservationWhereInputSchema) ]).optional().nullable(),
}).strict();

export const CalendarEventOrderByWithRelationInputSchema: z.ZodType<Prisma.CalendarEventOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  fromDate: z.lazy(() => SortOrderSchema).optional(),
  toDate: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  notes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  bookedOn: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  listing: z.lazy(() => ListingOrderByWithRelationInputSchema).optional(),
  reservation: z.lazy(() => ReservationOrderByWithRelationInputSchema).optional()
}).strict();

export const CalendarEventWhereUniqueInputSchema: z.ZodType<Prisma.CalendarEventWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => CalendarEventWhereInputSchema),z.lazy(() => CalendarEventWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CalendarEventWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CalendarEventWhereInputSchema),z.lazy(() => CalendarEventWhereInputSchema).array() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  listingId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  fromDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  toDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  type: z.union([ z.lazy(() => EnumCalendarEventTypeFilterSchema),z.lazy(() => CalendarEventTypeSchema) ]).optional(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  bookedOn: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  listing: z.union([ z.lazy(() => ListingRelationFilterSchema),z.lazy(() => ListingWhereInputSchema) ]).optional(),
  reservation: z.union([ z.lazy(() => ReservationNullableRelationFilterSchema),z.lazy(() => ReservationWhereInputSchema) ]).optional().nullable(),
}).strict());

export const CalendarEventOrderByWithAggregationInputSchema: z.ZodType<Prisma.CalendarEventOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  fromDate: z.lazy(() => SortOrderSchema).optional(),
  toDate: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  notes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  bookedOn: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => CalendarEventCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => CalendarEventMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => CalendarEventMinOrderByAggregateInputSchema).optional()
}).strict();

export const CalendarEventScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.CalendarEventScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => CalendarEventScalarWhereWithAggregatesInputSchema),z.lazy(() => CalendarEventScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => CalendarEventScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CalendarEventScalarWhereWithAggregatesInputSchema),z.lazy(() => CalendarEventScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  listingId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  fromDate: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  toDate: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  type: z.union([ z.lazy(() => EnumCalendarEventTypeWithAggregatesFilterSchema),z.lazy(() => CalendarEventTypeSchema) ]).optional(),
  notes: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  bookedOn: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const ReservationWhereInputSchema: z.ZodType<Prisma.ReservationWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ReservationWhereInputSchema),z.lazy(() => ReservationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ReservationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ReservationWhereInputSchema),z.lazy(() => ReservationWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  calendarEventId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  channel: z.union([ z.lazy(() => EnumChannelFilterSchema),z.lazy(() => ChannelSchema) ]).optional(),
  bpReservationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  confirmationCode: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  adults: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  children: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  pets: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  status: z.union([ z.lazy(() => EnumReservationStatusFilterSchema),z.lazy(() => ReservationStatusSchema) ]).optional(),
  guestId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  calendarEvent: z.union([ z.lazy(() => CalendarEventRelationFilterSchema),z.lazy(() => CalendarEventWhereInputSchema) ]).optional(),
  scheduledMessages: z.lazy(() => ScheduledMessageListRelationFilterSchema).optional(),
  revenue: z.union([ z.lazy(() => RevenueNullableRelationFilterSchema),z.lazy(() => RevenueWhereInputSchema) ]).optional().nullable(),
  guest: z.union([ z.lazy(() => GuestRelationFilterSchema),z.lazy(() => GuestWhereInputSchema) ]).optional(),
}).strict();

export const ReservationOrderByWithRelationInputSchema: z.ZodType<Prisma.ReservationOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  calendarEventId: z.lazy(() => SortOrderSchema).optional(),
  channel: z.lazy(() => SortOrderSchema).optional(),
  bpReservationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  confirmationCode: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  adults: z.lazy(() => SortOrderSchema).optional(),
  children: z.lazy(() => SortOrderSchema).optional(),
  pets: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  guestId: z.lazy(() => SortOrderSchema).optional(),
  calendarEvent: z.lazy(() => CalendarEventOrderByWithRelationInputSchema).optional(),
  scheduledMessages: z.lazy(() => ScheduledMessageOrderByRelationAggregateInputSchema).optional(),
  revenue: z.lazy(() => RevenueOrderByWithRelationInputSchema).optional(),
  guest: z.lazy(() => GuestOrderByWithRelationInputSchema).optional()
}).strict();

export const ReservationWhereUniqueInputSchema: z.ZodType<Prisma.ReservationWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    calendarEventId: z.string(),
    bpReservationId: z.string(),
    confirmationCode: z.string()
  }),
  z.object({
    id: z.string(),
    calendarEventId: z.string(),
    bpReservationId: z.string(),
  }),
  z.object({
    id: z.string(),
    calendarEventId: z.string(),
    confirmationCode: z.string(),
  }),
  z.object({
    id: z.string(),
    calendarEventId: z.string(),
  }),
  z.object({
    id: z.string(),
    bpReservationId: z.string(),
    confirmationCode: z.string(),
  }),
  z.object({
    id: z.string(),
    bpReservationId: z.string(),
  }),
  z.object({
    id: z.string(),
    confirmationCode: z.string(),
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    calendarEventId: z.string(),
    bpReservationId: z.string(),
    confirmationCode: z.string(),
  }),
  z.object({
    calendarEventId: z.string(),
    bpReservationId: z.string(),
  }),
  z.object({
    calendarEventId: z.string(),
    confirmationCode: z.string(),
  }),
  z.object({
    calendarEventId: z.string(),
  }),
  z.object({
    bpReservationId: z.string(),
    confirmationCode: z.string(),
  }),
  z.object({
    bpReservationId: z.string(),
  }),
  z.object({
    confirmationCode: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  calendarEventId: z.string().optional(),
  bpReservationId: z.string().optional(),
  confirmationCode: z.string().optional(),
  AND: z.union([ z.lazy(() => ReservationWhereInputSchema),z.lazy(() => ReservationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ReservationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ReservationWhereInputSchema),z.lazy(() => ReservationWhereInputSchema).array() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  channel: z.union([ z.lazy(() => EnumChannelFilterSchema),z.lazy(() => ChannelSchema) ]).optional(),
  adults: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  children: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  pets: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  status: z.union([ z.lazy(() => EnumReservationStatusFilterSchema),z.lazy(() => ReservationStatusSchema) ]).optional(),
  guestId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  calendarEvent: z.union([ z.lazy(() => CalendarEventRelationFilterSchema),z.lazy(() => CalendarEventWhereInputSchema) ]).optional(),
  scheduledMessages: z.lazy(() => ScheduledMessageListRelationFilterSchema).optional(),
  revenue: z.union([ z.lazy(() => RevenueNullableRelationFilterSchema),z.lazy(() => RevenueWhereInputSchema) ]).optional().nullable(),
  guest: z.union([ z.lazy(() => GuestRelationFilterSchema),z.lazy(() => GuestWhereInputSchema) ]).optional(),
}).strict());

export const ReservationOrderByWithAggregationInputSchema: z.ZodType<Prisma.ReservationOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  calendarEventId: z.lazy(() => SortOrderSchema).optional(),
  channel: z.lazy(() => SortOrderSchema).optional(),
  bpReservationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  confirmationCode: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  adults: z.lazy(() => SortOrderSchema).optional(),
  children: z.lazy(() => SortOrderSchema).optional(),
  pets: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  guestId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ReservationCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => ReservationAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ReservationMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ReservationMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => ReservationSumOrderByAggregateInputSchema).optional()
}).strict();

export const ReservationScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ReservationScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ReservationScalarWhereWithAggregatesInputSchema),z.lazy(() => ReservationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ReservationScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ReservationScalarWhereWithAggregatesInputSchema),z.lazy(() => ReservationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  calendarEventId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  channel: z.union([ z.lazy(() => EnumChannelWithAggregatesFilterSchema),z.lazy(() => ChannelSchema) ]).optional(),
  bpReservationId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  confirmationCode: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  adults: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  children: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  pets: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  status: z.union([ z.lazy(() => EnumReservationStatusWithAggregatesFilterSchema),z.lazy(() => ReservationStatusSchema) ]).optional(),
  guestId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const ReservationBpRequestWhereInputSchema: z.ZodType<Prisma.ReservationBpRequestWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ReservationBpRequestWhereInputSchema),z.lazy(() => ReservationBpRequestWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ReservationBpRequestWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ReservationBpRequestWhereInputSchema),z.lazy(() => ReservationBpRequestWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  listingId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  reservationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  fromDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  toDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  available: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  status: z.union([ z.lazy(() => EnumQueueStatusFilterSchema),z.lazy(() => QueueStatusSchema) ]).optional(),
}).strict();

export const ReservationBpRequestOrderByWithRelationInputSchema: z.ZodType<Prisma.ReservationBpRequestOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  reservationId: z.lazy(() => SortOrderSchema).optional(),
  fromDate: z.lazy(() => SortOrderSchema).optional(),
  toDate: z.lazy(() => SortOrderSchema).optional(),
  available: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ReservationBpRequestWhereUniqueInputSchema: z.ZodType<Prisma.ReservationBpRequestWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => ReservationBpRequestWhereInputSchema),z.lazy(() => ReservationBpRequestWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ReservationBpRequestWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ReservationBpRequestWhereInputSchema),z.lazy(() => ReservationBpRequestWhereInputSchema).array() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  listingId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  reservationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  fromDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  toDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  available: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  status: z.union([ z.lazy(() => EnumQueueStatusFilterSchema),z.lazy(() => QueueStatusSchema) ]).optional(),
}).strict());

export const ReservationBpRequestOrderByWithAggregationInputSchema: z.ZodType<Prisma.ReservationBpRequestOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  reservationId: z.lazy(() => SortOrderSchema).optional(),
  fromDate: z.lazy(() => SortOrderSchema).optional(),
  toDate: z.lazy(() => SortOrderSchema).optional(),
  available: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ReservationBpRequestCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ReservationBpRequestMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ReservationBpRequestMinOrderByAggregateInputSchema).optional()
}).strict();

export const ReservationBpRequestScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ReservationBpRequestScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ReservationBpRequestScalarWhereWithAggregatesInputSchema),z.lazy(() => ReservationBpRequestScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ReservationBpRequestScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ReservationBpRequestScalarWhereWithAggregatesInputSchema),z.lazy(() => ReservationBpRequestScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  listingId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  reservationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  fromDate: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  toDate: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  available: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  status: z.union([ z.lazy(() => EnumQueueStatusWithAggregatesFilterSchema),z.lazy(() => QueueStatusSchema) ]).optional(),
}).strict();

export const GuestWhereInputSchema: z.ZodType<Prisma.GuestWhereInput> = z.object({
  AND: z.union([ z.lazy(() => GuestWhereInputSchema),z.lazy(() => GuestWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => GuestWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => GuestWhereInputSchema),z.lazy(() => GuestWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  reservations: z.lazy(() => ReservationListRelationFilterSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadListRelationFilterSchema).optional(),
  organization: z.union([ z.lazy(() => OrganizationRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
}).strict();

export const GuestOrderByWithRelationInputSchema: z.ZodType<Prisma.GuestOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  reservations: z.lazy(() => ReservationOrderByRelationAggregateInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadOrderByRelationAggregateInputSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional()
}).strict();

export const GuestWhereUniqueInputSchema: z.ZodType<Prisma.GuestWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => GuestWhereInputSchema),z.lazy(() => GuestWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => GuestWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => GuestWhereInputSchema),z.lazy(() => GuestWhereInputSchema).array() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  reservations: z.lazy(() => ReservationListRelationFilterSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadListRelationFilterSchema).optional(),
  organization: z.union([ z.lazy(() => OrganizationRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
}).strict());

export const GuestOrderByWithAggregationInputSchema: z.ZodType<Prisma.GuestOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => GuestCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => GuestMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => GuestMinOrderByAggregateInputSchema).optional()
}).strict();

export const GuestScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.GuestScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => GuestScalarWhereWithAggregatesInputSchema),z.lazy(() => GuestScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => GuestScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => GuestScalarWhereWithAggregatesInputSchema),z.lazy(() => GuestScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const MessageThreadWhereInputSchema: z.ZodType<Prisma.MessageThreadWhereInput> = z.object({
  AND: z.union([ z.lazy(() => MessageThreadWhereInputSchema),z.lazy(() => MessageThreadWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MessageThreadWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MessageThreadWhereInputSchema),z.lazy(() => MessageThreadWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  listingId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  guestId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  bpThreadId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  channelThreadId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  lastMessageSentAt: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  dateFrom: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  dateTo: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  replyTo: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  archived: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  enableReminder: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  channel: z.union([ z.lazy(() => EnumChannelFilterSchema),z.lazy(() => ChannelSchema) ]).optional(),
  listing: z.union([ z.lazy(() => ListingRelationFilterSchema),z.lazy(() => ListingWhereInputSchema) ]).optional(),
  guest: z.union([ z.lazy(() => GuestRelationFilterSchema),z.lazy(() => GuestWhereInputSchema) ]).optional(),
  messages: z.lazy(() => MessageListRelationFilterSchema).optional()
}).strict();

export const MessageThreadOrderByWithRelationInputSchema: z.ZodType<Prisma.MessageThreadOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  guestId: z.lazy(() => SortOrderSchema).optional(),
  bpThreadId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  channelThreadId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  lastMessageSentAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  dateFrom: z.lazy(() => SortOrderSchema).optional(),
  dateTo: z.lazy(() => SortOrderSchema).optional(),
  replyTo: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  archived: z.lazy(() => SortOrderSchema).optional(),
  enableReminder: z.lazy(() => SortOrderSchema).optional(),
  channel: z.lazy(() => SortOrderSchema).optional(),
  listing: z.lazy(() => ListingOrderByWithRelationInputSchema).optional(),
  guest: z.lazy(() => GuestOrderByWithRelationInputSchema).optional(),
  messages: z.lazy(() => MessageOrderByRelationAggregateInputSchema).optional()
}).strict();

export const MessageThreadWhereUniqueInputSchema: z.ZodType<Prisma.MessageThreadWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    bpThreadId: z.string(),
    channelThreadId: z.string(),
    replyTo: z.string(),
    guestId_listingId_channel: z.lazy(() => MessageThreadGuestIdListingIdChannelCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string(),
    bpThreadId: z.string(),
    channelThreadId: z.string(),
    replyTo: z.string(),
  }),
  z.object({
    id: z.string(),
    bpThreadId: z.string(),
    channelThreadId: z.string(),
    guestId_listingId_channel: z.lazy(() => MessageThreadGuestIdListingIdChannelCompoundUniqueInputSchema),
  }),
  z.object({
    id: z.string(),
    bpThreadId: z.string(),
    channelThreadId: z.string(),
  }),
  z.object({
    id: z.string(),
    bpThreadId: z.string(),
    replyTo: z.string(),
    guestId_listingId_channel: z.lazy(() => MessageThreadGuestIdListingIdChannelCompoundUniqueInputSchema),
  }),
  z.object({
    id: z.string(),
    bpThreadId: z.string(),
    replyTo: z.string(),
  }),
  z.object({
    id: z.string(),
    bpThreadId: z.string(),
    guestId_listingId_channel: z.lazy(() => MessageThreadGuestIdListingIdChannelCompoundUniqueInputSchema),
  }),
  z.object({
    id: z.string(),
    bpThreadId: z.string(),
  }),
  z.object({
    id: z.string(),
    channelThreadId: z.string(),
    replyTo: z.string(),
    guestId_listingId_channel: z.lazy(() => MessageThreadGuestIdListingIdChannelCompoundUniqueInputSchema),
  }),
  z.object({
    id: z.string(),
    channelThreadId: z.string(),
    replyTo: z.string(),
  }),
  z.object({
    id: z.string(),
    channelThreadId: z.string(),
    guestId_listingId_channel: z.lazy(() => MessageThreadGuestIdListingIdChannelCompoundUniqueInputSchema),
  }),
  z.object({
    id: z.string(),
    channelThreadId: z.string(),
  }),
  z.object({
    id: z.string(),
    replyTo: z.string(),
    guestId_listingId_channel: z.lazy(() => MessageThreadGuestIdListingIdChannelCompoundUniqueInputSchema),
  }),
  z.object({
    id: z.string(),
    replyTo: z.string(),
  }),
  z.object({
    id: z.string(),
    guestId_listingId_channel: z.lazy(() => MessageThreadGuestIdListingIdChannelCompoundUniqueInputSchema),
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    bpThreadId: z.string(),
    channelThreadId: z.string(),
    replyTo: z.string(),
    guestId_listingId_channel: z.lazy(() => MessageThreadGuestIdListingIdChannelCompoundUniqueInputSchema),
  }),
  z.object({
    bpThreadId: z.string(),
    channelThreadId: z.string(),
    replyTo: z.string(),
  }),
  z.object({
    bpThreadId: z.string(),
    channelThreadId: z.string(),
    guestId_listingId_channel: z.lazy(() => MessageThreadGuestIdListingIdChannelCompoundUniqueInputSchema),
  }),
  z.object({
    bpThreadId: z.string(),
    channelThreadId: z.string(),
  }),
  z.object({
    bpThreadId: z.string(),
    replyTo: z.string(),
    guestId_listingId_channel: z.lazy(() => MessageThreadGuestIdListingIdChannelCompoundUniqueInputSchema),
  }),
  z.object({
    bpThreadId: z.string(),
    replyTo: z.string(),
  }),
  z.object({
    bpThreadId: z.string(),
    guestId_listingId_channel: z.lazy(() => MessageThreadGuestIdListingIdChannelCompoundUniqueInputSchema),
  }),
  z.object({
    bpThreadId: z.string(),
  }),
  z.object({
    channelThreadId: z.string(),
    replyTo: z.string(),
    guestId_listingId_channel: z.lazy(() => MessageThreadGuestIdListingIdChannelCompoundUniqueInputSchema),
  }),
  z.object({
    channelThreadId: z.string(),
    replyTo: z.string(),
  }),
  z.object({
    channelThreadId: z.string(),
    guestId_listingId_channel: z.lazy(() => MessageThreadGuestIdListingIdChannelCompoundUniqueInputSchema),
  }),
  z.object({
    channelThreadId: z.string(),
  }),
  z.object({
    replyTo: z.string(),
    guestId_listingId_channel: z.lazy(() => MessageThreadGuestIdListingIdChannelCompoundUniqueInputSchema),
  }),
  z.object({
    replyTo: z.string(),
  }),
  z.object({
    guestId_listingId_channel: z.lazy(() => MessageThreadGuestIdListingIdChannelCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.string().optional(),
  bpThreadId: z.string().optional(),
  channelThreadId: z.string().optional(),
  replyTo: z.string().optional(),
  guestId_listingId_channel: z.lazy(() => MessageThreadGuestIdListingIdChannelCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => MessageThreadWhereInputSchema),z.lazy(() => MessageThreadWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MessageThreadWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MessageThreadWhereInputSchema),z.lazy(() => MessageThreadWhereInputSchema).array() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  listingId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  guestId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  lastMessageSentAt: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  dateFrom: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  dateTo: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  archived: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  enableReminder: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  channel: z.union([ z.lazy(() => EnumChannelFilterSchema),z.lazy(() => ChannelSchema) ]).optional(),
  listing: z.union([ z.lazy(() => ListingRelationFilterSchema),z.lazy(() => ListingWhereInputSchema) ]).optional(),
  guest: z.union([ z.lazy(() => GuestRelationFilterSchema),z.lazy(() => GuestWhereInputSchema) ]).optional(),
  messages: z.lazy(() => MessageListRelationFilterSchema).optional()
}).strict());

export const MessageThreadOrderByWithAggregationInputSchema: z.ZodType<Prisma.MessageThreadOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  guestId: z.lazy(() => SortOrderSchema).optional(),
  bpThreadId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  channelThreadId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  lastMessageSentAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  dateFrom: z.lazy(() => SortOrderSchema).optional(),
  dateTo: z.lazy(() => SortOrderSchema).optional(),
  replyTo: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  archived: z.lazy(() => SortOrderSchema).optional(),
  enableReminder: z.lazy(() => SortOrderSchema).optional(),
  channel: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => MessageThreadCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => MessageThreadMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => MessageThreadMinOrderByAggregateInputSchema).optional()
}).strict();

export const MessageThreadScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.MessageThreadScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => MessageThreadScalarWhereWithAggregatesInputSchema),z.lazy(() => MessageThreadScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => MessageThreadScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MessageThreadScalarWhereWithAggregatesInputSchema),z.lazy(() => MessageThreadScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  listingId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  guestId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  bpThreadId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  channelThreadId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  lastMessageSentAt: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  dateFrom: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  dateTo: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  replyTo: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  archived: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  enableReminder: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  channel: z.union([ z.lazy(() => EnumChannelWithAggregatesFilterSchema),z.lazy(() => ChannelSchema) ]).optional(),
}).strict();

export const MessageWhereInputSchema: z.ZodType<Prisma.MessageWhereInput> = z.object({
  AND: z.union([ z.lazy(() => MessageWhereInputSchema),z.lazy(() => MessageWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MessageWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MessageWhereInputSchema),z.lazy(() => MessageWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  messageThreadId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  message: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  user: z.union([ z.lazy(() => EnumMessageUserFilterSchema),z.lazy(() => MessageUserSchema) ]).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  bpMessageId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  channelMessageId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  read: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  messageThread: z.union([ z.lazy(() => MessageThreadRelationFilterSchema),z.lazy(() => MessageThreadWhereInputSchema) ]).optional(),
}).strict();

export const MessageOrderByWithRelationInputSchema: z.ZodType<Prisma.MessageOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  messageThreadId: z.lazy(() => SortOrderSchema).optional(),
  message: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  bpMessageId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  channelMessageId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  read: z.lazy(() => SortOrderSchema).optional(),
  messageThread: z.lazy(() => MessageThreadOrderByWithRelationInputSchema).optional()
}).strict();

export const MessageWhereUniqueInputSchema: z.ZodType<Prisma.MessageWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    bpMessageId: z.string(),
    channelMessageId: z.string()
  }),
  z.object({
    id: z.string(),
    bpMessageId: z.string(),
  }),
  z.object({
    id: z.string(),
    channelMessageId: z.string(),
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    bpMessageId: z.string(),
    channelMessageId: z.string(),
  }),
  z.object({
    bpMessageId: z.string(),
  }),
  z.object({
    channelMessageId: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  bpMessageId: z.string().optional(),
  channelMessageId: z.string().optional(),
  AND: z.union([ z.lazy(() => MessageWhereInputSchema),z.lazy(() => MessageWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MessageWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MessageWhereInputSchema),z.lazy(() => MessageWhereInputSchema).array() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  messageThreadId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  message: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  user: z.union([ z.lazy(() => EnumMessageUserFilterSchema),z.lazy(() => MessageUserSchema) ]).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  read: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  messageThread: z.union([ z.lazy(() => MessageThreadRelationFilterSchema),z.lazy(() => MessageThreadWhereInputSchema) ]).optional(),
}).strict());

export const MessageOrderByWithAggregationInputSchema: z.ZodType<Prisma.MessageOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  messageThreadId: z.lazy(() => SortOrderSchema).optional(),
  message: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  bpMessageId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  channelMessageId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  read: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => MessageCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => MessageMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => MessageMinOrderByAggregateInputSchema).optional()
}).strict();

export const MessageScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.MessageScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => MessageScalarWhereWithAggregatesInputSchema),z.lazy(() => MessageScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => MessageScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MessageScalarWhereWithAggregatesInputSchema),z.lazy(() => MessageScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  messageThreadId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  message: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  user: z.union([ z.lazy(() => EnumMessageUserWithAggregatesFilterSchema),z.lazy(() => MessageUserSchema) ]).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  bpMessageId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  channelMessageId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  read: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
}).strict();

export const MessageTemplateWhereInputSchema: z.ZodType<Prisma.MessageTemplateWhereInput> = z.object({
  AND: z.union([ z.lazy(() => MessageTemplateWhereInputSchema),z.lazy(() => MessageTemplateWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MessageTemplateWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MessageTemplateWhereInputSchema),z.lazy(() => MessageTemplateWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  body: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  bodyHtml: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  enabled: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  trigger: z.union([ z.lazy(() => EnumTriggerNullableFilterSchema),z.lazy(() => TriggerSchema) ]).optional().nullable(),
  triggerRange: z.union([ z.lazy(() => EnumTriggerRangeNullableFilterSchema),z.lazy(() => TriggerRangeSchema) ]).optional().nullable(),
  triggerUnit: z.union([ z.lazy(() => EnumTriggerUnitNullableFilterSchema),z.lazy(() => TriggerUnitSchema) ]).optional().nullable(),
  triggerValue: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  allListings: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  scheduledMessages: z.lazy(() => ScheduledMessageListRelationFilterSchema).optional(),
  listings: z.lazy(() => ListingListRelationFilterSchema).optional()
}).strict();

export const MessageTemplateOrderByWithRelationInputSchema: z.ZodType<Prisma.MessageTemplateOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  body: z.lazy(() => SortOrderSchema).optional(),
  bodyHtml: z.lazy(() => SortOrderSchema).optional(),
  enabled: z.lazy(() => SortOrderSchema).optional(),
  trigger: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  triggerRange: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  triggerUnit: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  triggerValue: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  allListings: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  scheduledMessages: z.lazy(() => ScheduledMessageOrderByRelationAggregateInputSchema).optional(),
  listings: z.lazy(() => ListingOrderByRelationAggregateInputSchema).optional()
}).strict();

export const MessageTemplateWhereUniqueInputSchema: z.ZodType<Prisma.MessageTemplateWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => MessageTemplateWhereInputSchema),z.lazy(() => MessageTemplateWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MessageTemplateWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MessageTemplateWhereInputSchema),z.lazy(() => MessageTemplateWhereInputSchema).array() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  body: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  bodyHtml: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  enabled: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  trigger: z.union([ z.lazy(() => EnumTriggerNullableFilterSchema),z.lazy(() => TriggerSchema) ]).optional().nullable(),
  triggerRange: z.union([ z.lazy(() => EnumTriggerRangeNullableFilterSchema),z.lazy(() => TriggerRangeSchema) ]).optional().nullable(),
  triggerUnit: z.union([ z.lazy(() => EnumTriggerUnitNullableFilterSchema),z.lazy(() => TriggerUnitSchema) ]).optional().nullable(),
  triggerValue: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  allListings: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  scheduledMessages: z.lazy(() => ScheduledMessageListRelationFilterSchema).optional(),
  listings: z.lazy(() => ListingListRelationFilterSchema).optional()
}).strict());

export const MessageTemplateOrderByWithAggregationInputSchema: z.ZodType<Prisma.MessageTemplateOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  body: z.lazy(() => SortOrderSchema).optional(),
  bodyHtml: z.lazy(() => SortOrderSchema).optional(),
  enabled: z.lazy(() => SortOrderSchema).optional(),
  trigger: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  triggerRange: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  triggerUnit: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  triggerValue: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  allListings: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => MessageTemplateCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => MessageTemplateAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => MessageTemplateMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => MessageTemplateMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => MessageTemplateSumOrderByAggregateInputSchema).optional()
}).strict();

export const MessageTemplateScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.MessageTemplateScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => MessageTemplateScalarWhereWithAggregatesInputSchema),z.lazy(() => MessageTemplateScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => MessageTemplateScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MessageTemplateScalarWhereWithAggregatesInputSchema),z.lazy(() => MessageTemplateScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  title: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  body: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  bodyHtml: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  enabled: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  trigger: z.union([ z.lazy(() => EnumTriggerNullableWithAggregatesFilterSchema),z.lazy(() => TriggerSchema) ]).optional().nullable(),
  triggerRange: z.union([ z.lazy(() => EnumTriggerRangeNullableWithAggregatesFilterSchema),z.lazy(() => TriggerRangeSchema) ]).optional().nullable(),
  triggerUnit: z.union([ z.lazy(() => EnumTriggerUnitNullableWithAggregatesFilterSchema),z.lazy(() => TriggerUnitSchema) ]).optional().nullable(),
  triggerValue: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  allListings: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const ScheduledMessageWhereInputSchema: z.ZodType<Prisma.ScheduledMessageWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ScheduledMessageWhereInputSchema),z.lazy(() => ScheduledMessageWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ScheduledMessageWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ScheduledMessageWhereInputSchema),z.lazy(() => ScheduledMessageWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  scheduledAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  reservationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  messageTemplateId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => EnumScheduledMessageStatusFilterSchema),z.lazy(() => ScheduledMessageStatusSchema) ]).optional(),
  completedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  failureMessage: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  reservation: z.union([ z.lazy(() => ReservationRelationFilterSchema),z.lazy(() => ReservationWhereInputSchema) ]).optional(),
  messageTemplate: z.union([ z.lazy(() => MessageTemplateRelationFilterSchema),z.lazy(() => MessageTemplateWhereInputSchema) ]).optional(),
}).strict();

export const ScheduledMessageOrderByWithRelationInputSchema: z.ZodType<Prisma.ScheduledMessageOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  scheduledAt: z.lazy(() => SortOrderSchema).optional(),
  reservationId: z.lazy(() => SortOrderSchema).optional(),
  messageTemplateId: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  completedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  failureMessage: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  reservation: z.lazy(() => ReservationOrderByWithRelationInputSchema).optional(),
  messageTemplate: z.lazy(() => MessageTemplateOrderByWithRelationInputSchema).optional()
}).strict();

export const ScheduledMessageWhereUniqueInputSchema: z.ZodType<Prisma.ScheduledMessageWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    reservationId_messageTemplateId: z.lazy(() => ScheduledMessageReservationIdMessageTemplateIdCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    reservationId_messageTemplateId: z.lazy(() => ScheduledMessageReservationIdMessageTemplateIdCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.string().optional(),
  reservationId_messageTemplateId: z.lazy(() => ScheduledMessageReservationIdMessageTemplateIdCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => ScheduledMessageWhereInputSchema),z.lazy(() => ScheduledMessageWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ScheduledMessageWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ScheduledMessageWhereInputSchema),z.lazy(() => ScheduledMessageWhereInputSchema).array() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  scheduledAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  reservationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  messageTemplateId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => EnumScheduledMessageStatusFilterSchema),z.lazy(() => ScheduledMessageStatusSchema) ]).optional(),
  completedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  failureMessage: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  reservation: z.union([ z.lazy(() => ReservationRelationFilterSchema),z.lazy(() => ReservationWhereInputSchema) ]).optional(),
  messageTemplate: z.union([ z.lazy(() => MessageTemplateRelationFilterSchema),z.lazy(() => MessageTemplateWhereInputSchema) ]).optional(),
}).strict());

export const ScheduledMessageOrderByWithAggregationInputSchema: z.ZodType<Prisma.ScheduledMessageOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  scheduledAt: z.lazy(() => SortOrderSchema).optional(),
  reservationId: z.lazy(() => SortOrderSchema).optional(),
  messageTemplateId: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  completedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  failureMessage: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => ScheduledMessageCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ScheduledMessageMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ScheduledMessageMinOrderByAggregateInputSchema).optional()
}).strict();

export const ScheduledMessageScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ScheduledMessageScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ScheduledMessageScalarWhereWithAggregatesInputSchema),z.lazy(() => ScheduledMessageScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ScheduledMessageScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ScheduledMessageScalarWhereWithAggregatesInputSchema),z.lazy(() => ScheduledMessageScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  scheduledAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  reservationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  messageTemplateId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => EnumScheduledMessageStatusWithAggregatesFilterSchema),z.lazy(() => ScheduledMessageStatusSchema) ]).optional(),
  completedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  failureMessage: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const RevenueWhereInputSchema: z.ZodType<Prisma.RevenueWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RevenueWhereInputSchema),z.lazy(() => RevenueWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RevenueWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RevenueWhereInputSchema),z.lazy(() => RevenueWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  reservationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  accommodation: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  pmcShare: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  discount: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  channelCommission: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  ownerStatementId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  payoutStatus: z.union([ z.lazy(() => EnumRevenuePayoutStatusFilterSchema),z.lazy(() => RevenuePayoutStatusSchema) ]).optional(),
  reservation: z.union([ z.lazy(() => ReservationRelationFilterSchema),z.lazy(() => ReservationWhereInputSchema) ]).optional(),
  fees: z.lazy(() => RevenueFeeListRelationFilterSchema).optional(),
  ownerStatement: z.union([ z.lazy(() => OwnerStatementNullableRelationFilterSchema),z.lazy(() => OwnerStatementWhereInputSchema) ]).optional().nullable(),
  payout: z.lazy(() => RevenuePayoutListRelationFilterSchema).optional()
}).strict();

export const RevenueOrderByWithRelationInputSchema: z.ZodType<Prisma.RevenueOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  reservationId: z.lazy(() => SortOrderSchema).optional(),
  accommodation: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  pmcShare: z.lazy(() => SortOrderSchema).optional(),
  discount: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  channelCommission: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ownerStatementId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  payoutStatus: z.lazy(() => SortOrderSchema).optional(),
  reservation: z.lazy(() => ReservationOrderByWithRelationInputSchema).optional(),
  fees: z.lazy(() => RevenueFeeOrderByRelationAggregateInputSchema).optional(),
  ownerStatement: z.lazy(() => OwnerStatementOrderByWithRelationInputSchema).optional(),
  payout: z.lazy(() => RevenuePayoutOrderByRelationAggregateInputSchema).optional()
}).strict();

export const RevenueWhereUniqueInputSchema: z.ZodType<Prisma.RevenueWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    reservationId: z.string()
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    reservationId: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  reservationId: z.string().optional(),
  AND: z.union([ z.lazy(() => RevenueWhereInputSchema),z.lazy(() => RevenueWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RevenueWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RevenueWhereInputSchema),z.lazy(() => RevenueWhereInputSchema).array() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  accommodation: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  pmcShare: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  discount: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  channelCommission: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  ownerStatementId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  payoutStatus: z.union([ z.lazy(() => EnumRevenuePayoutStatusFilterSchema),z.lazy(() => RevenuePayoutStatusSchema) ]).optional(),
  reservation: z.union([ z.lazy(() => ReservationRelationFilterSchema),z.lazy(() => ReservationWhereInputSchema) ]).optional(),
  fees: z.lazy(() => RevenueFeeListRelationFilterSchema).optional(),
  ownerStatement: z.union([ z.lazy(() => OwnerStatementNullableRelationFilterSchema),z.lazy(() => OwnerStatementWhereInputSchema) ]).optional().nullable(),
  payout: z.lazy(() => RevenuePayoutListRelationFilterSchema).optional()
}).strict());

export const RevenueOrderByWithAggregationInputSchema: z.ZodType<Prisma.RevenueOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  reservationId: z.lazy(() => SortOrderSchema).optional(),
  accommodation: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  pmcShare: z.lazy(() => SortOrderSchema).optional(),
  discount: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  channelCommission: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ownerStatementId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  payoutStatus: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => RevenueCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => RevenueAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => RevenueMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => RevenueMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => RevenueSumOrderByAggregateInputSchema).optional()
}).strict();

export const RevenueScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.RevenueScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => RevenueScalarWhereWithAggregatesInputSchema),z.lazy(() => RevenueScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => RevenueScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RevenueScalarWhereWithAggregatesInputSchema),z.lazy(() => RevenueScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  reservationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  accommodation: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  pmcShare: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  discount: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  channelCommission: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  ownerStatementId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  payoutStatus: z.union([ z.lazy(() => EnumRevenuePayoutStatusWithAggregatesFilterSchema),z.lazy(() => RevenuePayoutStatusSchema) ]).optional(),
}).strict();

export const RevenueTaxWhereInputSchema: z.ZodType<Prisma.RevenueTaxWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RevenueTaxWhereInputSchema),z.lazy(() => RevenueTaxWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RevenueTaxWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RevenueTaxWhereInputSchema),z.lazy(() => RevenueTaxWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  revenueId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  description: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  revenueFeeId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumRevenueDeductionTypeFilterSchema),z.lazy(() => RevenueDeductionTypeSchema) ]).optional(),
  revenueFee: z.union([ z.lazy(() => RevenueFeeRelationFilterSchema),z.lazy(() => RevenueFeeWhereInputSchema) ]).optional(),
}).strict();

export const RevenueTaxOrderByWithRelationInputSchema: z.ZodType<Prisma.RevenueTaxOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  revenueId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  revenueFeeId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  revenueFee: z.lazy(() => RevenueFeeOrderByWithRelationInputSchema).optional()
}).strict();

export const RevenueTaxWhereUniqueInputSchema: z.ZodType<Prisma.RevenueTaxWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => RevenueTaxWhereInputSchema),z.lazy(() => RevenueTaxWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RevenueTaxWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RevenueTaxWhereInputSchema),z.lazy(() => RevenueTaxWhereInputSchema).array() ]).optional(),
  revenueId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  description: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  revenueFeeId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumRevenueDeductionTypeFilterSchema),z.lazy(() => RevenueDeductionTypeSchema) ]).optional(),
  revenueFee: z.union([ z.lazy(() => RevenueFeeRelationFilterSchema),z.lazy(() => RevenueFeeWhereInputSchema) ]).optional(),
}).strict());

export const RevenueTaxOrderByWithAggregationInputSchema: z.ZodType<Prisma.RevenueTaxOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  revenueId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  revenueFeeId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => RevenueTaxCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => RevenueTaxAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => RevenueTaxMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => RevenueTaxMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => RevenueTaxSumOrderByAggregateInputSchema).optional()
}).strict();

export const RevenueTaxScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.RevenueTaxScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => RevenueTaxScalarWhereWithAggregatesInputSchema),z.lazy(() => RevenueTaxScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => RevenueTaxScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RevenueTaxScalarWhereWithAggregatesInputSchema),z.lazy(() => RevenueTaxScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  revenueId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  description: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  revenueFeeId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumRevenueDeductionTypeWithAggregatesFilterSchema),z.lazy(() => RevenueDeductionTypeSchema) ]).optional(),
}).strict();

export const RevenueFeeWhereInputSchema: z.ZodType<Prisma.RevenueFeeWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RevenueFeeWhereInputSchema),z.lazy(() => RevenueFeeWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RevenueFeeWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RevenueFeeWhereInputSchema),z.lazy(() => RevenueFeeWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  revenueId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  unit: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  pmcShare: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  taxable: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  type: z.union([ z.lazy(() => EnumRevenueEntryTypeFilterSchema),z.lazy(() => RevenueEntryTypeSchema) ]).optional(),
  revenue: z.union([ z.lazy(() => RevenueRelationFilterSchema),z.lazy(() => RevenueWhereInputSchema) ]).optional(),
  deductions: z.lazy(() => RevenueTaxListRelationFilterSchema).optional()
}).strict();

export const RevenueFeeOrderByWithRelationInputSchema: z.ZodType<Prisma.RevenueFeeOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  revenueId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  pmcShare: z.lazy(() => SortOrderSchema).optional(),
  taxable: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  revenue: z.lazy(() => RevenueOrderByWithRelationInputSchema).optional(),
  deductions: z.lazy(() => RevenueTaxOrderByRelationAggregateInputSchema).optional()
}).strict();

export const RevenueFeeWhereUniqueInputSchema: z.ZodType<Prisma.RevenueFeeWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => RevenueFeeWhereInputSchema),z.lazy(() => RevenueFeeWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RevenueFeeWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RevenueFeeWhereInputSchema),z.lazy(() => RevenueFeeWhereInputSchema).array() ]).optional(),
  revenueId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  unit: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  pmcShare: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  taxable: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  type: z.union([ z.lazy(() => EnumRevenueEntryTypeFilterSchema),z.lazy(() => RevenueEntryTypeSchema) ]).optional(),
  revenue: z.union([ z.lazy(() => RevenueRelationFilterSchema),z.lazy(() => RevenueWhereInputSchema) ]).optional(),
  deductions: z.lazy(() => RevenueTaxListRelationFilterSchema).optional()
}).strict());

export const RevenueFeeOrderByWithAggregationInputSchema: z.ZodType<Prisma.RevenueFeeOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  revenueId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  pmcShare: z.lazy(() => SortOrderSchema).optional(),
  taxable: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => RevenueFeeCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => RevenueFeeAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => RevenueFeeMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => RevenueFeeMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => RevenueFeeSumOrderByAggregateInputSchema).optional()
}).strict();

export const RevenueFeeScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.RevenueFeeScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => RevenueFeeScalarWhereWithAggregatesInputSchema),z.lazy(() => RevenueFeeScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => RevenueFeeScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RevenueFeeScalarWhereWithAggregatesInputSchema),z.lazy(() => RevenueFeeScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  revenueId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  unit: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  pmcShare: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  taxable: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  type: z.union([ z.lazy(() => EnumRevenueEntryTypeWithAggregatesFilterSchema),z.lazy(() => RevenueEntryTypeSchema) ]).optional(),
}).strict();

export const ExpenseWhereInputSchema: z.ZodType<Prisma.ExpenseWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ExpenseWhereInputSchema),z.lazy(() => ExpenseWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ExpenseWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ExpenseWhereInputSchema),z.lazy(() => ExpenseWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  amount: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  vendor: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  workOrder: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  receiptUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  invoiceUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  plaidTransactionId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  user: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  listingExpenses: z.lazy(() => ListingExpenseListRelationFilterSchema).optional(),
  plaidTransaction: z.union([ z.lazy(() => PlaidTransactionNullableRelationFilterSchema),z.lazy(() => PlaidTransactionWhereInputSchema) ]).optional().nullable(),
}).strict();

export const ExpenseOrderByWithRelationInputSchema: z.ZodType<Prisma.ExpenseOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  vendor: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  workOrder: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  receiptUrl: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  invoiceUrl: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  plaidTransactionId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseOrderByRelationAggregateInputSchema).optional(),
  plaidTransaction: z.lazy(() => PlaidTransactionOrderByWithRelationInputSchema).optional()
}).strict();

export const ExpenseWhereUniqueInputSchema: z.ZodType<Prisma.ExpenseWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    plaidTransactionId: z.string()
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    plaidTransactionId: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  plaidTransactionId: z.string().optional(),
  AND: z.union([ z.lazy(() => ExpenseWhereInputSchema),z.lazy(() => ExpenseWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ExpenseWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ExpenseWhereInputSchema),z.lazy(() => ExpenseWhereInputSchema).array() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  amount: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  vendor: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  workOrder: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  receiptUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  invoiceUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  user: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  listingExpenses: z.lazy(() => ListingExpenseListRelationFilterSchema).optional(),
  plaidTransaction: z.union([ z.lazy(() => PlaidTransactionNullableRelationFilterSchema),z.lazy(() => PlaidTransactionWhereInputSchema) ]).optional().nullable(),
}).strict());

export const ExpenseOrderByWithAggregationInputSchema: z.ZodType<Prisma.ExpenseOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  vendor: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  workOrder: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  receiptUrl: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  invoiceUrl: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  plaidTransactionId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => ExpenseCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => ExpenseAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ExpenseMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ExpenseMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => ExpenseSumOrderByAggregateInputSchema).optional()
}).strict();

export const ExpenseScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ExpenseScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ExpenseScalarWhereWithAggregatesInputSchema),z.lazy(() => ExpenseScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ExpenseScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ExpenseScalarWhereWithAggregatesInputSchema),z.lazy(() => ExpenseScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  amount: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  vendor: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  workOrder: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  receiptUrl: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  invoiceUrl: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  plaidTransactionId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const ListingExpenseWhereInputSchema: z.ZodType<Prisma.ListingExpenseWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ListingExpenseWhereInputSchema),z.lazy(() => ListingExpenseWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ListingExpenseWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ListingExpenseWhereInputSchema),z.lazy(() => ListingExpenseWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  confirmationCode: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  expenseId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  listingId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  amount: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  amountPaid: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  ownerStatementId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  expense: z.union([ z.lazy(() => ExpenseRelationFilterSchema),z.lazy(() => ExpenseWhereInputSchema) ]).optional(),
  listing: z.union([ z.lazy(() => ListingRelationFilterSchema),z.lazy(() => ListingWhereInputSchema) ]).optional(),
  ownerStatement: z.union([ z.lazy(() => OwnerStatementNullableRelationFilterSchema),z.lazy(() => OwnerStatementWhereInputSchema) ]).optional().nullable(),
}).strict();

export const ListingExpenseOrderByWithRelationInputSchema: z.ZodType<Prisma.ListingExpenseOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  confirmationCode: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  expenseId: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  amountPaid: z.lazy(() => SortOrderSchema).optional(),
  ownerStatementId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  expense: z.lazy(() => ExpenseOrderByWithRelationInputSchema).optional(),
  listing: z.lazy(() => ListingOrderByWithRelationInputSchema).optional(),
  ownerStatement: z.lazy(() => OwnerStatementOrderByWithRelationInputSchema).optional()
}).strict();

export const ListingExpenseWhereUniqueInputSchema: z.ZodType<Prisma.ListingExpenseWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => ListingExpenseWhereInputSchema),z.lazy(() => ListingExpenseWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ListingExpenseWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ListingExpenseWhereInputSchema),z.lazy(() => ListingExpenseWhereInputSchema).array() ]).optional(),
  confirmationCode: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  expenseId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  listingId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  amount: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  amountPaid: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  ownerStatementId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  expense: z.union([ z.lazy(() => ExpenseRelationFilterSchema),z.lazy(() => ExpenseWhereInputSchema) ]).optional(),
  listing: z.union([ z.lazy(() => ListingRelationFilterSchema),z.lazy(() => ListingWhereInputSchema) ]).optional(),
  ownerStatement: z.union([ z.lazy(() => OwnerStatementNullableRelationFilterSchema),z.lazy(() => OwnerStatementWhereInputSchema) ]).optional().nullable(),
}).strict());

export const ListingExpenseOrderByWithAggregationInputSchema: z.ZodType<Prisma.ListingExpenseOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  confirmationCode: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  expenseId: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  amountPaid: z.lazy(() => SortOrderSchema).optional(),
  ownerStatementId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => ListingExpenseCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => ListingExpenseAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ListingExpenseMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ListingExpenseMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => ListingExpenseSumOrderByAggregateInputSchema).optional()
}).strict();

export const ListingExpenseScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ListingExpenseScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ListingExpenseScalarWhereWithAggregatesInputSchema),z.lazy(() => ListingExpenseScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ListingExpenseScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ListingExpenseScalarWhereWithAggregatesInputSchema),z.lazy(() => ListingExpenseScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  confirmationCode: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  expenseId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  listingId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  amount: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  amountPaid: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  ownerStatementId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const OwnerStatementWhereInputSchema: z.ZodType<Prisma.OwnerStatementWhereInput> = z.object({
  AND: z.union([ z.lazy(() => OwnerStatementWhereInputSchema),z.lazy(() => OwnerStatementWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => OwnerStatementWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OwnerStatementWhereInputSchema),z.lazy(() => OwnerStatementWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  listingId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  month: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  year: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  locked: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  isCoHost: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  listing: z.union([ z.lazy(() => ListingRelationFilterSchema),z.lazy(() => ListingWhereInputSchema) ]).optional(),
  listingExpenses: z.lazy(() => ListingExpenseListRelationFilterSchema).optional(),
  revenue: z.lazy(() => RevenueListRelationFilterSchema).optional()
}).strict();

export const OwnerStatementOrderByWithRelationInputSchema: z.ZodType<Prisma.OwnerStatementOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  month: z.lazy(() => SortOrderSchema).optional(),
  year: z.lazy(() => SortOrderSchema).optional(),
  locked: z.lazy(() => SortOrderSchema).optional(),
  isCoHost: z.lazy(() => SortOrderSchema).optional(),
  listing: z.lazy(() => ListingOrderByWithRelationInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseOrderByRelationAggregateInputSchema).optional(),
  revenue: z.lazy(() => RevenueOrderByRelationAggregateInputSchema).optional()
}).strict();

export const OwnerStatementWhereUniqueInputSchema: z.ZodType<Prisma.OwnerStatementWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    listingId_month_year: z.lazy(() => OwnerStatementListingIdMonthYearCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    listingId_month_year: z.lazy(() => OwnerStatementListingIdMonthYearCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.string().optional(),
  listingId_month_year: z.lazy(() => OwnerStatementListingIdMonthYearCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => OwnerStatementWhereInputSchema),z.lazy(() => OwnerStatementWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => OwnerStatementWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OwnerStatementWhereInputSchema),z.lazy(() => OwnerStatementWhereInputSchema).array() ]).optional(),
  listingId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  month: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  year: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  locked: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  isCoHost: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  listing: z.union([ z.lazy(() => ListingRelationFilterSchema),z.lazy(() => ListingWhereInputSchema) ]).optional(),
  listingExpenses: z.lazy(() => ListingExpenseListRelationFilterSchema).optional(),
  revenue: z.lazy(() => RevenueListRelationFilterSchema).optional()
}).strict());

export const OwnerStatementOrderByWithAggregationInputSchema: z.ZodType<Prisma.OwnerStatementOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  month: z.lazy(() => SortOrderSchema).optional(),
  year: z.lazy(() => SortOrderSchema).optional(),
  locked: z.lazy(() => SortOrderSchema).optional(),
  isCoHost: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => OwnerStatementCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => OwnerStatementAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => OwnerStatementMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => OwnerStatementMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => OwnerStatementSumOrderByAggregateInputSchema).optional()
}).strict();

export const OwnerStatementScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.OwnerStatementScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => OwnerStatementScalarWhereWithAggregatesInputSchema),z.lazy(() => OwnerStatementScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => OwnerStatementScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OwnerStatementScalarWhereWithAggregatesInputSchema),z.lazy(() => OwnerStatementScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  listingId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  month: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  year: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  locked: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  isCoHost: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
}).strict();

export const PlaidItemWhereInputSchema: z.ZodType<Prisma.PlaidItemWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PlaidItemWhereInputSchema),z.lazy(() => PlaidItemWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PlaidItemWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PlaidItemWhereInputSchema),z.lazy(() => PlaidItemWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  accessToken: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  cursor: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  institution: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  institutionId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  creatorId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  creator: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  accounts: z.lazy(() => PlaidAccountListRelationFilterSchema).optional()
}).strict();

export const PlaidItemOrderByWithRelationInputSchema: z.ZodType<Prisma.PlaidItemOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  accessToken: z.lazy(() => SortOrderSchema).optional(),
  cursor: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  institution: z.lazy(() => SortOrderSchema).optional(),
  institutionId: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  creator: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  accounts: z.lazy(() => PlaidAccountOrderByRelationAggregateInputSchema).optional()
}).strict();

export const PlaidItemWhereUniqueInputSchema: z.ZodType<Prisma.PlaidItemWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    accessToken: z.string()
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    accessToken: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  accessToken: z.string().optional(),
  AND: z.union([ z.lazy(() => PlaidItemWhereInputSchema),z.lazy(() => PlaidItemWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PlaidItemWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PlaidItemWhereInputSchema),z.lazy(() => PlaidItemWhereInputSchema).array() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  cursor: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  institution: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  institutionId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  creatorId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  creator: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  accounts: z.lazy(() => PlaidAccountListRelationFilterSchema).optional()
}).strict());

export const PlaidItemOrderByWithAggregationInputSchema: z.ZodType<Prisma.PlaidItemOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  accessToken: z.lazy(() => SortOrderSchema).optional(),
  cursor: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  institution: z.lazy(() => SortOrderSchema).optional(),
  institutionId: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => PlaidItemCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => PlaidItemMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => PlaidItemMinOrderByAggregateInputSchema).optional()
}).strict();

export const PlaidItemScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.PlaidItemScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => PlaidItemScalarWhereWithAggregatesInputSchema),z.lazy(() => PlaidItemScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => PlaidItemScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PlaidItemScalarWhereWithAggregatesInputSchema),z.lazy(() => PlaidItemScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  accessToken: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  cursor: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  institution: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  institutionId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  creatorId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const PlaidAccountWhereInputSchema: z.ZodType<Prisma.PlaidAccountWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PlaidAccountWhereInputSchema),z.lazy(() => PlaidAccountWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PlaidAccountWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PlaidAccountWhereInputSchema),z.lazy(() => PlaidAccountWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  itemId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  plaidId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  mask: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  subtype: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  verificationStatus: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  item: z.union([ z.lazy(() => PlaidItemRelationFilterSchema),z.lazy(() => PlaidItemWhereInputSchema) ]).optional(),
  transactions: z.lazy(() => PlaidTransactionListRelationFilterSchema).optional()
}).strict();

export const PlaidAccountOrderByWithRelationInputSchema: z.ZodType<Prisma.PlaidAccountOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  itemId: z.lazy(() => SortOrderSchema).optional(),
  plaidId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  mask: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  subtype: z.lazy(() => SortOrderSchema).optional(),
  verificationStatus: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  item: z.lazy(() => PlaidItemOrderByWithRelationInputSchema).optional(),
  transactions: z.lazy(() => PlaidTransactionOrderByRelationAggregateInputSchema).optional()
}).strict();

export const PlaidAccountWhereUniqueInputSchema: z.ZodType<Prisma.PlaidAccountWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    plaidId: z.string()
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    plaidId: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  plaidId: z.string().optional(),
  AND: z.union([ z.lazy(() => PlaidAccountWhereInputSchema),z.lazy(() => PlaidAccountWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PlaidAccountWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PlaidAccountWhereInputSchema),z.lazy(() => PlaidAccountWhereInputSchema).array() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  itemId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  mask: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  subtype: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  verificationStatus: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  item: z.union([ z.lazy(() => PlaidItemRelationFilterSchema),z.lazy(() => PlaidItemWhereInputSchema) ]).optional(),
  transactions: z.lazy(() => PlaidTransactionListRelationFilterSchema).optional()
}).strict());

export const PlaidAccountOrderByWithAggregationInputSchema: z.ZodType<Prisma.PlaidAccountOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  itemId: z.lazy(() => SortOrderSchema).optional(),
  plaidId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  mask: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  subtype: z.lazy(() => SortOrderSchema).optional(),
  verificationStatus: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => PlaidAccountCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => PlaidAccountMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => PlaidAccountMinOrderByAggregateInputSchema).optional()
}).strict();

export const PlaidAccountScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.PlaidAccountScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => PlaidAccountScalarWhereWithAggregatesInputSchema),z.lazy(() => PlaidAccountScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => PlaidAccountScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PlaidAccountScalarWhereWithAggregatesInputSchema),z.lazy(() => PlaidAccountScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  itemId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  plaidId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  mask: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  subtype: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  verificationStatus: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const PlaidTransactionWhereInputSchema: z.ZodType<Prisma.PlaidTransactionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PlaidTransactionWhereInputSchema),z.lazy(() => PlaidTransactionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PlaidTransactionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PlaidTransactionWhereInputSchema),z.lazy(() => PlaidTransactionWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  accountId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  plaidId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => EnumPlaidImportStatusFilterSchema),z.lazy(() => PlaidImportStatusSchema) ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  amount: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  vendor: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  account: z.union([ z.lazy(() => PlaidAccountRelationFilterSchema),z.lazy(() => PlaidAccountWhereInputSchema) ]).optional(),
  expense: z.union([ z.lazy(() => ExpenseNullableRelationFilterSchema),z.lazy(() => ExpenseWhereInputSchema) ]).optional().nullable(),
  payout: z.union([ z.lazy(() => PayoutNullableRelationFilterSchema),z.lazy(() => PayoutWhereInputSchema) ]).optional().nullable(),
}).strict();

export const PlaidTransactionOrderByWithRelationInputSchema: z.ZodType<Prisma.PlaidTransactionOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  accountId: z.lazy(() => SortOrderSchema).optional(),
  plaidId: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  vendor: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  account: z.lazy(() => PlaidAccountOrderByWithRelationInputSchema).optional(),
  expense: z.lazy(() => ExpenseOrderByWithRelationInputSchema).optional(),
  payout: z.lazy(() => PayoutOrderByWithRelationInputSchema).optional()
}).strict();

export const PlaidTransactionWhereUniqueInputSchema: z.ZodType<Prisma.PlaidTransactionWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => PlaidTransactionWhereInputSchema),z.lazy(() => PlaidTransactionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PlaidTransactionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PlaidTransactionWhereInputSchema),z.lazy(() => PlaidTransactionWhereInputSchema).array() ]).optional(),
  accountId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  plaidId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => EnumPlaidImportStatusFilterSchema),z.lazy(() => PlaidImportStatusSchema) ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  amount: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  vendor: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  account: z.union([ z.lazy(() => PlaidAccountRelationFilterSchema),z.lazy(() => PlaidAccountWhereInputSchema) ]).optional(),
  expense: z.union([ z.lazy(() => ExpenseNullableRelationFilterSchema),z.lazy(() => ExpenseWhereInputSchema) ]).optional().nullable(),
  payout: z.union([ z.lazy(() => PayoutNullableRelationFilterSchema),z.lazy(() => PayoutWhereInputSchema) ]).optional().nullable(),
}).strict());

export const PlaidTransactionOrderByWithAggregationInputSchema: z.ZodType<Prisma.PlaidTransactionOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  accountId: z.lazy(() => SortOrderSchema).optional(),
  plaidId: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  vendor: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => PlaidTransactionCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => PlaidTransactionAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => PlaidTransactionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => PlaidTransactionMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => PlaidTransactionSumOrderByAggregateInputSchema).optional()
}).strict();

export const PlaidTransactionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.PlaidTransactionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => PlaidTransactionScalarWhereWithAggregatesInputSchema),z.lazy(() => PlaidTransactionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => PlaidTransactionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PlaidTransactionScalarWhereWithAggregatesInputSchema),z.lazy(() => PlaidTransactionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  accountId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  plaidId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => EnumPlaidImportStatusWithAggregatesFilterSchema),z.lazy(() => PlaidImportStatusSchema) ]).optional(),
  date: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  amount: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  vendor: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const DailyRateWhereInputSchema: z.ZodType<Prisma.DailyRateWhereInput> = z.object({
  AND: z.union([ z.lazy(() => DailyRateWhereInputSchema),z.lazy(() => DailyRateWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => DailyRateWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DailyRateWhereInputSchema),z.lazy(() => DailyRateWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  listingId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  rate: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  minStay: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  listing: z.union([ z.lazy(() => ListingRelationFilterSchema),z.lazy(() => ListingWhereInputSchema) ]).optional(),
}).strict();

export const DailyRateOrderByWithRelationInputSchema: z.ZodType<Prisma.DailyRateOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  rate: z.lazy(() => SortOrderSchema).optional(),
  minStay: z.lazy(() => SortOrderSchema).optional(),
  listing: z.lazy(() => ListingOrderByWithRelationInputSchema).optional()
}).strict();

export const DailyRateWhereUniqueInputSchema: z.ZodType<Prisma.DailyRateWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => DailyRateWhereInputSchema),z.lazy(() => DailyRateWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => DailyRateWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DailyRateWhereInputSchema),z.lazy(() => DailyRateWhereInputSchema).array() ]).optional(),
  listingId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  rate: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  minStay: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  listing: z.union([ z.lazy(() => ListingRelationFilterSchema),z.lazy(() => ListingWhereInputSchema) ]).optional(),
}).strict());

export const DailyRateOrderByWithAggregationInputSchema: z.ZodType<Prisma.DailyRateOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  rate: z.lazy(() => SortOrderSchema).optional(),
  minStay: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => DailyRateCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => DailyRateAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => DailyRateMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => DailyRateMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => DailyRateSumOrderByAggregateInputSchema).optional()
}).strict();

export const DailyRateScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.DailyRateScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => DailyRateScalarWhereWithAggregatesInputSchema),z.lazy(() => DailyRateScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => DailyRateScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DailyRateScalarWhereWithAggregatesInputSchema),z.lazy(() => DailyRateScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  listingId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  rate: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  minStay: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
}).strict();

export const PayoutWhereInputSchema: z.ZodType<Prisma.PayoutWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PayoutWhereInputSchema),z.lazy(() => PayoutWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PayoutWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PayoutWhereInputSchema),z.lazy(() => PayoutWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  amount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  allocated: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  plaidTransactionId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  plaidTransaction: z.union([ z.lazy(() => PlaidTransactionNullableRelationFilterSchema),z.lazy(() => PlaidTransactionWhereInputSchema) ]).optional().nullable(),
  revenuePayout: z.lazy(() => RevenuePayoutListRelationFilterSchema).optional()
}).strict();

export const PayoutOrderByWithRelationInputSchema: z.ZodType<Prisma.PayoutOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  allocated: z.lazy(() => SortOrderSchema).optional(),
  plaidTransactionId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  plaidTransaction: z.lazy(() => PlaidTransactionOrderByWithRelationInputSchema).optional(),
  revenuePayout: z.lazy(() => RevenuePayoutOrderByRelationAggregateInputSchema).optional()
}).strict();

export const PayoutWhereUniqueInputSchema: z.ZodType<Prisma.PayoutWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    plaidTransactionId: z.string()
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    plaidTransactionId: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  plaidTransactionId: z.string().optional(),
  AND: z.union([ z.lazy(() => PayoutWhereInputSchema),z.lazy(() => PayoutWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PayoutWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PayoutWhereInputSchema),z.lazy(() => PayoutWhereInputSchema).array() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  amount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  allocated: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  plaidTransaction: z.union([ z.lazy(() => PlaidTransactionNullableRelationFilterSchema),z.lazy(() => PlaidTransactionWhereInputSchema) ]).optional().nullable(),
  revenuePayout: z.lazy(() => RevenuePayoutListRelationFilterSchema).optional()
}).strict());

export const PayoutOrderByWithAggregationInputSchema: z.ZodType<Prisma.PayoutOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  allocated: z.lazy(() => SortOrderSchema).optional(),
  plaidTransactionId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => PayoutCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => PayoutAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => PayoutMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => PayoutMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => PayoutSumOrderByAggregateInputSchema).optional()
}).strict();

export const PayoutScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.PayoutScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => PayoutScalarWhereWithAggregatesInputSchema),z.lazy(() => PayoutScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => PayoutScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PayoutScalarWhereWithAggregatesInputSchema),z.lazy(() => PayoutScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  amount: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  allocated: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  plaidTransactionId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const RevenuePayoutWhereInputSchema: z.ZodType<Prisma.RevenuePayoutWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RevenuePayoutWhereInputSchema),z.lazy(() => RevenuePayoutWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RevenuePayoutWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RevenuePayoutWhereInputSchema),z.lazy(() => RevenuePayoutWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdById: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  payoutId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  revenueId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  amount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  createdBy: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  payout: z.union([ z.lazy(() => PayoutRelationFilterSchema),z.lazy(() => PayoutWhereInputSchema) ]).optional(),
  revenue: z.union([ z.lazy(() => RevenueRelationFilterSchema),z.lazy(() => RevenueWhereInputSchema) ]).optional(),
}).strict();

export const RevenuePayoutOrderByWithRelationInputSchema: z.ZodType<Prisma.RevenuePayoutOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  payoutId: z.lazy(() => SortOrderSchema).optional(),
  revenueId: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  payout: z.lazy(() => PayoutOrderByWithRelationInputSchema).optional(),
  revenue: z.lazy(() => RevenueOrderByWithRelationInputSchema).optional()
}).strict();

export const RevenuePayoutWhereUniqueInputSchema: z.ZodType<Prisma.RevenuePayoutWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => RevenuePayoutWhereInputSchema),z.lazy(() => RevenuePayoutWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RevenuePayoutWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RevenuePayoutWhereInputSchema),z.lazy(() => RevenuePayoutWhereInputSchema).array() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdById: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  payoutId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  revenueId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  amount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  createdBy: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  payout: z.union([ z.lazy(() => PayoutRelationFilterSchema),z.lazy(() => PayoutWhereInputSchema) ]).optional(),
  revenue: z.union([ z.lazy(() => RevenueRelationFilterSchema),z.lazy(() => RevenueWhereInputSchema) ]).optional(),
}).strict());

export const RevenuePayoutOrderByWithAggregationInputSchema: z.ZodType<Prisma.RevenuePayoutOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  payoutId: z.lazy(() => SortOrderSchema).optional(),
  revenueId: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => RevenuePayoutCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => RevenuePayoutAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => RevenuePayoutMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => RevenuePayoutMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => RevenuePayoutSumOrderByAggregateInputSchema).optional()
}).strict();

export const RevenuePayoutScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.RevenuePayoutScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => RevenuePayoutScalarWhereWithAggregatesInputSchema),z.lazy(() => RevenuePayoutScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => RevenuePayoutScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RevenuePayoutScalarWhereWithAggregatesInputSchema),z.lazy(() => RevenuePayoutScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  createdById: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  payoutId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  revenueId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  amount: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
}).strict();

export const AccountCreateInputSchema: z.ZodType<Prisma.AccountCreateInput> = z.object({
  id: z.string().optional(),
  type: z.string(),
  provider: z.string(),
  providerAccountId: z.string(),
  refresh_token: z.string().optional().nullable(),
  access_token: z.string().optional().nullable(),
  expires_at: z.number().optional().nullable(),
  token_type: z.string().optional().nullable(),
  scope: z.string().optional().nullable(),
  id_token: z.string().optional().nullable(),
  session_state: z.string().optional().nullable(),
  user: z.lazy(() => UserCreateNestedOneWithoutAccountsInputSchema)
}).strict();

export const AccountUncheckedCreateInputSchema: z.ZodType<Prisma.AccountUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  userId: z.string(),
  type: z.string(),
  provider: z.string(),
  providerAccountId: z.string(),
  refresh_token: z.string().optional().nullable(),
  access_token: z.string().optional().nullable(),
  expires_at: z.number().optional().nullable(),
  token_type: z.string().optional().nullable(),
  scope: z.string().optional().nullable(),
  id_token: z.string().optional().nullable(),
  session_state: z.string().optional().nullable()
}).strict();

export const AccountUpdateInputSchema: z.ZodType<Prisma.AccountUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  provider: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerAccountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  refresh_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  access_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expires_at: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token_type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  session_state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountUncheckedUpdateInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  provider: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerAccountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  refresh_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  access_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expires_at: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token_type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  session_state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AccountCreateManyInputSchema: z.ZodType<Prisma.AccountCreateManyInput> = z.object({
  id: z.string().optional(),
  userId: z.string(),
  type: z.string(),
  provider: z.string(),
  providerAccountId: z.string(),
  refresh_token: z.string().optional().nullable(),
  access_token: z.string().optional().nullable(),
  expires_at: z.number().optional().nullable(),
  token_type: z.string().optional().nullable(),
  scope: z.string().optional().nullable(),
  id_token: z.string().optional().nullable(),
  session_state: z.string().optional().nullable()
}).strict();

export const AccountUpdateManyMutationInputSchema: z.ZodType<Prisma.AccountUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  provider: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerAccountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  refresh_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  access_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expires_at: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token_type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  session_state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AccountUncheckedUpdateManyInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  provider: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerAccountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  refresh_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  access_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expires_at: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token_type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  session_state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SessionCreateInputSchema: z.ZodType<Prisma.SessionCreateInput> = z.object({
  id: z.string().optional(),
  sessionToken: z.string(),
  expires: z.coerce.date(),
  user: z.lazy(() => UserCreateNestedOneWithoutSessionsInputSchema)
}).strict();

export const SessionUncheckedCreateInputSchema: z.ZodType<Prisma.SessionUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  sessionToken: z.string(),
  userId: z.string(),
  expires: z.coerce.date()
}).strict();

export const SessionUpdateInputSchema: z.ZodType<Prisma.SessionUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sessionToken: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutSessionsNestedInputSchema).optional()
}).strict();

export const SessionUncheckedUpdateInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sessionToken: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionCreateManyInputSchema: z.ZodType<Prisma.SessionCreateManyInput> = z.object({
  id: z.string().optional(),
  sessionToken: z.string(),
  userId: z.string(),
  expires: z.coerce.date()
}).strict();

export const SessionUpdateManyMutationInputSchema: z.ZodType<Prisma.SessionUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sessionToken: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sessionToken: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserCreateInputSchema: z.ZodType<Prisma.UserCreateInput> = z.object({
  id: z.string().optional(),
  name: z.string().optional().nullable(),
  email: z.string(),
  emailVerified: z.coerce.date().optional().nullable(),
  image: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  globalRole: z.lazy(() => GlobalRoleSchema).optional(),
  organizationRole: z.lazy(() => OrganizationRoleSchema).optional().nullable(),
  ownerEntity: z.string().optional().nullable(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  managedListings: z.lazy(() => ListingCreateNestedManyWithoutPropertyManagerInputSchema).optional(),
  ownedListings: z.lazy(() => ListingCreateNestedManyWithoutPropertyOwnerInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutUserInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionCreateNestedOneWithoutOwnerInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemCreateNestedManyWithoutCreatorInputSchema).optional(),
  revenuePayouts: z.lazy(() => RevenuePayoutCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserUncheckedCreateInputSchema: z.ZodType<Prisma.UserUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  name: z.string().optional().nullable(),
  email: z.string(),
  emailVerified: z.coerce.date().optional().nullable(),
  image: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  globalRole: z.lazy(() => GlobalRoleSchema).optional(),
  organizationId: z.string().optional().nullable(),
  organizationRole: z.lazy(() => OrganizationRoleSchema).optional().nullable(),
  ownerEntity: z.string().optional().nullable(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  managedListings: z.lazy(() => ListingUncheckedCreateNestedManyWithoutPropertyManagerInputSchema).optional(),
  ownedListings: z.lazy(() => ListingUncheckedCreateNestedManyWithoutPropertyOwnerInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionUncheckedCreateNestedOneWithoutOwnerInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  revenuePayouts: z.lazy(() => RevenuePayoutUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserUpdateInputSchema: z.ZodType<Prisma.UserUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  globalRole: z.union([ z.lazy(() => GlobalRoleSchema),z.lazy(() => EnumGlobalRoleFieldUpdateOperationsInputSchema) ]).optional(),
  organizationRole: z.union([ z.lazy(() => OrganizationRoleSchema),z.lazy(() => NullableEnumOrganizationRoleFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerEntity: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  managedListings: z.lazy(() => ListingUpdateManyWithoutPropertyManagerNestedInputSchema).optional(),
  ownedListings: z.lazy(() => ListingUpdateManyWithoutPropertyOwnerNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutUserNestedInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionUpdateOneWithoutOwnerNestedInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemUpdateManyWithoutCreatorNestedInputSchema).optional(),
  revenuePayouts: z.lazy(() => RevenuePayoutUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateInputSchema: z.ZodType<Prisma.UserUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  globalRole: z.union([ z.lazy(() => GlobalRoleSchema),z.lazy(() => EnumGlobalRoleFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationRole: z.union([ z.lazy(() => OrganizationRoleSchema),z.lazy(() => NullableEnumOrganizationRoleFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerEntity: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  managedListings: z.lazy(() => ListingUncheckedUpdateManyWithoutPropertyManagerNestedInputSchema).optional(),
  ownedListings: z.lazy(() => ListingUncheckedUpdateManyWithoutPropertyOwnerNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionUncheckedUpdateOneWithoutOwnerNestedInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  revenuePayouts: z.lazy(() => RevenuePayoutUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const UserCreateManyInputSchema: z.ZodType<Prisma.UserCreateManyInput> = z.object({
  id: z.string().optional(),
  name: z.string().optional().nullable(),
  email: z.string(),
  emailVerified: z.coerce.date().optional().nullable(),
  image: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  globalRole: z.lazy(() => GlobalRoleSchema).optional(),
  organizationId: z.string().optional().nullable(),
  organizationRole: z.lazy(() => OrganizationRoleSchema).optional().nullable(),
  ownerEntity: z.string().optional().nullable()
}).strict();

export const UserUpdateManyMutationInputSchema: z.ZodType<Prisma.UserUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  globalRole: z.union([ z.lazy(() => GlobalRoleSchema),z.lazy(() => EnumGlobalRoleFieldUpdateOperationsInputSchema) ]).optional(),
  organizationRole: z.union([ z.lazy(() => OrganizationRoleSchema),z.lazy(() => NullableEnumOrganizationRoleFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerEntity: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UserUncheckedUpdateManyInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  globalRole: z.union([ z.lazy(() => GlobalRoleSchema),z.lazy(() => EnumGlobalRoleFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationRole: z.union([ z.lazy(() => OrganizationRoleSchema),z.lazy(() => NullableEnumOrganizationRoleFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerEntity: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const VerificationTokenCreateInputSchema: z.ZodType<Prisma.VerificationTokenCreateInput> = z.object({
  identifier: z.string(),
  token: z.string(),
  expires: z.coerce.date()
}).strict();

export const VerificationTokenUncheckedCreateInputSchema: z.ZodType<Prisma.VerificationTokenUncheckedCreateInput> = z.object({
  identifier: z.string(),
  token: z.string(),
  expires: z.coerce.date()
}).strict();

export const VerificationTokenUpdateInputSchema: z.ZodType<Prisma.VerificationTokenUpdateInput> = z.object({
  identifier: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const VerificationTokenUncheckedUpdateInputSchema: z.ZodType<Prisma.VerificationTokenUncheckedUpdateInput> = z.object({
  identifier: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const VerificationTokenCreateManyInputSchema: z.ZodType<Prisma.VerificationTokenCreateManyInput> = z.object({
  identifier: z.string(),
  token: z.string(),
  expires: z.coerce.date()
}).strict();

export const VerificationTokenUpdateManyMutationInputSchema: z.ZodType<Prisma.VerificationTokenUpdateManyMutationInput> = z.object({
  identifier: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const VerificationTokenUncheckedUpdateManyInputSchema: z.ZodType<Prisma.VerificationTokenUncheckedUpdateManyInput> = z.object({
  identifier: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const OrganizationCreateInputSchema: z.ZodType<Prisma.OrganizationCreateInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  language: z.string().optional(),
  adminName: z.string(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  website: z.string(),
  phone: z.string(),
  currency: z.string().optional(),
  startDate: z.coerce.date().optional(),
  directBooking: z.boolean().optional(),
  logoUrl: z.string().optional().nullable(),
  users: z.lazy(() => UserCreateNestedManyWithoutOrganizationInputSchema).optional(),
  listings: z.lazy(() => ListingCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionCreateNestedOneWithoutOrganizationInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateCreateNestedManyWithoutOrganizationInputSchema).optional(),
  guests: z.lazy(() => GuestCreateNestedManyWithoutOrganizationInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemCreateNestedManyWithoutOrganizationInputSchema).optional(),
  priceLabsConnection: z.lazy(() => PriceLabsConnectionCreateNestedOneWithoutOrganizationInputSchema).optional(),
  stripeConnection: z.lazy(() => StripeConnectionCreateNestedOneWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  language: z.string().optional(),
  adminName: z.string(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  website: z.string(),
  phone: z.string(),
  currency: z.string().optional(),
  startDate: z.coerce.date().optional(),
  directBooking: z.boolean().optional(),
  logoUrl: z.string().optional().nullable(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  listings: z.lazy(() => ListingUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionUncheckedCreateNestedOneWithoutOrganizationInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  guests: z.lazy(() => GuestUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  priceLabsConnection: z.lazy(() => PriceLabsConnectionUncheckedCreateNestedOneWithoutOrganizationInputSchema).optional(),
  stripeConnection: z.lazy(() => StripeConnectionUncheckedCreateNestedOneWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUpdateInputSchema: z.ZodType<Prisma.OrganizationUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  adminName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  website: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  directBooking: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  logoUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UserUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  listings: z.lazy(() => ListingUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionUpdateOneWithoutOrganizationNestedInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  guests: z.lazy(() => GuestUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  priceLabsConnection: z.lazy(() => PriceLabsConnectionUpdateOneWithoutOrganizationNestedInputSchema).optional(),
  stripeConnection: z.lazy(() => StripeConnectionUpdateOneWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  adminName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  website: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  directBooking: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  logoUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  listings: z.lazy(() => ListingUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionUncheckedUpdateOneWithoutOrganizationNestedInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  guests: z.lazy(() => GuestUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  priceLabsConnection: z.lazy(() => PriceLabsConnectionUncheckedUpdateOneWithoutOrganizationNestedInputSchema).optional(),
  stripeConnection: z.lazy(() => StripeConnectionUncheckedUpdateOneWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationCreateManyInputSchema: z.ZodType<Prisma.OrganizationCreateManyInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  language: z.string().optional(),
  adminName: z.string(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  website: z.string(),
  phone: z.string(),
  currency: z.string().optional(),
  startDate: z.coerce.date().optional(),
  directBooking: z.boolean().optional(),
  logoUrl: z.string().optional().nullable()
}).strict();

export const OrganizationUpdateManyMutationInputSchema: z.ZodType<Prisma.OrganizationUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  adminName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  website: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  directBooking: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  logoUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const OrganizationUncheckedUpdateManyInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  adminName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  website: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  directBooking: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  logoUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const BookingPalConnectionCreateInputSchema: z.ZodType<Prisma.BookingPalConnectionCreateInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  companyId: z.number(),
  email: z.string(),
  password: z.string(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutBookingPalConnectionInputSchema).optional(),
  owner: z.lazy(() => UserCreateNestedOneWithoutBookingPalConnectionInputSchema).optional()
}).strict();

export const BookingPalConnectionUncheckedCreateInputSchema: z.ZodType<Prisma.BookingPalConnectionUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organizationId: z.string().optional().nullable(),
  companyId: z.number(),
  email: z.string(),
  password: z.string(),
  ownerId: z.string().optional().nullable()
}).strict();

export const BookingPalConnectionUpdateInputSchema: z.ZodType<Prisma.BookingPalConnectionUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  companyId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutBookingPalConnectionNestedInputSchema).optional(),
  owner: z.lazy(() => UserUpdateOneWithoutBookingPalConnectionNestedInputSchema).optional()
}).strict();

export const BookingPalConnectionUncheckedUpdateInputSchema: z.ZodType<Prisma.BookingPalConnectionUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companyId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ownerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const BookingPalConnectionCreateManyInputSchema: z.ZodType<Prisma.BookingPalConnectionCreateManyInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organizationId: z.string().optional().nullable(),
  companyId: z.number(),
  email: z.string(),
  password: z.string(),
  ownerId: z.string().optional().nullable()
}).strict();

export const BookingPalConnectionUpdateManyMutationInputSchema: z.ZodType<Prisma.BookingPalConnectionUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  companyId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const BookingPalConnectionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.BookingPalConnectionUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companyId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ownerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PriceLabsConnectionCreateInputSchema: z.ZodType<Prisma.PriceLabsConnectionCreateInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  accountEmail: z.string(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutPriceLabsConnectionInputSchema).optional()
}).strict();

export const PriceLabsConnectionUncheckedCreateInputSchema: z.ZodType<Prisma.PriceLabsConnectionUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  accountEmail: z.string(),
  organizationId: z.string().optional().nullable()
}).strict();

export const PriceLabsConnectionUpdateInputSchema: z.ZodType<Prisma.PriceLabsConnectionUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  accountEmail: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutPriceLabsConnectionNestedInputSchema).optional()
}).strict();

export const PriceLabsConnectionUncheckedUpdateInputSchema: z.ZodType<Prisma.PriceLabsConnectionUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  accountEmail: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PriceLabsConnectionCreateManyInputSchema: z.ZodType<Prisma.PriceLabsConnectionCreateManyInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  accountEmail: z.string(),
  organizationId: z.string().optional().nullable()
}).strict();

export const PriceLabsConnectionUpdateManyMutationInputSchema: z.ZodType<Prisma.PriceLabsConnectionUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  accountEmail: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PriceLabsConnectionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.PriceLabsConnectionUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  accountEmail: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const StripeConnectionCreateInputSchema: z.ZodType<Prisma.StripeConnectionCreateInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  accountId: z.string(),
  detailsSubmitted: z.boolean().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutStripeConnectionInputSchema)
}).strict();

export const StripeConnectionUncheckedCreateInputSchema: z.ZodType<Prisma.StripeConnectionUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organizationId: z.string(),
  accountId: z.string(),
  detailsSubmitted: z.boolean().optional()
}).strict();

export const StripeConnectionUpdateInputSchema: z.ZodType<Prisma.StripeConnectionUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  accountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  detailsSubmitted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutStripeConnectionNestedInputSchema).optional()
}).strict();

export const StripeConnectionUncheckedUpdateInputSchema: z.ZodType<Prisma.StripeConnectionUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  detailsSubmitted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const StripeConnectionCreateManyInputSchema: z.ZodType<Prisma.StripeConnectionCreateManyInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organizationId: z.string(),
  accountId: z.string(),
  detailsSubmitted: z.boolean().optional()
}).strict();

export const StripeConnectionUpdateManyMutationInputSchema: z.ZodType<Prisma.StripeConnectionUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  accountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  detailsSubmitted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const StripeConnectionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.StripeConnectionUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  detailsSubmitted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ListingCreateInputSchema: z.ZodType<Prisma.ListingCreateInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  unitType: z.lazy(() => UnitTypeSchema),
  beds: z.number(),
  baths: z.number(),
  guests: z.number(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  timeZone: z.string(),
  airbnbRemitsTaxes: z.boolean().optional(),
  wifiName: z.string().optional().nullable(),
  wifiPassword: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  bpProductId: z.string().optional().nullable(),
  doorCode: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  basePrice: z.number().optional(),
  iCalKey: z.string().optional().nullable(),
  content: z.lazy(() => ContentCreateNestedOneWithoutListingInputSchema).optional(),
  rules: z.lazy(() => RulesCreateNestedOneWithoutListingInputSchema).optional(),
  pricing: z.lazy(() => PricingCreateNestedOneWithoutListingInputSchema).optional(),
  availability: z.lazy(() => AvailabilityCreateNestedOneWithoutListingInputSchema).optional(),
  amenities: z.lazy(() => AmenityCreateNestedManyWithoutListingInputSchema).optional(),
  fees: z.lazy(() => FeeCreateNestedManyWithoutListingInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesCreateNestedOneWithoutListingInputSchema).optional(),
  events: z.lazy(() => CalendarEventCreateNestedManyWithoutListingInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateCreateNestedManyWithoutListingsInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutListingsInputSchema),
  deductions: z.lazy(() => DeductionsCreateNestedOneWithoutListingInputSchema).optional(),
  propertyManager: z.lazy(() => UserCreateNestedOneWithoutManagedListingsInputSchema),
  propertyOwner: z.lazy(() => UserCreateNestedOneWithoutOwnedListingsInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadCreateNestedManyWithoutListingInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseCreateNestedManyWithoutListingInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementCreateNestedManyWithoutListingInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateCreateNestedManyWithoutListingInputSchema).optional(),
  keys: z.lazy(() => ListingKeyCreateNestedManyWithoutListingInputSchema).optional()
}).strict();

export const ListingUncheckedCreateInputSchema: z.ZodType<Prisma.ListingUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  unitType: z.lazy(() => UnitTypeSchema),
  beds: z.number(),
  baths: z.number(),
  guests: z.number(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  timeZone: z.string(),
  airbnbRemitsTaxes: z.boolean().optional(),
  organizationId: z.string(),
  propertyManagerId: z.string(),
  propertyOwnerId: z.string().optional().nullable(),
  wifiName: z.string().optional().nullable(),
  wifiPassword: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  bpProductId: z.string().optional().nullable(),
  doorCode: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  basePrice: z.number().optional(),
  iCalKey: z.string().optional().nullable(),
  content: z.lazy(() => ContentUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  rules: z.lazy(() => RulesUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  pricing: z.lazy(() => PricingUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  amenities: z.lazy(() => AmenityUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  fees: z.lazy(() => FeeUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  events: z.lazy(() => CalendarEventUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUncheckedCreateNestedManyWithoutListingsInputSchema).optional(),
  deductions: z.lazy(() => DeductionsUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  keys: z.lazy(() => ListingKeyUncheckedCreateNestedManyWithoutListingInputSchema).optional()
}).strict();

export const ListingUpdateInputSchema: z.ZodType<Prisma.ListingUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  unitType: z.union([ z.lazy(() => UnitTypeSchema),z.lazy(() => EnumUnitTypeFieldUpdateOperationsInputSchema) ]).optional(),
  beds: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  baths: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  guests: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timeZone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  airbnbRemitsTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  wifiName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiPassword: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bpProductId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doorCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  basePrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  iCalKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  content: z.lazy(() => ContentUpdateOneWithoutListingNestedInputSchema).optional(),
  rules: z.lazy(() => RulesUpdateOneWithoutListingNestedInputSchema).optional(),
  pricing: z.lazy(() => PricingUpdateOneWithoutListingNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUpdateOneWithoutListingNestedInputSchema).optional(),
  amenities: z.lazy(() => AmenityUpdateManyWithoutListingNestedInputSchema).optional(),
  fees: z.lazy(() => FeeUpdateManyWithoutListingNestedInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesUpdateOneWithoutListingNestedInputSchema).optional(),
  events: z.lazy(() => CalendarEventUpdateManyWithoutListingNestedInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUpdateManyWithoutListingsNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutListingsNestedInputSchema).optional(),
  deductions: z.lazy(() => DeductionsUpdateOneWithoutListingNestedInputSchema).optional(),
  propertyManager: z.lazy(() => UserUpdateOneRequiredWithoutManagedListingsNestedInputSchema).optional(),
  propertyOwner: z.lazy(() => UserUpdateOneWithoutOwnedListingsNestedInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUpdateManyWithoutListingNestedInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUpdateManyWithoutListingNestedInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementUpdateManyWithoutListingNestedInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateUpdateManyWithoutListingNestedInputSchema).optional(),
  keys: z.lazy(() => ListingKeyUpdateManyWithoutListingNestedInputSchema).optional()
}).strict();

export const ListingUncheckedUpdateInputSchema: z.ZodType<Prisma.ListingUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  unitType: z.union([ z.lazy(() => UnitTypeSchema),z.lazy(() => EnumUnitTypeFieldUpdateOperationsInputSchema) ]).optional(),
  beds: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  baths: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  guests: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timeZone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  airbnbRemitsTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  propertyManagerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  propertyOwnerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiPassword: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bpProductId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doorCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  basePrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  iCalKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  content: z.lazy(() => ContentUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  rules: z.lazy(() => RulesUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  pricing: z.lazy(() => PricingUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  amenities: z.lazy(() => AmenityUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  fees: z.lazy(() => FeeUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  events: z.lazy(() => CalendarEventUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUncheckedUpdateManyWithoutListingsNestedInputSchema).optional(),
  deductions: z.lazy(() => DeductionsUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  keys: z.lazy(() => ListingKeyUncheckedUpdateManyWithoutListingNestedInputSchema).optional()
}).strict();

export const ListingCreateManyInputSchema: z.ZodType<Prisma.ListingCreateManyInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  unitType: z.lazy(() => UnitTypeSchema),
  beds: z.number(),
  baths: z.number(),
  guests: z.number(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  timeZone: z.string(),
  airbnbRemitsTaxes: z.boolean().optional(),
  organizationId: z.string(),
  propertyManagerId: z.string(),
  propertyOwnerId: z.string().optional().nullable(),
  wifiName: z.string().optional().nullable(),
  wifiPassword: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  bpProductId: z.string().optional().nullable(),
  doorCode: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  basePrice: z.number().optional(),
  iCalKey: z.string().optional().nullable()
}).strict();

export const ListingUpdateManyMutationInputSchema: z.ZodType<Prisma.ListingUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  unitType: z.union([ z.lazy(() => UnitTypeSchema),z.lazy(() => EnumUnitTypeFieldUpdateOperationsInputSchema) ]).optional(),
  beds: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  baths: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  guests: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timeZone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  airbnbRemitsTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  wifiName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiPassword: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bpProductId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doorCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  basePrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  iCalKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ListingUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ListingUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  unitType: z.union([ z.lazy(() => UnitTypeSchema),z.lazy(() => EnumUnitTypeFieldUpdateOperationsInputSchema) ]).optional(),
  beds: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  baths: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  guests: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timeZone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  airbnbRemitsTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  propertyManagerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  propertyOwnerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiPassword: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bpProductId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doorCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  basePrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  iCalKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ListingKeyCreateInputSchema: z.ZodType<Prisma.ListingKeyCreateInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  keyType: z.lazy(() => KeyTypeSchema),
  listing: z.lazy(() => ListingCreateNestedOneWithoutKeysInputSchema)
}).strict();

export const ListingKeyUncheckedCreateInputSchema: z.ZodType<Prisma.ListingKeyUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  listingId: z.string(),
  keyType: z.lazy(() => KeyTypeSchema)
}).strict();

export const ListingKeyUpdateInputSchema: z.ZodType<Prisma.ListingKeyUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  keyType: z.union([ z.lazy(() => KeyTypeSchema),z.lazy(() => EnumKeyTypeFieldUpdateOperationsInputSchema) ]).optional(),
  listing: z.lazy(() => ListingUpdateOneRequiredWithoutKeysNestedInputSchema).optional()
}).strict();

export const ListingKeyUncheckedUpdateInputSchema: z.ZodType<Prisma.ListingKeyUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  listingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  keyType: z.union([ z.lazy(() => KeyTypeSchema),z.lazy(() => EnumKeyTypeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ListingKeyCreateManyInputSchema: z.ZodType<Prisma.ListingKeyCreateManyInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  listingId: z.string(),
  keyType: z.lazy(() => KeyTypeSchema)
}).strict();

export const ListingKeyUpdateManyMutationInputSchema: z.ZodType<Prisma.ListingKeyUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  keyType: z.union([ z.lazy(() => KeyTypeSchema),z.lazy(() => EnumKeyTypeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ListingKeyUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ListingKeyUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  listingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  keyType: z.union([ z.lazy(() => KeyTypeSchema),z.lazy(() => EnumKeyTypeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ContentCreateInputSchema: z.ZodType<Prisma.ContentCreateInput> = z.object({
  id: z.string().optional(),
  photos: z.union([ z.lazy(() => ContentCreatephotosInputSchema),z.string().array() ]).optional(),
  title: z.string(),
  description: z.string(),
  aiInfo: z.string().optional().nullable(),
  listing: z.lazy(() => ListingCreateNestedOneWithoutContentInputSchema),
  bedrooms: z.lazy(() => BedroomCreateNestedManyWithoutContentInputSchema).optional()
}).strict();

export const ContentUncheckedCreateInputSchema: z.ZodType<Prisma.ContentUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  listingId: z.string(),
  photos: z.union([ z.lazy(() => ContentCreatephotosInputSchema),z.string().array() ]).optional(),
  title: z.string(),
  description: z.string(),
  aiInfo: z.string().optional().nullable(),
  bedrooms: z.lazy(() => BedroomUncheckedCreateNestedManyWithoutContentInputSchema).optional()
}).strict();

export const ContentUpdateInputSchema: z.ZodType<Prisma.ContentUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  photos: z.union([ z.lazy(() => ContentUpdatephotosInputSchema),z.string().array() ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  aiInfo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  listing: z.lazy(() => ListingUpdateOneRequiredWithoutContentNestedInputSchema).optional(),
  bedrooms: z.lazy(() => BedroomUpdateManyWithoutContentNestedInputSchema).optional()
}).strict();

export const ContentUncheckedUpdateInputSchema: z.ZodType<Prisma.ContentUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  listingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  photos: z.union([ z.lazy(() => ContentUpdatephotosInputSchema),z.string().array() ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  aiInfo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bedrooms: z.lazy(() => BedroomUncheckedUpdateManyWithoutContentNestedInputSchema).optional()
}).strict();

export const ContentCreateManyInputSchema: z.ZodType<Prisma.ContentCreateManyInput> = z.object({
  id: z.string().optional(),
  listingId: z.string(),
  photos: z.union([ z.lazy(() => ContentCreatephotosInputSchema),z.string().array() ]).optional(),
  title: z.string(),
  description: z.string(),
  aiInfo: z.string().optional().nullable()
}).strict();

export const ContentUpdateManyMutationInputSchema: z.ZodType<Prisma.ContentUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  photos: z.union([ z.lazy(() => ContentUpdatephotosInputSchema),z.string().array() ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  aiInfo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ContentUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ContentUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  listingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  photos: z.union([ z.lazy(() => ContentUpdatephotosInputSchema),z.string().array() ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  aiInfo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const RulesCreateInputSchema: z.ZodType<Prisma.RulesCreateInput> = z.object({
  id: z.string().optional(),
  pets: z.boolean().optional(),
  children: z.boolean().optional(),
  smoking: z.boolean().optional(),
  deposit: z.boolean().optional(),
  house: z.string().optional().nullable(),
  listing: z.lazy(() => ListingCreateNestedOneWithoutRulesInputSchema)
}).strict();

export const RulesUncheckedCreateInputSchema: z.ZodType<Prisma.RulesUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  listingId: z.string(),
  pets: z.boolean().optional(),
  children: z.boolean().optional(),
  smoking: z.boolean().optional(),
  deposit: z.boolean().optional(),
  house: z.string().optional().nullable()
}).strict();

export const RulesUpdateInputSchema: z.ZodType<Prisma.RulesUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  pets: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  children: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  smoking: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deposit: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  house: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  listing: z.lazy(() => ListingUpdateOneRequiredWithoutRulesNestedInputSchema).optional()
}).strict();

export const RulesUncheckedUpdateInputSchema: z.ZodType<Prisma.RulesUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  listingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  pets: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  children: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  smoking: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deposit: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  house: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const RulesCreateManyInputSchema: z.ZodType<Prisma.RulesCreateManyInput> = z.object({
  id: z.string().optional(),
  listingId: z.string(),
  pets: z.boolean().optional(),
  children: z.boolean().optional(),
  smoking: z.boolean().optional(),
  deposit: z.boolean().optional(),
  house: z.string().optional().nullable()
}).strict();

export const RulesUpdateManyMutationInputSchema: z.ZodType<Prisma.RulesUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  pets: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  children: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  smoking: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deposit: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  house: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const RulesUncheckedUpdateManyInputSchema: z.ZodType<Prisma.RulesUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  listingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  pets: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  children: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  smoking: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deposit: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  house: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PricingCreateInputSchema: z.ZodType<Prisma.PricingCreateInput> = z.object({
  id: z.string().optional(),
  minimum: z.number(),
  weekday: z.number(),
  weekend: z.number(),
  minStay: z.number(),
  maxStay: z.number(),
  dynamicPricing: z.lazy(() => DynamicPricingSchema).optional(),
  listing: z.lazy(() => ListingCreateNestedOneWithoutPricingInputSchema),
  dates: z.lazy(() => PricingDateCreateNestedManyWithoutPricingInputSchema).optional(),
  discounts: z.lazy(() => DiscountCreateNestedManyWithoutPricingInputSchema).optional()
}).strict();

export const PricingUncheckedCreateInputSchema: z.ZodType<Prisma.PricingUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  listingId: z.string(),
  minimum: z.number(),
  weekday: z.number(),
  weekend: z.number(),
  minStay: z.number(),
  maxStay: z.number(),
  dynamicPricing: z.lazy(() => DynamicPricingSchema).optional(),
  dates: z.lazy(() => PricingDateUncheckedCreateNestedManyWithoutPricingInputSchema).optional(),
  discounts: z.lazy(() => DiscountUncheckedCreateNestedManyWithoutPricingInputSchema).optional()
}).strict();

export const PricingUpdateInputSchema: z.ZodType<Prisma.PricingUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  minimum: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  weekday: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  weekend: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  minStay: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  maxStay: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  dynamicPricing: z.union([ z.lazy(() => DynamicPricingSchema),z.lazy(() => EnumDynamicPricingFieldUpdateOperationsInputSchema) ]).optional(),
  listing: z.lazy(() => ListingUpdateOneRequiredWithoutPricingNestedInputSchema).optional(),
  dates: z.lazy(() => PricingDateUpdateManyWithoutPricingNestedInputSchema).optional(),
  discounts: z.lazy(() => DiscountUpdateManyWithoutPricingNestedInputSchema).optional()
}).strict();

export const PricingUncheckedUpdateInputSchema: z.ZodType<Prisma.PricingUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  listingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  minimum: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  weekday: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  weekend: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  minStay: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  maxStay: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  dynamicPricing: z.union([ z.lazy(() => DynamicPricingSchema),z.lazy(() => EnumDynamicPricingFieldUpdateOperationsInputSchema) ]).optional(),
  dates: z.lazy(() => PricingDateUncheckedUpdateManyWithoutPricingNestedInputSchema).optional(),
  discounts: z.lazy(() => DiscountUncheckedUpdateManyWithoutPricingNestedInputSchema).optional()
}).strict();

export const PricingCreateManyInputSchema: z.ZodType<Prisma.PricingCreateManyInput> = z.object({
  id: z.string().optional(),
  listingId: z.string(),
  minimum: z.number(),
  weekday: z.number(),
  weekend: z.number(),
  minStay: z.number(),
  maxStay: z.number(),
  dynamicPricing: z.lazy(() => DynamicPricingSchema).optional()
}).strict();

export const PricingUpdateManyMutationInputSchema: z.ZodType<Prisma.PricingUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  minimum: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  weekday: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  weekend: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  minStay: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  maxStay: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  dynamicPricing: z.union([ z.lazy(() => DynamicPricingSchema),z.lazy(() => EnumDynamicPricingFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PricingUncheckedUpdateManyInputSchema: z.ZodType<Prisma.PricingUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  listingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  minimum: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  weekday: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  weekend: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  minStay: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  maxStay: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  dynamicPricing: z.union([ z.lazy(() => DynamicPricingSchema),z.lazy(() => EnumDynamicPricingFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PricingDateCreateInputSchema: z.ZodType<Prisma.PricingDateCreateInput> = z.object({
  id: z.string().optional(),
  startDate: z.coerce.date(),
  endDate: z.coerce.date(),
  percent: z.number(),
  pricing: z.lazy(() => PricingCreateNestedOneWithoutDatesInputSchema)
}).strict();

export const PricingDateUncheckedCreateInputSchema: z.ZodType<Prisma.PricingDateUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  pricingId: z.string(),
  startDate: z.coerce.date(),
  endDate: z.coerce.date(),
  percent: z.number()
}).strict();

export const PricingDateUpdateInputSchema: z.ZodType<Prisma.PricingDateUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  percent: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  pricing: z.lazy(() => PricingUpdateOneRequiredWithoutDatesNestedInputSchema).optional()
}).strict();

export const PricingDateUncheckedUpdateInputSchema: z.ZodType<Prisma.PricingDateUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  pricingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  percent: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PricingDateCreateManyInputSchema: z.ZodType<Prisma.PricingDateCreateManyInput> = z.object({
  id: z.string().optional(),
  pricingId: z.string(),
  startDate: z.coerce.date(),
  endDate: z.coerce.date(),
  percent: z.number()
}).strict();

export const PricingDateUpdateManyMutationInputSchema: z.ZodType<Prisma.PricingDateUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  percent: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PricingDateUncheckedUpdateManyInputSchema: z.ZodType<Prisma.PricingDateUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  pricingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  percent: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DiscountCreateInputSchema: z.ZodType<Prisma.DiscountCreateInput> = z.object({
  id: z.string().optional(),
  days: z.number(),
  percent: z.number().optional(),
  pricing: z.lazy(() => PricingCreateNestedOneWithoutDiscountsInputSchema)
}).strict();

export const DiscountUncheckedCreateInputSchema: z.ZodType<Prisma.DiscountUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  pricingId: z.string(),
  days: z.number(),
  percent: z.number().optional()
}).strict();

export const DiscountUpdateInputSchema: z.ZodType<Prisma.DiscountUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  days: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  percent: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  pricing: z.lazy(() => PricingUpdateOneRequiredWithoutDiscountsNestedInputSchema).optional()
}).strict();

export const DiscountUncheckedUpdateInputSchema: z.ZodType<Prisma.DiscountUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  pricingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  days: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  percent: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DiscountCreateManyInputSchema: z.ZodType<Prisma.DiscountCreateManyInput> = z.object({
  id: z.string().optional(),
  pricingId: z.string(),
  days: z.number(),
  percent: z.number().optional()
}).strict();

export const DiscountUpdateManyMutationInputSchema: z.ZodType<Prisma.DiscountUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  days: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  percent: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DiscountUncheckedUpdateManyInputSchema: z.ZodType<Prisma.DiscountUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  pricingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  days: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  percent: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AvailabilityCreateInputSchema: z.ZodType<Prisma.AvailabilityCreateInput> = z.object({
  id: z.string().optional(),
  checkIn: z.string(),
  checkOut: z.string(),
  leadTime: z.number().optional(),
  listing: z.lazy(() => ListingCreateNestedOneWithoutAvailabilityInputSchema)
}).strict();

export const AvailabilityUncheckedCreateInputSchema: z.ZodType<Prisma.AvailabilityUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  listingId: z.string(),
  checkIn: z.string(),
  checkOut: z.string(),
  leadTime: z.number().optional()
}).strict();

export const AvailabilityUpdateInputSchema: z.ZodType<Prisma.AvailabilityUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  checkIn: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  checkOut: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  leadTime: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  listing: z.lazy(() => ListingUpdateOneRequiredWithoutAvailabilityNestedInputSchema).optional()
}).strict();

export const AvailabilityUncheckedUpdateInputSchema: z.ZodType<Prisma.AvailabilityUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  listingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  checkIn: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  checkOut: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  leadTime: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AvailabilityCreateManyInputSchema: z.ZodType<Prisma.AvailabilityCreateManyInput> = z.object({
  id: z.string().optional(),
  listingId: z.string(),
  checkIn: z.string(),
  checkOut: z.string(),
  leadTime: z.number().optional()
}).strict();

export const AvailabilityUpdateManyMutationInputSchema: z.ZodType<Prisma.AvailabilityUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  checkIn: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  checkOut: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  leadTime: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AvailabilityUncheckedUpdateManyInputSchema: z.ZodType<Prisma.AvailabilityUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  listingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  checkIn: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  checkOut: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  leadTime: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AmenityCreateInputSchema: z.ZodType<Prisma.AmenityCreateInput> = z.object({
  id: z.string().optional(),
  typeId: z.string(),
  note: z.string().optional().nullable(),
  listing: z.lazy(() => ListingCreateNestedOneWithoutAmenitiesInputSchema)
}).strict();

export const AmenityUncheckedCreateInputSchema: z.ZodType<Prisma.AmenityUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  listingId: z.string(),
  typeId: z.string(),
  note: z.string().optional().nullable()
}).strict();

export const AmenityUpdateInputSchema: z.ZodType<Prisma.AmenityUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  typeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  listing: z.lazy(() => ListingUpdateOneRequiredWithoutAmenitiesNestedInputSchema).optional()
}).strict();

export const AmenityUncheckedUpdateInputSchema: z.ZodType<Prisma.AmenityUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  listingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  typeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AmenityCreateManyInputSchema: z.ZodType<Prisma.AmenityCreateManyInput> = z.object({
  id: z.string().optional(),
  listingId: z.string(),
  typeId: z.string(),
  note: z.string().optional().nullable()
}).strict();

export const AmenityUpdateManyMutationInputSchema: z.ZodType<Prisma.AmenityUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  typeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AmenityUncheckedUpdateManyInputSchema: z.ZodType<Prisma.AmenityUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  listingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  typeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const FeeCreateInputSchema: z.ZodType<Prisma.FeeCreateInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  value: z.number(),
  unit: z.string(),
  taxable: z.boolean(),
  type: z.string(),
  share: z.number(),
  listing: z.lazy(() => ListingCreateNestedOneWithoutFeesInputSchema)
}).strict();

export const FeeUncheckedCreateInputSchema: z.ZodType<Prisma.FeeUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  listingId: z.string(),
  name: z.string(),
  value: z.number(),
  unit: z.string(),
  taxable: z.boolean(),
  type: z.string(),
  share: z.number()
}).strict();

export const FeeUpdateInputSchema: z.ZodType<Prisma.FeeUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  taxable: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  share: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  listing: z.lazy(() => ListingUpdateOneRequiredWithoutFeesNestedInputSchema).optional()
}).strict();

export const FeeUncheckedUpdateInputSchema: z.ZodType<Prisma.FeeUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  listingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  taxable: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  share: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FeeCreateManyInputSchema: z.ZodType<Prisma.FeeCreateManyInput> = z.object({
  id: z.string().optional(),
  listingId: z.string(),
  name: z.string(),
  value: z.number(),
  unit: z.string(),
  taxable: z.boolean(),
  type: z.string(),
  share: z.number()
}).strict();

export const FeeUpdateManyMutationInputSchema: z.ZodType<Prisma.FeeUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  taxable: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  share: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FeeUncheckedUpdateManyInputSchema: z.ZodType<Prisma.FeeUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  listingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  taxable: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  share: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TaxRatesCreateInputSchema: z.ZodType<Prisma.TaxRatesCreateInput> = z.object({
  id: z.string().optional(),
  municipal: z.number().optional(),
  county: z.number().optional(),
  state: z.number().optional(),
  listing: z.lazy(() => ListingCreateNestedOneWithoutTaxRatesInputSchema)
}).strict();

export const TaxRatesUncheckedCreateInputSchema: z.ZodType<Prisma.TaxRatesUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  listingId: z.string(),
  municipal: z.number().optional(),
  county: z.number().optional(),
  state: z.number().optional()
}).strict();

export const TaxRatesUpdateInputSchema: z.ZodType<Prisma.TaxRatesUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  municipal: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  county: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  listing: z.lazy(() => ListingUpdateOneRequiredWithoutTaxRatesNestedInputSchema).optional()
}).strict();

export const TaxRatesUncheckedUpdateInputSchema: z.ZodType<Prisma.TaxRatesUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  listingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  municipal: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  county: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TaxRatesCreateManyInputSchema: z.ZodType<Prisma.TaxRatesCreateManyInput> = z.object({
  id: z.string().optional(),
  listingId: z.string(),
  municipal: z.number().optional(),
  county: z.number().optional(),
  state: z.number().optional()
}).strict();

export const TaxRatesUpdateManyMutationInputSchema: z.ZodType<Prisma.TaxRatesUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  municipal: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  county: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TaxRatesUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TaxRatesUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  listingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  municipal: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  county: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DeductionsCreateInputSchema: z.ZodType<Prisma.DeductionsCreateInput> = z.object({
  id: z.string().optional(),
  channelFees: z.boolean(),
  creditCardFees: z.boolean(),
  discounts: z.boolean(),
  municipalTaxes: z.boolean(),
  countyTaxes: z.boolean(),
  stateTaxes: z.boolean(),
  otherGuestFees: z.boolean(),
  pmcShare: z.number(),
  listing: z.lazy(() => ListingCreateNestedOneWithoutDeductionsInputSchema)
}).strict();

export const DeductionsUncheckedCreateInputSchema: z.ZodType<Prisma.DeductionsUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  listingId: z.string(),
  channelFees: z.boolean(),
  creditCardFees: z.boolean(),
  discounts: z.boolean(),
  municipalTaxes: z.boolean(),
  countyTaxes: z.boolean(),
  stateTaxes: z.boolean(),
  otherGuestFees: z.boolean(),
  pmcShare: z.number()
}).strict();

export const DeductionsUpdateInputSchema: z.ZodType<Prisma.DeductionsUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  channelFees: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  creditCardFees: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  discounts: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  municipalTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  countyTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  stateTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  otherGuestFees: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  pmcShare: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  listing: z.lazy(() => ListingUpdateOneRequiredWithoutDeductionsNestedInputSchema).optional()
}).strict();

export const DeductionsUncheckedUpdateInputSchema: z.ZodType<Prisma.DeductionsUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  listingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  channelFees: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  creditCardFees: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  discounts: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  municipalTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  countyTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  stateTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  otherGuestFees: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  pmcShare: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DeductionsCreateManyInputSchema: z.ZodType<Prisma.DeductionsCreateManyInput> = z.object({
  id: z.string().optional(),
  listingId: z.string(),
  channelFees: z.boolean(),
  creditCardFees: z.boolean(),
  discounts: z.boolean(),
  municipalTaxes: z.boolean(),
  countyTaxes: z.boolean(),
  stateTaxes: z.boolean(),
  otherGuestFees: z.boolean(),
  pmcShare: z.number()
}).strict();

export const DeductionsUpdateManyMutationInputSchema: z.ZodType<Prisma.DeductionsUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  channelFees: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  creditCardFees: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  discounts: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  municipalTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  countyTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  stateTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  otherGuestFees: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  pmcShare: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DeductionsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.DeductionsUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  listingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  channelFees: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  creditCardFees: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  discounts: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  municipalTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  countyTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  stateTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  otherGuestFees: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  pmcShare: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const BedroomCreateInputSchema: z.ZodType<Prisma.BedroomCreateInput> = z.object({
  id: z.string().optional(),
  type: z.string(),
  bathroom: z.boolean().optional(),
  beds: z.union([ z.lazy(() => BedroomCreatebedsInputSchema),z.string().array() ]).optional(),
  content: z.lazy(() => ContentCreateNestedOneWithoutBedroomsInputSchema)
}).strict();

export const BedroomUncheckedCreateInputSchema: z.ZodType<Prisma.BedroomUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  contentId: z.string(),
  type: z.string(),
  bathroom: z.boolean().optional(),
  beds: z.union([ z.lazy(() => BedroomCreatebedsInputSchema),z.string().array() ]).optional(),
}).strict();

export const BedroomUpdateInputSchema: z.ZodType<Prisma.BedroomUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bathroom: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  beds: z.union([ z.lazy(() => BedroomUpdatebedsInputSchema),z.string().array() ]).optional(),
  content: z.lazy(() => ContentUpdateOneRequiredWithoutBedroomsNestedInputSchema).optional()
}).strict();

export const BedroomUncheckedUpdateInputSchema: z.ZodType<Prisma.BedroomUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  contentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bathroom: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  beds: z.union([ z.lazy(() => BedroomUpdatebedsInputSchema),z.string().array() ]).optional(),
}).strict();

export const BedroomCreateManyInputSchema: z.ZodType<Prisma.BedroomCreateManyInput> = z.object({
  id: z.string().optional(),
  contentId: z.string(),
  type: z.string(),
  bathroom: z.boolean().optional(),
  beds: z.union([ z.lazy(() => BedroomCreatebedsInputSchema),z.string().array() ]).optional(),
}).strict();

export const BedroomUpdateManyMutationInputSchema: z.ZodType<Prisma.BedroomUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bathroom: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  beds: z.union([ z.lazy(() => BedroomUpdatebedsInputSchema),z.string().array() ]).optional(),
}).strict();

export const BedroomUncheckedUpdateManyInputSchema: z.ZodType<Prisma.BedroomUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  contentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bathroom: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  beds: z.union([ z.lazy(() => BedroomUpdatebedsInputSchema),z.string().array() ]).optional(),
}).strict();

export const CalendarEventCreateInputSchema: z.ZodType<Prisma.CalendarEventCreateInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  fromDate: z.coerce.date(),
  toDate: z.coerce.date(),
  type: z.lazy(() => CalendarEventTypeSchema),
  notes: z.string().optional().nullable(),
  bookedOn: z.coerce.date().optional().nullable(),
  listing: z.lazy(() => ListingCreateNestedOneWithoutEventsInputSchema),
  reservation: z.lazy(() => ReservationCreateNestedOneWithoutCalendarEventInputSchema).optional()
}).strict();

export const CalendarEventUncheckedCreateInputSchema: z.ZodType<Prisma.CalendarEventUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  listingId: z.string(),
  fromDate: z.coerce.date(),
  toDate: z.coerce.date(),
  type: z.lazy(() => CalendarEventTypeSchema),
  notes: z.string().optional().nullable(),
  bookedOn: z.coerce.date().optional().nullable(),
  reservation: z.lazy(() => ReservationUncheckedCreateNestedOneWithoutCalendarEventInputSchema).optional()
}).strict();

export const CalendarEventUpdateInputSchema: z.ZodType<Prisma.CalendarEventUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  fromDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  toDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => CalendarEventTypeSchema),z.lazy(() => EnumCalendarEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bookedOn: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  listing: z.lazy(() => ListingUpdateOneRequiredWithoutEventsNestedInputSchema).optional(),
  reservation: z.lazy(() => ReservationUpdateOneWithoutCalendarEventNestedInputSchema).optional()
}).strict();

export const CalendarEventUncheckedUpdateInputSchema: z.ZodType<Prisma.CalendarEventUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  listingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fromDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  toDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => CalendarEventTypeSchema),z.lazy(() => EnumCalendarEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bookedOn: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reservation: z.lazy(() => ReservationUncheckedUpdateOneWithoutCalendarEventNestedInputSchema).optional()
}).strict();

export const CalendarEventCreateManyInputSchema: z.ZodType<Prisma.CalendarEventCreateManyInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  listingId: z.string(),
  fromDate: z.coerce.date(),
  toDate: z.coerce.date(),
  type: z.lazy(() => CalendarEventTypeSchema),
  notes: z.string().optional().nullable(),
  bookedOn: z.coerce.date().optional().nullable()
}).strict();

export const CalendarEventUpdateManyMutationInputSchema: z.ZodType<Prisma.CalendarEventUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  fromDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  toDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => CalendarEventTypeSchema),z.lazy(() => EnumCalendarEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bookedOn: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CalendarEventUncheckedUpdateManyInputSchema: z.ZodType<Prisma.CalendarEventUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  listingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fromDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  toDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => CalendarEventTypeSchema),z.lazy(() => EnumCalendarEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bookedOn: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ReservationCreateInputSchema: z.ZodType<Prisma.ReservationCreateInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  channel: z.lazy(() => ChannelSchema).optional(),
  bpReservationId: z.string().optional().nullable(),
  confirmationCode: z.string().optional().nullable(),
  adults: z.number(),
  children: z.number(),
  pets: z.number().optional(),
  status: z.lazy(() => ReservationStatusSchema).optional(),
  calendarEvent: z.lazy(() => CalendarEventCreateNestedOneWithoutReservationInputSchema),
  scheduledMessages: z.lazy(() => ScheduledMessageCreateNestedManyWithoutReservationInputSchema).optional(),
  revenue: z.lazy(() => RevenueCreateNestedOneWithoutReservationInputSchema).optional(),
  guest: z.lazy(() => GuestCreateNestedOneWithoutReservationsInputSchema)
}).strict();

export const ReservationUncheckedCreateInputSchema: z.ZodType<Prisma.ReservationUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  calendarEventId: z.string(),
  channel: z.lazy(() => ChannelSchema).optional(),
  bpReservationId: z.string().optional().nullable(),
  confirmationCode: z.string().optional().nullable(),
  adults: z.number(),
  children: z.number(),
  pets: z.number().optional(),
  status: z.lazy(() => ReservationStatusSchema).optional(),
  guestId: z.string(),
  scheduledMessages: z.lazy(() => ScheduledMessageUncheckedCreateNestedManyWithoutReservationInputSchema).optional(),
  revenue: z.lazy(() => RevenueUncheckedCreateNestedOneWithoutReservationInputSchema).optional()
}).strict();

export const ReservationUpdateInputSchema: z.ZodType<Prisma.ReservationUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  channel: z.union([ z.lazy(() => ChannelSchema),z.lazy(() => EnumChannelFieldUpdateOperationsInputSchema) ]).optional(),
  bpReservationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmationCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  adults: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  children: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  pets: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ReservationStatusSchema),z.lazy(() => EnumReservationStatusFieldUpdateOperationsInputSchema) ]).optional(),
  calendarEvent: z.lazy(() => CalendarEventUpdateOneRequiredWithoutReservationNestedInputSchema).optional(),
  scheduledMessages: z.lazy(() => ScheduledMessageUpdateManyWithoutReservationNestedInputSchema).optional(),
  revenue: z.lazy(() => RevenueUpdateOneWithoutReservationNestedInputSchema).optional(),
  guest: z.lazy(() => GuestUpdateOneRequiredWithoutReservationsNestedInputSchema).optional()
}).strict();

export const ReservationUncheckedUpdateInputSchema: z.ZodType<Prisma.ReservationUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  calendarEventId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  channel: z.union([ z.lazy(() => ChannelSchema),z.lazy(() => EnumChannelFieldUpdateOperationsInputSchema) ]).optional(),
  bpReservationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmationCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  adults: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  children: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  pets: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ReservationStatusSchema),z.lazy(() => EnumReservationStatusFieldUpdateOperationsInputSchema) ]).optional(),
  guestId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  scheduledMessages: z.lazy(() => ScheduledMessageUncheckedUpdateManyWithoutReservationNestedInputSchema).optional(),
  revenue: z.lazy(() => RevenueUncheckedUpdateOneWithoutReservationNestedInputSchema).optional()
}).strict();

export const ReservationCreateManyInputSchema: z.ZodType<Prisma.ReservationCreateManyInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  calendarEventId: z.string(),
  channel: z.lazy(() => ChannelSchema).optional(),
  bpReservationId: z.string().optional().nullable(),
  confirmationCode: z.string().optional().nullable(),
  adults: z.number(),
  children: z.number(),
  pets: z.number().optional(),
  status: z.lazy(() => ReservationStatusSchema).optional(),
  guestId: z.string()
}).strict();

export const ReservationUpdateManyMutationInputSchema: z.ZodType<Prisma.ReservationUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  channel: z.union([ z.lazy(() => ChannelSchema),z.lazy(() => EnumChannelFieldUpdateOperationsInputSchema) ]).optional(),
  bpReservationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmationCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  adults: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  children: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  pets: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ReservationStatusSchema),z.lazy(() => EnumReservationStatusFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ReservationUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ReservationUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  calendarEventId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  channel: z.union([ z.lazy(() => ChannelSchema),z.lazy(() => EnumChannelFieldUpdateOperationsInputSchema) ]).optional(),
  bpReservationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmationCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  adults: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  children: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  pets: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ReservationStatusSchema),z.lazy(() => EnumReservationStatusFieldUpdateOperationsInputSchema) ]).optional(),
  guestId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ReservationBpRequestCreateInputSchema: z.ZodType<Prisma.ReservationBpRequestCreateInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organizationId: z.string(),
  listingId: z.string(),
  reservationId: z.string(),
  fromDate: z.coerce.date(),
  toDate: z.coerce.date(),
  available: z.boolean(),
  status: z.lazy(() => QueueStatusSchema).optional()
}).strict();

export const ReservationBpRequestUncheckedCreateInputSchema: z.ZodType<Prisma.ReservationBpRequestUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organizationId: z.string(),
  listingId: z.string(),
  reservationId: z.string(),
  fromDate: z.coerce.date(),
  toDate: z.coerce.date(),
  available: z.boolean(),
  status: z.lazy(() => QueueStatusSchema).optional()
}).strict();

export const ReservationBpRequestUpdateInputSchema: z.ZodType<Prisma.ReservationBpRequestUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  listingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reservationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fromDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  toDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  available: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => QueueStatusSchema),z.lazy(() => EnumQueueStatusFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ReservationBpRequestUncheckedUpdateInputSchema: z.ZodType<Prisma.ReservationBpRequestUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  listingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reservationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fromDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  toDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  available: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => QueueStatusSchema),z.lazy(() => EnumQueueStatusFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ReservationBpRequestCreateManyInputSchema: z.ZodType<Prisma.ReservationBpRequestCreateManyInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organizationId: z.string(),
  listingId: z.string(),
  reservationId: z.string(),
  fromDate: z.coerce.date(),
  toDate: z.coerce.date(),
  available: z.boolean(),
  status: z.lazy(() => QueueStatusSchema).optional()
}).strict();

export const ReservationBpRequestUpdateManyMutationInputSchema: z.ZodType<Prisma.ReservationBpRequestUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  listingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reservationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fromDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  toDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  available: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => QueueStatusSchema),z.lazy(() => EnumQueueStatusFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ReservationBpRequestUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ReservationBpRequestUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  listingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reservationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fromDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  toDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  available: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => QueueStatusSchema),z.lazy(() => EnumQueueStatusFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const GuestCreateInputSchema: z.ZodType<Prisma.GuestCreateInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  reservations: z.lazy(() => ReservationCreateNestedManyWithoutGuestInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadCreateNestedManyWithoutGuestInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutGuestsInputSchema)
}).strict();

export const GuestUncheckedCreateInputSchema: z.ZodType<Prisma.GuestUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  organizationId: z.string(),
  reservations: z.lazy(() => ReservationUncheckedCreateNestedManyWithoutGuestInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUncheckedCreateNestedManyWithoutGuestInputSchema).optional()
}).strict();

export const GuestUpdateInputSchema: z.ZodType<Prisma.GuestUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reservations: z.lazy(() => ReservationUpdateManyWithoutGuestNestedInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUpdateManyWithoutGuestNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutGuestsNestedInputSchema).optional()
}).strict();

export const GuestUncheckedUpdateInputSchema: z.ZodType<Prisma.GuestUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reservations: z.lazy(() => ReservationUncheckedUpdateManyWithoutGuestNestedInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUncheckedUpdateManyWithoutGuestNestedInputSchema).optional()
}).strict();

export const GuestCreateManyInputSchema: z.ZodType<Prisma.GuestCreateManyInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  organizationId: z.string()
}).strict();

export const GuestUpdateManyMutationInputSchema: z.ZodType<Prisma.GuestUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const GuestUncheckedUpdateManyInputSchema: z.ZodType<Prisma.GuestUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MessageThreadCreateInputSchema: z.ZodType<Prisma.MessageThreadCreateInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  bpThreadId: z.string().optional().nullable(),
  channelThreadId: z.string().optional().nullable(),
  lastMessageSentAt: z.string().optional().nullable(),
  dateFrom: z.string(),
  dateTo: z.string(),
  replyTo: z.string().optional().nullable(),
  archived: z.boolean().optional(),
  enableReminder: z.boolean().optional(),
  channel: z.lazy(() => ChannelSchema),
  listing: z.lazy(() => ListingCreateNestedOneWithoutMessageThreadsInputSchema),
  guest: z.lazy(() => GuestCreateNestedOneWithoutMessageThreadsInputSchema),
  messages: z.lazy(() => MessageCreateNestedManyWithoutMessageThreadInputSchema).optional()
}).strict();

export const MessageThreadUncheckedCreateInputSchema: z.ZodType<Prisma.MessageThreadUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  listingId: z.string(),
  guestId: z.string(),
  bpThreadId: z.string().optional().nullable(),
  channelThreadId: z.string().optional().nullable(),
  lastMessageSentAt: z.string().optional().nullable(),
  dateFrom: z.string(),
  dateTo: z.string(),
  replyTo: z.string().optional().nullable(),
  archived: z.boolean().optional(),
  enableReminder: z.boolean().optional(),
  channel: z.lazy(() => ChannelSchema),
  messages: z.lazy(() => MessageUncheckedCreateNestedManyWithoutMessageThreadInputSchema).optional()
}).strict();

export const MessageThreadUpdateInputSchema: z.ZodType<Prisma.MessageThreadUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  bpThreadId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  channelThreadId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastMessageSentAt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dateFrom: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dateTo: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  replyTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  archived: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  enableReminder: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  channel: z.union([ z.lazy(() => ChannelSchema),z.lazy(() => EnumChannelFieldUpdateOperationsInputSchema) ]).optional(),
  listing: z.lazy(() => ListingUpdateOneRequiredWithoutMessageThreadsNestedInputSchema).optional(),
  guest: z.lazy(() => GuestUpdateOneRequiredWithoutMessageThreadsNestedInputSchema).optional(),
  messages: z.lazy(() => MessageUpdateManyWithoutMessageThreadNestedInputSchema).optional()
}).strict();

export const MessageThreadUncheckedUpdateInputSchema: z.ZodType<Prisma.MessageThreadUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  listingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  guestId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bpThreadId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  channelThreadId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastMessageSentAt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dateFrom: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dateTo: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  replyTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  archived: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  enableReminder: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  channel: z.union([ z.lazy(() => ChannelSchema),z.lazy(() => EnumChannelFieldUpdateOperationsInputSchema) ]).optional(),
  messages: z.lazy(() => MessageUncheckedUpdateManyWithoutMessageThreadNestedInputSchema).optional()
}).strict();

export const MessageThreadCreateManyInputSchema: z.ZodType<Prisma.MessageThreadCreateManyInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  listingId: z.string(),
  guestId: z.string(),
  bpThreadId: z.string().optional().nullable(),
  channelThreadId: z.string().optional().nullable(),
  lastMessageSentAt: z.string().optional().nullable(),
  dateFrom: z.string(),
  dateTo: z.string(),
  replyTo: z.string().optional().nullable(),
  archived: z.boolean().optional(),
  enableReminder: z.boolean().optional(),
  channel: z.lazy(() => ChannelSchema)
}).strict();

export const MessageThreadUpdateManyMutationInputSchema: z.ZodType<Prisma.MessageThreadUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  bpThreadId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  channelThreadId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastMessageSentAt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dateFrom: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dateTo: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  replyTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  archived: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  enableReminder: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  channel: z.union([ z.lazy(() => ChannelSchema),z.lazy(() => EnumChannelFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MessageThreadUncheckedUpdateManyInputSchema: z.ZodType<Prisma.MessageThreadUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  listingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  guestId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bpThreadId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  channelThreadId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastMessageSentAt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dateFrom: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dateTo: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  replyTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  archived: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  enableReminder: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  channel: z.union([ z.lazy(() => ChannelSchema),z.lazy(() => EnumChannelFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MessageCreateInputSchema: z.ZodType<Prisma.MessageCreateInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  message: z.string(),
  user: z.lazy(() => MessageUserSchema),
  timestamp: z.coerce.date(),
  bpMessageId: z.string().optional().nullable(),
  channelMessageId: z.string().optional().nullable(),
  read: z.boolean().optional(),
  messageThread: z.lazy(() => MessageThreadCreateNestedOneWithoutMessagesInputSchema)
}).strict();

export const MessageUncheckedCreateInputSchema: z.ZodType<Prisma.MessageUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  messageThreadId: z.string(),
  message: z.string(),
  user: z.lazy(() => MessageUserSchema),
  timestamp: z.coerce.date(),
  bpMessageId: z.string().optional().nullable(),
  channelMessageId: z.string().optional().nullable(),
  read: z.boolean().optional()
}).strict();

export const MessageUpdateInputSchema: z.ZodType<Prisma.MessageUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  message: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => MessageUserSchema),z.lazy(() => EnumMessageUserFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  bpMessageId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  channelMessageId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  read: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  messageThread: z.lazy(() => MessageThreadUpdateOneRequiredWithoutMessagesNestedInputSchema).optional()
}).strict();

export const MessageUncheckedUpdateInputSchema: z.ZodType<Prisma.MessageUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  messageThreadId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  message: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => MessageUserSchema),z.lazy(() => EnumMessageUserFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  bpMessageId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  channelMessageId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  read: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MessageCreateManyInputSchema: z.ZodType<Prisma.MessageCreateManyInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  messageThreadId: z.string(),
  message: z.string(),
  user: z.lazy(() => MessageUserSchema),
  timestamp: z.coerce.date(),
  bpMessageId: z.string().optional().nullable(),
  channelMessageId: z.string().optional().nullable(),
  read: z.boolean().optional()
}).strict();

export const MessageUpdateManyMutationInputSchema: z.ZodType<Prisma.MessageUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  message: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => MessageUserSchema),z.lazy(() => EnumMessageUserFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  bpMessageId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  channelMessageId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  read: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MessageUncheckedUpdateManyInputSchema: z.ZodType<Prisma.MessageUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  messageThreadId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  message: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => MessageUserSchema),z.lazy(() => EnumMessageUserFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  bpMessageId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  channelMessageId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  read: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MessageTemplateCreateInputSchema: z.ZodType<Prisma.MessageTemplateCreateInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  title: z.string(),
  body: z.string(),
  bodyHtml: z.string(),
  enabled: z.boolean().optional(),
  trigger: z.lazy(() => TriggerSchema).optional().nullable(),
  triggerRange: z.lazy(() => TriggerRangeSchema).optional().nullable(),
  triggerUnit: z.lazy(() => TriggerUnitSchema).optional().nullable(),
  triggerValue: z.number().optional().nullable(),
  allListings: z.boolean().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutMessageTemplatesInputSchema),
  scheduledMessages: z.lazy(() => ScheduledMessageCreateNestedManyWithoutMessageTemplateInputSchema).optional(),
  listings: z.lazy(() => ListingCreateNestedManyWithoutMessageTemplatesInputSchema).optional()
}).strict();

export const MessageTemplateUncheckedCreateInputSchema: z.ZodType<Prisma.MessageTemplateUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  title: z.string(),
  body: z.string(),
  bodyHtml: z.string(),
  enabled: z.boolean().optional(),
  trigger: z.lazy(() => TriggerSchema).optional().nullable(),
  triggerRange: z.lazy(() => TriggerRangeSchema).optional().nullable(),
  triggerUnit: z.lazy(() => TriggerUnitSchema).optional().nullable(),
  triggerValue: z.number().optional().nullable(),
  allListings: z.boolean().optional(),
  organizationId: z.string(),
  scheduledMessages: z.lazy(() => ScheduledMessageUncheckedCreateNestedManyWithoutMessageTemplateInputSchema).optional(),
  listings: z.lazy(() => ListingUncheckedCreateNestedManyWithoutMessageTemplatesInputSchema).optional()
}).strict();

export const MessageTemplateUpdateInputSchema: z.ZodType<Prisma.MessageTemplateUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  body: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bodyHtml: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  enabled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  trigger: z.union([ z.lazy(() => TriggerSchema),z.lazy(() => NullableEnumTriggerFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  triggerRange: z.union([ z.lazy(() => TriggerRangeSchema),z.lazy(() => NullableEnumTriggerRangeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  triggerUnit: z.union([ z.lazy(() => TriggerUnitSchema),z.lazy(() => NullableEnumTriggerUnitFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  triggerValue: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allListings: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutMessageTemplatesNestedInputSchema).optional(),
  scheduledMessages: z.lazy(() => ScheduledMessageUpdateManyWithoutMessageTemplateNestedInputSchema).optional(),
  listings: z.lazy(() => ListingUpdateManyWithoutMessageTemplatesNestedInputSchema).optional()
}).strict();

export const MessageTemplateUncheckedUpdateInputSchema: z.ZodType<Prisma.MessageTemplateUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  body: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bodyHtml: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  enabled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  trigger: z.union([ z.lazy(() => TriggerSchema),z.lazy(() => NullableEnumTriggerFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  triggerRange: z.union([ z.lazy(() => TriggerRangeSchema),z.lazy(() => NullableEnumTriggerRangeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  triggerUnit: z.union([ z.lazy(() => TriggerUnitSchema),z.lazy(() => NullableEnumTriggerUnitFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  triggerValue: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allListings: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  scheduledMessages: z.lazy(() => ScheduledMessageUncheckedUpdateManyWithoutMessageTemplateNestedInputSchema).optional(),
  listings: z.lazy(() => ListingUncheckedUpdateManyWithoutMessageTemplatesNestedInputSchema).optional()
}).strict();

export const MessageTemplateCreateManyInputSchema: z.ZodType<Prisma.MessageTemplateCreateManyInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  title: z.string(),
  body: z.string(),
  bodyHtml: z.string(),
  enabled: z.boolean().optional(),
  trigger: z.lazy(() => TriggerSchema).optional().nullable(),
  triggerRange: z.lazy(() => TriggerRangeSchema).optional().nullable(),
  triggerUnit: z.lazy(() => TriggerUnitSchema).optional().nullable(),
  triggerValue: z.number().optional().nullable(),
  allListings: z.boolean().optional(),
  organizationId: z.string()
}).strict();

export const MessageTemplateUpdateManyMutationInputSchema: z.ZodType<Prisma.MessageTemplateUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  body: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bodyHtml: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  enabled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  trigger: z.union([ z.lazy(() => TriggerSchema),z.lazy(() => NullableEnumTriggerFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  triggerRange: z.union([ z.lazy(() => TriggerRangeSchema),z.lazy(() => NullableEnumTriggerRangeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  triggerUnit: z.union([ z.lazy(() => TriggerUnitSchema),z.lazy(() => NullableEnumTriggerUnitFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  triggerValue: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allListings: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MessageTemplateUncheckedUpdateManyInputSchema: z.ZodType<Prisma.MessageTemplateUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  body: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bodyHtml: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  enabled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  trigger: z.union([ z.lazy(() => TriggerSchema),z.lazy(() => NullableEnumTriggerFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  triggerRange: z.union([ z.lazy(() => TriggerRangeSchema),z.lazy(() => NullableEnumTriggerRangeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  triggerUnit: z.union([ z.lazy(() => TriggerUnitSchema),z.lazy(() => NullableEnumTriggerUnitFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  triggerValue: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allListings: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ScheduledMessageCreateInputSchema: z.ZodType<Prisma.ScheduledMessageCreateInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  scheduledAt: z.coerce.date(),
  status: z.lazy(() => ScheduledMessageStatusSchema).optional(),
  completedAt: z.coerce.date().optional().nullable(),
  failureMessage: z.string().optional().nullable(),
  reservation: z.lazy(() => ReservationCreateNestedOneWithoutScheduledMessagesInputSchema),
  messageTemplate: z.lazy(() => MessageTemplateCreateNestedOneWithoutScheduledMessagesInputSchema)
}).strict();

export const ScheduledMessageUncheckedCreateInputSchema: z.ZodType<Prisma.ScheduledMessageUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  scheduledAt: z.coerce.date(),
  reservationId: z.string(),
  messageTemplateId: z.string(),
  status: z.lazy(() => ScheduledMessageStatusSchema).optional(),
  completedAt: z.coerce.date().optional().nullable(),
  failureMessage: z.string().optional().nullable()
}).strict();

export const ScheduledMessageUpdateInputSchema: z.ZodType<Prisma.ScheduledMessageUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  scheduledAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ScheduledMessageStatusSchema),z.lazy(() => EnumScheduledMessageStatusFieldUpdateOperationsInputSchema) ]).optional(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  failureMessage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reservation: z.lazy(() => ReservationUpdateOneRequiredWithoutScheduledMessagesNestedInputSchema).optional(),
  messageTemplate: z.lazy(() => MessageTemplateUpdateOneRequiredWithoutScheduledMessagesNestedInputSchema).optional()
}).strict();

export const ScheduledMessageUncheckedUpdateInputSchema: z.ZodType<Prisma.ScheduledMessageUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  scheduledAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  reservationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  messageTemplateId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ScheduledMessageStatusSchema),z.lazy(() => EnumScheduledMessageStatusFieldUpdateOperationsInputSchema) ]).optional(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  failureMessage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ScheduledMessageCreateManyInputSchema: z.ZodType<Prisma.ScheduledMessageCreateManyInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  scheduledAt: z.coerce.date(),
  reservationId: z.string(),
  messageTemplateId: z.string(),
  status: z.lazy(() => ScheduledMessageStatusSchema).optional(),
  completedAt: z.coerce.date().optional().nullable(),
  failureMessage: z.string().optional().nullable()
}).strict();

export const ScheduledMessageUpdateManyMutationInputSchema: z.ZodType<Prisma.ScheduledMessageUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  scheduledAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ScheduledMessageStatusSchema),z.lazy(() => EnumScheduledMessageStatusFieldUpdateOperationsInputSchema) ]).optional(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  failureMessage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ScheduledMessageUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ScheduledMessageUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  scheduledAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  reservationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  messageTemplateId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ScheduledMessageStatusSchema),z.lazy(() => EnumScheduledMessageStatusFieldUpdateOperationsInputSchema) ]).optional(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  failureMessage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const RevenueCreateInputSchema: z.ZodType<Prisma.RevenueCreateInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  accommodation: z.number().optional().nullable(),
  pmcShare: z.number(),
  discount: z.number().optional().nullable(),
  channelCommission: z.number().optional().nullable(),
  payoutStatus: z.lazy(() => RevenuePayoutStatusSchema).optional(),
  reservation: z.lazy(() => ReservationCreateNestedOneWithoutRevenueInputSchema),
  fees: z.lazy(() => RevenueFeeCreateNestedManyWithoutRevenueInputSchema).optional(),
  ownerStatement: z.lazy(() => OwnerStatementCreateNestedOneWithoutRevenueInputSchema).optional(),
  payout: z.lazy(() => RevenuePayoutCreateNestedManyWithoutRevenueInputSchema).optional()
}).strict();

export const RevenueUncheckedCreateInputSchema: z.ZodType<Prisma.RevenueUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  reservationId: z.string(),
  accommodation: z.number().optional().nullable(),
  pmcShare: z.number(),
  discount: z.number().optional().nullable(),
  channelCommission: z.number().optional().nullable(),
  ownerStatementId: z.string().optional().nullable(),
  payoutStatus: z.lazy(() => RevenuePayoutStatusSchema).optional(),
  fees: z.lazy(() => RevenueFeeUncheckedCreateNestedManyWithoutRevenueInputSchema).optional(),
  payout: z.lazy(() => RevenuePayoutUncheckedCreateNestedManyWithoutRevenueInputSchema).optional()
}).strict();

export const RevenueUpdateInputSchema: z.ZodType<Prisma.RevenueUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  accommodation: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pmcShare: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  discount: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  channelCommission: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payoutStatus: z.union([ z.lazy(() => RevenuePayoutStatusSchema),z.lazy(() => EnumRevenuePayoutStatusFieldUpdateOperationsInputSchema) ]).optional(),
  reservation: z.lazy(() => ReservationUpdateOneRequiredWithoutRevenueNestedInputSchema).optional(),
  fees: z.lazy(() => RevenueFeeUpdateManyWithoutRevenueNestedInputSchema).optional(),
  ownerStatement: z.lazy(() => OwnerStatementUpdateOneWithoutRevenueNestedInputSchema).optional(),
  payout: z.lazy(() => RevenuePayoutUpdateManyWithoutRevenueNestedInputSchema).optional()
}).strict();

export const RevenueUncheckedUpdateInputSchema: z.ZodType<Prisma.RevenueUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  reservationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accommodation: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pmcShare: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  discount: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  channelCommission: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerStatementId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payoutStatus: z.union([ z.lazy(() => RevenuePayoutStatusSchema),z.lazy(() => EnumRevenuePayoutStatusFieldUpdateOperationsInputSchema) ]).optional(),
  fees: z.lazy(() => RevenueFeeUncheckedUpdateManyWithoutRevenueNestedInputSchema).optional(),
  payout: z.lazy(() => RevenuePayoutUncheckedUpdateManyWithoutRevenueNestedInputSchema).optional()
}).strict();

export const RevenueCreateManyInputSchema: z.ZodType<Prisma.RevenueCreateManyInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  reservationId: z.string(),
  accommodation: z.number().optional().nullable(),
  pmcShare: z.number(),
  discount: z.number().optional().nullable(),
  channelCommission: z.number().optional().nullable(),
  ownerStatementId: z.string().optional().nullable(),
  payoutStatus: z.lazy(() => RevenuePayoutStatusSchema).optional()
}).strict();

export const RevenueUpdateManyMutationInputSchema: z.ZodType<Prisma.RevenueUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  accommodation: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pmcShare: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  discount: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  channelCommission: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payoutStatus: z.union([ z.lazy(() => RevenuePayoutStatusSchema),z.lazy(() => EnumRevenuePayoutStatusFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RevenueUncheckedUpdateManyInputSchema: z.ZodType<Prisma.RevenueUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  reservationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accommodation: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pmcShare: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  discount: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  channelCommission: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerStatementId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payoutStatus: z.union([ z.lazy(() => RevenuePayoutStatusSchema),z.lazy(() => EnumRevenuePayoutStatusFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RevenueTaxCreateInputSchema: z.ZodType<Prisma.RevenueTaxCreateInput> = z.object({
  id: z.string().optional(),
  revenueId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  description: z.string(),
  value: z.number(),
  type: z.lazy(() => RevenueDeductionTypeSchema),
  revenueFee: z.lazy(() => RevenueFeeCreateNestedOneWithoutDeductionsInputSchema)
}).strict();

export const RevenueTaxUncheckedCreateInputSchema: z.ZodType<Prisma.RevenueTaxUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  revenueId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  description: z.string(),
  value: z.number(),
  revenueFeeId: z.string(),
  type: z.lazy(() => RevenueDeductionTypeSchema)
}).strict();

export const RevenueTaxUpdateInputSchema: z.ZodType<Prisma.RevenueTaxUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  revenueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => RevenueDeductionTypeSchema),z.lazy(() => EnumRevenueDeductionTypeFieldUpdateOperationsInputSchema) ]).optional(),
  revenueFee: z.lazy(() => RevenueFeeUpdateOneRequiredWithoutDeductionsNestedInputSchema).optional()
}).strict();

export const RevenueTaxUncheckedUpdateInputSchema: z.ZodType<Prisma.RevenueTaxUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  revenueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  revenueFeeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => RevenueDeductionTypeSchema),z.lazy(() => EnumRevenueDeductionTypeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RevenueTaxCreateManyInputSchema: z.ZodType<Prisma.RevenueTaxCreateManyInput> = z.object({
  id: z.string().optional(),
  revenueId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  description: z.string(),
  value: z.number(),
  revenueFeeId: z.string(),
  type: z.lazy(() => RevenueDeductionTypeSchema)
}).strict();

export const RevenueTaxUpdateManyMutationInputSchema: z.ZodType<Prisma.RevenueTaxUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  revenueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => RevenueDeductionTypeSchema),z.lazy(() => EnumRevenueDeductionTypeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RevenueTaxUncheckedUpdateManyInputSchema: z.ZodType<Prisma.RevenueTaxUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  revenueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  revenueFeeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => RevenueDeductionTypeSchema),z.lazy(() => EnumRevenueDeductionTypeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RevenueFeeCreateInputSchema: z.ZodType<Prisma.RevenueFeeCreateInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  value: z.number(),
  unit: z.string(),
  pmcShare: z.number(),
  taxable: z.boolean().optional(),
  type: z.lazy(() => RevenueEntryTypeSchema),
  revenue: z.lazy(() => RevenueCreateNestedOneWithoutFeesInputSchema),
  deductions: z.lazy(() => RevenueTaxCreateNestedManyWithoutRevenueFeeInputSchema).optional()
}).strict();

export const RevenueFeeUncheckedCreateInputSchema: z.ZodType<Prisma.RevenueFeeUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  revenueId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  value: z.number(),
  unit: z.string(),
  pmcShare: z.number(),
  taxable: z.boolean().optional(),
  type: z.lazy(() => RevenueEntryTypeSchema),
  deductions: z.lazy(() => RevenueTaxUncheckedCreateNestedManyWithoutRevenueFeeInputSchema).optional()
}).strict();

export const RevenueFeeUpdateInputSchema: z.ZodType<Prisma.RevenueFeeUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  pmcShare: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  taxable: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => RevenueEntryTypeSchema),z.lazy(() => EnumRevenueEntryTypeFieldUpdateOperationsInputSchema) ]).optional(),
  revenue: z.lazy(() => RevenueUpdateOneRequiredWithoutFeesNestedInputSchema).optional(),
  deductions: z.lazy(() => RevenueTaxUpdateManyWithoutRevenueFeeNestedInputSchema).optional()
}).strict();

export const RevenueFeeUncheckedUpdateInputSchema: z.ZodType<Prisma.RevenueFeeUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  revenueId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  pmcShare: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  taxable: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => RevenueEntryTypeSchema),z.lazy(() => EnumRevenueEntryTypeFieldUpdateOperationsInputSchema) ]).optional(),
  deductions: z.lazy(() => RevenueTaxUncheckedUpdateManyWithoutRevenueFeeNestedInputSchema).optional()
}).strict();

export const RevenueFeeCreateManyInputSchema: z.ZodType<Prisma.RevenueFeeCreateManyInput> = z.object({
  id: z.string().optional(),
  revenueId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  value: z.number(),
  unit: z.string(),
  pmcShare: z.number(),
  taxable: z.boolean().optional(),
  type: z.lazy(() => RevenueEntryTypeSchema)
}).strict();

export const RevenueFeeUpdateManyMutationInputSchema: z.ZodType<Prisma.RevenueFeeUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  pmcShare: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  taxable: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => RevenueEntryTypeSchema),z.lazy(() => EnumRevenueEntryTypeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RevenueFeeUncheckedUpdateManyInputSchema: z.ZodType<Prisma.RevenueFeeUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  revenueId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  pmcShare: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  taxable: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => RevenueEntryTypeSchema),z.lazy(() => EnumRevenueEntryTypeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ExpenseCreateInputSchema: z.ZodType<Prisma.ExpenseCreateInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  date: z.coerce.date(),
  amount: z.number(),
  vendor: z.string(),
  description: z.string().optional().nullable(),
  workOrder: z.string().optional().nullable(),
  receiptUrl: z.string().optional().nullable(),
  invoiceUrl: z.string().optional().nullable(),
  user: z.lazy(() => UserCreateNestedOneWithoutExpensesInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseCreateNestedManyWithoutExpenseInputSchema).optional(),
  plaidTransaction: z.lazy(() => PlaidTransactionCreateNestedOneWithoutExpenseInputSchema).optional()
}).strict();

export const ExpenseUncheckedCreateInputSchema: z.ZodType<Prisma.ExpenseUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  date: z.coerce.date(),
  amount: z.number(),
  vendor: z.string(),
  description: z.string().optional().nullable(),
  workOrder: z.string().optional().nullable(),
  receiptUrl: z.string().optional().nullable(),
  invoiceUrl: z.string().optional().nullable(),
  userId: z.string().optional().nullable(),
  plaidTransactionId: z.string().optional().nullable(),
  listingExpenses: z.lazy(() => ListingExpenseUncheckedCreateNestedManyWithoutExpenseInputSchema).optional()
}).strict();

export const ExpenseUpdateInputSchema: z.ZodType<Prisma.ExpenseUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  vendor: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  workOrder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  receiptUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invoiceUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user: z.lazy(() => UserUpdateOneWithoutExpensesNestedInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUpdateManyWithoutExpenseNestedInputSchema).optional(),
  plaidTransaction: z.lazy(() => PlaidTransactionUpdateOneWithoutExpenseNestedInputSchema).optional()
}).strict();

export const ExpenseUncheckedUpdateInputSchema: z.ZodType<Prisma.ExpenseUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  vendor: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  workOrder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  receiptUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invoiceUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  plaidTransactionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  listingExpenses: z.lazy(() => ListingExpenseUncheckedUpdateManyWithoutExpenseNestedInputSchema).optional()
}).strict();

export const ExpenseCreateManyInputSchema: z.ZodType<Prisma.ExpenseCreateManyInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  date: z.coerce.date(),
  amount: z.number(),
  vendor: z.string(),
  description: z.string().optional().nullable(),
  workOrder: z.string().optional().nullable(),
  receiptUrl: z.string().optional().nullable(),
  invoiceUrl: z.string().optional().nullable(),
  userId: z.string().optional().nullable(),
  plaidTransactionId: z.string().optional().nullable()
}).strict();

export const ExpenseUpdateManyMutationInputSchema: z.ZodType<Prisma.ExpenseUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  vendor: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  workOrder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  receiptUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invoiceUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ExpenseUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ExpenseUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  vendor: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  workOrder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  receiptUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invoiceUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  plaidTransactionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ListingExpenseCreateInputSchema: z.ZodType<Prisma.ListingExpenseCreateInput> = z.object({
  id: z.string().optional(),
  confirmationCode: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  amount: z.number(),
  amountPaid: z.number(),
  expense: z.lazy(() => ExpenseCreateNestedOneWithoutListingExpensesInputSchema),
  listing: z.lazy(() => ListingCreateNestedOneWithoutListingExpensesInputSchema),
  ownerStatement: z.lazy(() => OwnerStatementCreateNestedOneWithoutListingExpensesInputSchema).optional()
}).strict();

export const ListingExpenseUncheckedCreateInputSchema: z.ZodType<Prisma.ListingExpenseUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  confirmationCode: z.string().optional().nullable(),
  expenseId: z.string(),
  listingId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  amount: z.number(),
  amountPaid: z.number(),
  ownerStatementId: z.string().optional().nullable()
}).strict();

export const ListingExpenseUpdateInputSchema: z.ZodType<Prisma.ListingExpenseUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  confirmationCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  amountPaid: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  expense: z.lazy(() => ExpenseUpdateOneRequiredWithoutListingExpensesNestedInputSchema).optional(),
  listing: z.lazy(() => ListingUpdateOneRequiredWithoutListingExpensesNestedInputSchema).optional(),
  ownerStatement: z.lazy(() => OwnerStatementUpdateOneWithoutListingExpensesNestedInputSchema).optional()
}).strict();

export const ListingExpenseUncheckedUpdateInputSchema: z.ZodType<Prisma.ListingExpenseUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  confirmationCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expenseId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  listingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  amountPaid: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  ownerStatementId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ListingExpenseCreateManyInputSchema: z.ZodType<Prisma.ListingExpenseCreateManyInput> = z.object({
  id: z.string().optional(),
  confirmationCode: z.string().optional().nullable(),
  expenseId: z.string(),
  listingId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  amount: z.number(),
  amountPaid: z.number(),
  ownerStatementId: z.string().optional().nullable()
}).strict();

export const ListingExpenseUpdateManyMutationInputSchema: z.ZodType<Prisma.ListingExpenseUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  confirmationCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  amountPaid: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ListingExpenseUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ListingExpenseUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  confirmationCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expenseId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  listingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  amountPaid: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  ownerStatementId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const OwnerStatementCreateInputSchema: z.ZodType<Prisma.OwnerStatementCreateInput> = z.object({
  id: z.string().optional(),
  month: z.number(),
  year: z.number(),
  locked: z.boolean().optional(),
  isCoHost: z.boolean().optional(),
  listing: z.lazy(() => ListingCreateNestedOneWithoutOwnerStatementsInputSchema),
  listingExpenses: z.lazy(() => ListingExpenseCreateNestedManyWithoutOwnerStatementInputSchema).optional(),
  revenue: z.lazy(() => RevenueCreateNestedManyWithoutOwnerStatementInputSchema).optional()
}).strict();

export const OwnerStatementUncheckedCreateInputSchema: z.ZodType<Prisma.OwnerStatementUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  listingId: z.string(),
  month: z.number(),
  year: z.number(),
  locked: z.boolean().optional(),
  isCoHost: z.boolean().optional(),
  listingExpenses: z.lazy(() => ListingExpenseUncheckedCreateNestedManyWithoutOwnerStatementInputSchema).optional(),
  revenue: z.lazy(() => RevenueUncheckedCreateNestedManyWithoutOwnerStatementInputSchema).optional()
}).strict();

export const OwnerStatementUpdateInputSchema: z.ZodType<Prisma.OwnerStatementUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  month: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  locked: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isCoHost: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  listing: z.lazy(() => ListingUpdateOneRequiredWithoutOwnerStatementsNestedInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUpdateManyWithoutOwnerStatementNestedInputSchema).optional(),
  revenue: z.lazy(() => RevenueUpdateManyWithoutOwnerStatementNestedInputSchema).optional()
}).strict();

export const OwnerStatementUncheckedUpdateInputSchema: z.ZodType<Prisma.OwnerStatementUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  listingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  month: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  locked: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isCoHost: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUncheckedUpdateManyWithoutOwnerStatementNestedInputSchema).optional(),
  revenue: z.lazy(() => RevenueUncheckedUpdateManyWithoutOwnerStatementNestedInputSchema).optional()
}).strict();

export const OwnerStatementCreateManyInputSchema: z.ZodType<Prisma.OwnerStatementCreateManyInput> = z.object({
  id: z.string().optional(),
  listingId: z.string(),
  month: z.number(),
  year: z.number(),
  locked: z.boolean().optional(),
  isCoHost: z.boolean().optional()
}).strict();

export const OwnerStatementUpdateManyMutationInputSchema: z.ZodType<Prisma.OwnerStatementUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  month: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  locked: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isCoHost: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const OwnerStatementUncheckedUpdateManyInputSchema: z.ZodType<Prisma.OwnerStatementUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  listingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  month: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  locked: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isCoHost: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PlaidItemCreateInputSchema: z.ZodType<Prisma.PlaidItemCreateInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  accessToken: z.string(),
  cursor: z.string().optional().nullable(),
  institution: z.string(),
  institutionId: z.string(),
  creator: z.lazy(() => UserCreateNestedOneWithoutPlaidItemsInputSchema),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutPlaidItemsInputSchema),
  accounts: z.lazy(() => PlaidAccountCreateNestedManyWithoutItemInputSchema).optional()
}).strict();

export const PlaidItemUncheckedCreateInputSchema: z.ZodType<Prisma.PlaidItemUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  accessToken: z.string(),
  cursor: z.string().optional().nullable(),
  institution: z.string(),
  institutionId: z.string(),
  creatorId: z.string(),
  organizationId: z.string(),
  accounts: z.lazy(() => PlaidAccountUncheckedCreateNestedManyWithoutItemInputSchema).optional()
}).strict();

export const PlaidItemUpdateInputSchema: z.ZodType<Prisma.PlaidItemUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  accessToken: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cursor: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  institution: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  institutionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  creator: z.lazy(() => UserUpdateOneRequiredWithoutPlaidItemsNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutPlaidItemsNestedInputSchema).optional(),
  accounts: z.lazy(() => PlaidAccountUpdateManyWithoutItemNestedInputSchema).optional()
}).strict();

export const PlaidItemUncheckedUpdateInputSchema: z.ZodType<Prisma.PlaidItemUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  accessToken: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cursor: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  institution: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  institutionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  creatorId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accounts: z.lazy(() => PlaidAccountUncheckedUpdateManyWithoutItemNestedInputSchema).optional()
}).strict();

export const PlaidItemCreateManyInputSchema: z.ZodType<Prisma.PlaidItemCreateManyInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  accessToken: z.string(),
  cursor: z.string().optional().nullable(),
  institution: z.string(),
  institutionId: z.string(),
  creatorId: z.string(),
  organizationId: z.string()
}).strict();

export const PlaidItemUpdateManyMutationInputSchema: z.ZodType<Prisma.PlaidItemUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  accessToken: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cursor: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  institution: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  institutionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PlaidItemUncheckedUpdateManyInputSchema: z.ZodType<Prisma.PlaidItemUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  accessToken: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cursor: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  institution: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  institutionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  creatorId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PlaidAccountCreateInputSchema: z.ZodType<Prisma.PlaidAccountCreateInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  plaidId: z.string(),
  name: z.string(),
  mask: z.string(),
  type: z.string(),
  subtype: z.string(),
  verificationStatus: z.string().optional().nullable(),
  item: z.lazy(() => PlaidItemCreateNestedOneWithoutAccountsInputSchema),
  transactions: z.lazy(() => PlaidTransactionCreateNestedManyWithoutAccountInputSchema).optional()
}).strict();

export const PlaidAccountUncheckedCreateInputSchema: z.ZodType<Prisma.PlaidAccountUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  itemId: z.string(),
  plaidId: z.string(),
  name: z.string(),
  mask: z.string(),
  type: z.string(),
  subtype: z.string(),
  verificationStatus: z.string().optional().nullable(),
  transactions: z.lazy(() => PlaidTransactionUncheckedCreateNestedManyWithoutAccountInputSchema).optional()
}).strict();

export const PlaidAccountUpdateInputSchema: z.ZodType<Prisma.PlaidAccountUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  plaidId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mask: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subtype: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  verificationStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  item: z.lazy(() => PlaidItemUpdateOneRequiredWithoutAccountsNestedInputSchema).optional(),
  transactions: z.lazy(() => PlaidTransactionUpdateManyWithoutAccountNestedInputSchema).optional()
}).strict();

export const PlaidAccountUncheckedUpdateInputSchema: z.ZodType<Prisma.PlaidAccountUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  itemId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  plaidId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mask: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subtype: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  verificationStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  transactions: z.lazy(() => PlaidTransactionUncheckedUpdateManyWithoutAccountNestedInputSchema).optional()
}).strict();

export const PlaidAccountCreateManyInputSchema: z.ZodType<Prisma.PlaidAccountCreateManyInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  itemId: z.string(),
  plaidId: z.string(),
  name: z.string(),
  mask: z.string(),
  type: z.string(),
  subtype: z.string(),
  verificationStatus: z.string().optional().nullable()
}).strict();

export const PlaidAccountUpdateManyMutationInputSchema: z.ZodType<Prisma.PlaidAccountUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  plaidId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mask: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subtype: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  verificationStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PlaidAccountUncheckedUpdateManyInputSchema: z.ZodType<Prisma.PlaidAccountUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  itemId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  plaidId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mask: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subtype: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  verificationStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PlaidTransactionCreateInputSchema: z.ZodType<Prisma.PlaidTransactionCreateInput> = z.object({
  id: z.string().optional(),
  plaidId: z.string(),
  status: z.lazy(() => PlaidImportStatusSchema).optional(),
  date: z.coerce.date(),
  amount: z.number(),
  vendor: z.string(),
  name: z.string(),
  account: z.lazy(() => PlaidAccountCreateNestedOneWithoutTransactionsInputSchema),
  expense: z.lazy(() => ExpenseCreateNestedOneWithoutPlaidTransactionInputSchema).optional(),
  payout: z.lazy(() => PayoutCreateNestedOneWithoutPlaidTransactionInputSchema).optional()
}).strict();

export const PlaidTransactionUncheckedCreateInputSchema: z.ZodType<Prisma.PlaidTransactionUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  accountId: z.string(),
  plaidId: z.string(),
  status: z.lazy(() => PlaidImportStatusSchema).optional(),
  date: z.coerce.date(),
  amount: z.number(),
  vendor: z.string(),
  name: z.string(),
  expense: z.lazy(() => ExpenseUncheckedCreateNestedOneWithoutPlaidTransactionInputSchema).optional(),
  payout: z.lazy(() => PayoutUncheckedCreateNestedOneWithoutPlaidTransactionInputSchema).optional()
}).strict();

export const PlaidTransactionUpdateInputSchema: z.ZodType<Prisma.PlaidTransactionUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  plaidId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => PlaidImportStatusSchema),z.lazy(() => EnumPlaidImportStatusFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  vendor: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account: z.lazy(() => PlaidAccountUpdateOneRequiredWithoutTransactionsNestedInputSchema).optional(),
  expense: z.lazy(() => ExpenseUpdateOneWithoutPlaidTransactionNestedInputSchema).optional(),
  payout: z.lazy(() => PayoutUpdateOneWithoutPlaidTransactionNestedInputSchema).optional()
}).strict();

export const PlaidTransactionUncheckedUpdateInputSchema: z.ZodType<Prisma.PlaidTransactionUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  plaidId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => PlaidImportStatusSchema),z.lazy(() => EnumPlaidImportStatusFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  vendor: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expense: z.lazy(() => ExpenseUncheckedUpdateOneWithoutPlaidTransactionNestedInputSchema).optional(),
  payout: z.lazy(() => PayoutUncheckedUpdateOneWithoutPlaidTransactionNestedInputSchema).optional()
}).strict();

export const PlaidTransactionCreateManyInputSchema: z.ZodType<Prisma.PlaidTransactionCreateManyInput> = z.object({
  id: z.string().optional(),
  accountId: z.string(),
  plaidId: z.string(),
  status: z.lazy(() => PlaidImportStatusSchema).optional(),
  date: z.coerce.date(),
  amount: z.number(),
  vendor: z.string(),
  name: z.string()
}).strict();

export const PlaidTransactionUpdateManyMutationInputSchema: z.ZodType<Prisma.PlaidTransactionUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  plaidId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => PlaidImportStatusSchema),z.lazy(() => EnumPlaidImportStatusFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  vendor: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PlaidTransactionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.PlaidTransactionUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  plaidId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => PlaidImportStatusSchema),z.lazy(() => EnumPlaidImportStatusFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  vendor: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DailyRateCreateInputSchema: z.ZodType<Prisma.DailyRateCreateInput> = z.object({
  id: z.string().optional(),
  date: z.coerce.date(),
  rate: z.number(),
  minStay: z.number().optional(),
  listing: z.lazy(() => ListingCreateNestedOneWithoutDailyRatesInputSchema)
}).strict();

export const DailyRateUncheckedCreateInputSchema: z.ZodType<Prisma.DailyRateUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  listingId: z.string(),
  date: z.coerce.date(),
  rate: z.number(),
  minStay: z.number().optional()
}).strict();

export const DailyRateUpdateInputSchema: z.ZodType<Prisma.DailyRateUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  rate: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  minStay: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  listing: z.lazy(() => ListingUpdateOneRequiredWithoutDailyRatesNestedInputSchema).optional()
}).strict();

export const DailyRateUncheckedUpdateInputSchema: z.ZodType<Prisma.DailyRateUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  listingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  rate: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  minStay: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DailyRateCreateManyInputSchema: z.ZodType<Prisma.DailyRateCreateManyInput> = z.object({
  id: z.string().optional(),
  listingId: z.string(),
  date: z.coerce.date(),
  rate: z.number(),
  minStay: z.number().optional()
}).strict();

export const DailyRateUpdateManyMutationInputSchema: z.ZodType<Prisma.DailyRateUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  rate: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  minStay: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DailyRateUncheckedUpdateManyInputSchema: z.ZodType<Prisma.DailyRateUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  listingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  rate: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  minStay: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PayoutCreateInputSchema: z.ZodType<Prisma.PayoutCreateInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  date: z.coerce.date(),
  amount: z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  allocated: z.boolean().optional(),
  plaidTransaction: z.lazy(() => PlaidTransactionCreateNestedOneWithoutPayoutInputSchema).optional(),
  revenuePayout: z.lazy(() => RevenuePayoutCreateNestedManyWithoutPayoutInputSchema).optional()
}).strict();

export const PayoutUncheckedCreateInputSchema: z.ZodType<Prisma.PayoutUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  date: z.coerce.date(),
  amount: z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  allocated: z.boolean().optional(),
  plaidTransactionId: z.string().optional().nullable(),
  revenuePayout: z.lazy(() => RevenuePayoutUncheckedCreateNestedManyWithoutPayoutInputSchema).optional()
}).strict();

export const PayoutUpdateInputSchema: z.ZodType<Prisma.PayoutUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  allocated: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  plaidTransaction: z.lazy(() => PlaidTransactionUpdateOneWithoutPayoutNestedInputSchema).optional(),
  revenuePayout: z.lazy(() => RevenuePayoutUpdateManyWithoutPayoutNestedInputSchema).optional()
}).strict();

export const PayoutUncheckedUpdateInputSchema: z.ZodType<Prisma.PayoutUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  allocated: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  plaidTransactionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  revenuePayout: z.lazy(() => RevenuePayoutUncheckedUpdateManyWithoutPayoutNestedInputSchema).optional()
}).strict();

export const PayoutCreateManyInputSchema: z.ZodType<Prisma.PayoutCreateManyInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  date: z.coerce.date(),
  amount: z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  allocated: z.boolean().optional(),
  plaidTransactionId: z.string().optional().nullable()
}).strict();

export const PayoutUpdateManyMutationInputSchema: z.ZodType<Prisma.PayoutUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  allocated: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PayoutUncheckedUpdateManyInputSchema: z.ZodType<Prisma.PayoutUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  allocated: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  plaidTransactionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const RevenuePayoutCreateInputSchema: z.ZodType<Prisma.RevenuePayoutCreateInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  amount: z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutRevenuePayoutsInputSchema).optional(),
  payout: z.lazy(() => PayoutCreateNestedOneWithoutRevenuePayoutInputSchema),
  revenue: z.lazy(() => RevenueCreateNestedOneWithoutPayoutInputSchema)
}).strict();

export const RevenuePayoutUncheckedCreateInputSchema: z.ZodType<Prisma.RevenuePayoutUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdById: z.string().optional().nullable(),
  payoutId: z.string(),
  revenueId: z.string(),
  amount: z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
}).strict();

export const RevenuePayoutUpdateInputSchema: z.ZodType<Prisma.RevenuePayoutUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  createdBy: z.lazy(() => UserUpdateOneWithoutRevenuePayoutsNestedInputSchema).optional(),
  payout: z.lazy(() => PayoutUpdateOneRequiredWithoutRevenuePayoutNestedInputSchema).optional(),
  revenue: z.lazy(() => RevenueUpdateOneRequiredWithoutPayoutNestedInputSchema).optional()
}).strict();

export const RevenuePayoutUncheckedUpdateInputSchema: z.ZodType<Prisma.RevenuePayoutUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payoutId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  revenueId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RevenuePayoutCreateManyInputSchema: z.ZodType<Prisma.RevenuePayoutCreateManyInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdById: z.string().optional().nullable(),
  payoutId: z.string(),
  revenueId: z.string(),
  amount: z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
}).strict();

export const RevenuePayoutUpdateManyMutationInputSchema: z.ZodType<Prisma.RevenuePayoutUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RevenuePayoutUncheckedUpdateManyInputSchema: z.ZodType<Prisma.RevenuePayoutUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payoutId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  revenueId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const StringFilterSchema: z.ZodType<Prisma.StringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringFilterSchema) ]).optional(),
}).strict();

export const StringNullableFilterSchema: z.ZodType<Prisma.StringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const IntNullableFilterSchema: z.ZodType<Prisma.IntNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const UserRelationFilterSchema: z.ZodType<Prisma.UserRelationFilter> = z.object({
  is: z.lazy(() => UserWhereInputSchema).optional(),
  isNot: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const SortOrderInputSchema: z.ZodType<Prisma.SortOrderInput> = z.object({
  sort: z.lazy(() => SortOrderSchema),
  nulls: z.lazy(() => NullsOrderSchema).optional()
}).strict();

export const AccountProviderProviderAccountIdCompoundUniqueInputSchema: z.ZodType<Prisma.AccountProviderProviderAccountIdCompoundUniqueInput> = z.object({
  provider: z.string(),
  providerAccountId: z.string()
}).strict();

export const AccountCountOrderByAggregateInputSchema: z.ZodType<Prisma.AccountCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  provider: z.lazy(() => SortOrderSchema).optional(),
  providerAccountId: z.lazy(() => SortOrderSchema).optional(),
  refresh_token: z.lazy(() => SortOrderSchema).optional(),
  access_token: z.lazy(() => SortOrderSchema).optional(),
  expires_at: z.lazy(() => SortOrderSchema).optional(),
  token_type: z.lazy(() => SortOrderSchema).optional(),
  scope: z.lazy(() => SortOrderSchema).optional(),
  id_token: z.lazy(() => SortOrderSchema).optional(),
  session_state: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AccountAvgOrderByAggregateInputSchema: z.ZodType<Prisma.AccountAvgOrderByAggregateInput> = z.object({
  expires_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AccountMaxOrderByAggregateInputSchema: z.ZodType<Prisma.AccountMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  provider: z.lazy(() => SortOrderSchema).optional(),
  providerAccountId: z.lazy(() => SortOrderSchema).optional(),
  refresh_token: z.lazy(() => SortOrderSchema).optional(),
  access_token: z.lazy(() => SortOrderSchema).optional(),
  expires_at: z.lazy(() => SortOrderSchema).optional(),
  token_type: z.lazy(() => SortOrderSchema).optional(),
  scope: z.lazy(() => SortOrderSchema).optional(),
  id_token: z.lazy(() => SortOrderSchema).optional(),
  session_state: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AccountMinOrderByAggregateInputSchema: z.ZodType<Prisma.AccountMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  provider: z.lazy(() => SortOrderSchema).optional(),
  providerAccountId: z.lazy(() => SortOrderSchema).optional(),
  refresh_token: z.lazy(() => SortOrderSchema).optional(),
  access_token: z.lazy(() => SortOrderSchema).optional(),
  expires_at: z.lazy(() => SortOrderSchema).optional(),
  token_type: z.lazy(() => SortOrderSchema).optional(),
  scope: z.lazy(() => SortOrderSchema).optional(),
  id_token: z.lazy(() => SortOrderSchema).optional(),
  session_state: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AccountSumOrderByAggregateInputSchema: z.ZodType<Prisma.AccountSumOrderByAggregateInput> = z.object({
  expires_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const StringWithAggregatesFilterSchema: z.ZodType<Prisma.StringWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const StringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.StringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const IntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.IntNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();

export const DateTimeFilterSchema: z.ZodType<Prisma.DateTimeFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeFilterSchema) ]).optional(),
}).strict();

export const SessionCountOrderByAggregateInputSchema: z.ZodType<Prisma.SessionCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  sessionToken: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SessionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SessionMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  sessionToken: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SessionMinOrderByAggregateInputSchema: z.ZodType<Prisma.SessionMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  sessionToken: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();

export const DateTimeNullableFilterSchema: z.ZodType<Prisma.DateTimeNullableFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const EnumGlobalRoleFilterSchema: z.ZodType<Prisma.EnumGlobalRoleFilter> = z.object({
  equals: z.lazy(() => GlobalRoleSchema).optional(),
  in: z.lazy(() => GlobalRoleSchema).array().optional(),
  notIn: z.lazy(() => GlobalRoleSchema).array().optional(),
  not: z.union([ z.lazy(() => GlobalRoleSchema),z.lazy(() => NestedEnumGlobalRoleFilterSchema) ]).optional(),
}).strict();

export const EnumOrganizationRoleNullableFilterSchema: z.ZodType<Prisma.EnumOrganizationRoleNullableFilter> = z.object({
  equals: z.lazy(() => OrganizationRoleSchema).optional().nullable(),
  in: z.lazy(() => OrganizationRoleSchema).array().optional().nullable(),
  notIn: z.lazy(() => OrganizationRoleSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => OrganizationRoleSchema),z.lazy(() => NestedEnumOrganizationRoleNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const AccountListRelationFilterSchema: z.ZodType<Prisma.AccountListRelationFilter> = z.object({
  every: z.lazy(() => AccountWhereInputSchema).optional(),
  some: z.lazy(() => AccountWhereInputSchema).optional(),
  none: z.lazy(() => AccountWhereInputSchema).optional()
}).strict();

export const SessionListRelationFilterSchema: z.ZodType<Prisma.SessionListRelationFilter> = z.object({
  every: z.lazy(() => SessionWhereInputSchema).optional(),
  some: z.lazy(() => SessionWhereInputSchema).optional(),
  none: z.lazy(() => SessionWhereInputSchema).optional()
}).strict();

export const OrganizationNullableRelationFilterSchema: z.ZodType<Prisma.OrganizationNullableRelationFilter> = z.object({
  is: z.lazy(() => OrganizationWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => OrganizationWhereInputSchema).optional().nullable()
}).strict();

export const ListingListRelationFilterSchema: z.ZodType<Prisma.ListingListRelationFilter> = z.object({
  every: z.lazy(() => ListingWhereInputSchema).optional(),
  some: z.lazy(() => ListingWhereInputSchema).optional(),
  none: z.lazy(() => ListingWhereInputSchema).optional()
}).strict();

export const ExpenseListRelationFilterSchema: z.ZodType<Prisma.ExpenseListRelationFilter> = z.object({
  every: z.lazy(() => ExpenseWhereInputSchema).optional(),
  some: z.lazy(() => ExpenseWhereInputSchema).optional(),
  none: z.lazy(() => ExpenseWhereInputSchema).optional()
}).strict();

export const BookingPalConnectionNullableRelationFilterSchema: z.ZodType<Prisma.BookingPalConnectionNullableRelationFilter> = z.object({
  is: z.lazy(() => BookingPalConnectionWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => BookingPalConnectionWhereInputSchema).optional().nullable()
}).strict();

export const PlaidItemListRelationFilterSchema: z.ZodType<Prisma.PlaidItemListRelationFilter> = z.object({
  every: z.lazy(() => PlaidItemWhereInputSchema).optional(),
  some: z.lazy(() => PlaidItemWhereInputSchema).optional(),
  none: z.lazy(() => PlaidItemWhereInputSchema).optional()
}).strict();

export const RevenuePayoutListRelationFilterSchema: z.ZodType<Prisma.RevenuePayoutListRelationFilter> = z.object({
  every: z.lazy(() => RevenuePayoutWhereInputSchema).optional(),
  some: z.lazy(() => RevenuePayoutWhereInputSchema).optional(),
  none: z.lazy(() => RevenuePayoutWhereInputSchema).optional()
}).strict();

export const AccountOrderByRelationAggregateInputSchema: z.ZodType<Prisma.AccountOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SessionOrderByRelationAggregateInputSchema: z.ZodType<Prisma.SessionOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ListingOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ListingOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ExpenseOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ExpenseOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PlaidItemOrderByRelationAggregateInputSchema: z.ZodType<Prisma.PlaidItemOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RevenuePayoutOrderByRelationAggregateInputSchema: z.ZodType<Prisma.RevenuePayoutOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserCountOrderByAggregateInputSchema: z.ZodType<Prisma.UserCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  emailVerified: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  globalRole: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  organizationRole: z.lazy(() => SortOrderSchema).optional(),
  ownerEntity: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserMaxOrderByAggregateInputSchema: z.ZodType<Prisma.UserMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  emailVerified: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  globalRole: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  organizationRole: z.lazy(() => SortOrderSchema).optional(),
  ownerEntity: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserMinOrderByAggregateInputSchema: z.ZodType<Prisma.UserMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  emailVerified: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  globalRole: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  organizationRole: z.lazy(() => SortOrderSchema).optional(),
  ownerEntity: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeNullableWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
}).strict();

export const EnumGlobalRoleWithAggregatesFilterSchema: z.ZodType<Prisma.EnumGlobalRoleWithAggregatesFilter> = z.object({
  equals: z.lazy(() => GlobalRoleSchema).optional(),
  in: z.lazy(() => GlobalRoleSchema).array().optional(),
  notIn: z.lazy(() => GlobalRoleSchema).array().optional(),
  not: z.union([ z.lazy(() => GlobalRoleSchema),z.lazy(() => NestedEnumGlobalRoleWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumGlobalRoleFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumGlobalRoleFilterSchema).optional()
}).strict();

export const EnumOrganizationRoleNullableWithAggregatesFilterSchema: z.ZodType<Prisma.EnumOrganizationRoleNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => OrganizationRoleSchema).optional().nullable(),
  in: z.lazy(() => OrganizationRoleSchema).array().optional().nullable(),
  notIn: z.lazy(() => OrganizationRoleSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => OrganizationRoleSchema),z.lazy(() => NestedEnumOrganizationRoleNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumOrganizationRoleNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumOrganizationRoleNullableFilterSchema).optional()
}).strict();

export const VerificationTokenIdentifierTokenCompoundUniqueInputSchema: z.ZodType<Prisma.VerificationTokenIdentifierTokenCompoundUniqueInput> = z.object({
  identifier: z.string(),
  token: z.string()
}).strict();

export const VerificationTokenCountOrderByAggregateInputSchema: z.ZodType<Prisma.VerificationTokenCountOrderByAggregateInput> = z.object({
  identifier: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const VerificationTokenMaxOrderByAggregateInputSchema: z.ZodType<Prisma.VerificationTokenMaxOrderByAggregateInput> = z.object({
  identifier: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const VerificationTokenMinOrderByAggregateInputSchema: z.ZodType<Prisma.VerificationTokenMinOrderByAggregateInput> = z.object({
  identifier: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BoolFilterSchema: z.ZodType<Prisma.BoolFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolFilterSchema) ]).optional(),
}).strict();

export const UserListRelationFilterSchema: z.ZodType<Prisma.UserListRelationFilter> = z.object({
  every: z.lazy(() => UserWhereInputSchema).optional(),
  some: z.lazy(() => UserWhereInputSchema).optional(),
  none: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const MessageTemplateListRelationFilterSchema: z.ZodType<Prisma.MessageTemplateListRelationFilter> = z.object({
  every: z.lazy(() => MessageTemplateWhereInputSchema).optional(),
  some: z.lazy(() => MessageTemplateWhereInputSchema).optional(),
  none: z.lazy(() => MessageTemplateWhereInputSchema).optional()
}).strict();

export const GuestListRelationFilterSchema: z.ZodType<Prisma.GuestListRelationFilter> = z.object({
  every: z.lazy(() => GuestWhereInputSchema).optional(),
  some: z.lazy(() => GuestWhereInputSchema).optional(),
  none: z.lazy(() => GuestWhereInputSchema).optional()
}).strict();

export const PriceLabsConnectionNullableRelationFilterSchema: z.ZodType<Prisma.PriceLabsConnectionNullableRelationFilter> = z.object({
  is: z.lazy(() => PriceLabsConnectionWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => PriceLabsConnectionWhereInputSchema).optional().nullable()
}).strict();

export const StripeConnectionNullableRelationFilterSchema: z.ZodType<Prisma.StripeConnectionNullableRelationFilter> = z.object({
  is: z.lazy(() => StripeConnectionWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => StripeConnectionWhereInputSchema).optional().nullable()
}).strict();

export const UserOrderByRelationAggregateInputSchema: z.ZodType<Prisma.UserOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MessageTemplateOrderByRelationAggregateInputSchema: z.ZodType<Prisma.MessageTemplateOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const GuestOrderByRelationAggregateInputSchema: z.ZodType<Prisma.GuestOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationCountOrderByAggregateInputSchema: z.ZodType<Prisma.OrganizationCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  language: z.lazy(() => SortOrderSchema).optional(),
  adminName: z.lazy(() => SortOrderSchema).optional(),
  line1: z.lazy(() => SortOrderSchema).optional(),
  line2: z.lazy(() => SortOrderSchema).optional(),
  city: z.lazy(() => SortOrderSchema).optional(),
  state: z.lazy(() => SortOrderSchema).optional(),
  zip: z.lazy(() => SortOrderSchema).optional(),
  country: z.lazy(() => SortOrderSchema).optional(),
  website: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  startDate: z.lazy(() => SortOrderSchema).optional(),
  directBooking: z.lazy(() => SortOrderSchema).optional(),
  logoUrl: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationMaxOrderByAggregateInputSchema: z.ZodType<Prisma.OrganizationMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  language: z.lazy(() => SortOrderSchema).optional(),
  adminName: z.lazy(() => SortOrderSchema).optional(),
  line1: z.lazy(() => SortOrderSchema).optional(),
  line2: z.lazy(() => SortOrderSchema).optional(),
  city: z.lazy(() => SortOrderSchema).optional(),
  state: z.lazy(() => SortOrderSchema).optional(),
  zip: z.lazy(() => SortOrderSchema).optional(),
  country: z.lazy(() => SortOrderSchema).optional(),
  website: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  startDate: z.lazy(() => SortOrderSchema).optional(),
  directBooking: z.lazy(() => SortOrderSchema).optional(),
  logoUrl: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationMinOrderByAggregateInputSchema: z.ZodType<Prisma.OrganizationMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  language: z.lazy(() => SortOrderSchema).optional(),
  adminName: z.lazy(() => SortOrderSchema).optional(),
  line1: z.lazy(() => SortOrderSchema).optional(),
  line2: z.lazy(() => SortOrderSchema).optional(),
  city: z.lazy(() => SortOrderSchema).optional(),
  state: z.lazy(() => SortOrderSchema).optional(),
  zip: z.lazy(() => SortOrderSchema).optional(),
  country: z.lazy(() => SortOrderSchema).optional(),
  website: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  startDate: z.lazy(() => SortOrderSchema).optional(),
  directBooking: z.lazy(() => SortOrderSchema).optional(),
  logoUrl: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BoolWithAggregatesFilterSchema: z.ZodType<Prisma.BoolWithAggregatesFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolFilterSchema).optional()
}).strict();

export const IntFilterSchema: z.ZodType<Prisma.IntFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntFilterSchema) ]).optional(),
}).strict();

export const UserNullableRelationFilterSchema: z.ZodType<Prisma.UserNullableRelationFilter> = z.object({
  is: z.lazy(() => UserWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => UserWhereInputSchema).optional().nullable()
}).strict();

export const BookingPalConnectionCountOrderByAggregateInputSchema: z.ZodType<Prisma.BookingPalConnectionCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  companyId: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  ownerId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BookingPalConnectionAvgOrderByAggregateInputSchema: z.ZodType<Prisma.BookingPalConnectionAvgOrderByAggregateInput> = z.object({
  companyId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BookingPalConnectionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.BookingPalConnectionMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  companyId: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  ownerId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BookingPalConnectionMinOrderByAggregateInputSchema: z.ZodType<Prisma.BookingPalConnectionMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  companyId: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  ownerId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BookingPalConnectionSumOrderByAggregateInputSchema: z.ZodType<Prisma.BookingPalConnectionSumOrderByAggregateInput> = z.object({
  companyId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntWithAggregatesFilterSchema: z.ZodType<Prisma.IntWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedIntFilterSchema).optional(),
  _max: z.lazy(() => NestedIntFilterSchema).optional()
}).strict();

export const PriceLabsConnectionCountOrderByAggregateInputSchema: z.ZodType<Prisma.PriceLabsConnectionCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  accountEmail: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PriceLabsConnectionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.PriceLabsConnectionMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  accountEmail: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PriceLabsConnectionMinOrderByAggregateInputSchema: z.ZodType<Prisma.PriceLabsConnectionMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  accountEmail: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationRelationFilterSchema: z.ZodType<Prisma.OrganizationRelationFilter> = z.object({
  is: z.lazy(() => OrganizationWhereInputSchema).optional(),
  isNot: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const StripeConnectionCountOrderByAggregateInputSchema: z.ZodType<Prisma.StripeConnectionCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  accountId: z.lazy(() => SortOrderSchema).optional(),
  detailsSubmitted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const StripeConnectionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.StripeConnectionMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  accountId: z.lazy(() => SortOrderSchema).optional(),
  detailsSubmitted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const StripeConnectionMinOrderByAggregateInputSchema: z.ZodType<Prisma.StripeConnectionMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  accountId: z.lazy(() => SortOrderSchema).optional(),
  detailsSubmitted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumUnitTypeFilterSchema: z.ZodType<Prisma.EnumUnitTypeFilter> = z.object({
  equals: z.lazy(() => UnitTypeSchema).optional(),
  in: z.lazy(() => UnitTypeSchema).array().optional(),
  notIn: z.lazy(() => UnitTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => UnitTypeSchema),z.lazy(() => NestedEnumUnitTypeFilterSchema) ]).optional(),
}).strict();

export const FloatFilterSchema: z.ZodType<Prisma.FloatFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatFilterSchema) ]).optional(),
}).strict();

export const FloatNullableFilterSchema: z.ZodType<Prisma.FloatNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const ContentNullableRelationFilterSchema: z.ZodType<Prisma.ContentNullableRelationFilter> = z.object({
  is: z.lazy(() => ContentWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => ContentWhereInputSchema).optional().nullable()
}).strict();

export const RulesNullableRelationFilterSchema: z.ZodType<Prisma.RulesNullableRelationFilter> = z.object({
  is: z.lazy(() => RulesWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => RulesWhereInputSchema).optional().nullable()
}).strict();

export const PricingNullableRelationFilterSchema: z.ZodType<Prisma.PricingNullableRelationFilter> = z.object({
  is: z.lazy(() => PricingWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => PricingWhereInputSchema).optional().nullable()
}).strict();

export const AvailabilityNullableRelationFilterSchema: z.ZodType<Prisma.AvailabilityNullableRelationFilter> = z.object({
  is: z.lazy(() => AvailabilityWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => AvailabilityWhereInputSchema).optional().nullable()
}).strict();

export const AmenityListRelationFilterSchema: z.ZodType<Prisma.AmenityListRelationFilter> = z.object({
  every: z.lazy(() => AmenityWhereInputSchema).optional(),
  some: z.lazy(() => AmenityWhereInputSchema).optional(),
  none: z.lazy(() => AmenityWhereInputSchema).optional()
}).strict();

export const FeeListRelationFilterSchema: z.ZodType<Prisma.FeeListRelationFilter> = z.object({
  every: z.lazy(() => FeeWhereInputSchema).optional(),
  some: z.lazy(() => FeeWhereInputSchema).optional(),
  none: z.lazy(() => FeeWhereInputSchema).optional()
}).strict();

export const TaxRatesNullableRelationFilterSchema: z.ZodType<Prisma.TaxRatesNullableRelationFilter> = z.object({
  is: z.lazy(() => TaxRatesWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => TaxRatesWhereInputSchema).optional().nullable()
}).strict();

export const CalendarEventListRelationFilterSchema: z.ZodType<Prisma.CalendarEventListRelationFilter> = z.object({
  every: z.lazy(() => CalendarEventWhereInputSchema).optional(),
  some: z.lazy(() => CalendarEventWhereInputSchema).optional(),
  none: z.lazy(() => CalendarEventWhereInputSchema).optional()
}).strict();

export const DeductionsNullableRelationFilterSchema: z.ZodType<Prisma.DeductionsNullableRelationFilter> = z.object({
  is: z.lazy(() => DeductionsWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => DeductionsWhereInputSchema).optional().nullable()
}).strict();

export const MessageThreadListRelationFilterSchema: z.ZodType<Prisma.MessageThreadListRelationFilter> = z.object({
  every: z.lazy(() => MessageThreadWhereInputSchema).optional(),
  some: z.lazy(() => MessageThreadWhereInputSchema).optional(),
  none: z.lazy(() => MessageThreadWhereInputSchema).optional()
}).strict();

export const ListingExpenseListRelationFilterSchema: z.ZodType<Prisma.ListingExpenseListRelationFilter> = z.object({
  every: z.lazy(() => ListingExpenseWhereInputSchema).optional(),
  some: z.lazy(() => ListingExpenseWhereInputSchema).optional(),
  none: z.lazy(() => ListingExpenseWhereInputSchema).optional()
}).strict();

export const OwnerStatementListRelationFilterSchema: z.ZodType<Prisma.OwnerStatementListRelationFilter> = z.object({
  every: z.lazy(() => OwnerStatementWhereInputSchema).optional(),
  some: z.lazy(() => OwnerStatementWhereInputSchema).optional(),
  none: z.lazy(() => OwnerStatementWhereInputSchema).optional()
}).strict();

export const DailyRateListRelationFilterSchema: z.ZodType<Prisma.DailyRateListRelationFilter> = z.object({
  every: z.lazy(() => DailyRateWhereInputSchema).optional(),
  some: z.lazy(() => DailyRateWhereInputSchema).optional(),
  none: z.lazy(() => DailyRateWhereInputSchema).optional()
}).strict();

export const ListingKeyListRelationFilterSchema: z.ZodType<Prisma.ListingKeyListRelationFilter> = z.object({
  every: z.lazy(() => ListingKeyWhereInputSchema).optional(),
  some: z.lazy(() => ListingKeyWhereInputSchema).optional(),
  none: z.lazy(() => ListingKeyWhereInputSchema).optional()
}).strict();

export const AmenityOrderByRelationAggregateInputSchema: z.ZodType<Prisma.AmenityOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FeeOrderByRelationAggregateInputSchema: z.ZodType<Prisma.FeeOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CalendarEventOrderByRelationAggregateInputSchema: z.ZodType<Prisma.CalendarEventOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MessageThreadOrderByRelationAggregateInputSchema: z.ZodType<Prisma.MessageThreadOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ListingExpenseOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ListingExpenseOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OwnerStatementOrderByRelationAggregateInputSchema: z.ZodType<Prisma.OwnerStatementOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DailyRateOrderByRelationAggregateInputSchema: z.ZodType<Prisma.DailyRateOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ListingKeyOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ListingKeyOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ListingCountOrderByAggregateInputSchema: z.ZodType<Prisma.ListingCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  unitType: z.lazy(() => SortOrderSchema).optional(),
  beds: z.lazy(() => SortOrderSchema).optional(),
  baths: z.lazy(() => SortOrderSchema).optional(),
  guests: z.lazy(() => SortOrderSchema).optional(),
  line1: z.lazy(() => SortOrderSchema).optional(),
  line2: z.lazy(() => SortOrderSchema).optional(),
  city: z.lazy(() => SortOrderSchema).optional(),
  state: z.lazy(() => SortOrderSchema).optional(),
  zip: z.lazy(() => SortOrderSchema).optional(),
  country: z.lazy(() => SortOrderSchema).optional(),
  latitude: z.lazy(() => SortOrderSchema).optional(),
  longitude: z.lazy(() => SortOrderSchema).optional(),
  timeZone: z.lazy(() => SortOrderSchema).optional(),
  airbnbRemitsTaxes: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  propertyManagerId: z.lazy(() => SortOrderSchema).optional(),
  propertyOwnerId: z.lazy(() => SortOrderSchema).optional(),
  wifiName: z.lazy(() => SortOrderSchema).optional(),
  wifiPassword: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  bpProductId: z.lazy(() => SortOrderSchema).optional(),
  doorCode: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  basePrice: z.lazy(() => SortOrderSchema).optional(),
  iCalKey: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ListingAvgOrderByAggregateInputSchema: z.ZodType<Prisma.ListingAvgOrderByAggregateInput> = z.object({
  beds: z.lazy(() => SortOrderSchema).optional(),
  baths: z.lazy(() => SortOrderSchema).optional(),
  guests: z.lazy(() => SortOrderSchema).optional(),
  latitude: z.lazy(() => SortOrderSchema).optional(),
  longitude: z.lazy(() => SortOrderSchema).optional(),
  basePrice: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ListingMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ListingMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  unitType: z.lazy(() => SortOrderSchema).optional(),
  beds: z.lazy(() => SortOrderSchema).optional(),
  baths: z.lazy(() => SortOrderSchema).optional(),
  guests: z.lazy(() => SortOrderSchema).optional(),
  line1: z.lazy(() => SortOrderSchema).optional(),
  line2: z.lazy(() => SortOrderSchema).optional(),
  city: z.lazy(() => SortOrderSchema).optional(),
  state: z.lazy(() => SortOrderSchema).optional(),
  zip: z.lazy(() => SortOrderSchema).optional(),
  country: z.lazy(() => SortOrderSchema).optional(),
  latitude: z.lazy(() => SortOrderSchema).optional(),
  longitude: z.lazy(() => SortOrderSchema).optional(),
  timeZone: z.lazy(() => SortOrderSchema).optional(),
  airbnbRemitsTaxes: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  propertyManagerId: z.lazy(() => SortOrderSchema).optional(),
  propertyOwnerId: z.lazy(() => SortOrderSchema).optional(),
  wifiName: z.lazy(() => SortOrderSchema).optional(),
  wifiPassword: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  bpProductId: z.lazy(() => SortOrderSchema).optional(),
  doorCode: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  basePrice: z.lazy(() => SortOrderSchema).optional(),
  iCalKey: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ListingMinOrderByAggregateInputSchema: z.ZodType<Prisma.ListingMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  unitType: z.lazy(() => SortOrderSchema).optional(),
  beds: z.lazy(() => SortOrderSchema).optional(),
  baths: z.lazy(() => SortOrderSchema).optional(),
  guests: z.lazy(() => SortOrderSchema).optional(),
  line1: z.lazy(() => SortOrderSchema).optional(),
  line2: z.lazy(() => SortOrderSchema).optional(),
  city: z.lazy(() => SortOrderSchema).optional(),
  state: z.lazy(() => SortOrderSchema).optional(),
  zip: z.lazy(() => SortOrderSchema).optional(),
  country: z.lazy(() => SortOrderSchema).optional(),
  latitude: z.lazy(() => SortOrderSchema).optional(),
  longitude: z.lazy(() => SortOrderSchema).optional(),
  timeZone: z.lazy(() => SortOrderSchema).optional(),
  airbnbRemitsTaxes: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  propertyManagerId: z.lazy(() => SortOrderSchema).optional(),
  propertyOwnerId: z.lazy(() => SortOrderSchema).optional(),
  wifiName: z.lazy(() => SortOrderSchema).optional(),
  wifiPassword: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  bpProductId: z.lazy(() => SortOrderSchema).optional(),
  doorCode: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  basePrice: z.lazy(() => SortOrderSchema).optional(),
  iCalKey: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ListingSumOrderByAggregateInputSchema: z.ZodType<Prisma.ListingSumOrderByAggregateInput> = z.object({
  beds: z.lazy(() => SortOrderSchema).optional(),
  baths: z.lazy(() => SortOrderSchema).optional(),
  guests: z.lazy(() => SortOrderSchema).optional(),
  latitude: z.lazy(() => SortOrderSchema).optional(),
  longitude: z.lazy(() => SortOrderSchema).optional(),
  basePrice: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumUnitTypeWithAggregatesFilterSchema: z.ZodType<Prisma.EnumUnitTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => UnitTypeSchema).optional(),
  in: z.lazy(() => UnitTypeSchema).array().optional(),
  notIn: z.lazy(() => UnitTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => UnitTypeSchema),z.lazy(() => NestedEnumUnitTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumUnitTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumUnitTypeFilterSchema).optional()
}).strict();

export const FloatWithAggregatesFilterSchema: z.ZodType<Prisma.FloatWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedFloatFilterSchema).optional(),
  _min: z.lazy(() => NestedFloatFilterSchema).optional(),
  _max: z.lazy(() => NestedFloatFilterSchema).optional()
}).strict();

export const FloatNullableWithAggregatesFilterSchema: z.ZodType<Prisma.FloatNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedFloatNullableFilterSchema).optional()
}).strict();

export const EnumKeyTypeFilterSchema: z.ZodType<Prisma.EnumKeyTypeFilter> = z.object({
  equals: z.lazy(() => KeyTypeSchema).optional(),
  in: z.lazy(() => KeyTypeSchema).array().optional(),
  notIn: z.lazy(() => KeyTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => KeyTypeSchema),z.lazy(() => NestedEnumKeyTypeFilterSchema) ]).optional(),
}).strict();

export const ListingRelationFilterSchema: z.ZodType<Prisma.ListingRelationFilter> = z.object({
  is: z.lazy(() => ListingWhereInputSchema).optional(),
  isNot: z.lazy(() => ListingWhereInputSchema).optional()
}).strict();

export const ListingKeyListingIdKeyTypeCompoundUniqueInputSchema: z.ZodType<Prisma.ListingKeyListingIdKeyTypeCompoundUniqueInput> = z.object({
  listingId: z.string(),
  keyType: z.lazy(() => KeyTypeSchema)
}).strict();

export const ListingKeyCountOrderByAggregateInputSchema: z.ZodType<Prisma.ListingKeyCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  keyType: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ListingKeyMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ListingKeyMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  keyType: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ListingKeyMinOrderByAggregateInputSchema: z.ZodType<Prisma.ListingKeyMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  keyType: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumKeyTypeWithAggregatesFilterSchema: z.ZodType<Prisma.EnumKeyTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => KeyTypeSchema).optional(),
  in: z.lazy(() => KeyTypeSchema).array().optional(),
  notIn: z.lazy(() => KeyTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => KeyTypeSchema),z.lazy(() => NestedEnumKeyTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumKeyTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumKeyTypeFilterSchema).optional()
}).strict();

export const StringNullableListFilterSchema: z.ZodType<Prisma.StringNullableListFilter> = z.object({
  equals: z.string().array().optional().nullable(),
  has: z.string().optional().nullable(),
  hasEvery: z.string().array().optional(),
  hasSome: z.string().array().optional(),
  isEmpty: z.boolean().optional()
}).strict();

export const BedroomListRelationFilterSchema: z.ZodType<Prisma.BedroomListRelationFilter> = z.object({
  every: z.lazy(() => BedroomWhereInputSchema).optional(),
  some: z.lazy(() => BedroomWhereInputSchema).optional(),
  none: z.lazy(() => BedroomWhereInputSchema).optional()
}).strict();

export const BedroomOrderByRelationAggregateInputSchema: z.ZodType<Prisma.BedroomOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ContentCountOrderByAggregateInputSchema: z.ZodType<Prisma.ContentCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  photos: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  aiInfo: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ContentMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ContentMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  aiInfo: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ContentMinOrderByAggregateInputSchema: z.ZodType<Prisma.ContentMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  aiInfo: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RulesCountOrderByAggregateInputSchema: z.ZodType<Prisma.RulesCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  pets: z.lazy(() => SortOrderSchema).optional(),
  children: z.lazy(() => SortOrderSchema).optional(),
  smoking: z.lazy(() => SortOrderSchema).optional(),
  deposit: z.lazy(() => SortOrderSchema).optional(),
  house: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RulesMaxOrderByAggregateInputSchema: z.ZodType<Prisma.RulesMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  pets: z.lazy(() => SortOrderSchema).optional(),
  children: z.lazy(() => SortOrderSchema).optional(),
  smoking: z.lazy(() => SortOrderSchema).optional(),
  deposit: z.lazy(() => SortOrderSchema).optional(),
  house: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RulesMinOrderByAggregateInputSchema: z.ZodType<Prisma.RulesMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  pets: z.lazy(() => SortOrderSchema).optional(),
  children: z.lazy(() => SortOrderSchema).optional(),
  smoking: z.lazy(() => SortOrderSchema).optional(),
  deposit: z.lazy(() => SortOrderSchema).optional(),
  house: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumDynamicPricingFilterSchema: z.ZodType<Prisma.EnumDynamicPricingFilter> = z.object({
  equals: z.lazy(() => DynamicPricingSchema).optional(),
  in: z.lazy(() => DynamicPricingSchema).array().optional(),
  notIn: z.lazy(() => DynamicPricingSchema).array().optional(),
  not: z.union([ z.lazy(() => DynamicPricingSchema),z.lazy(() => NestedEnumDynamicPricingFilterSchema) ]).optional(),
}).strict();

export const PricingDateListRelationFilterSchema: z.ZodType<Prisma.PricingDateListRelationFilter> = z.object({
  every: z.lazy(() => PricingDateWhereInputSchema).optional(),
  some: z.lazy(() => PricingDateWhereInputSchema).optional(),
  none: z.lazy(() => PricingDateWhereInputSchema).optional()
}).strict();

export const DiscountListRelationFilterSchema: z.ZodType<Prisma.DiscountListRelationFilter> = z.object({
  every: z.lazy(() => DiscountWhereInputSchema).optional(),
  some: z.lazy(() => DiscountWhereInputSchema).optional(),
  none: z.lazy(() => DiscountWhereInputSchema).optional()
}).strict();

export const PricingDateOrderByRelationAggregateInputSchema: z.ZodType<Prisma.PricingDateOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DiscountOrderByRelationAggregateInputSchema: z.ZodType<Prisma.DiscountOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PricingCountOrderByAggregateInputSchema: z.ZodType<Prisma.PricingCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  minimum: z.lazy(() => SortOrderSchema).optional(),
  weekday: z.lazy(() => SortOrderSchema).optional(),
  weekend: z.lazy(() => SortOrderSchema).optional(),
  minStay: z.lazy(() => SortOrderSchema).optional(),
  maxStay: z.lazy(() => SortOrderSchema).optional(),
  dynamicPricing: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PricingAvgOrderByAggregateInputSchema: z.ZodType<Prisma.PricingAvgOrderByAggregateInput> = z.object({
  minimum: z.lazy(() => SortOrderSchema).optional(),
  weekday: z.lazy(() => SortOrderSchema).optional(),
  weekend: z.lazy(() => SortOrderSchema).optional(),
  minStay: z.lazy(() => SortOrderSchema).optional(),
  maxStay: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PricingMaxOrderByAggregateInputSchema: z.ZodType<Prisma.PricingMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  minimum: z.lazy(() => SortOrderSchema).optional(),
  weekday: z.lazy(() => SortOrderSchema).optional(),
  weekend: z.lazy(() => SortOrderSchema).optional(),
  minStay: z.lazy(() => SortOrderSchema).optional(),
  maxStay: z.lazy(() => SortOrderSchema).optional(),
  dynamicPricing: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PricingMinOrderByAggregateInputSchema: z.ZodType<Prisma.PricingMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  minimum: z.lazy(() => SortOrderSchema).optional(),
  weekday: z.lazy(() => SortOrderSchema).optional(),
  weekend: z.lazy(() => SortOrderSchema).optional(),
  minStay: z.lazy(() => SortOrderSchema).optional(),
  maxStay: z.lazy(() => SortOrderSchema).optional(),
  dynamicPricing: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PricingSumOrderByAggregateInputSchema: z.ZodType<Prisma.PricingSumOrderByAggregateInput> = z.object({
  minimum: z.lazy(() => SortOrderSchema).optional(),
  weekday: z.lazy(() => SortOrderSchema).optional(),
  weekend: z.lazy(() => SortOrderSchema).optional(),
  minStay: z.lazy(() => SortOrderSchema).optional(),
  maxStay: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumDynamicPricingWithAggregatesFilterSchema: z.ZodType<Prisma.EnumDynamicPricingWithAggregatesFilter> = z.object({
  equals: z.lazy(() => DynamicPricingSchema).optional(),
  in: z.lazy(() => DynamicPricingSchema).array().optional(),
  notIn: z.lazy(() => DynamicPricingSchema).array().optional(),
  not: z.union([ z.lazy(() => DynamicPricingSchema),z.lazy(() => NestedEnumDynamicPricingWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumDynamicPricingFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumDynamicPricingFilterSchema).optional()
}).strict();

export const PricingRelationFilterSchema: z.ZodType<Prisma.PricingRelationFilter> = z.object({
  is: z.lazy(() => PricingWhereInputSchema).optional(),
  isNot: z.lazy(() => PricingWhereInputSchema).optional()
}).strict();

export const PricingDateCountOrderByAggregateInputSchema: z.ZodType<Prisma.PricingDateCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  pricingId: z.lazy(() => SortOrderSchema).optional(),
  startDate: z.lazy(() => SortOrderSchema).optional(),
  endDate: z.lazy(() => SortOrderSchema).optional(),
  percent: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PricingDateAvgOrderByAggregateInputSchema: z.ZodType<Prisma.PricingDateAvgOrderByAggregateInput> = z.object({
  percent: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PricingDateMaxOrderByAggregateInputSchema: z.ZodType<Prisma.PricingDateMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  pricingId: z.lazy(() => SortOrderSchema).optional(),
  startDate: z.lazy(() => SortOrderSchema).optional(),
  endDate: z.lazy(() => SortOrderSchema).optional(),
  percent: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PricingDateMinOrderByAggregateInputSchema: z.ZodType<Prisma.PricingDateMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  pricingId: z.lazy(() => SortOrderSchema).optional(),
  startDate: z.lazy(() => SortOrderSchema).optional(),
  endDate: z.lazy(() => SortOrderSchema).optional(),
  percent: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PricingDateSumOrderByAggregateInputSchema: z.ZodType<Prisma.PricingDateSumOrderByAggregateInput> = z.object({
  percent: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DiscountCountOrderByAggregateInputSchema: z.ZodType<Prisma.DiscountCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  pricingId: z.lazy(() => SortOrderSchema).optional(),
  days: z.lazy(() => SortOrderSchema).optional(),
  percent: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DiscountAvgOrderByAggregateInputSchema: z.ZodType<Prisma.DiscountAvgOrderByAggregateInput> = z.object({
  days: z.lazy(() => SortOrderSchema).optional(),
  percent: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DiscountMaxOrderByAggregateInputSchema: z.ZodType<Prisma.DiscountMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  pricingId: z.lazy(() => SortOrderSchema).optional(),
  days: z.lazy(() => SortOrderSchema).optional(),
  percent: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DiscountMinOrderByAggregateInputSchema: z.ZodType<Prisma.DiscountMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  pricingId: z.lazy(() => SortOrderSchema).optional(),
  days: z.lazy(() => SortOrderSchema).optional(),
  percent: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DiscountSumOrderByAggregateInputSchema: z.ZodType<Prisma.DiscountSumOrderByAggregateInput> = z.object({
  days: z.lazy(() => SortOrderSchema).optional(),
  percent: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AvailabilityCountOrderByAggregateInputSchema: z.ZodType<Prisma.AvailabilityCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  checkIn: z.lazy(() => SortOrderSchema).optional(),
  checkOut: z.lazy(() => SortOrderSchema).optional(),
  leadTime: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AvailabilityAvgOrderByAggregateInputSchema: z.ZodType<Prisma.AvailabilityAvgOrderByAggregateInput> = z.object({
  leadTime: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AvailabilityMaxOrderByAggregateInputSchema: z.ZodType<Prisma.AvailabilityMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  checkIn: z.lazy(() => SortOrderSchema).optional(),
  checkOut: z.lazy(() => SortOrderSchema).optional(),
  leadTime: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AvailabilityMinOrderByAggregateInputSchema: z.ZodType<Prisma.AvailabilityMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  checkIn: z.lazy(() => SortOrderSchema).optional(),
  checkOut: z.lazy(() => SortOrderSchema).optional(),
  leadTime: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AvailabilitySumOrderByAggregateInputSchema: z.ZodType<Prisma.AvailabilitySumOrderByAggregateInput> = z.object({
  leadTime: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AmenityCountOrderByAggregateInputSchema: z.ZodType<Prisma.AmenityCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  typeId: z.lazy(() => SortOrderSchema).optional(),
  note: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AmenityMaxOrderByAggregateInputSchema: z.ZodType<Prisma.AmenityMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  typeId: z.lazy(() => SortOrderSchema).optional(),
  note: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AmenityMinOrderByAggregateInputSchema: z.ZodType<Prisma.AmenityMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  typeId: z.lazy(() => SortOrderSchema).optional(),
  note: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FeeCountOrderByAggregateInputSchema: z.ZodType<Prisma.FeeCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  taxable: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  share: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FeeAvgOrderByAggregateInputSchema: z.ZodType<Prisma.FeeAvgOrderByAggregateInput> = z.object({
  value: z.lazy(() => SortOrderSchema).optional(),
  share: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FeeMaxOrderByAggregateInputSchema: z.ZodType<Prisma.FeeMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  taxable: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  share: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FeeMinOrderByAggregateInputSchema: z.ZodType<Prisma.FeeMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  taxable: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  share: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FeeSumOrderByAggregateInputSchema: z.ZodType<Prisma.FeeSumOrderByAggregateInput> = z.object({
  value: z.lazy(() => SortOrderSchema).optional(),
  share: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaxRatesCountOrderByAggregateInputSchema: z.ZodType<Prisma.TaxRatesCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  municipal: z.lazy(() => SortOrderSchema).optional(),
  county: z.lazy(() => SortOrderSchema).optional(),
  state: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaxRatesAvgOrderByAggregateInputSchema: z.ZodType<Prisma.TaxRatesAvgOrderByAggregateInput> = z.object({
  municipal: z.lazy(() => SortOrderSchema).optional(),
  county: z.lazy(() => SortOrderSchema).optional(),
  state: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaxRatesMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TaxRatesMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  municipal: z.lazy(() => SortOrderSchema).optional(),
  county: z.lazy(() => SortOrderSchema).optional(),
  state: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaxRatesMinOrderByAggregateInputSchema: z.ZodType<Prisma.TaxRatesMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  municipal: z.lazy(() => SortOrderSchema).optional(),
  county: z.lazy(() => SortOrderSchema).optional(),
  state: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaxRatesSumOrderByAggregateInputSchema: z.ZodType<Prisma.TaxRatesSumOrderByAggregateInput> = z.object({
  municipal: z.lazy(() => SortOrderSchema).optional(),
  county: z.lazy(() => SortOrderSchema).optional(),
  state: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DeductionsCountOrderByAggregateInputSchema: z.ZodType<Prisma.DeductionsCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  channelFees: z.lazy(() => SortOrderSchema).optional(),
  creditCardFees: z.lazy(() => SortOrderSchema).optional(),
  discounts: z.lazy(() => SortOrderSchema).optional(),
  municipalTaxes: z.lazy(() => SortOrderSchema).optional(),
  countyTaxes: z.lazy(() => SortOrderSchema).optional(),
  stateTaxes: z.lazy(() => SortOrderSchema).optional(),
  otherGuestFees: z.lazy(() => SortOrderSchema).optional(),
  pmcShare: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DeductionsAvgOrderByAggregateInputSchema: z.ZodType<Prisma.DeductionsAvgOrderByAggregateInput> = z.object({
  pmcShare: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DeductionsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.DeductionsMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  channelFees: z.lazy(() => SortOrderSchema).optional(),
  creditCardFees: z.lazy(() => SortOrderSchema).optional(),
  discounts: z.lazy(() => SortOrderSchema).optional(),
  municipalTaxes: z.lazy(() => SortOrderSchema).optional(),
  countyTaxes: z.lazy(() => SortOrderSchema).optional(),
  stateTaxes: z.lazy(() => SortOrderSchema).optional(),
  otherGuestFees: z.lazy(() => SortOrderSchema).optional(),
  pmcShare: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DeductionsMinOrderByAggregateInputSchema: z.ZodType<Prisma.DeductionsMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  channelFees: z.lazy(() => SortOrderSchema).optional(),
  creditCardFees: z.lazy(() => SortOrderSchema).optional(),
  discounts: z.lazy(() => SortOrderSchema).optional(),
  municipalTaxes: z.lazy(() => SortOrderSchema).optional(),
  countyTaxes: z.lazy(() => SortOrderSchema).optional(),
  stateTaxes: z.lazy(() => SortOrderSchema).optional(),
  otherGuestFees: z.lazy(() => SortOrderSchema).optional(),
  pmcShare: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DeductionsSumOrderByAggregateInputSchema: z.ZodType<Prisma.DeductionsSumOrderByAggregateInput> = z.object({
  pmcShare: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ContentRelationFilterSchema: z.ZodType<Prisma.ContentRelationFilter> = z.object({
  is: z.lazy(() => ContentWhereInputSchema).optional(),
  isNot: z.lazy(() => ContentWhereInputSchema).optional()
}).strict();

export const BedroomCountOrderByAggregateInputSchema: z.ZodType<Prisma.BedroomCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  contentId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  bathroom: z.lazy(() => SortOrderSchema).optional(),
  beds: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BedroomMaxOrderByAggregateInputSchema: z.ZodType<Prisma.BedroomMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  contentId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  bathroom: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BedroomMinOrderByAggregateInputSchema: z.ZodType<Prisma.BedroomMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  contentId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  bathroom: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumCalendarEventTypeFilterSchema: z.ZodType<Prisma.EnumCalendarEventTypeFilter> = z.object({
  equals: z.lazy(() => CalendarEventTypeSchema).optional(),
  in: z.lazy(() => CalendarEventTypeSchema).array().optional(),
  notIn: z.lazy(() => CalendarEventTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => CalendarEventTypeSchema),z.lazy(() => NestedEnumCalendarEventTypeFilterSchema) ]).optional(),
}).strict();

export const ReservationNullableRelationFilterSchema: z.ZodType<Prisma.ReservationNullableRelationFilter> = z.object({
  is: z.lazy(() => ReservationWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => ReservationWhereInputSchema).optional().nullable()
}).strict();

export const CalendarEventCountOrderByAggregateInputSchema: z.ZodType<Prisma.CalendarEventCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  fromDate: z.lazy(() => SortOrderSchema).optional(),
  toDate: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  bookedOn: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CalendarEventMaxOrderByAggregateInputSchema: z.ZodType<Prisma.CalendarEventMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  fromDate: z.lazy(() => SortOrderSchema).optional(),
  toDate: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  bookedOn: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CalendarEventMinOrderByAggregateInputSchema: z.ZodType<Prisma.CalendarEventMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  fromDate: z.lazy(() => SortOrderSchema).optional(),
  toDate: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  bookedOn: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumCalendarEventTypeWithAggregatesFilterSchema: z.ZodType<Prisma.EnumCalendarEventTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => CalendarEventTypeSchema).optional(),
  in: z.lazy(() => CalendarEventTypeSchema).array().optional(),
  notIn: z.lazy(() => CalendarEventTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => CalendarEventTypeSchema),z.lazy(() => NestedEnumCalendarEventTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumCalendarEventTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumCalendarEventTypeFilterSchema).optional()
}).strict();

export const EnumChannelFilterSchema: z.ZodType<Prisma.EnumChannelFilter> = z.object({
  equals: z.lazy(() => ChannelSchema).optional(),
  in: z.lazy(() => ChannelSchema).array().optional(),
  notIn: z.lazy(() => ChannelSchema).array().optional(),
  not: z.union([ z.lazy(() => ChannelSchema),z.lazy(() => NestedEnumChannelFilterSchema) ]).optional(),
}).strict();

export const EnumReservationStatusFilterSchema: z.ZodType<Prisma.EnumReservationStatusFilter> = z.object({
  equals: z.lazy(() => ReservationStatusSchema).optional(),
  in: z.lazy(() => ReservationStatusSchema).array().optional(),
  notIn: z.lazy(() => ReservationStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ReservationStatusSchema),z.lazy(() => NestedEnumReservationStatusFilterSchema) ]).optional(),
}).strict();

export const CalendarEventRelationFilterSchema: z.ZodType<Prisma.CalendarEventRelationFilter> = z.object({
  is: z.lazy(() => CalendarEventWhereInputSchema).optional(),
  isNot: z.lazy(() => CalendarEventWhereInputSchema).optional()
}).strict();

export const ScheduledMessageListRelationFilterSchema: z.ZodType<Prisma.ScheduledMessageListRelationFilter> = z.object({
  every: z.lazy(() => ScheduledMessageWhereInputSchema).optional(),
  some: z.lazy(() => ScheduledMessageWhereInputSchema).optional(),
  none: z.lazy(() => ScheduledMessageWhereInputSchema).optional()
}).strict();

export const RevenueNullableRelationFilterSchema: z.ZodType<Prisma.RevenueNullableRelationFilter> = z.object({
  is: z.lazy(() => RevenueWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => RevenueWhereInputSchema).optional().nullable()
}).strict();

export const GuestRelationFilterSchema: z.ZodType<Prisma.GuestRelationFilter> = z.object({
  is: z.lazy(() => GuestWhereInputSchema).optional(),
  isNot: z.lazy(() => GuestWhereInputSchema).optional()
}).strict();

export const ScheduledMessageOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ScheduledMessageOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ReservationCountOrderByAggregateInputSchema: z.ZodType<Prisma.ReservationCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  calendarEventId: z.lazy(() => SortOrderSchema).optional(),
  channel: z.lazy(() => SortOrderSchema).optional(),
  bpReservationId: z.lazy(() => SortOrderSchema).optional(),
  confirmationCode: z.lazy(() => SortOrderSchema).optional(),
  adults: z.lazy(() => SortOrderSchema).optional(),
  children: z.lazy(() => SortOrderSchema).optional(),
  pets: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  guestId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ReservationAvgOrderByAggregateInputSchema: z.ZodType<Prisma.ReservationAvgOrderByAggregateInput> = z.object({
  adults: z.lazy(() => SortOrderSchema).optional(),
  children: z.lazy(() => SortOrderSchema).optional(),
  pets: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ReservationMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ReservationMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  calendarEventId: z.lazy(() => SortOrderSchema).optional(),
  channel: z.lazy(() => SortOrderSchema).optional(),
  bpReservationId: z.lazy(() => SortOrderSchema).optional(),
  confirmationCode: z.lazy(() => SortOrderSchema).optional(),
  adults: z.lazy(() => SortOrderSchema).optional(),
  children: z.lazy(() => SortOrderSchema).optional(),
  pets: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  guestId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ReservationMinOrderByAggregateInputSchema: z.ZodType<Prisma.ReservationMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  calendarEventId: z.lazy(() => SortOrderSchema).optional(),
  channel: z.lazy(() => SortOrderSchema).optional(),
  bpReservationId: z.lazy(() => SortOrderSchema).optional(),
  confirmationCode: z.lazy(() => SortOrderSchema).optional(),
  adults: z.lazy(() => SortOrderSchema).optional(),
  children: z.lazy(() => SortOrderSchema).optional(),
  pets: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  guestId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ReservationSumOrderByAggregateInputSchema: z.ZodType<Prisma.ReservationSumOrderByAggregateInput> = z.object({
  adults: z.lazy(() => SortOrderSchema).optional(),
  children: z.lazy(() => SortOrderSchema).optional(),
  pets: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumChannelWithAggregatesFilterSchema: z.ZodType<Prisma.EnumChannelWithAggregatesFilter> = z.object({
  equals: z.lazy(() => ChannelSchema).optional(),
  in: z.lazy(() => ChannelSchema).array().optional(),
  notIn: z.lazy(() => ChannelSchema).array().optional(),
  not: z.union([ z.lazy(() => ChannelSchema),z.lazy(() => NestedEnumChannelWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumChannelFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumChannelFilterSchema).optional()
}).strict();

export const EnumReservationStatusWithAggregatesFilterSchema: z.ZodType<Prisma.EnumReservationStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => ReservationStatusSchema).optional(),
  in: z.lazy(() => ReservationStatusSchema).array().optional(),
  notIn: z.lazy(() => ReservationStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ReservationStatusSchema),z.lazy(() => NestedEnumReservationStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumReservationStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumReservationStatusFilterSchema).optional()
}).strict();

export const EnumQueueStatusFilterSchema: z.ZodType<Prisma.EnumQueueStatusFilter> = z.object({
  equals: z.lazy(() => QueueStatusSchema).optional(),
  in: z.lazy(() => QueueStatusSchema).array().optional(),
  notIn: z.lazy(() => QueueStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => QueueStatusSchema),z.lazy(() => NestedEnumQueueStatusFilterSchema) ]).optional(),
}).strict();

export const ReservationBpRequestCountOrderByAggregateInputSchema: z.ZodType<Prisma.ReservationBpRequestCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  reservationId: z.lazy(() => SortOrderSchema).optional(),
  fromDate: z.lazy(() => SortOrderSchema).optional(),
  toDate: z.lazy(() => SortOrderSchema).optional(),
  available: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ReservationBpRequestMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ReservationBpRequestMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  reservationId: z.lazy(() => SortOrderSchema).optional(),
  fromDate: z.lazy(() => SortOrderSchema).optional(),
  toDate: z.lazy(() => SortOrderSchema).optional(),
  available: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ReservationBpRequestMinOrderByAggregateInputSchema: z.ZodType<Prisma.ReservationBpRequestMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  reservationId: z.lazy(() => SortOrderSchema).optional(),
  fromDate: z.lazy(() => SortOrderSchema).optional(),
  toDate: z.lazy(() => SortOrderSchema).optional(),
  available: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumQueueStatusWithAggregatesFilterSchema: z.ZodType<Prisma.EnumQueueStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => QueueStatusSchema).optional(),
  in: z.lazy(() => QueueStatusSchema).array().optional(),
  notIn: z.lazy(() => QueueStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => QueueStatusSchema),z.lazy(() => NestedEnumQueueStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumQueueStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumQueueStatusFilterSchema).optional()
}).strict();

export const ReservationListRelationFilterSchema: z.ZodType<Prisma.ReservationListRelationFilter> = z.object({
  every: z.lazy(() => ReservationWhereInputSchema).optional(),
  some: z.lazy(() => ReservationWhereInputSchema).optional(),
  none: z.lazy(() => ReservationWhereInputSchema).optional()
}).strict();

export const ReservationOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ReservationOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const GuestCountOrderByAggregateInputSchema: z.ZodType<Prisma.GuestCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const GuestMaxOrderByAggregateInputSchema: z.ZodType<Prisma.GuestMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const GuestMinOrderByAggregateInputSchema: z.ZodType<Prisma.GuestMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MessageListRelationFilterSchema: z.ZodType<Prisma.MessageListRelationFilter> = z.object({
  every: z.lazy(() => MessageWhereInputSchema).optional(),
  some: z.lazy(() => MessageWhereInputSchema).optional(),
  none: z.lazy(() => MessageWhereInputSchema).optional()
}).strict();

export const MessageOrderByRelationAggregateInputSchema: z.ZodType<Prisma.MessageOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MessageThreadGuestIdListingIdChannelCompoundUniqueInputSchema: z.ZodType<Prisma.MessageThreadGuestIdListingIdChannelCompoundUniqueInput> = z.object({
  guestId: z.string(),
  listingId: z.string(),
  channel: z.lazy(() => ChannelSchema)
}).strict();

export const MessageThreadCountOrderByAggregateInputSchema: z.ZodType<Prisma.MessageThreadCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  guestId: z.lazy(() => SortOrderSchema).optional(),
  bpThreadId: z.lazy(() => SortOrderSchema).optional(),
  channelThreadId: z.lazy(() => SortOrderSchema).optional(),
  lastMessageSentAt: z.lazy(() => SortOrderSchema).optional(),
  dateFrom: z.lazy(() => SortOrderSchema).optional(),
  dateTo: z.lazy(() => SortOrderSchema).optional(),
  replyTo: z.lazy(() => SortOrderSchema).optional(),
  archived: z.lazy(() => SortOrderSchema).optional(),
  enableReminder: z.lazy(() => SortOrderSchema).optional(),
  channel: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MessageThreadMaxOrderByAggregateInputSchema: z.ZodType<Prisma.MessageThreadMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  guestId: z.lazy(() => SortOrderSchema).optional(),
  bpThreadId: z.lazy(() => SortOrderSchema).optional(),
  channelThreadId: z.lazy(() => SortOrderSchema).optional(),
  lastMessageSentAt: z.lazy(() => SortOrderSchema).optional(),
  dateFrom: z.lazy(() => SortOrderSchema).optional(),
  dateTo: z.lazy(() => SortOrderSchema).optional(),
  replyTo: z.lazy(() => SortOrderSchema).optional(),
  archived: z.lazy(() => SortOrderSchema).optional(),
  enableReminder: z.lazy(() => SortOrderSchema).optional(),
  channel: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MessageThreadMinOrderByAggregateInputSchema: z.ZodType<Prisma.MessageThreadMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  guestId: z.lazy(() => SortOrderSchema).optional(),
  bpThreadId: z.lazy(() => SortOrderSchema).optional(),
  channelThreadId: z.lazy(() => SortOrderSchema).optional(),
  lastMessageSentAt: z.lazy(() => SortOrderSchema).optional(),
  dateFrom: z.lazy(() => SortOrderSchema).optional(),
  dateTo: z.lazy(() => SortOrderSchema).optional(),
  replyTo: z.lazy(() => SortOrderSchema).optional(),
  archived: z.lazy(() => SortOrderSchema).optional(),
  enableReminder: z.lazy(() => SortOrderSchema).optional(),
  channel: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumMessageUserFilterSchema: z.ZodType<Prisma.EnumMessageUserFilter> = z.object({
  equals: z.lazy(() => MessageUserSchema).optional(),
  in: z.lazy(() => MessageUserSchema).array().optional(),
  notIn: z.lazy(() => MessageUserSchema).array().optional(),
  not: z.union([ z.lazy(() => MessageUserSchema),z.lazy(() => NestedEnumMessageUserFilterSchema) ]).optional(),
}).strict();

export const MessageThreadRelationFilterSchema: z.ZodType<Prisma.MessageThreadRelationFilter> = z.object({
  is: z.lazy(() => MessageThreadWhereInputSchema).optional(),
  isNot: z.lazy(() => MessageThreadWhereInputSchema).optional()
}).strict();

export const MessageCountOrderByAggregateInputSchema: z.ZodType<Prisma.MessageCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  messageThreadId: z.lazy(() => SortOrderSchema).optional(),
  message: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  bpMessageId: z.lazy(() => SortOrderSchema).optional(),
  channelMessageId: z.lazy(() => SortOrderSchema).optional(),
  read: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MessageMaxOrderByAggregateInputSchema: z.ZodType<Prisma.MessageMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  messageThreadId: z.lazy(() => SortOrderSchema).optional(),
  message: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  bpMessageId: z.lazy(() => SortOrderSchema).optional(),
  channelMessageId: z.lazy(() => SortOrderSchema).optional(),
  read: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MessageMinOrderByAggregateInputSchema: z.ZodType<Prisma.MessageMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  messageThreadId: z.lazy(() => SortOrderSchema).optional(),
  message: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  bpMessageId: z.lazy(() => SortOrderSchema).optional(),
  channelMessageId: z.lazy(() => SortOrderSchema).optional(),
  read: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumMessageUserWithAggregatesFilterSchema: z.ZodType<Prisma.EnumMessageUserWithAggregatesFilter> = z.object({
  equals: z.lazy(() => MessageUserSchema).optional(),
  in: z.lazy(() => MessageUserSchema).array().optional(),
  notIn: z.lazy(() => MessageUserSchema).array().optional(),
  not: z.union([ z.lazy(() => MessageUserSchema),z.lazy(() => NestedEnumMessageUserWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumMessageUserFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumMessageUserFilterSchema).optional()
}).strict();

export const EnumTriggerNullableFilterSchema: z.ZodType<Prisma.EnumTriggerNullableFilter> = z.object({
  equals: z.lazy(() => TriggerSchema).optional().nullable(),
  in: z.lazy(() => TriggerSchema).array().optional().nullable(),
  notIn: z.lazy(() => TriggerSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => TriggerSchema),z.lazy(() => NestedEnumTriggerNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const EnumTriggerRangeNullableFilterSchema: z.ZodType<Prisma.EnumTriggerRangeNullableFilter> = z.object({
  equals: z.lazy(() => TriggerRangeSchema).optional().nullable(),
  in: z.lazy(() => TriggerRangeSchema).array().optional().nullable(),
  notIn: z.lazy(() => TriggerRangeSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => TriggerRangeSchema),z.lazy(() => NestedEnumTriggerRangeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const EnumTriggerUnitNullableFilterSchema: z.ZodType<Prisma.EnumTriggerUnitNullableFilter> = z.object({
  equals: z.lazy(() => TriggerUnitSchema).optional().nullable(),
  in: z.lazy(() => TriggerUnitSchema).array().optional().nullable(),
  notIn: z.lazy(() => TriggerUnitSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => TriggerUnitSchema),z.lazy(() => NestedEnumTriggerUnitNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const MessageTemplateCountOrderByAggregateInputSchema: z.ZodType<Prisma.MessageTemplateCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  body: z.lazy(() => SortOrderSchema).optional(),
  bodyHtml: z.lazy(() => SortOrderSchema).optional(),
  enabled: z.lazy(() => SortOrderSchema).optional(),
  trigger: z.lazy(() => SortOrderSchema).optional(),
  triggerRange: z.lazy(() => SortOrderSchema).optional(),
  triggerUnit: z.lazy(() => SortOrderSchema).optional(),
  triggerValue: z.lazy(() => SortOrderSchema).optional(),
  allListings: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MessageTemplateAvgOrderByAggregateInputSchema: z.ZodType<Prisma.MessageTemplateAvgOrderByAggregateInput> = z.object({
  triggerValue: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MessageTemplateMaxOrderByAggregateInputSchema: z.ZodType<Prisma.MessageTemplateMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  body: z.lazy(() => SortOrderSchema).optional(),
  bodyHtml: z.lazy(() => SortOrderSchema).optional(),
  enabled: z.lazy(() => SortOrderSchema).optional(),
  trigger: z.lazy(() => SortOrderSchema).optional(),
  triggerRange: z.lazy(() => SortOrderSchema).optional(),
  triggerUnit: z.lazy(() => SortOrderSchema).optional(),
  triggerValue: z.lazy(() => SortOrderSchema).optional(),
  allListings: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MessageTemplateMinOrderByAggregateInputSchema: z.ZodType<Prisma.MessageTemplateMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  body: z.lazy(() => SortOrderSchema).optional(),
  bodyHtml: z.lazy(() => SortOrderSchema).optional(),
  enabled: z.lazy(() => SortOrderSchema).optional(),
  trigger: z.lazy(() => SortOrderSchema).optional(),
  triggerRange: z.lazy(() => SortOrderSchema).optional(),
  triggerUnit: z.lazy(() => SortOrderSchema).optional(),
  triggerValue: z.lazy(() => SortOrderSchema).optional(),
  allListings: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MessageTemplateSumOrderByAggregateInputSchema: z.ZodType<Prisma.MessageTemplateSumOrderByAggregateInput> = z.object({
  triggerValue: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumTriggerNullableWithAggregatesFilterSchema: z.ZodType<Prisma.EnumTriggerNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => TriggerSchema).optional().nullable(),
  in: z.lazy(() => TriggerSchema).array().optional().nullable(),
  notIn: z.lazy(() => TriggerSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => TriggerSchema),z.lazy(() => NestedEnumTriggerNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumTriggerNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumTriggerNullableFilterSchema).optional()
}).strict();

export const EnumTriggerRangeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.EnumTriggerRangeNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => TriggerRangeSchema).optional().nullable(),
  in: z.lazy(() => TriggerRangeSchema).array().optional().nullable(),
  notIn: z.lazy(() => TriggerRangeSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => TriggerRangeSchema),z.lazy(() => NestedEnumTriggerRangeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumTriggerRangeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumTriggerRangeNullableFilterSchema).optional()
}).strict();

export const EnumTriggerUnitNullableWithAggregatesFilterSchema: z.ZodType<Prisma.EnumTriggerUnitNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => TriggerUnitSchema).optional().nullable(),
  in: z.lazy(() => TriggerUnitSchema).array().optional().nullable(),
  notIn: z.lazy(() => TriggerUnitSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => TriggerUnitSchema),z.lazy(() => NestedEnumTriggerUnitNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumTriggerUnitNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumTriggerUnitNullableFilterSchema).optional()
}).strict();

export const EnumScheduledMessageStatusFilterSchema: z.ZodType<Prisma.EnumScheduledMessageStatusFilter> = z.object({
  equals: z.lazy(() => ScheduledMessageStatusSchema).optional(),
  in: z.lazy(() => ScheduledMessageStatusSchema).array().optional(),
  notIn: z.lazy(() => ScheduledMessageStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ScheduledMessageStatusSchema),z.lazy(() => NestedEnumScheduledMessageStatusFilterSchema) ]).optional(),
}).strict();

export const ReservationRelationFilterSchema: z.ZodType<Prisma.ReservationRelationFilter> = z.object({
  is: z.lazy(() => ReservationWhereInputSchema).optional(),
  isNot: z.lazy(() => ReservationWhereInputSchema).optional()
}).strict();

export const MessageTemplateRelationFilterSchema: z.ZodType<Prisma.MessageTemplateRelationFilter> = z.object({
  is: z.lazy(() => MessageTemplateWhereInputSchema).optional(),
  isNot: z.lazy(() => MessageTemplateWhereInputSchema).optional()
}).strict();

export const ScheduledMessageReservationIdMessageTemplateIdCompoundUniqueInputSchema: z.ZodType<Prisma.ScheduledMessageReservationIdMessageTemplateIdCompoundUniqueInput> = z.object({
  reservationId: z.string(),
  messageTemplateId: z.string()
}).strict();

export const ScheduledMessageCountOrderByAggregateInputSchema: z.ZodType<Prisma.ScheduledMessageCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  scheduledAt: z.lazy(() => SortOrderSchema).optional(),
  reservationId: z.lazy(() => SortOrderSchema).optional(),
  messageTemplateId: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  completedAt: z.lazy(() => SortOrderSchema).optional(),
  failureMessage: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ScheduledMessageMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ScheduledMessageMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  scheduledAt: z.lazy(() => SortOrderSchema).optional(),
  reservationId: z.lazy(() => SortOrderSchema).optional(),
  messageTemplateId: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  completedAt: z.lazy(() => SortOrderSchema).optional(),
  failureMessage: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ScheduledMessageMinOrderByAggregateInputSchema: z.ZodType<Prisma.ScheduledMessageMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  scheduledAt: z.lazy(() => SortOrderSchema).optional(),
  reservationId: z.lazy(() => SortOrderSchema).optional(),
  messageTemplateId: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  completedAt: z.lazy(() => SortOrderSchema).optional(),
  failureMessage: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumScheduledMessageStatusWithAggregatesFilterSchema: z.ZodType<Prisma.EnumScheduledMessageStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => ScheduledMessageStatusSchema).optional(),
  in: z.lazy(() => ScheduledMessageStatusSchema).array().optional(),
  notIn: z.lazy(() => ScheduledMessageStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ScheduledMessageStatusSchema),z.lazy(() => NestedEnumScheduledMessageStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumScheduledMessageStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumScheduledMessageStatusFilterSchema).optional()
}).strict();

export const EnumRevenuePayoutStatusFilterSchema: z.ZodType<Prisma.EnumRevenuePayoutStatusFilter> = z.object({
  equals: z.lazy(() => RevenuePayoutStatusSchema).optional(),
  in: z.lazy(() => RevenuePayoutStatusSchema).array().optional(),
  notIn: z.lazy(() => RevenuePayoutStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => RevenuePayoutStatusSchema),z.lazy(() => NestedEnumRevenuePayoutStatusFilterSchema) ]).optional(),
}).strict();

export const RevenueFeeListRelationFilterSchema: z.ZodType<Prisma.RevenueFeeListRelationFilter> = z.object({
  every: z.lazy(() => RevenueFeeWhereInputSchema).optional(),
  some: z.lazy(() => RevenueFeeWhereInputSchema).optional(),
  none: z.lazy(() => RevenueFeeWhereInputSchema).optional()
}).strict();

export const OwnerStatementNullableRelationFilterSchema: z.ZodType<Prisma.OwnerStatementNullableRelationFilter> = z.object({
  is: z.lazy(() => OwnerStatementWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => OwnerStatementWhereInputSchema).optional().nullable()
}).strict();

export const RevenueFeeOrderByRelationAggregateInputSchema: z.ZodType<Prisma.RevenueFeeOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RevenueCountOrderByAggregateInputSchema: z.ZodType<Prisma.RevenueCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  reservationId: z.lazy(() => SortOrderSchema).optional(),
  accommodation: z.lazy(() => SortOrderSchema).optional(),
  pmcShare: z.lazy(() => SortOrderSchema).optional(),
  discount: z.lazy(() => SortOrderSchema).optional(),
  channelCommission: z.lazy(() => SortOrderSchema).optional(),
  ownerStatementId: z.lazy(() => SortOrderSchema).optional(),
  payoutStatus: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RevenueAvgOrderByAggregateInputSchema: z.ZodType<Prisma.RevenueAvgOrderByAggregateInput> = z.object({
  accommodation: z.lazy(() => SortOrderSchema).optional(),
  pmcShare: z.lazy(() => SortOrderSchema).optional(),
  discount: z.lazy(() => SortOrderSchema).optional(),
  channelCommission: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RevenueMaxOrderByAggregateInputSchema: z.ZodType<Prisma.RevenueMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  reservationId: z.lazy(() => SortOrderSchema).optional(),
  accommodation: z.lazy(() => SortOrderSchema).optional(),
  pmcShare: z.lazy(() => SortOrderSchema).optional(),
  discount: z.lazy(() => SortOrderSchema).optional(),
  channelCommission: z.lazy(() => SortOrderSchema).optional(),
  ownerStatementId: z.lazy(() => SortOrderSchema).optional(),
  payoutStatus: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RevenueMinOrderByAggregateInputSchema: z.ZodType<Prisma.RevenueMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  reservationId: z.lazy(() => SortOrderSchema).optional(),
  accommodation: z.lazy(() => SortOrderSchema).optional(),
  pmcShare: z.lazy(() => SortOrderSchema).optional(),
  discount: z.lazy(() => SortOrderSchema).optional(),
  channelCommission: z.lazy(() => SortOrderSchema).optional(),
  ownerStatementId: z.lazy(() => SortOrderSchema).optional(),
  payoutStatus: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RevenueSumOrderByAggregateInputSchema: z.ZodType<Prisma.RevenueSumOrderByAggregateInput> = z.object({
  accommodation: z.lazy(() => SortOrderSchema).optional(),
  pmcShare: z.lazy(() => SortOrderSchema).optional(),
  discount: z.lazy(() => SortOrderSchema).optional(),
  channelCommission: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumRevenuePayoutStatusWithAggregatesFilterSchema: z.ZodType<Prisma.EnumRevenuePayoutStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => RevenuePayoutStatusSchema).optional(),
  in: z.lazy(() => RevenuePayoutStatusSchema).array().optional(),
  notIn: z.lazy(() => RevenuePayoutStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => RevenuePayoutStatusSchema),z.lazy(() => NestedEnumRevenuePayoutStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumRevenuePayoutStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumRevenuePayoutStatusFilterSchema).optional()
}).strict();

export const EnumRevenueDeductionTypeFilterSchema: z.ZodType<Prisma.EnumRevenueDeductionTypeFilter> = z.object({
  equals: z.lazy(() => RevenueDeductionTypeSchema).optional(),
  in: z.lazy(() => RevenueDeductionTypeSchema).array().optional(),
  notIn: z.lazy(() => RevenueDeductionTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => RevenueDeductionTypeSchema),z.lazy(() => NestedEnumRevenueDeductionTypeFilterSchema) ]).optional(),
}).strict();

export const RevenueFeeRelationFilterSchema: z.ZodType<Prisma.RevenueFeeRelationFilter> = z.object({
  is: z.lazy(() => RevenueFeeWhereInputSchema).optional(),
  isNot: z.lazy(() => RevenueFeeWhereInputSchema).optional()
}).strict();

export const RevenueTaxCountOrderByAggregateInputSchema: z.ZodType<Prisma.RevenueTaxCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  revenueId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  revenueFeeId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RevenueTaxAvgOrderByAggregateInputSchema: z.ZodType<Prisma.RevenueTaxAvgOrderByAggregateInput> = z.object({
  value: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RevenueTaxMaxOrderByAggregateInputSchema: z.ZodType<Prisma.RevenueTaxMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  revenueId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  revenueFeeId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RevenueTaxMinOrderByAggregateInputSchema: z.ZodType<Prisma.RevenueTaxMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  revenueId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  revenueFeeId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RevenueTaxSumOrderByAggregateInputSchema: z.ZodType<Prisma.RevenueTaxSumOrderByAggregateInput> = z.object({
  value: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumRevenueDeductionTypeWithAggregatesFilterSchema: z.ZodType<Prisma.EnumRevenueDeductionTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => RevenueDeductionTypeSchema).optional(),
  in: z.lazy(() => RevenueDeductionTypeSchema).array().optional(),
  notIn: z.lazy(() => RevenueDeductionTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => RevenueDeductionTypeSchema),z.lazy(() => NestedEnumRevenueDeductionTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumRevenueDeductionTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumRevenueDeductionTypeFilterSchema).optional()
}).strict();

export const EnumRevenueEntryTypeFilterSchema: z.ZodType<Prisma.EnumRevenueEntryTypeFilter> = z.object({
  equals: z.lazy(() => RevenueEntryTypeSchema).optional(),
  in: z.lazy(() => RevenueEntryTypeSchema).array().optional(),
  notIn: z.lazy(() => RevenueEntryTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => RevenueEntryTypeSchema),z.lazy(() => NestedEnumRevenueEntryTypeFilterSchema) ]).optional(),
}).strict();

export const RevenueRelationFilterSchema: z.ZodType<Prisma.RevenueRelationFilter> = z.object({
  is: z.lazy(() => RevenueWhereInputSchema).optional(),
  isNot: z.lazy(() => RevenueWhereInputSchema).optional()
}).strict();

export const RevenueTaxListRelationFilterSchema: z.ZodType<Prisma.RevenueTaxListRelationFilter> = z.object({
  every: z.lazy(() => RevenueTaxWhereInputSchema).optional(),
  some: z.lazy(() => RevenueTaxWhereInputSchema).optional(),
  none: z.lazy(() => RevenueTaxWhereInputSchema).optional()
}).strict();

export const RevenueTaxOrderByRelationAggregateInputSchema: z.ZodType<Prisma.RevenueTaxOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RevenueFeeCountOrderByAggregateInputSchema: z.ZodType<Prisma.RevenueFeeCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  revenueId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  pmcShare: z.lazy(() => SortOrderSchema).optional(),
  taxable: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RevenueFeeAvgOrderByAggregateInputSchema: z.ZodType<Prisma.RevenueFeeAvgOrderByAggregateInput> = z.object({
  value: z.lazy(() => SortOrderSchema).optional(),
  pmcShare: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RevenueFeeMaxOrderByAggregateInputSchema: z.ZodType<Prisma.RevenueFeeMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  revenueId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  pmcShare: z.lazy(() => SortOrderSchema).optional(),
  taxable: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RevenueFeeMinOrderByAggregateInputSchema: z.ZodType<Prisma.RevenueFeeMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  revenueId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  pmcShare: z.lazy(() => SortOrderSchema).optional(),
  taxable: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RevenueFeeSumOrderByAggregateInputSchema: z.ZodType<Prisma.RevenueFeeSumOrderByAggregateInput> = z.object({
  value: z.lazy(() => SortOrderSchema).optional(),
  pmcShare: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumRevenueEntryTypeWithAggregatesFilterSchema: z.ZodType<Prisma.EnumRevenueEntryTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => RevenueEntryTypeSchema).optional(),
  in: z.lazy(() => RevenueEntryTypeSchema).array().optional(),
  notIn: z.lazy(() => RevenueEntryTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => RevenueEntryTypeSchema),z.lazy(() => NestedEnumRevenueEntryTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumRevenueEntryTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumRevenueEntryTypeFilterSchema).optional()
}).strict();

export const PlaidTransactionNullableRelationFilterSchema: z.ZodType<Prisma.PlaidTransactionNullableRelationFilter> = z.object({
  is: z.lazy(() => PlaidTransactionWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => PlaidTransactionWhereInputSchema).optional().nullable()
}).strict();

export const ExpenseCountOrderByAggregateInputSchema: z.ZodType<Prisma.ExpenseCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  vendor: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  workOrder: z.lazy(() => SortOrderSchema).optional(),
  receiptUrl: z.lazy(() => SortOrderSchema).optional(),
  invoiceUrl: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  plaidTransactionId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ExpenseAvgOrderByAggregateInputSchema: z.ZodType<Prisma.ExpenseAvgOrderByAggregateInput> = z.object({
  amount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ExpenseMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ExpenseMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  vendor: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  workOrder: z.lazy(() => SortOrderSchema).optional(),
  receiptUrl: z.lazy(() => SortOrderSchema).optional(),
  invoiceUrl: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  plaidTransactionId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ExpenseMinOrderByAggregateInputSchema: z.ZodType<Prisma.ExpenseMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  vendor: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  workOrder: z.lazy(() => SortOrderSchema).optional(),
  receiptUrl: z.lazy(() => SortOrderSchema).optional(),
  invoiceUrl: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  plaidTransactionId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ExpenseSumOrderByAggregateInputSchema: z.ZodType<Prisma.ExpenseSumOrderByAggregateInput> = z.object({
  amount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ExpenseRelationFilterSchema: z.ZodType<Prisma.ExpenseRelationFilter> = z.object({
  is: z.lazy(() => ExpenseWhereInputSchema).optional(),
  isNot: z.lazy(() => ExpenseWhereInputSchema).optional()
}).strict();

export const ListingExpenseCountOrderByAggregateInputSchema: z.ZodType<Prisma.ListingExpenseCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  confirmationCode: z.lazy(() => SortOrderSchema).optional(),
  expenseId: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  amountPaid: z.lazy(() => SortOrderSchema).optional(),
  ownerStatementId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ListingExpenseAvgOrderByAggregateInputSchema: z.ZodType<Prisma.ListingExpenseAvgOrderByAggregateInput> = z.object({
  amount: z.lazy(() => SortOrderSchema).optional(),
  amountPaid: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ListingExpenseMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ListingExpenseMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  confirmationCode: z.lazy(() => SortOrderSchema).optional(),
  expenseId: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  amountPaid: z.lazy(() => SortOrderSchema).optional(),
  ownerStatementId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ListingExpenseMinOrderByAggregateInputSchema: z.ZodType<Prisma.ListingExpenseMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  confirmationCode: z.lazy(() => SortOrderSchema).optional(),
  expenseId: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  amountPaid: z.lazy(() => SortOrderSchema).optional(),
  ownerStatementId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ListingExpenseSumOrderByAggregateInputSchema: z.ZodType<Prisma.ListingExpenseSumOrderByAggregateInput> = z.object({
  amount: z.lazy(() => SortOrderSchema).optional(),
  amountPaid: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RevenueListRelationFilterSchema: z.ZodType<Prisma.RevenueListRelationFilter> = z.object({
  every: z.lazy(() => RevenueWhereInputSchema).optional(),
  some: z.lazy(() => RevenueWhereInputSchema).optional(),
  none: z.lazy(() => RevenueWhereInputSchema).optional()
}).strict();

export const RevenueOrderByRelationAggregateInputSchema: z.ZodType<Prisma.RevenueOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OwnerStatementListingIdMonthYearCompoundUniqueInputSchema: z.ZodType<Prisma.OwnerStatementListingIdMonthYearCompoundUniqueInput> = z.object({
  listingId: z.string(),
  month: z.number(),
  year: z.number()
}).strict();

export const OwnerStatementCountOrderByAggregateInputSchema: z.ZodType<Prisma.OwnerStatementCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  month: z.lazy(() => SortOrderSchema).optional(),
  year: z.lazy(() => SortOrderSchema).optional(),
  locked: z.lazy(() => SortOrderSchema).optional(),
  isCoHost: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OwnerStatementAvgOrderByAggregateInputSchema: z.ZodType<Prisma.OwnerStatementAvgOrderByAggregateInput> = z.object({
  month: z.lazy(() => SortOrderSchema).optional(),
  year: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OwnerStatementMaxOrderByAggregateInputSchema: z.ZodType<Prisma.OwnerStatementMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  month: z.lazy(() => SortOrderSchema).optional(),
  year: z.lazy(() => SortOrderSchema).optional(),
  locked: z.lazy(() => SortOrderSchema).optional(),
  isCoHost: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OwnerStatementMinOrderByAggregateInputSchema: z.ZodType<Prisma.OwnerStatementMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  month: z.lazy(() => SortOrderSchema).optional(),
  year: z.lazy(() => SortOrderSchema).optional(),
  locked: z.lazy(() => SortOrderSchema).optional(),
  isCoHost: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OwnerStatementSumOrderByAggregateInputSchema: z.ZodType<Prisma.OwnerStatementSumOrderByAggregateInput> = z.object({
  month: z.lazy(() => SortOrderSchema).optional(),
  year: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PlaidAccountListRelationFilterSchema: z.ZodType<Prisma.PlaidAccountListRelationFilter> = z.object({
  every: z.lazy(() => PlaidAccountWhereInputSchema).optional(),
  some: z.lazy(() => PlaidAccountWhereInputSchema).optional(),
  none: z.lazy(() => PlaidAccountWhereInputSchema).optional()
}).strict();

export const PlaidAccountOrderByRelationAggregateInputSchema: z.ZodType<Prisma.PlaidAccountOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PlaidItemCountOrderByAggregateInputSchema: z.ZodType<Prisma.PlaidItemCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  accessToken: z.lazy(() => SortOrderSchema).optional(),
  cursor: z.lazy(() => SortOrderSchema).optional(),
  institution: z.lazy(() => SortOrderSchema).optional(),
  institutionId: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PlaidItemMaxOrderByAggregateInputSchema: z.ZodType<Prisma.PlaidItemMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  accessToken: z.lazy(() => SortOrderSchema).optional(),
  cursor: z.lazy(() => SortOrderSchema).optional(),
  institution: z.lazy(() => SortOrderSchema).optional(),
  institutionId: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PlaidItemMinOrderByAggregateInputSchema: z.ZodType<Prisma.PlaidItemMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  accessToken: z.lazy(() => SortOrderSchema).optional(),
  cursor: z.lazy(() => SortOrderSchema).optional(),
  institution: z.lazy(() => SortOrderSchema).optional(),
  institutionId: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PlaidItemRelationFilterSchema: z.ZodType<Prisma.PlaidItemRelationFilter> = z.object({
  is: z.lazy(() => PlaidItemWhereInputSchema).optional(),
  isNot: z.lazy(() => PlaidItemWhereInputSchema).optional()
}).strict();

export const PlaidTransactionListRelationFilterSchema: z.ZodType<Prisma.PlaidTransactionListRelationFilter> = z.object({
  every: z.lazy(() => PlaidTransactionWhereInputSchema).optional(),
  some: z.lazy(() => PlaidTransactionWhereInputSchema).optional(),
  none: z.lazy(() => PlaidTransactionWhereInputSchema).optional()
}).strict();

export const PlaidTransactionOrderByRelationAggregateInputSchema: z.ZodType<Prisma.PlaidTransactionOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PlaidAccountCountOrderByAggregateInputSchema: z.ZodType<Prisma.PlaidAccountCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  itemId: z.lazy(() => SortOrderSchema).optional(),
  plaidId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  mask: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  subtype: z.lazy(() => SortOrderSchema).optional(),
  verificationStatus: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PlaidAccountMaxOrderByAggregateInputSchema: z.ZodType<Prisma.PlaidAccountMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  itemId: z.lazy(() => SortOrderSchema).optional(),
  plaidId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  mask: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  subtype: z.lazy(() => SortOrderSchema).optional(),
  verificationStatus: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PlaidAccountMinOrderByAggregateInputSchema: z.ZodType<Prisma.PlaidAccountMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  itemId: z.lazy(() => SortOrderSchema).optional(),
  plaidId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  mask: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  subtype: z.lazy(() => SortOrderSchema).optional(),
  verificationStatus: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumPlaidImportStatusFilterSchema: z.ZodType<Prisma.EnumPlaidImportStatusFilter> = z.object({
  equals: z.lazy(() => PlaidImportStatusSchema).optional(),
  in: z.lazy(() => PlaidImportStatusSchema).array().optional(),
  notIn: z.lazy(() => PlaidImportStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => PlaidImportStatusSchema),z.lazy(() => NestedEnumPlaidImportStatusFilterSchema) ]).optional(),
}).strict();

export const PlaidAccountRelationFilterSchema: z.ZodType<Prisma.PlaidAccountRelationFilter> = z.object({
  is: z.lazy(() => PlaidAccountWhereInputSchema).optional(),
  isNot: z.lazy(() => PlaidAccountWhereInputSchema).optional()
}).strict();

export const ExpenseNullableRelationFilterSchema: z.ZodType<Prisma.ExpenseNullableRelationFilter> = z.object({
  is: z.lazy(() => ExpenseWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => ExpenseWhereInputSchema).optional().nullable()
}).strict();

export const PayoutNullableRelationFilterSchema: z.ZodType<Prisma.PayoutNullableRelationFilter> = z.object({
  is: z.lazy(() => PayoutWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => PayoutWhereInputSchema).optional().nullable()
}).strict();

export const PlaidTransactionCountOrderByAggregateInputSchema: z.ZodType<Prisma.PlaidTransactionCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  accountId: z.lazy(() => SortOrderSchema).optional(),
  plaidId: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  vendor: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PlaidTransactionAvgOrderByAggregateInputSchema: z.ZodType<Prisma.PlaidTransactionAvgOrderByAggregateInput> = z.object({
  amount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PlaidTransactionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.PlaidTransactionMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  accountId: z.lazy(() => SortOrderSchema).optional(),
  plaidId: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  vendor: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PlaidTransactionMinOrderByAggregateInputSchema: z.ZodType<Prisma.PlaidTransactionMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  accountId: z.lazy(() => SortOrderSchema).optional(),
  plaidId: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  vendor: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PlaidTransactionSumOrderByAggregateInputSchema: z.ZodType<Prisma.PlaidTransactionSumOrderByAggregateInput> = z.object({
  amount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumPlaidImportStatusWithAggregatesFilterSchema: z.ZodType<Prisma.EnumPlaidImportStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => PlaidImportStatusSchema).optional(),
  in: z.lazy(() => PlaidImportStatusSchema).array().optional(),
  notIn: z.lazy(() => PlaidImportStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => PlaidImportStatusSchema),z.lazy(() => NestedEnumPlaidImportStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumPlaidImportStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumPlaidImportStatusFilterSchema).optional()
}).strict();

export const DailyRateCountOrderByAggregateInputSchema: z.ZodType<Prisma.DailyRateCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  rate: z.lazy(() => SortOrderSchema).optional(),
  minStay: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DailyRateAvgOrderByAggregateInputSchema: z.ZodType<Prisma.DailyRateAvgOrderByAggregateInput> = z.object({
  rate: z.lazy(() => SortOrderSchema).optional(),
  minStay: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DailyRateMaxOrderByAggregateInputSchema: z.ZodType<Prisma.DailyRateMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  rate: z.lazy(() => SortOrderSchema).optional(),
  minStay: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DailyRateMinOrderByAggregateInputSchema: z.ZodType<Prisma.DailyRateMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  listingId: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  rate: z.lazy(() => SortOrderSchema).optional(),
  minStay: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DailyRateSumOrderByAggregateInputSchema: z.ZodType<Prisma.DailyRateSumOrderByAggregateInput> = z.object({
  rate: z.lazy(() => SortOrderSchema).optional(),
  minStay: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DecimalFilterSchema: z.ZodType<Prisma.DecimalFilter> = z.object({
  equals: z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  in: z.union([z.number().array(),z.string().array(),DecimalJSLikeListSchema,]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional(),
  notIn: z.union([z.number().array(),z.string().array(),DecimalJSLikeListSchema,]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional(),
  lt: z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  lte: z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gt: z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gte: z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  not: z.union([ z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NestedDecimalFilterSchema) ]).optional(),
}).strict();

export const PayoutCountOrderByAggregateInputSchema: z.ZodType<Prisma.PayoutCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  allocated: z.lazy(() => SortOrderSchema).optional(),
  plaidTransactionId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PayoutAvgOrderByAggregateInputSchema: z.ZodType<Prisma.PayoutAvgOrderByAggregateInput> = z.object({
  amount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PayoutMaxOrderByAggregateInputSchema: z.ZodType<Prisma.PayoutMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  allocated: z.lazy(() => SortOrderSchema).optional(),
  plaidTransactionId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PayoutMinOrderByAggregateInputSchema: z.ZodType<Prisma.PayoutMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  allocated: z.lazy(() => SortOrderSchema).optional(),
  plaidTransactionId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PayoutSumOrderByAggregateInputSchema: z.ZodType<Prisma.PayoutSumOrderByAggregateInput> = z.object({
  amount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DecimalWithAggregatesFilterSchema: z.ZodType<Prisma.DecimalWithAggregatesFilter> = z.object({
  equals: z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  in: z.union([z.number().array(),z.string().array(),DecimalJSLikeListSchema,]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional(),
  notIn: z.union([z.number().array(),z.string().array(),DecimalJSLikeListSchema,]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional(),
  lt: z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  lte: z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gt: z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gte: z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  not: z.union([ z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NestedDecimalWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedDecimalFilterSchema).optional(),
  _sum: z.lazy(() => NestedDecimalFilterSchema).optional(),
  _min: z.lazy(() => NestedDecimalFilterSchema).optional(),
  _max: z.lazy(() => NestedDecimalFilterSchema).optional()
}).strict();

export const PayoutRelationFilterSchema: z.ZodType<Prisma.PayoutRelationFilter> = z.object({
  is: z.lazy(() => PayoutWhereInputSchema).optional(),
  isNot: z.lazy(() => PayoutWhereInputSchema).optional()
}).strict();

export const RevenuePayoutCountOrderByAggregateInputSchema: z.ZodType<Prisma.RevenuePayoutCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  payoutId: z.lazy(() => SortOrderSchema).optional(),
  revenueId: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RevenuePayoutAvgOrderByAggregateInputSchema: z.ZodType<Prisma.RevenuePayoutAvgOrderByAggregateInput> = z.object({
  amount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RevenuePayoutMaxOrderByAggregateInputSchema: z.ZodType<Prisma.RevenuePayoutMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  payoutId: z.lazy(() => SortOrderSchema).optional(),
  revenueId: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RevenuePayoutMinOrderByAggregateInputSchema: z.ZodType<Prisma.RevenuePayoutMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  payoutId: z.lazy(() => SortOrderSchema).optional(),
  revenueId: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RevenuePayoutSumOrderByAggregateInputSchema: z.ZodType<Prisma.RevenuePayoutSumOrderByAggregateInput> = z.object({
  amount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutAccountsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutAccountsInputSchema),z.lazy(() => UserUncheckedCreateWithoutAccountsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAccountsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const StringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.StringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional()
}).strict();

export const NullableStringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableStringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional().nullable()
}).strict();

export const NullableIntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableIntFieldUpdateOperationsInput> = z.object({
  set: z.number().optional().nullable(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const UserUpdateOneRequiredWithoutAccountsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutAccountsInputSchema),z.lazy(() => UserUncheckedCreateWithoutAccountsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAccountsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutAccountsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutAccountsInputSchema),z.lazy(() => UserUpdateWithoutAccountsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAccountsInputSchema) ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutSessionsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutSessionsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutSessionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutSessionsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const DateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.DateTimeFieldUpdateOperationsInput> = z.object({
  set: z.coerce.date().optional()
}).strict();

export const UserUpdateOneRequiredWithoutSessionsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutSessionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutSessionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutSessionsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutSessionsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutSessionsInputSchema),z.lazy(() => UserUpdateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSessionsInputSchema) ]).optional(),
}).strict();

export const AccountCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.AccountCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => AccountCreateWithoutUserInputSchema),z.lazy(() => AccountCreateWithoutUserInputSchema).array(),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema),z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AccountCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SessionCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.SessionCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionCreateWithoutUserInputSchema).array(),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema),z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutUsersInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutUsersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutUsersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutUsersInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const ListingCreateNestedManyWithoutPropertyManagerInputSchema: z.ZodType<Prisma.ListingCreateNestedManyWithoutPropertyManagerInput> = z.object({
  create: z.union([ z.lazy(() => ListingCreateWithoutPropertyManagerInputSchema),z.lazy(() => ListingCreateWithoutPropertyManagerInputSchema).array(),z.lazy(() => ListingUncheckedCreateWithoutPropertyManagerInputSchema),z.lazy(() => ListingUncheckedCreateWithoutPropertyManagerInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ListingCreateOrConnectWithoutPropertyManagerInputSchema),z.lazy(() => ListingCreateOrConnectWithoutPropertyManagerInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ListingCreateManyPropertyManagerInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ListingWhereUniqueInputSchema),z.lazy(() => ListingWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ListingCreateNestedManyWithoutPropertyOwnerInputSchema: z.ZodType<Prisma.ListingCreateNestedManyWithoutPropertyOwnerInput> = z.object({
  create: z.union([ z.lazy(() => ListingCreateWithoutPropertyOwnerInputSchema),z.lazy(() => ListingCreateWithoutPropertyOwnerInputSchema).array(),z.lazy(() => ListingUncheckedCreateWithoutPropertyOwnerInputSchema),z.lazy(() => ListingUncheckedCreateWithoutPropertyOwnerInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ListingCreateOrConnectWithoutPropertyOwnerInputSchema),z.lazy(() => ListingCreateOrConnectWithoutPropertyOwnerInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ListingCreateManyPropertyOwnerInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ListingWhereUniqueInputSchema),z.lazy(() => ListingWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ExpenseCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.ExpenseCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseCreateWithoutUserInputSchema),z.lazy(() => ExpenseCreateWithoutUserInputSchema).array(),z.lazy(() => ExpenseUncheckedCreateWithoutUserInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ExpenseCreateOrConnectWithoutUserInputSchema),z.lazy(() => ExpenseCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ExpenseCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const BookingPalConnectionCreateNestedOneWithoutOwnerInputSchema: z.ZodType<Prisma.BookingPalConnectionCreateNestedOneWithoutOwnerInput> = z.object({
  create: z.union([ z.lazy(() => BookingPalConnectionCreateWithoutOwnerInputSchema),z.lazy(() => BookingPalConnectionUncheckedCreateWithoutOwnerInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => BookingPalConnectionCreateOrConnectWithoutOwnerInputSchema).optional(),
  connect: z.lazy(() => BookingPalConnectionWhereUniqueInputSchema).optional()
}).strict();

export const PlaidItemCreateNestedManyWithoutCreatorInputSchema: z.ZodType<Prisma.PlaidItemCreateNestedManyWithoutCreatorInput> = z.object({
  create: z.union([ z.lazy(() => PlaidItemCreateWithoutCreatorInputSchema),z.lazy(() => PlaidItemCreateWithoutCreatorInputSchema).array(),z.lazy(() => PlaidItemUncheckedCreateWithoutCreatorInputSchema),z.lazy(() => PlaidItemUncheckedCreateWithoutCreatorInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PlaidItemCreateOrConnectWithoutCreatorInputSchema),z.lazy(() => PlaidItemCreateOrConnectWithoutCreatorInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PlaidItemCreateManyCreatorInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PlaidItemWhereUniqueInputSchema),z.lazy(() => PlaidItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RevenuePayoutCreateNestedManyWithoutCreatedByInputSchema: z.ZodType<Prisma.RevenuePayoutCreateNestedManyWithoutCreatedByInput> = z.object({
  create: z.union([ z.lazy(() => RevenuePayoutCreateWithoutCreatedByInputSchema),z.lazy(() => RevenuePayoutCreateWithoutCreatedByInputSchema).array(),z.lazy(() => RevenuePayoutUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => RevenuePayoutUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RevenuePayoutCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => RevenuePayoutCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RevenuePayoutCreateManyCreatedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RevenuePayoutWhereUniqueInputSchema),z.lazy(() => RevenuePayoutWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AccountUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.AccountUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => AccountCreateWithoutUserInputSchema),z.lazy(() => AccountCreateWithoutUserInputSchema).array(),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema),z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AccountCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SessionUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.SessionUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionCreateWithoutUserInputSchema).array(),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema),z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ListingUncheckedCreateNestedManyWithoutPropertyManagerInputSchema: z.ZodType<Prisma.ListingUncheckedCreateNestedManyWithoutPropertyManagerInput> = z.object({
  create: z.union([ z.lazy(() => ListingCreateWithoutPropertyManagerInputSchema),z.lazy(() => ListingCreateWithoutPropertyManagerInputSchema).array(),z.lazy(() => ListingUncheckedCreateWithoutPropertyManagerInputSchema),z.lazy(() => ListingUncheckedCreateWithoutPropertyManagerInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ListingCreateOrConnectWithoutPropertyManagerInputSchema),z.lazy(() => ListingCreateOrConnectWithoutPropertyManagerInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ListingCreateManyPropertyManagerInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ListingWhereUniqueInputSchema),z.lazy(() => ListingWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ListingUncheckedCreateNestedManyWithoutPropertyOwnerInputSchema: z.ZodType<Prisma.ListingUncheckedCreateNestedManyWithoutPropertyOwnerInput> = z.object({
  create: z.union([ z.lazy(() => ListingCreateWithoutPropertyOwnerInputSchema),z.lazy(() => ListingCreateWithoutPropertyOwnerInputSchema).array(),z.lazy(() => ListingUncheckedCreateWithoutPropertyOwnerInputSchema),z.lazy(() => ListingUncheckedCreateWithoutPropertyOwnerInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ListingCreateOrConnectWithoutPropertyOwnerInputSchema),z.lazy(() => ListingCreateOrConnectWithoutPropertyOwnerInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ListingCreateManyPropertyOwnerInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ListingWhereUniqueInputSchema),z.lazy(() => ListingWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ExpenseUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.ExpenseUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseCreateWithoutUserInputSchema),z.lazy(() => ExpenseCreateWithoutUserInputSchema).array(),z.lazy(() => ExpenseUncheckedCreateWithoutUserInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ExpenseCreateOrConnectWithoutUserInputSchema),z.lazy(() => ExpenseCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ExpenseCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const BookingPalConnectionUncheckedCreateNestedOneWithoutOwnerInputSchema: z.ZodType<Prisma.BookingPalConnectionUncheckedCreateNestedOneWithoutOwnerInput> = z.object({
  create: z.union([ z.lazy(() => BookingPalConnectionCreateWithoutOwnerInputSchema),z.lazy(() => BookingPalConnectionUncheckedCreateWithoutOwnerInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => BookingPalConnectionCreateOrConnectWithoutOwnerInputSchema).optional(),
  connect: z.lazy(() => BookingPalConnectionWhereUniqueInputSchema).optional()
}).strict();

export const PlaidItemUncheckedCreateNestedManyWithoutCreatorInputSchema: z.ZodType<Prisma.PlaidItemUncheckedCreateNestedManyWithoutCreatorInput> = z.object({
  create: z.union([ z.lazy(() => PlaidItemCreateWithoutCreatorInputSchema),z.lazy(() => PlaidItemCreateWithoutCreatorInputSchema).array(),z.lazy(() => PlaidItemUncheckedCreateWithoutCreatorInputSchema),z.lazy(() => PlaidItemUncheckedCreateWithoutCreatorInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PlaidItemCreateOrConnectWithoutCreatorInputSchema),z.lazy(() => PlaidItemCreateOrConnectWithoutCreatorInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PlaidItemCreateManyCreatorInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PlaidItemWhereUniqueInputSchema),z.lazy(() => PlaidItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RevenuePayoutUncheckedCreateNestedManyWithoutCreatedByInputSchema: z.ZodType<Prisma.RevenuePayoutUncheckedCreateNestedManyWithoutCreatedByInput> = z.object({
  create: z.union([ z.lazy(() => RevenuePayoutCreateWithoutCreatedByInputSchema),z.lazy(() => RevenuePayoutCreateWithoutCreatedByInputSchema).array(),z.lazy(() => RevenuePayoutUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => RevenuePayoutUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RevenuePayoutCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => RevenuePayoutCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RevenuePayoutCreateManyCreatedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RevenuePayoutWhereUniqueInputSchema),z.lazy(() => RevenuePayoutWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const NullableDateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableDateTimeFieldUpdateOperationsInput> = z.object({
  set: z.coerce.date().optional().nullable()
}).strict();

export const EnumGlobalRoleFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumGlobalRoleFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => GlobalRoleSchema).optional()
}).strict();

export const NullableEnumOrganizationRoleFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableEnumOrganizationRoleFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => OrganizationRoleSchema).optional().nullable()
}).strict();

export const AccountUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.AccountUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountCreateWithoutUserInputSchema),z.lazy(() => AccountCreateWithoutUserInputSchema).array(),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema),z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AccountUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AccountUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AccountCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AccountUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AccountUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AccountUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => AccountUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AccountScalarWhereInputSchema),z.lazy(() => AccountScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SessionUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.SessionUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionCreateWithoutUserInputSchema).array(),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema),z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SessionScalarWhereInputSchema),z.lazy(() => SessionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUpdateOneWithoutUsersNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutUsersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutUsersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutUsersInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutUsersInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutUsersInputSchema),z.lazy(() => OrganizationUpdateWithoutUsersInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutUsersInputSchema) ]).optional(),
}).strict();

export const ListingUpdateManyWithoutPropertyManagerNestedInputSchema: z.ZodType<Prisma.ListingUpdateManyWithoutPropertyManagerNestedInput> = z.object({
  create: z.union([ z.lazy(() => ListingCreateWithoutPropertyManagerInputSchema),z.lazy(() => ListingCreateWithoutPropertyManagerInputSchema).array(),z.lazy(() => ListingUncheckedCreateWithoutPropertyManagerInputSchema),z.lazy(() => ListingUncheckedCreateWithoutPropertyManagerInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ListingCreateOrConnectWithoutPropertyManagerInputSchema),z.lazy(() => ListingCreateOrConnectWithoutPropertyManagerInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ListingUpsertWithWhereUniqueWithoutPropertyManagerInputSchema),z.lazy(() => ListingUpsertWithWhereUniqueWithoutPropertyManagerInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ListingCreateManyPropertyManagerInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ListingWhereUniqueInputSchema),z.lazy(() => ListingWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ListingWhereUniqueInputSchema),z.lazy(() => ListingWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ListingWhereUniqueInputSchema),z.lazy(() => ListingWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ListingWhereUniqueInputSchema),z.lazy(() => ListingWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ListingUpdateWithWhereUniqueWithoutPropertyManagerInputSchema),z.lazy(() => ListingUpdateWithWhereUniqueWithoutPropertyManagerInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ListingUpdateManyWithWhereWithoutPropertyManagerInputSchema),z.lazy(() => ListingUpdateManyWithWhereWithoutPropertyManagerInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ListingScalarWhereInputSchema),z.lazy(() => ListingScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ListingUpdateManyWithoutPropertyOwnerNestedInputSchema: z.ZodType<Prisma.ListingUpdateManyWithoutPropertyOwnerNestedInput> = z.object({
  create: z.union([ z.lazy(() => ListingCreateWithoutPropertyOwnerInputSchema),z.lazy(() => ListingCreateWithoutPropertyOwnerInputSchema).array(),z.lazy(() => ListingUncheckedCreateWithoutPropertyOwnerInputSchema),z.lazy(() => ListingUncheckedCreateWithoutPropertyOwnerInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ListingCreateOrConnectWithoutPropertyOwnerInputSchema),z.lazy(() => ListingCreateOrConnectWithoutPropertyOwnerInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ListingUpsertWithWhereUniqueWithoutPropertyOwnerInputSchema),z.lazy(() => ListingUpsertWithWhereUniqueWithoutPropertyOwnerInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ListingCreateManyPropertyOwnerInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ListingWhereUniqueInputSchema),z.lazy(() => ListingWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ListingWhereUniqueInputSchema),z.lazy(() => ListingWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ListingWhereUniqueInputSchema),z.lazy(() => ListingWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ListingWhereUniqueInputSchema),z.lazy(() => ListingWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ListingUpdateWithWhereUniqueWithoutPropertyOwnerInputSchema),z.lazy(() => ListingUpdateWithWhereUniqueWithoutPropertyOwnerInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ListingUpdateManyWithWhereWithoutPropertyOwnerInputSchema),z.lazy(() => ListingUpdateManyWithWhereWithoutPropertyOwnerInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ListingScalarWhereInputSchema),z.lazy(() => ListingScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ExpenseUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.ExpenseUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseCreateWithoutUserInputSchema),z.lazy(() => ExpenseCreateWithoutUserInputSchema).array(),z.lazy(() => ExpenseUncheckedCreateWithoutUserInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ExpenseCreateOrConnectWithoutUserInputSchema),z.lazy(() => ExpenseCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ExpenseUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => ExpenseUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ExpenseCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ExpenseUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => ExpenseUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ExpenseUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => ExpenseUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ExpenseScalarWhereInputSchema),z.lazy(() => ExpenseScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const BookingPalConnectionUpdateOneWithoutOwnerNestedInputSchema: z.ZodType<Prisma.BookingPalConnectionUpdateOneWithoutOwnerNestedInput> = z.object({
  create: z.union([ z.lazy(() => BookingPalConnectionCreateWithoutOwnerInputSchema),z.lazy(() => BookingPalConnectionUncheckedCreateWithoutOwnerInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => BookingPalConnectionCreateOrConnectWithoutOwnerInputSchema).optional(),
  upsert: z.lazy(() => BookingPalConnectionUpsertWithoutOwnerInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => BookingPalConnectionWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => BookingPalConnectionWhereInputSchema) ]).optional(),
  connect: z.lazy(() => BookingPalConnectionWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => BookingPalConnectionUpdateToOneWithWhereWithoutOwnerInputSchema),z.lazy(() => BookingPalConnectionUpdateWithoutOwnerInputSchema),z.lazy(() => BookingPalConnectionUncheckedUpdateWithoutOwnerInputSchema) ]).optional(),
}).strict();

export const PlaidItemUpdateManyWithoutCreatorNestedInputSchema: z.ZodType<Prisma.PlaidItemUpdateManyWithoutCreatorNestedInput> = z.object({
  create: z.union([ z.lazy(() => PlaidItemCreateWithoutCreatorInputSchema),z.lazy(() => PlaidItemCreateWithoutCreatorInputSchema).array(),z.lazy(() => PlaidItemUncheckedCreateWithoutCreatorInputSchema),z.lazy(() => PlaidItemUncheckedCreateWithoutCreatorInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PlaidItemCreateOrConnectWithoutCreatorInputSchema),z.lazy(() => PlaidItemCreateOrConnectWithoutCreatorInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PlaidItemUpsertWithWhereUniqueWithoutCreatorInputSchema),z.lazy(() => PlaidItemUpsertWithWhereUniqueWithoutCreatorInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PlaidItemCreateManyCreatorInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PlaidItemWhereUniqueInputSchema),z.lazy(() => PlaidItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PlaidItemWhereUniqueInputSchema),z.lazy(() => PlaidItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PlaidItemWhereUniqueInputSchema),z.lazy(() => PlaidItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PlaidItemWhereUniqueInputSchema),z.lazy(() => PlaidItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PlaidItemUpdateWithWhereUniqueWithoutCreatorInputSchema),z.lazy(() => PlaidItemUpdateWithWhereUniqueWithoutCreatorInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PlaidItemUpdateManyWithWhereWithoutCreatorInputSchema),z.lazy(() => PlaidItemUpdateManyWithWhereWithoutCreatorInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PlaidItemScalarWhereInputSchema),z.lazy(() => PlaidItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RevenuePayoutUpdateManyWithoutCreatedByNestedInputSchema: z.ZodType<Prisma.RevenuePayoutUpdateManyWithoutCreatedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => RevenuePayoutCreateWithoutCreatedByInputSchema),z.lazy(() => RevenuePayoutCreateWithoutCreatedByInputSchema).array(),z.lazy(() => RevenuePayoutUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => RevenuePayoutUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RevenuePayoutCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => RevenuePayoutCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RevenuePayoutUpsertWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => RevenuePayoutUpsertWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RevenuePayoutCreateManyCreatedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RevenuePayoutWhereUniqueInputSchema),z.lazy(() => RevenuePayoutWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RevenuePayoutWhereUniqueInputSchema),z.lazy(() => RevenuePayoutWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RevenuePayoutWhereUniqueInputSchema),z.lazy(() => RevenuePayoutWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RevenuePayoutWhereUniqueInputSchema),z.lazy(() => RevenuePayoutWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RevenuePayoutUpdateWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => RevenuePayoutUpdateWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RevenuePayoutUpdateManyWithWhereWithoutCreatedByInputSchema),z.lazy(() => RevenuePayoutUpdateManyWithWhereWithoutCreatedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RevenuePayoutScalarWhereInputSchema),z.lazy(() => RevenuePayoutScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AccountUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountCreateWithoutUserInputSchema),z.lazy(() => AccountCreateWithoutUserInputSchema).array(),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema),z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AccountUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AccountUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AccountCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AccountUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AccountUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AccountUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => AccountUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AccountScalarWhereInputSchema),z.lazy(() => AccountScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SessionUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionCreateWithoutUserInputSchema).array(),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema),z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SessionScalarWhereInputSchema),z.lazy(() => SessionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ListingUncheckedUpdateManyWithoutPropertyManagerNestedInputSchema: z.ZodType<Prisma.ListingUncheckedUpdateManyWithoutPropertyManagerNestedInput> = z.object({
  create: z.union([ z.lazy(() => ListingCreateWithoutPropertyManagerInputSchema),z.lazy(() => ListingCreateWithoutPropertyManagerInputSchema).array(),z.lazy(() => ListingUncheckedCreateWithoutPropertyManagerInputSchema),z.lazy(() => ListingUncheckedCreateWithoutPropertyManagerInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ListingCreateOrConnectWithoutPropertyManagerInputSchema),z.lazy(() => ListingCreateOrConnectWithoutPropertyManagerInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ListingUpsertWithWhereUniqueWithoutPropertyManagerInputSchema),z.lazy(() => ListingUpsertWithWhereUniqueWithoutPropertyManagerInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ListingCreateManyPropertyManagerInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ListingWhereUniqueInputSchema),z.lazy(() => ListingWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ListingWhereUniqueInputSchema),z.lazy(() => ListingWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ListingWhereUniqueInputSchema),z.lazy(() => ListingWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ListingWhereUniqueInputSchema),z.lazy(() => ListingWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ListingUpdateWithWhereUniqueWithoutPropertyManagerInputSchema),z.lazy(() => ListingUpdateWithWhereUniqueWithoutPropertyManagerInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ListingUpdateManyWithWhereWithoutPropertyManagerInputSchema),z.lazy(() => ListingUpdateManyWithWhereWithoutPropertyManagerInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ListingScalarWhereInputSchema),z.lazy(() => ListingScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ListingUncheckedUpdateManyWithoutPropertyOwnerNestedInputSchema: z.ZodType<Prisma.ListingUncheckedUpdateManyWithoutPropertyOwnerNestedInput> = z.object({
  create: z.union([ z.lazy(() => ListingCreateWithoutPropertyOwnerInputSchema),z.lazy(() => ListingCreateWithoutPropertyOwnerInputSchema).array(),z.lazy(() => ListingUncheckedCreateWithoutPropertyOwnerInputSchema),z.lazy(() => ListingUncheckedCreateWithoutPropertyOwnerInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ListingCreateOrConnectWithoutPropertyOwnerInputSchema),z.lazy(() => ListingCreateOrConnectWithoutPropertyOwnerInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ListingUpsertWithWhereUniqueWithoutPropertyOwnerInputSchema),z.lazy(() => ListingUpsertWithWhereUniqueWithoutPropertyOwnerInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ListingCreateManyPropertyOwnerInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ListingWhereUniqueInputSchema),z.lazy(() => ListingWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ListingWhereUniqueInputSchema),z.lazy(() => ListingWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ListingWhereUniqueInputSchema),z.lazy(() => ListingWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ListingWhereUniqueInputSchema),z.lazy(() => ListingWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ListingUpdateWithWhereUniqueWithoutPropertyOwnerInputSchema),z.lazy(() => ListingUpdateWithWhereUniqueWithoutPropertyOwnerInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ListingUpdateManyWithWhereWithoutPropertyOwnerInputSchema),z.lazy(() => ListingUpdateManyWithWhereWithoutPropertyOwnerInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ListingScalarWhereInputSchema),z.lazy(() => ListingScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ExpenseUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.ExpenseUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseCreateWithoutUserInputSchema),z.lazy(() => ExpenseCreateWithoutUserInputSchema).array(),z.lazy(() => ExpenseUncheckedCreateWithoutUserInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ExpenseCreateOrConnectWithoutUserInputSchema),z.lazy(() => ExpenseCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ExpenseUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => ExpenseUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ExpenseCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ExpenseUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => ExpenseUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ExpenseUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => ExpenseUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ExpenseScalarWhereInputSchema),z.lazy(() => ExpenseScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const BookingPalConnectionUncheckedUpdateOneWithoutOwnerNestedInputSchema: z.ZodType<Prisma.BookingPalConnectionUncheckedUpdateOneWithoutOwnerNestedInput> = z.object({
  create: z.union([ z.lazy(() => BookingPalConnectionCreateWithoutOwnerInputSchema),z.lazy(() => BookingPalConnectionUncheckedCreateWithoutOwnerInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => BookingPalConnectionCreateOrConnectWithoutOwnerInputSchema).optional(),
  upsert: z.lazy(() => BookingPalConnectionUpsertWithoutOwnerInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => BookingPalConnectionWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => BookingPalConnectionWhereInputSchema) ]).optional(),
  connect: z.lazy(() => BookingPalConnectionWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => BookingPalConnectionUpdateToOneWithWhereWithoutOwnerInputSchema),z.lazy(() => BookingPalConnectionUpdateWithoutOwnerInputSchema),z.lazy(() => BookingPalConnectionUncheckedUpdateWithoutOwnerInputSchema) ]).optional(),
}).strict();

export const PlaidItemUncheckedUpdateManyWithoutCreatorNestedInputSchema: z.ZodType<Prisma.PlaidItemUncheckedUpdateManyWithoutCreatorNestedInput> = z.object({
  create: z.union([ z.lazy(() => PlaidItemCreateWithoutCreatorInputSchema),z.lazy(() => PlaidItemCreateWithoutCreatorInputSchema).array(),z.lazy(() => PlaidItemUncheckedCreateWithoutCreatorInputSchema),z.lazy(() => PlaidItemUncheckedCreateWithoutCreatorInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PlaidItemCreateOrConnectWithoutCreatorInputSchema),z.lazy(() => PlaidItemCreateOrConnectWithoutCreatorInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PlaidItemUpsertWithWhereUniqueWithoutCreatorInputSchema),z.lazy(() => PlaidItemUpsertWithWhereUniqueWithoutCreatorInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PlaidItemCreateManyCreatorInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PlaidItemWhereUniqueInputSchema),z.lazy(() => PlaidItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PlaidItemWhereUniqueInputSchema),z.lazy(() => PlaidItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PlaidItemWhereUniqueInputSchema),z.lazy(() => PlaidItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PlaidItemWhereUniqueInputSchema),z.lazy(() => PlaidItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PlaidItemUpdateWithWhereUniqueWithoutCreatorInputSchema),z.lazy(() => PlaidItemUpdateWithWhereUniqueWithoutCreatorInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PlaidItemUpdateManyWithWhereWithoutCreatorInputSchema),z.lazy(() => PlaidItemUpdateManyWithWhereWithoutCreatorInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PlaidItemScalarWhereInputSchema),z.lazy(() => PlaidItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RevenuePayoutUncheckedUpdateManyWithoutCreatedByNestedInputSchema: z.ZodType<Prisma.RevenuePayoutUncheckedUpdateManyWithoutCreatedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => RevenuePayoutCreateWithoutCreatedByInputSchema),z.lazy(() => RevenuePayoutCreateWithoutCreatedByInputSchema).array(),z.lazy(() => RevenuePayoutUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => RevenuePayoutUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RevenuePayoutCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => RevenuePayoutCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RevenuePayoutUpsertWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => RevenuePayoutUpsertWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RevenuePayoutCreateManyCreatedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RevenuePayoutWhereUniqueInputSchema),z.lazy(() => RevenuePayoutWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RevenuePayoutWhereUniqueInputSchema),z.lazy(() => RevenuePayoutWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RevenuePayoutWhereUniqueInputSchema),z.lazy(() => RevenuePayoutWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RevenuePayoutWhereUniqueInputSchema),z.lazy(() => RevenuePayoutWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RevenuePayoutUpdateWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => RevenuePayoutUpdateWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RevenuePayoutUpdateManyWithWhereWithoutCreatedByInputSchema),z.lazy(() => RevenuePayoutUpdateManyWithWhereWithoutCreatedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RevenuePayoutScalarWhereInputSchema),z.lazy(() => RevenuePayoutScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.UserCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutOrganizationInputSchema),z.lazy(() => UserCreateWithoutOrganizationInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => UserUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => UserCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ListingCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.ListingCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => ListingCreateWithoutOrganizationInputSchema),z.lazy(() => ListingCreateWithoutOrganizationInputSchema).array(),z.lazy(() => ListingUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => ListingUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ListingCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => ListingCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ListingCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ListingWhereUniqueInputSchema),z.lazy(() => ListingWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const BookingPalConnectionCreateNestedOneWithoutOrganizationInputSchema: z.ZodType<Prisma.BookingPalConnectionCreateNestedOneWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => BookingPalConnectionCreateWithoutOrganizationInputSchema),z.lazy(() => BookingPalConnectionUncheckedCreateWithoutOrganizationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => BookingPalConnectionCreateOrConnectWithoutOrganizationInputSchema).optional(),
  connect: z.lazy(() => BookingPalConnectionWhereUniqueInputSchema).optional()
}).strict();

export const MessageTemplateCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.MessageTemplateCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => MessageTemplateCreateWithoutOrganizationInputSchema),z.lazy(() => MessageTemplateCreateWithoutOrganizationInputSchema).array(),z.lazy(() => MessageTemplateUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => MessageTemplateUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MessageTemplateCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => MessageTemplateCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MessageTemplateCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MessageTemplateWhereUniqueInputSchema),z.lazy(() => MessageTemplateWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const GuestCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.GuestCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => GuestCreateWithoutOrganizationInputSchema),z.lazy(() => GuestCreateWithoutOrganizationInputSchema).array(),z.lazy(() => GuestUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => GuestUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => GuestCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => GuestCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => GuestCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => GuestWhereUniqueInputSchema),z.lazy(() => GuestWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PlaidItemCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.PlaidItemCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => PlaidItemCreateWithoutOrganizationInputSchema),z.lazy(() => PlaidItemCreateWithoutOrganizationInputSchema).array(),z.lazy(() => PlaidItemUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => PlaidItemUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PlaidItemCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => PlaidItemCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PlaidItemCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PlaidItemWhereUniqueInputSchema),z.lazy(() => PlaidItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PriceLabsConnectionCreateNestedOneWithoutOrganizationInputSchema: z.ZodType<Prisma.PriceLabsConnectionCreateNestedOneWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => PriceLabsConnectionCreateWithoutOrganizationInputSchema),z.lazy(() => PriceLabsConnectionUncheckedCreateWithoutOrganizationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PriceLabsConnectionCreateOrConnectWithoutOrganizationInputSchema).optional(),
  connect: z.lazy(() => PriceLabsConnectionWhereUniqueInputSchema).optional()
}).strict();

export const StripeConnectionCreateNestedOneWithoutOrganizationInputSchema: z.ZodType<Prisma.StripeConnectionCreateNestedOneWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => StripeConnectionCreateWithoutOrganizationInputSchema),z.lazy(() => StripeConnectionUncheckedCreateWithoutOrganizationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => StripeConnectionCreateOrConnectWithoutOrganizationInputSchema).optional(),
  connect: z.lazy(() => StripeConnectionWhereUniqueInputSchema).optional()
}).strict();

export const UserUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.UserUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutOrganizationInputSchema),z.lazy(() => UserCreateWithoutOrganizationInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => UserUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => UserCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ListingUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.ListingUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => ListingCreateWithoutOrganizationInputSchema),z.lazy(() => ListingCreateWithoutOrganizationInputSchema).array(),z.lazy(() => ListingUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => ListingUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ListingCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => ListingCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ListingCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ListingWhereUniqueInputSchema),z.lazy(() => ListingWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const BookingPalConnectionUncheckedCreateNestedOneWithoutOrganizationInputSchema: z.ZodType<Prisma.BookingPalConnectionUncheckedCreateNestedOneWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => BookingPalConnectionCreateWithoutOrganizationInputSchema),z.lazy(() => BookingPalConnectionUncheckedCreateWithoutOrganizationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => BookingPalConnectionCreateOrConnectWithoutOrganizationInputSchema).optional(),
  connect: z.lazy(() => BookingPalConnectionWhereUniqueInputSchema).optional()
}).strict();

export const MessageTemplateUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.MessageTemplateUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => MessageTemplateCreateWithoutOrganizationInputSchema),z.lazy(() => MessageTemplateCreateWithoutOrganizationInputSchema).array(),z.lazy(() => MessageTemplateUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => MessageTemplateUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MessageTemplateCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => MessageTemplateCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MessageTemplateCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MessageTemplateWhereUniqueInputSchema),z.lazy(() => MessageTemplateWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const GuestUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.GuestUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => GuestCreateWithoutOrganizationInputSchema),z.lazy(() => GuestCreateWithoutOrganizationInputSchema).array(),z.lazy(() => GuestUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => GuestUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => GuestCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => GuestCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => GuestCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => GuestWhereUniqueInputSchema),z.lazy(() => GuestWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PlaidItemUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.PlaidItemUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => PlaidItemCreateWithoutOrganizationInputSchema),z.lazy(() => PlaidItemCreateWithoutOrganizationInputSchema).array(),z.lazy(() => PlaidItemUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => PlaidItemUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PlaidItemCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => PlaidItemCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PlaidItemCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PlaidItemWhereUniqueInputSchema),z.lazy(() => PlaidItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PriceLabsConnectionUncheckedCreateNestedOneWithoutOrganizationInputSchema: z.ZodType<Prisma.PriceLabsConnectionUncheckedCreateNestedOneWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => PriceLabsConnectionCreateWithoutOrganizationInputSchema),z.lazy(() => PriceLabsConnectionUncheckedCreateWithoutOrganizationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PriceLabsConnectionCreateOrConnectWithoutOrganizationInputSchema).optional(),
  connect: z.lazy(() => PriceLabsConnectionWhereUniqueInputSchema).optional()
}).strict();

export const StripeConnectionUncheckedCreateNestedOneWithoutOrganizationInputSchema: z.ZodType<Prisma.StripeConnectionUncheckedCreateNestedOneWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => StripeConnectionCreateWithoutOrganizationInputSchema),z.lazy(() => StripeConnectionUncheckedCreateWithoutOrganizationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => StripeConnectionCreateOrConnectWithoutOrganizationInputSchema).optional(),
  connect: z.lazy(() => StripeConnectionWhereUniqueInputSchema).optional()
}).strict();

export const BoolFieldUpdateOperationsInputSchema: z.ZodType<Prisma.BoolFieldUpdateOperationsInput> = z.object({
  set: z.boolean().optional()
}).strict();

export const UserUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.UserUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutOrganizationInputSchema),z.lazy(() => UserCreateWithoutOrganizationInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => UserUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => UserCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => UserUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => UserUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => UserUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserScalarWhereInputSchema),z.lazy(() => UserScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ListingUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.ListingUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => ListingCreateWithoutOrganizationInputSchema),z.lazy(() => ListingCreateWithoutOrganizationInputSchema).array(),z.lazy(() => ListingUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => ListingUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ListingCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => ListingCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ListingUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => ListingUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ListingCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ListingWhereUniqueInputSchema),z.lazy(() => ListingWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ListingWhereUniqueInputSchema),z.lazy(() => ListingWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ListingWhereUniqueInputSchema),z.lazy(() => ListingWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ListingWhereUniqueInputSchema),z.lazy(() => ListingWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ListingUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => ListingUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ListingUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => ListingUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ListingScalarWhereInputSchema),z.lazy(() => ListingScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const BookingPalConnectionUpdateOneWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.BookingPalConnectionUpdateOneWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => BookingPalConnectionCreateWithoutOrganizationInputSchema),z.lazy(() => BookingPalConnectionUncheckedCreateWithoutOrganizationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => BookingPalConnectionCreateOrConnectWithoutOrganizationInputSchema).optional(),
  upsert: z.lazy(() => BookingPalConnectionUpsertWithoutOrganizationInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => BookingPalConnectionWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => BookingPalConnectionWhereInputSchema) ]).optional(),
  connect: z.lazy(() => BookingPalConnectionWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => BookingPalConnectionUpdateToOneWithWhereWithoutOrganizationInputSchema),z.lazy(() => BookingPalConnectionUpdateWithoutOrganizationInputSchema),z.lazy(() => BookingPalConnectionUncheckedUpdateWithoutOrganizationInputSchema) ]).optional(),
}).strict();

export const MessageTemplateUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.MessageTemplateUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => MessageTemplateCreateWithoutOrganizationInputSchema),z.lazy(() => MessageTemplateCreateWithoutOrganizationInputSchema).array(),z.lazy(() => MessageTemplateUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => MessageTemplateUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MessageTemplateCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => MessageTemplateCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MessageTemplateUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => MessageTemplateUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MessageTemplateCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MessageTemplateWhereUniqueInputSchema),z.lazy(() => MessageTemplateWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MessageTemplateWhereUniqueInputSchema),z.lazy(() => MessageTemplateWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MessageTemplateWhereUniqueInputSchema),z.lazy(() => MessageTemplateWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MessageTemplateWhereUniqueInputSchema),z.lazy(() => MessageTemplateWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MessageTemplateUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => MessageTemplateUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MessageTemplateUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => MessageTemplateUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MessageTemplateScalarWhereInputSchema),z.lazy(() => MessageTemplateScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const GuestUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.GuestUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => GuestCreateWithoutOrganizationInputSchema),z.lazy(() => GuestCreateWithoutOrganizationInputSchema).array(),z.lazy(() => GuestUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => GuestUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => GuestCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => GuestCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => GuestUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => GuestUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => GuestCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => GuestWhereUniqueInputSchema),z.lazy(() => GuestWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => GuestWhereUniqueInputSchema),z.lazy(() => GuestWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => GuestWhereUniqueInputSchema),z.lazy(() => GuestWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => GuestWhereUniqueInputSchema),z.lazy(() => GuestWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => GuestUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => GuestUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => GuestUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => GuestUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => GuestScalarWhereInputSchema),z.lazy(() => GuestScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PlaidItemUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.PlaidItemUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => PlaidItemCreateWithoutOrganizationInputSchema),z.lazy(() => PlaidItemCreateWithoutOrganizationInputSchema).array(),z.lazy(() => PlaidItemUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => PlaidItemUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PlaidItemCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => PlaidItemCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PlaidItemUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => PlaidItemUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PlaidItemCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PlaidItemWhereUniqueInputSchema),z.lazy(() => PlaidItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PlaidItemWhereUniqueInputSchema),z.lazy(() => PlaidItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PlaidItemWhereUniqueInputSchema),z.lazy(() => PlaidItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PlaidItemWhereUniqueInputSchema),z.lazy(() => PlaidItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PlaidItemUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => PlaidItemUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PlaidItemUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => PlaidItemUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PlaidItemScalarWhereInputSchema),z.lazy(() => PlaidItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PriceLabsConnectionUpdateOneWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.PriceLabsConnectionUpdateOneWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => PriceLabsConnectionCreateWithoutOrganizationInputSchema),z.lazy(() => PriceLabsConnectionUncheckedCreateWithoutOrganizationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PriceLabsConnectionCreateOrConnectWithoutOrganizationInputSchema).optional(),
  upsert: z.lazy(() => PriceLabsConnectionUpsertWithoutOrganizationInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => PriceLabsConnectionWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => PriceLabsConnectionWhereInputSchema) ]).optional(),
  connect: z.lazy(() => PriceLabsConnectionWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => PriceLabsConnectionUpdateToOneWithWhereWithoutOrganizationInputSchema),z.lazy(() => PriceLabsConnectionUpdateWithoutOrganizationInputSchema),z.lazy(() => PriceLabsConnectionUncheckedUpdateWithoutOrganizationInputSchema) ]).optional(),
}).strict();

export const StripeConnectionUpdateOneWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.StripeConnectionUpdateOneWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => StripeConnectionCreateWithoutOrganizationInputSchema),z.lazy(() => StripeConnectionUncheckedCreateWithoutOrganizationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => StripeConnectionCreateOrConnectWithoutOrganizationInputSchema).optional(),
  upsert: z.lazy(() => StripeConnectionUpsertWithoutOrganizationInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => StripeConnectionWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => StripeConnectionWhereInputSchema) ]).optional(),
  connect: z.lazy(() => StripeConnectionWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => StripeConnectionUpdateToOneWithWhereWithoutOrganizationInputSchema),z.lazy(() => StripeConnectionUpdateWithoutOrganizationInputSchema),z.lazy(() => StripeConnectionUncheckedUpdateWithoutOrganizationInputSchema) ]).optional(),
}).strict();

export const UserUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutOrganizationInputSchema),z.lazy(() => UserCreateWithoutOrganizationInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => UserUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => UserCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => UserUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => UserUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => UserUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserScalarWhereInputSchema),z.lazy(() => UserScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ListingUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.ListingUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => ListingCreateWithoutOrganizationInputSchema),z.lazy(() => ListingCreateWithoutOrganizationInputSchema).array(),z.lazy(() => ListingUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => ListingUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ListingCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => ListingCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ListingUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => ListingUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ListingCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ListingWhereUniqueInputSchema),z.lazy(() => ListingWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ListingWhereUniqueInputSchema),z.lazy(() => ListingWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ListingWhereUniqueInputSchema),z.lazy(() => ListingWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ListingWhereUniqueInputSchema),z.lazy(() => ListingWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ListingUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => ListingUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ListingUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => ListingUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ListingScalarWhereInputSchema),z.lazy(() => ListingScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const BookingPalConnectionUncheckedUpdateOneWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.BookingPalConnectionUncheckedUpdateOneWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => BookingPalConnectionCreateWithoutOrganizationInputSchema),z.lazy(() => BookingPalConnectionUncheckedCreateWithoutOrganizationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => BookingPalConnectionCreateOrConnectWithoutOrganizationInputSchema).optional(),
  upsert: z.lazy(() => BookingPalConnectionUpsertWithoutOrganizationInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => BookingPalConnectionWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => BookingPalConnectionWhereInputSchema) ]).optional(),
  connect: z.lazy(() => BookingPalConnectionWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => BookingPalConnectionUpdateToOneWithWhereWithoutOrganizationInputSchema),z.lazy(() => BookingPalConnectionUpdateWithoutOrganizationInputSchema),z.lazy(() => BookingPalConnectionUncheckedUpdateWithoutOrganizationInputSchema) ]).optional(),
}).strict();

export const MessageTemplateUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.MessageTemplateUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => MessageTemplateCreateWithoutOrganizationInputSchema),z.lazy(() => MessageTemplateCreateWithoutOrganizationInputSchema).array(),z.lazy(() => MessageTemplateUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => MessageTemplateUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MessageTemplateCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => MessageTemplateCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MessageTemplateUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => MessageTemplateUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MessageTemplateCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MessageTemplateWhereUniqueInputSchema),z.lazy(() => MessageTemplateWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MessageTemplateWhereUniqueInputSchema),z.lazy(() => MessageTemplateWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MessageTemplateWhereUniqueInputSchema),z.lazy(() => MessageTemplateWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MessageTemplateWhereUniqueInputSchema),z.lazy(() => MessageTemplateWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MessageTemplateUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => MessageTemplateUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MessageTemplateUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => MessageTemplateUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MessageTemplateScalarWhereInputSchema),z.lazy(() => MessageTemplateScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const GuestUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.GuestUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => GuestCreateWithoutOrganizationInputSchema),z.lazy(() => GuestCreateWithoutOrganizationInputSchema).array(),z.lazy(() => GuestUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => GuestUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => GuestCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => GuestCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => GuestUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => GuestUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => GuestCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => GuestWhereUniqueInputSchema),z.lazy(() => GuestWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => GuestWhereUniqueInputSchema),z.lazy(() => GuestWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => GuestWhereUniqueInputSchema),z.lazy(() => GuestWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => GuestWhereUniqueInputSchema),z.lazy(() => GuestWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => GuestUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => GuestUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => GuestUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => GuestUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => GuestScalarWhereInputSchema),z.lazy(() => GuestScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PlaidItemUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.PlaidItemUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => PlaidItemCreateWithoutOrganizationInputSchema),z.lazy(() => PlaidItemCreateWithoutOrganizationInputSchema).array(),z.lazy(() => PlaidItemUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => PlaidItemUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PlaidItemCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => PlaidItemCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PlaidItemUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => PlaidItemUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PlaidItemCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PlaidItemWhereUniqueInputSchema),z.lazy(() => PlaidItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PlaidItemWhereUniqueInputSchema),z.lazy(() => PlaidItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PlaidItemWhereUniqueInputSchema),z.lazy(() => PlaidItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PlaidItemWhereUniqueInputSchema),z.lazy(() => PlaidItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PlaidItemUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => PlaidItemUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PlaidItemUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => PlaidItemUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PlaidItemScalarWhereInputSchema),z.lazy(() => PlaidItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PriceLabsConnectionUncheckedUpdateOneWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.PriceLabsConnectionUncheckedUpdateOneWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => PriceLabsConnectionCreateWithoutOrganizationInputSchema),z.lazy(() => PriceLabsConnectionUncheckedCreateWithoutOrganizationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PriceLabsConnectionCreateOrConnectWithoutOrganizationInputSchema).optional(),
  upsert: z.lazy(() => PriceLabsConnectionUpsertWithoutOrganizationInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => PriceLabsConnectionWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => PriceLabsConnectionWhereInputSchema) ]).optional(),
  connect: z.lazy(() => PriceLabsConnectionWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => PriceLabsConnectionUpdateToOneWithWhereWithoutOrganizationInputSchema),z.lazy(() => PriceLabsConnectionUpdateWithoutOrganizationInputSchema),z.lazy(() => PriceLabsConnectionUncheckedUpdateWithoutOrganizationInputSchema) ]).optional(),
}).strict();

export const StripeConnectionUncheckedUpdateOneWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.StripeConnectionUncheckedUpdateOneWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => StripeConnectionCreateWithoutOrganizationInputSchema),z.lazy(() => StripeConnectionUncheckedCreateWithoutOrganizationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => StripeConnectionCreateOrConnectWithoutOrganizationInputSchema).optional(),
  upsert: z.lazy(() => StripeConnectionUpsertWithoutOrganizationInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => StripeConnectionWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => StripeConnectionWhereInputSchema) ]).optional(),
  connect: z.lazy(() => StripeConnectionWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => StripeConnectionUpdateToOneWithWhereWithoutOrganizationInputSchema),z.lazy(() => StripeConnectionUpdateWithoutOrganizationInputSchema),z.lazy(() => StripeConnectionUncheckedUpdateWithoutOrganizationInputSchema) ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutBookingPalConnectionInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutBookingPalConnectionInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutBookingPalConnectionInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutBookingPalConnectionInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutBookingPalConnectionInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutBookingPalConnectionInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutBookingPalConnectionInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutBookingPalConnectionInputSchema),z.lazy(() => UserUncheckedCreateWithoutBookingPalConnectionInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutBookingPalConnectionInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const IntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.IntFieldUpdateOperationsInput> = z.object({
  set: z.number().optional(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const OrganizationUpdateOneWithoutBookingPalConnectionNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneWithoutBookingPalConnectionNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutBookingPalConnectionInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutBookingPalConnectionInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutBookingPalConnectionInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutBookingPalConnectionInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutBookingPalConnectionInputSchema),z.lazy(() => OrganizationUpdateWithoutBookingPalConnectionInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutBookingPalConnectionInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneWithoutBookingPalConnectionNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutBookingPalConnectionNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutBookingPalConnectionInputSchema),z.lazy(() => UserUncheckedCreateWithoutBookingPalConnectionInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutBookingPalConnectionInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutBookingPalConnectionInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutBookingPalConnectionInputSchema),z.lazy(() => UserUpdateWithoutBookingPalConnectionInputSchema),z.lazy(() => UserUncheckedUpdateWithoutBookingPalConnectionInputSchema) ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutPriceLabsConnectionInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutPriceLabsConnectionInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutPriceLabsConnectionInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutPriceLabsConnectionInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutPriceLabsConnectionInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const OrganizationUpdateOneWithoutPriceLabsConnectionNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneWithoutPriceLabsConnectionNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutPriceLabsConnectionInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutPriceLabsConnectionInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutPriceLabsConnectionInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutPriceLabsConnectionInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutPriceLabsConnectionInputSchema),z.lazy(() => OrganizationUpdateWithoutPriceLabsConnectionInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutPriceLabsConnectionInputSchema) ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutStripeConnectionInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutStripeConnectionInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutStripeConnectionInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutStripeConnectionInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutStripeConnectionInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const OrganizationUpdateOneRequiredWithoutStripeConnectionNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutStripeConnectionNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutStripeConnectionInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutStripeConnectionInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutStripeConnectionInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutStripeConnectionInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutStripeConnectionInputSchema),z.lazy(() => OrganizationUpdateWithoutStripeConnectionInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutStripeConnectionInputSchema) ]).optional(),
}).strict();

export const ContentCreateNestedOneWithoutListingInputSchema: z.ZodType<Prisma.ContentCreateNestedOneWithoutListingInput> = z.object({
  create: z.union([ z.lazy(() => ContentCreateWithoutListingInputSchema),z.lazy(() => ContentUncheckedCreateWithoutListingInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ContentCreateOrConnectWithoutListingInputSchema).optional(),
  connect: z.lazy(() => ContentWhereUniqueInputSchema).optional()
}).strict();

export const RulesCreateNestedOneWithoutListingInputSchema: z.ZodType<Prisma.RulesCreateNestedOneWithoutListingInput> = z.object({
  create: z.union([ z.lazy(() => RulesCreateWithoutListingInputSchema),z.lazy(() => RulesUncheckedCreateWithoutListingInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RulesCreateOrConnectWithoutListingInputSchema).optional(),
  connect: z.lazy(() => RulesWhereUniqueInputSchema).optional()
}).strict();

export const PricingCreateNestedOneWithoutListingInputSchema: z.ZodType<Prisma.PricingCreateNestedOneWithoutListingInput> = z.object({
  create: z.union([ z.lazy(() => PricingCreateWithoutListingInputSchema),z.lazy(() => PricingUncheckedCreateWithoutListingInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PricingCreateOrConnectWithoutListingInputSchema).optional(),
  connect: z.lazy(() => PricingWhereUniqueInputSchema).optional()
}).strict();

export const AvailabilityCreateNestedOneWithoutListingInputSchema: z.ZodType<Prisma.AvailabilityCreateNestedOneWithoutListingInput> = z.object({
  create: z.union([ z.lazy(() => AvailabilityCreateWithoutListingInputSchema),z.lazy(() => AvailabilityUncheckedCreateWithoutListingInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AvailabilityCreateOrConnectWithoutListingInputSchema).optional(),
  connect: z.lazy(() => AvailabilityWhereUniqueInputSchema).optional()
}).strict();

export const AmenityCreateNestedManyWithoutListingInputSchema: z.ZodType<Prisma.AmenityCreateNestedManyWithoutListingInput> = z.object({
  create: z.union([ z.lazy(() => AmenityCreateWithoutListingInputSchema),z.lazy(() => AmenityCreateWithoutListingInputSchema).array(),z.lazy(() => AmenityUncheckedCreateWithoutListingInputSchema),z.lazy(() => AmenityUncheckedCreateWithoutListingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AmenityCreateOrConnectWithoutListingInputSchema),z.lazy(() => AmenityCreateOrConnectWithoutListingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AmenityCreateManyListingInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AmenityWhereUniqueInputSchema),z.lazy(() => AmenityWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FeeCreateNestedManyWithoutListingInputSchema: z.ZodType<Prisma.FeeCreateNestedManyWithoutListingInput> = z.object({
  create: z.union([ z.lazy(() => FeeCreateWithoutListingInputSchema),z.lazy(() => FeeCreateWithoutListingInputSchema).array(),z.lazy(() => FeeUncheckedCreateWithoutListingInputSchema),z.lazy(() => FeeUncheckedCreateWithoutListingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeeCreateOrConnectWithoutListingInputSchema),z.lazy(() => FeeCreateOrConnectWithoutListingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeeCreateManyListingInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FeeWhereUniqueInputSchema),z.lazy(() => FeeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TaxRatesCreateNestedOneWithoutListingInputSchema: z.ZodType<Prisma.TaxRatesCreateNestedOneWithoutListingInput> = z.object({
  create: z.union([ z.lazy(() => TaxRatesCreateWithoutListingInputSchema),z.lazy(() => TaxRatesUncheckedCreateWithoutListingInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TaxRatesCreateOrConnectWithoutListingInputSchema).optional(),
  connect: z.lazy(() => TaxRatesWhereUniqueInputSchema).optional()
}).strict();

export const CalendarEventCreateNestedManyWithoutListingInputSchema: z.ZodType<Prisma.CalendarEventCreateNestedManyWithoutListingInput> = z.object({
  create: z.union([ z.lazy(() => CalendarEventCreateWithoutListingInputSchema),z.lazy(() => CalendarEventCreateWithoutListingInputSchema).array(),z.lazy(() => CalendarEventUncheckedCreateWithoutListingInputSchema),z.lazy(() => CalendarEventUncheckedCreateWithoutListingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CalendarEventCreateOrConnectWithoutListingInputSchema),z.lazy(() => CalendarEventCreateOrConnectWithoutListingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CalendarEventCreateManyListingInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CalendarEventWhereUniqueInputSchema),z.lazy(() => CalendarEventWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MessageTemplateCreateNestedManyWithoutListingsInputSchema: z.ZodType<Prisma.MessageTemplateCreateNestedManyWithoutListingsInput> = z.object({
  create: z.union([ z.lazy(() => MessageTemplateCreateWithoutListingsInputSchema),z.lazy(() => MessageTemplateCreateWithoutListingsInputSchema).array(),z.lazy(() => MessageTemplateUncheckedCreateWithoutListingsInputSchema),z.lazy(() => MessageTemplateUncheckedCreateWithoutListingsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MessageTemplateCreateOrConnectWithoutListingsInputSchema),z.lazy(() => MessageTemplateCreateOrConnectWithoutListingsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MessageTemplateWhereUniqueInputSchema),z.lazy(() => MessageTemplateWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutListingsInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutListingsInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutListingsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutListingsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutListingsInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const DeductionsCreateNestedOneWithoutListingInputSchema: z.ZodType<Prisma.DeductionsCreateNestedOneWithoutListingInput> = z.object({
  create: z.union([ z.lazy(() => DeductionsCreateWithoutListingInputSchema),z.lazy(() => DeductionsUncheckedCreateWithoutListingInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => DeductionsCreateOrConnectWithoutListingInputSchema).optional(),
  connect: z.lazy(() => DeductionsWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutManagedListingsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutManagedListingsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutManagedListingsInputSchema),z.lazy(() => UserUncheckedCreateWithoutManagedListingsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutManagedListingsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutOwnedListingsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutOwnedListingsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutOwnedListingsInputSchema),z.lazy(() => UserUncheckedCreateWithoutOwnedListingsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutOwnedListingsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const MessageThreadCreateNestedManyWithoutListingInputSchema: z.ZodType<Prisma.MessageThreadCreateNestedManyWithoutListingInput> = z.object({
  create: z.union([ z.lazy(() => MessageThreadCreateWithoutListingInputSchema),z.lazy(() => MessageThreadCreateWithoutListingInputSchema).array(),z.lazy(() => MessageThreadUncheckedCreateWithoutListingInputSchema),z.lazy(() => MessageThreadUncheckedCreateWithoutListingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MessageThreadCreateOrConnectWithoutListingInputSchema),z.lazy(() => MessageThreadCreateOrConnectWithoutListingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MessageThreadCreateManyListingInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MessageThreadWhereUniqueInputSchema),z.lazy(() => MessageThreadWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ListingExpenseCreateNestedManyWithoutListingInputSchema: z.ZodType<Prisma.ListingExpenseCreateNestedManyWithoutListingInput> = z.object({
  create: z.union([ z.lazy(() => ListingExpenseCreateWithoutListingInputSchema),z.lazy(() => ListingExpenseCreateWithoutListingInputSchema).array(),z.lazy(() => ListingExpenseUncheckedCreateWithoutListingInputSchema),z.lazy(() => ListingExpenseUncheckedCreateWithoutListingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ListingExpenseCreateOrConnectWithoutListingInputSchema),z.lazy(() => ListingExpenseCreateOrConnectWithoutListingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ListingExpenseCreateManyListingInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ListingExpenseWhereUniqueInputSchema),z.lazy(() => ListingExpenseWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OwnerStatementCreateNestedManyWithoutListingInputSchema: z.ZodType<Prisma.OwnerStatementCreateNestedManyWithoutListingInput> = z.object({
  create: z.union([ z.lazy(() => OwnerStatementCreateWithoutListingInputSchema),z.lazy(() => OwnerStatementCreateWithoutListingInputSchema).array(),z.lazy(() => OwnerStatementUncheckedCreateWithoutListingInputSchema),z.lazy(() => OwnerStatementUncheckedCreateWithoutListingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OwnerStatementCreateOrConnectWithoutListingInputSchema),z.lazy(() => OwnerStatementCreateOrConnectWithoutListingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OwnerStatementCreateManyListingInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => OwnerStatementWhereUniqueInputSchema),z.lazy(() => OwnerStatementWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const DailyRateCreateNestedManyWithoutListingInputSchema: z.ZodType<Prisma.DailyRateCreateNestedManyWithoutListingInput> = z.object({
  create: z.union([ z.lazy(() => DailyRateCreateWithoutListingInputSchema),z.lazy(() => DailyRateCreateWithoutListingInputSchema).array(),z.lazy(() => DailyRateUncheckedCreateWithoutListingInputSchema),z.lazy(() => DailyRateUncheckedCreateWithoutListingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DailyRateCreateOrConnectWithoutListingInputSchema),z.lazy(() => DailyRateCreateOrConnectWithoutListingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DailyRateCreateManyListingInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => DailyRateWhereUniqueInputSchema),z.lazy(() => DailyRateWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ListingKeyCreateNestedManyWithoutListingInputSchema: z.ZodType<Prisma.ListingKeyCreateNestedManyWithoutListingInput> = z.object({
  create: z.union([ z.lazy(() => ListingKeyCreateWithoutListingInputSchema),z.lazy(() => ListingKeyCreateWithoutListingInputSchema).array(),z.lazy(() => ListingKeyUncheckedCreateWithoutListingInputSchema),z.lazy(() => ListingKeyUncheckedCreateWithoutListingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ListingKeyCreateOrConnectWithoutListingInputSchema),z.lazy(() => ListingKeyCreateOrConnectWithoutListingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ListingKeyCreateManyListingInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ListingKeyWhereUniqueInputSchema),z.lazy(() => ListingKeyWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ContentUncheckedCreateNestedOneWithoutListingInputSchema: z.ZodType<Prisma.ContentUncheckedCreateNestedOneWithoutListingInput> = z.object({
  create: z.union([ z.lazy(() => ContentCreateWithoutListingInputSchema),z.lazy(() => ContentUncheckedCreateWithoutListingInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ContentCreateOrConnectWithoutListingInputSchema).optional(),
  connect: z.lazy(() => ContentWhereUniqueInputSchema).optional()
}).strict();

export const RulesUncheckedCreateNestedOneWithoutListingInputSchema: z.ZodType<Prisma.RulesUncheckedCreateNestedOneWithoutListingInput> = z.object({
  create: z.union([ z.lazy(() => RulesCreateWithoutListingInputSchema),z.lazy(() => RulesUncheckedCreateWithoutListingInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RulesCreateOrConnectWithoutListingInputSchema).optional(),
  connect: z.lazy(() => RulesWhereUniqueInputSchema).optional()
}).strict();

export const PricingUncheckedCreateNestedOneWithoutListingInputSchema: z.ZodType<Prisma.PricingUncheckedCreateNestedOneWithoutListingInput> = z.object({
  create: z.union([ z.lazy(() => PricingCreateWithoutListingInputSchema),z.lazy(() => PricingUncheckedCreateWithoutListingInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PricingCreateOrConnectWithoutListingInputSchema).optional(),
  connect: z.lazy(() => PricingWhereUniqueInputSchema).optional()
}).strict();

export const AvailabilityUncheckedCreateNestedOneWithoutListingInputSchema: z.ZodType<Prisma.AvailabilityUncheckedCreateNestedOneWithoutListingInput> = z.object({
  create: z.union([ z.lazy(() => AvailabilityCreateWithoutListingInputSchema),z.lazy(() => AvailabilityUncheckedCreateWithoutListingInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AvailabilityCreateOrConnectWithoutListingInputSchema).optional(),
  connect: z.lazy(() => AvailabilityWhereUniqueInputSchema).optional()
}).strict();

export const AmenityUncheckedCreateNestedManyWithoutListingInputSchema: z.ZodType<Prisma.AmenityUncheckedCreateNestedManyWithoutListingInput> = z.object({
  create: z.union([ z.lazy(() => AmenityCreateWithoutListingInputSchema),z.lazy(() => AmenityCreateWithoutListingInputSchema).array(),z.lazy(() => AmenityUncheckedCreateWithoutListingInputSchema),z.lazy(() => AmenityUncheckedCreateWithoutListingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AmenityCreateOrConnectWithoutListingInputSchema),z.lazy(() => AmenityCreateOrConnectWithoutListingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AmenityCreateManyListingInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AmenityWhereUniqueInputSchema),z.lazy(() => AmenityWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FeeUncheckedCreateNestedManyWithoutListingInputSchema: z.ZodType<Prisma.FeeUncheckedCreateNestedManyWithoutListingInput> = z.object({
  create: z.union([ z.lazy(() => FeeCreateWithoutListingInputSchema),z.lazy(() => FeeCreateWithoutListingInputSchema).array(),z.lazy(() => FeeUncheckedCreateWithoutListingInputSchema),z.lazy(() => FeeUncheckedCreateWithoutListingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeeCreateOrConnectWithoutListingInputSchema),z.lazy(() => FeeCreateOrConnectWithoutListingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeeCreateManyListingInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FeeWhereUniqueInputSchema),z.lazy(() => FeeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TaxRatesUncheckedCreateNestedOneWithoutListingInputSchema: z.ZodType<Prisma.TaxRatesUncheckedCreateNestedOneWithoutListingInput> = z.object({
  create: z.union([ z.lazy(() => TaxRatesCreateWithoutListingInputSchema),z.lazy(() => TaxRatesUncheckedCreateWithoutListingInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TaxRatesCreateOrConnectWithoutListingInputSchema).optional(),
  connect: z.lazy(() => TaxRatesWhereUniqueInputSchema).optional()
}).strict();

export const CalendarEventUncheckedCreateNestedManyWithoutListingInputSchema: z.ZodType<Prisma.CalendarEventUncheckedCreateNestedManyWithoutListingInput> = z.object({
  create: z.union([ z.lazy(() => CalendarEventCreateWithoutListingInputSchema),z.lazy(() => CalendarEventCreateWithoutListingInputSchema).array(),z.lazy(() => CalendarEventUncheckedCreateWithoutListingInputSchema),z.lazy(() => CalendarEventUncheckedCreateWithoutListingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CalendarEventCreateOrConnectWithoutListingInputSchema),z.lazy(() => CalendarEventCreateOrConnectWithoutListingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CalendarEventCreateManyListingInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CalendarEventWhereUniqueInputSchema),z.lazy(() => CalendarEventWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MessageTemplateUncheckedCreateNestedManyWithoutListingsInputSchema: z.ZodType<Prisma.MessageTemplateUncheckedCreateNestedManyWithoutListingsInput> = z.object({
  create: z.union([ z.lazy(() => MessageTemplateCreateWithoutListingsInputSchema),z.lazy(() => MessageTemplateCreateWithoutListingsInputSchema).array(),z.lazy(() => MessageTemplateUncheckedCreateWithoutListingsInputSchema),z.lazy(() => MessageTemplateUncheckedCreateWithoutListingsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MessageTemplateCreateOrConnectWithoutListingsInputSchema),z.lazy(() => MessageTemplateCreateOrConnectWithoutListingsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MessageTemplateWhereUniqueInputSchema),z.lazy(() => MessageTemplateWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const DeductionsUncheckedCreateNestedOneWithoutListingInputSchema: z.ZodType<Prisma.DeductionsUncheckedCreateNestedOneWithoutListingInput> = z.object({
  create: z.union([ z.lazy(() => DeductionsCreateWithoutListingInputSchema),z.lazy(() => DeductionsUncheckedCreateWithoutListingInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => DeductionsCreateOrConnectWithoutListingInputSchema).optional(),
  connect: z.lazy(() => DeductionsWhereUniqueInputSchema).optional()
}).strict();

export const MessageThreadUncheckedCreateNestedManyWithoutListingInputSchema: z.ZodType<Prisma.MessageThreadUncheckedCreateNestedManyWithoutListingInput> = z.object({
  create: z.union([ z.lazy(() => MessageThreadCreateWithoutListingInputSchema),z.lazy(() => MessageThreadCreateWithoutListingInputSchema).array(),z.lazy(() => MessageThreadUncheckedCreateWithoutListingInputSchema),z.lazy(() => MessageThreadUncheckedCreateWithoutListingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MessageThreadCreateOrConnectWithoutListingInputSchema),z.lazy(() => MessageThreadCreateOrConnectWithoutListingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MessageThreadCreateManyListingInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MessageThreadWhereUniqueInputSchema),z.lazy(() => MessageThreadWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ListingExpenseUncheckedCreateNestedManyWithoutListingInputSchema: z.ZodType<Prisma.ListingExpenseUncheckedCreateNestedManyWithoutListingInput> = z.object({
  create: z.union([ z.lazy(() => ListingExpenseCreateWithoutListingInputSchema),z.lazy(() => ListingExpenseCreateWithoutListingInputSchema).array(),z.lazy(() => ListingExpenseUncheckedCreateWithoutListingInputSchema),z.lazy(() => ListingExpenseUncheckedCreateWithoutListingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ListingExpenseCreateOrConnectWithoutListingInputSchema),z.lazy(() => ListingExpenseCreateOrConnectWithoutListingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ListingExpenseCreateManyListingInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ListingExpenseWhereUniqueInputSchema),z.lazy(() => ListingExpenseWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OwnerStatementUncheckedCreateNestedManyWithoutListingInputSchema: z.ZodType<Prisma.OwnerStatementUncheckedCreateNestedManyWithoutListingInput> = z.object({
  create: z.union([ z.lazy(() => OwnerStatementCreateWithoutListingInputSchema),z.lazy(() => OwnerStatementCreateWithoutListingInputSchema).array(),z.lazy(() => OwnerStatementUncheckedCreateWithoutListingInputSchema),z.lazy(() => OwnerStatementUncheckedCreateWithoutListingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OwnerStatementCreateOrConnectWithoutListingInputSchema),z.lazy(() => OwnerStatementCreateOrConnectWithoutListingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OwnerStatementCreateManyListingInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => OwnerStatementWhereUniqueInputSchema),z.lazy(() => OwnerStatementWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const DailyRateUncheckedCreateNestedManyWithoutListingInputSchema: z.ZodType<Prisma.DailyRateUncheckedCreateNestedManyWithoutListingInput> = z.object({
  create: z.union([ z.lazy(() => DailyRateCreateWithoutListingInputSchema),z.lazy(() => DailyRateCreateWithoutListingInputSchema).array(),z.lazy(() => DailyRateUncheckedCreateWithoutListingInputSchema),z.lazy(() => DailyRateUncheckedCreateWithoutListingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DailyRateCreateOrConnectWithoutListingInputSchema),z.lazy(() => DailyRateCreateOrConnectWithoutListingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DailyRateCreateManyListingInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => DailyRateWhereUniqueInputSchema),z.lazy(() => DailyRateWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ListingKeyUncheckedCreateNestedManyWithoutListingInputSchema: z.ZodType<Prisma.ListingKeyUncheckedCreateNestedManyWithoutListingInput> = z.object({
  create: z.union([ z.lazy(() => ListingKeyCreateWithoutListingInputSchema),z.lazy(() => ListingKeyCreateWithoutListingInputSchema).array(),z.lazy(() => ListingKeyUncheckedCreateWithoutListingInputSchema),z.lazy(() => ListingKeyUncheckedCreateWithoutListingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ListingKeyCreateOrConnectWithoutListingInputSchema),z.lazy(() => ListingKeyCreateOrConnectWithoutListingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ListingKeyCreateManyListingInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ListingKeyWhereUniqueInputSchema),z.lazy(() => ListingKeyWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EnumUnitTypeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumUnitTypeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => UnitTypeSchema).optional()
}).strict();

export const FloatFieldUpdateOperationsInputSchema: z.ZodType<Prisma.FloatFieldUpdateOperationsInput> = z.object({
  set: z.number().optional(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const NullableFloatFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableFloatFieldUpdateOperationsInput> = z.object({
  set: z.number().optional().nullable(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const ContentUpdateOneWithoutListingNestedInputSchema: z.ZodType<Prisma.ContentUpdateOneWithoutListingNestedInput> = z.object({
  create: z.union([ z.lazy(() => ContentCreateWithoutListingInputSchema),z.lazy(() => ContentUncheckedCreateWithoutListingInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ContentCreateOrConnectWithoutListingInputSchema).optional(),
  upsert: z.lazy(() => ContentUpsertWithoutListingInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => ContentWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => ContentWhereInputSchema) ]).optional(),
  connect: z.lazy(() => ContentWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ContentUpdateToOneWithWhereWithoutListingInputSchema),z.lazy(() => ContentUpdateWithoutListingInputSchema),z.lazy(() => ContentUncheckedUpdateWithoutListingInputSchema) ]).optional(),
}).strict();

export const RulesUpdateOneWithoutListingNestedInputSchema: z.ZodType<Prisma.RulesUpdateOneWithoutListingNestedInput> = z.object({
  create: z.union([ z.lazy(() => RulesCreateWithoutListingInputSchema),z.lazy(() => RulesUncheckedCreateWithoutListingInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RulesCreateOrConnectWithoutListingInputSchema).optional(),
  upsert: z.lazy(() => RulesUpsertWithoutListingInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => RulesWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => RulesWhereInputSchema) ]).optional(),
  connect: z.lazy(() => RulesWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RulesUpdateToOneWithWhereWithoutListingInputSchema),z.lazy(() => RulesUpdateWithoutListingInputSchema),z.lazy(() => RulesUncheckedUpdateWithoutListingInputSchema) ]).optional(),
}).strict();

export const PricingUpdateOneWithoutListingNestedInputSchema: z.ZodType<Prisma.PricingUpdateOneWithoutListingNestedInput> = z.object({
  create: z.union([ z.lazy(() => PricingCreateWithoutListingInputSchema),z.lazy(() => PricingUncheckedCreateWithoutListingInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PricingCreateOrConnectWithoutListingInputSchema).optional(),
  upsert: z.lazy(() => PricingUpsertWithoutListingInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => PricingWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => PricingWhereInputSchema) ]).optional(),
  connect: z.lazy(() => PricingWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => PricingUpdateToOneWithWhereWithoutListingInputSchema),z.lazy(() => PricingUpdateWithoutListingInputSchema),z.lazy(() => PricingUncheckedUpdateWithoutListingInputSchema) ]).optional(),
}).strict();

export const AvailabilityUpdateOneWithoutListingNestedInputSchema: z.ZodType<Prisma.AvailabilityUpdateOneWithoutListingNestedInput> = z.object({
  create: z.union([ z.lazy(() => AvailabilityCreateWithoutListingInputSchema),z.lazy(() => AvailabilityUncheckedCreateWithoutListingInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AvailabilityCreateOrConnectWithoutListingInputSchema).optional(),
  upsert: z.lazy(() => AvailabilityUpsertWithoutListingInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => AvailabilityWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => AvailabilityWhereInputSchema) ]).optional(),
  connect: z.lazy(() => AvailabilityWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AvailabilityUpdateToOneWithWhereWithoutListingInputSchema),z.lazy(() => AvailabilityUpdateWithoutListingInputSchema),z.lazy(() => AvailabilityUncheckedUpdateWithoutListingInputSchema) ]).optional(),
}).strict();

export const AmenityUpdateManyWithoutListingNestedInputSchema: z.ZodType<Prisma.AmenityUpdateManyWithoutListingNestedInput> = z.object({
  create: z.union([ z.lazy(() => AmenityCreateWithoutListingInputSchema),z.lazy(() => AmenityCreateWithoutListingInputSchema).array(),z.lazy(() => AmenityUncheckedCreateWithoutListingInputSchema),z.lazy(() => AmenityUncheckedCreateWithoutListingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AmenityCreateOrConnectWithoutListingInputSchema),z.lazy(() => AmenityCreateOrConnectWithoutListingInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AmenityUpsertWithWhereUniqueWithoutListingInputSchema),z.lazy(() => AmenityUpsertWithWhereUniqueWithoutListingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AmenityCreateManyListingInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AmenityWhereUniqueInputSchema),z.lazy(() => AmenityWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AmenityWhereUniqueInputSchema),z.lazy(() => AmenityWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AmenityWhereUniqueInputSchema),z.lazy(() => AmenityWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AmenityWhereUniqueInputSchema),z.lazy(() => AmenityWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AmenityUpdateWithWhereUniqueWithoutListingInputSchema),z.lazy(() => AmenityUpdateWithWhereUniqueWithoutListingInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AmenityUpdateManyWithWhereWithoutListingInputSchema),z.lazy(() => AmenityUpdateManyWithWhereWithoutListingInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AmenityScalarWhereInputSchema),z.lazy(() => AmenityScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FeeUpdateManyWithoutListingNestedInputSchema: z.ZodType<Prisma.FeeUpdateManyWithoutListingNestedInput> = z.object({
  create: z.union([ z.lazy(() => FeeCreateWithoutListingInputSchema),z.lazy(() => FeeCreateWithoutListingInputSchema).array(),z.lazy(() => FeeUncheckedCreateWithoutListingInputSchema),z.lazy(() => FeeUncheckedCreateWithoutListingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeeCreateOrConnectWithoutListingInputSchema),z.lazy(() => FeeCreateOrConnectWithoutListingInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FeeUpsertWithWhereUniqueWithoutListingInputSchema),z.lazy(() => FeeUpsertWithWhereUniqueWithoutListingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeeCreateManyListingInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FeeWhereUniqueInputSchema),z.lazy(() => FeeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FeeWhereUniqueInputSchema),z.lazy(() => FeeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FeeWhereUniqueInputSchema),z.lazy(() => FeeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FeeWhereUniqueInputSchema),z.lazy(() => FeeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FeeUpdateWithWhereUniqueWithoutListingInputSchema),z.lazy(() => FeeUpdateWithWhereUniqueWithoutListingInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FeeUpdateManyWithWhereWithoutListingInputSchema),z.lazy(() => FeeUpdateManyWithWhereWithoutListingInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FeeScalarWhereInputSchema),z.lazy(() => FeeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TaxRatesUpdateOneWithoutListingNestedInputSchema: z.ZodType<Prisma.TaxRatesUpdateOneWithoutListingNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaxRatesCreateWithoutListingInputSchema),z.lazy(() => TaxRatesUncheckedCreateWithoutListingInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TaxRatesCreateOrConnectWithoutListingInputSchema).optional(),
  upsert: z.lazy(() => TaxRatesUpsertWithoutListingInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => TaxRatesWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => TaxRatesWhereInputSchema) ]).optional(),
  connect: z.lazy(() => TaxRatesWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TaxRatesUpdateToOneWithWhereWithoutListingInputSchema),z.lazy(() => TaxRatesUpdateWithoutListingInputSchema),z.lazy(() => TaxRatesUncheckedUpdateWithoutListingInputSchema) ]).optional(),
}).strict();

export const CalendarEventUpdateManyWithoutListingNestedInputSchema: z.ZodType<Prisma.CalendarEventUpdateManyWithoutListingNestedInput> = z.object({
  create: z.union([ z.lazy(() => CalendarEventCreateWithoutListingInputSchema),z.lazy(() => CalendarEventCreateWithoutListingInputSchema).array(),z.lazy(() => CalendarEventUncheckedCreateWithoutListingInputSchema),z.lazy(() => CalendarEventUncheckedCreateWithoutListingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CalendarEventCreateOrConnectWithoutListingInputSchema),z.lazy(() => CalendarEventCreateOrConnectWithoutListingInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CalendarEventUpsertWithWhereUniqueWithoutListingInputSchema),z.lazy(() => CalendarEventUpsertWithWhereUniqueWithoutListingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CalendarEventCreateManyListingInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CalendarEventWhereUniqueInputSchema),z.lazy(() => CalendarEventWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CalendarEventWhereUniqueInputSchema),z.lazy(() => CalendarEventWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CalendarEventWhereUniqueInputSchema),z.lazy(() => CalendarEventWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CalendarEventWhereUniqueInputSchema),z.lazy(() => CalendarEventWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CalendarEventUpdateWithWhereUniqueWithoutListingInputSchema),z.lazy(() => CalendarEventUpdateWithWhereUniqueWithoutListingInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CalendarEventUpdateManyWithWhereWithoutListingInputSchema),z.lazy(() => CalendarEventUpdateManyWithWhereWithoutListingInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CalendarEventScalarWhereInputSchema),z.lazy(() => CalendarEventScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MessageTemplateUpdateManyWithoutListingsNestedInputSchema: z.ZodType<Prisma.MessageTemplateUpdateManyWithoutListingsNestedInput> = z.object({
  create: z.union([ z.lazy(() => MessageTemplateCreateWithoutListingsInputSchema),z.lazy(() => MessageTemplateCreateWithoutListingsInputSchema).array(),z.lazy(() => MessageTemplateUncheckedCreateWithoutListingsInputSchema),z.lazy(() => MessageTemplateUncheckedCreateWithoutListingsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MessageTemplateCreateOrConnectWithoutListingsInputSchema),z.lazy(() => MessageTemplateCreateOrConnectWithoutListingsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MessageTemplateUpsertWithWhereUniqueWithoutListingsInputSchema),z.lazy(() => MessageTemplateUpsertWithWhereUniqueWithoutListingsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => MessageTemplateWhereUniqueInputSchema),z.lazy(() => MessageTemplateWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MessageTemplateWhereUniqueInputSchema),z.lazy(() => MessageTemplateWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MessageTemplateWhereUniqueInputSchema),z.lazy(() => MessageTemplateWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MessageTemplateWhereUniqueInputSchema),z.lazy(() => MessageTemplateWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MessageTemplateUpdateWithWhereUniqueWithoutListingsInputSchema),z.lazy(() => MessageTemplateUpdateWithWhereUniqueWithoutListingsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MessageTemplateUpdateManyWithWhereWithoutListingsInputSchema),z.lazy(() => MessageTemplateUpdateManyWithWhereWithoutListingsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MessageTemplateScalarWhereInputSchema),z.lazy(() => MessageTemplateScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUpdateOneRequiredWithoutListingsNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutListingsNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutListingsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutListingsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutListingsInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutListingsInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutListingsInputSchema),z.lazy(() => OrganizationUpdateWithoutListingsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutListingsInputSchema) ]).optional(),
}).strict();

export const DeductionsUpdateOneWithoutListingNestedInputSchema: z.ZodType<Prisma.DeductionsUpdateOneWithoutListingNestedInput> = z.object({
  create: z.union([ z.lazy(() => DeductionsCreateWithoutListingInputSchema),z.lazy(() => DeductionsUncheckedCreateWithoutListingInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => DeductionsCreateOrConnectWithoutListingInputSchema).optional(),
  upsert: z.lazy(() => DeductionsUpsertWithoutListingInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => DeductionsWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => DeductionsWhereInputSchema) ]).optional(),
  connect: z.lazy(() => DeductionsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => DeductionsUpdateToOneWithWhereWithoutListingInputSchema),z.lazy(() => DeductionsUpdateWithoutListingInputSchema),z.lazy(() => DeductionsUncheckedUpdateWithoutListingInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutManagedListingsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutManagedListingsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutManagedListingsInputSchema),z.lazy(() => UserUncheckedCreateWithoutManagedListingsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutManagedListingsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutManagedListingsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutManagedListingsInputSchema),z.lazy(() => UserUpdateWithoutManagedListingsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutManagedListingsInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneWithoutOwnedListingsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutOwnedListingsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutOwnedListingsInputSchema),z.lazy(() => UserUncheckedCreateWithoutOwnedListingsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutOwnedListingsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutOwnedListingsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutOwnedListingsInputSchema),z.lazy(() => UserUpdateWithoutOwnedListingsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutOwnedListingsInputSchema) ]).optional(),
}).strict();

export const MessageThreadUpdateManyWithoutListingNestedInputSchema: z.ZodType<Prisma.MessageThreadUpdateManyWithoutListingNestedInput> = z.object({
  create: z.union([ z.lazy(() => MessageThreadCreateWithoutListingInputSchema),z.lazy(() => MessageThreadCreateWithoutListingInputSchema).array(),z.lazy(() => MessageThreadUncheckedCreateWithoutListingInputSchema),z.lazy(() => MessageThreadUncheckedCreateWithoutListingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MessageThreadCreateOrConnectWithoutListingInputSchema),z.lazy(() => MessageThreadCreateOrConnectWithoutListingInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MessageThreadUpsertWithWhereUniqueWithoutListingInputSchema),z.lazy(() => MessageThreadUpsertWithWhereUniqueWithoutListingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MessageThreadCreateManyListingInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MessageThreadWhereUniqueInputSchema),z.lazy(() => MessageThreadWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MessageThreadWhereUniqueInputSchema),z.lazy(() => MessageThreadWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MessageThreadWhereUniqueInputSchema),z.lazy(() => MessageThreadWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MessageThreadWhereUniqueInputSchema),z.lazy(() => MessageThreadWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MessageThreadUpdateWithWhereUniqueWithoutListingInputSchema),z.lazy(() => MessageThreadUpdateWithWhereUniqueWithoutListingInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MessageThreadUpdateManyWithWhereWithoutListingInputSchema),z.lazy(() => MessageThreadUpdateManyWithWhereWithoutListingInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MessageThreadScalarWhereInputSchema),z.lazy(() => MessageThreadScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ListingExpenseUpdateManyWithoutListingNestedInputSchema: z.ZodType<Prisma.ListingExpenseUpdateManyWithoutListingNestedInput> = z.object({
  create: z.union([ z.lazy(() => ListingExpenseCreateWithoutListingInputSchema),z.lazy(() => ListingExpenseCreateWithoutListingInputSchema).array(),z.lazy(() => ListingExpenseUncheckedCreateWithoutListingInputSchema),z.lazy(() => ListingExpenseUncheckedCreateWithoutListingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ListingExpenseCreateOrConnectWithoutListingInputSchema),z.lazy(() => ListingExpenseCreateOrConnectWithoutListingInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ListingExpenseUpsertWithWhereUniqueWithoutListingInputSchema),z.lazy(() => ListingExpenseUpsertWithWhereUniqueWithoutListingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ListingExpenseCreateManyListingInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ListingExpenseWhereUniqueInputSchema),z.lazy(() => ListingExpenseWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ListingExpenseWhereUniqueInputSchema),z.lazy(() => ListingExpenseWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ListingExpenseWhereUniqueInputSchema),z.lazy(() => ListingExpenseWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ListingExpenseWhereUniqueInputSchema),z.lazy(() => ListingExpenseWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ListingExpenseUpdateWithWhereUniqueWithoutListingInputSchema),z.lazy(() => ListingExpenseUpdateWithWhereUniqueWithoutListingInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ListingExpenseUpdateManyWithWhereWithoutListingInputSchema),z.lazy(() => ListingExpenseUpdateManyWithWhereWithoutListingInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ListingExpenseScalarWhereInputSchema),z.lazy(() => ListingExpenseScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OwnerStatementUpdateManyWithoutListingNestedInputSchema: z.ZodType<Prisma.OwnerStatementUpdateManyWithoutListingNestedInput> = z.object({
  create: z.union([ z.lazy(() => OwnerStatementCreateWithoutListingInputSchema),z.lazy(() => OwnerStatementCreateWithoutListingInputSchema).array(),z.lazy(() => OwnerStatementUncheckedCreateWithoutListingInputSchema),z.lazy(() => OwnerStatementUncheckedCreateWithoutListingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OwnerStatementCreateOrConnectWithoutListingInputSchema),z.lazy(() => OwnerStatementCreateOrConnectWithoutListingInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => OwnerStatementUpsertWithWhereUniqueWithoutListingInputSchema),z.lazy(() => OwnerStatementUpsertWithWhereUniqueWithoutListingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OwnerStatementCreateManyListingInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => OwnerStatementWhereUniqueInputSchema),z.lazy(() => OwnerStatementWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => OwnerStatementWhereUniqueInputSchema),z.lazy(() => OwnerStatementWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => OwnerStatementWhereUniqueInputSchema),z.lazy(() => OwnerStatementWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => OwnerStatementWhereUniqueInputSchema),z.lazy(() => OwnerStatementWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => OwnerStatementUpdateWithWhereUniqueWithoutListingInputSchema),z.lazy(() => OwnerStatementUpdateWithWhereUniqueWithoutListingInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => OwnerStatementUpdateManyWithWhereWithoutListingInputSchema),z.lazy(() => OwnerStatementUpdateManyWithWhereWithoutListingInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => OwnerStatementScalarWhereInputSchema),z.lazy(() => OwnerStatementScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const DailyRateUpdateManyWithoutListingNestedInputSchema: z.ZodType<Prisma.DailyRateUpdateManyWithoutListingNestedInput> = z.object({
  create: z.union([ z.lazy(() => DailyRateCreateWithoutListingInputSchema),z.lazy(() => DailyRateCreateWithoutListingInputSchema).array(),z.lazy(() => DailyRateUncheckedCreateWithoutListingInputSchema),z.lazy(() => DailyRateUncheckedCreateWithoutListingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DailyRateCreateOrConnectWithoutListingInputSchema),z.lazy(() => DailyRateCreateOrConnectWithoutListingInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => DailyRateUpsertWithWhereUniqueWithoutListingInputSchema),z.lazy(() => DailyRateUpsertWithWhereUniqueWithoutListingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DailyRateCreateManyListingInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => DailyRateWhereUniqueInputSchema),z.lazy(() => DailyRateWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => DailyRateWhereUniqueInputSchema),z.lazy(() => DailyRateWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => DailyRateWhereUniqueInputSchema),z.lazy(() => DailyRateWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => DailyRateWhereUniqueInputSchema),z.lazy(() => DailyRateWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => DailyRateUpdateWithWhereUniqueWithoutListingInputSchema),z.lazy(() => DailyRateUpdateWithWhereUniqueWithoutListingInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => DailyRateUpdateManyWithWhereWithoutListingInputSchema),z.lazy(() => DailyRateUpdateManyWithWhereWithoutListingInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => DailyRateScalarWhereInputSchema),z.lazy(() => DailyRateScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ListingKeyUpdateManyWithoutListingNestedInputSchema: z.ZodType<Prisma.ListingKeyUpdateManyWithoutListingNestedInput> = z.object({
  create: z.union([ z.lazy(() => ListingKeyCreateWithoutListingInputSchema),z.lazy(() => ListingKeyCreateWithoutListingInputSchema).array(),z.lazy(() => ListingKeyUncheckedCreateWithoutListingInputSchema),z.lazy(() => ListingKeyUncheckedCreateWithoutListingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ListingKeyCreateOrConnectWithoutListingInputSchema),z.lazy(() => ListingKeyCreateOrConnectWithoutListingInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ListingKeyUpsertWithWhereUniqueWithoutListingInputSchema),z.lazy(() => ListingKeyUpsertWithWhereUniqueWithoutListingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ListingKeyCreateManyListingInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ListingKeyWhereUniqueInputSchema),z.lazy(() => ListingKeyWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ListingKeyWhereUniqueInputSchema),z.lazy(() => ListingKeyWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ListingKeyWhereUniqueInputSchema),z.lazy(() => ListingKeyWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ListingKeyWhereUniqueInputSchema),z.lazy(() => ListingKeyWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ListingKeyUpdateWithWhereUniqueWithoutListingInputSchema),z.lazy(() => ListingKeyUpdateWithWhereUniqueWithoutListingInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ListingKeyUpdateManyWithWhereWithoutListingInputSchema),z.lazy(() => ListingKeyUpdateManyWithWhereWithoutListingInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ListingKeyScalarWhereInputSchema),z.lazy(() => ListingKeyScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ContentUncheckedUpdateOneWithoutListingNestedInputSchema: z.ZodType<Prisma.ContentUncheckedUpdateOneWithoutListingNestedInput> = z.object({
  create: z.union([ z.lazy(() => ContentCreateWithoutListingInputSchema),z.lazy(() => ContentUncheckedCreateWithoutListingInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ContentCreateOrConnectWithoutListingInputSchema).optional(),
  upsert: z.lazy(() => ContentUpsertWithoutListingInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => ContentWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => ContentWhereInputSchema) ]).optional(),
  connect: z.lazy(() => ContentWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ContentUpdateToOneWithWhereWithoutListingInputSchema),z.lazy(() => ContentUpdateWithoutListingInputSchema),z.lazy(() => ContentUncheckedUpdateWithoutListingInputSchema) ]).optional(),
}).strict();

export const RulesUncheckedUpdateOneWithoutListingNestedInputSchema: z.ZodType<Prisma.RulesUncheckedUpdateOneWithoutListingNestedInput> = z.object({
  create: z.union([ z.lazy(() => RulesCreateWithoutListingInputSchema),z.lazy(() => RulesUncheckedCreateWithoutListingInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RulesCreateOrConnectWithoutListingInputSchema).optional(),
  upsert: z.lazy(() => RulesUpsertWithoutListingInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => RulesWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => RulesWhereInputSchema) ]).optional(),
  connect: z.lazy(() => RulesWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RulesUpdateToOneWithWhereWithoutListingInputSchema),z.lazy(() => RulesUpdateWithoutListingInputSchema),z.lazy(() => RulesUncheckedUpdateWithoutListingInputSchema) ]).optional(),
}).strict();

export const PricingUncheckedUpdateOneWithoutListingNestedInputSchema: z.ZodType<Prisma.PricingUncheckedUpdateOneWithoutListingNestedInput> = z.object({
  create: z.union([ z.lazy(() => PricingCreateWithoutListingInputSchema),z.lazy(() => PricingUncheckedCreateWithoutListingInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PricingCreateOrConnectWithoutListingInputSchema).optional(),
  upsert: z.lazy(() => PricingUpsertWithoutListingInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => PricingWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => PricingWhereInputSchema) ]).optional(),
  connect: z.lazy(() => PricingWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => PricingUpdateToOneWithWhereWithoutListingInputSchema),z.lazy(() => PricingUpdateWithoutListingInputSchema),z.lazy(() => PricingUncheckedUpdateWithoutListingInputSchema) ]).optional(),
}).strict();

export const AvailabilityUncheckedUpdateOneWithoutListingNestedInputSchema: z.ZodType<Prisma.AvailabilityUncheckedUpdateOneWithoutListingNestedInput> = z.object({
  create: z.union([ z.lazy(() => AvailabilityCreateWithoutListingInputSchema),z.lazy(() => AvailabilityUncheckedCreateWithoutListingInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AvailabilityCreateOrConnectWithoutListingInputSchema).optional(),
  upsert: z.lazy(() => AvailabilityUpsertWithoutListingInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => AvailabilityWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => AvailabilityWhereInputSchema) ]).optional(),
  connect: z.lazy(() => AvailabilityWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AvailabilityUpdateToOneWithWhereWithoutListingInputSchema),z.lazy(() => AvailabilityUpdateWithoutListingInputSchema),z.lazy(() => AvailabilityUncheckedUpdateWithoutListingInputSchema) ]).optional(),
}).strict();

export const AmenityUncheckedUpdateManyWithoutListingNestedInputSchema: z.ZodType<Prisma.AmenityUncheckedUpdateManyWithoutListingNestedInput> = z.object({
  create: z.union([ z.lazy(() => AmenityCreateWithoutListingInputSchema),z.lazy(() => AmenityCreateWithoutListingInputSchema).array(),z.lazy(() => AmenityUncheckedCreateWithoutListingInputSchema),z.lazy(() => AmenityUncheckedCreateWithoutListingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AmenityCreateOrConnectWithoutListingInputSchema),z.lazy(() => AmenityCreateOrConnectWithoutListingInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AmenityUpsertWithWhereUniqueWithoutListingInputSchema),z.lazy(() => AmenityUpsertWithWhereUniqueWithoutListingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AmenityCreateManyListingInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AmenityWhereUniqueInputSchema),z.lazy(() => AmenityWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AmenityWhereUniqueInputSchema),z.lazy(() => AmenityWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AmenityWhereUniqueInputSchema),z.lazy(() => AmenityWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AmenityWhereUniqueInputSchema),z.lazy(() => AmenityWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AmenityUpdateWithWhereUniqueWithoutListingInputSchema),z.lazy(() => AmenityUpdateWithWhereUniqueWithoutListingInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AmenityUpdateManyWithWhereWithoutListingInputSchema),z.lazy(() => AmenityUpdateManyWithWhereWithoutListingInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AmenityScalarWhereInputSchema),z.lazy(() => AmenityScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FeeUncheckedUpdateManyWithoutListingNestedInputSchema: z.ZodType<Prisma.FeeUncheckedUpdateManyWithoutListingNestedInput> = z.object({
  create: z.union([ z.lazy(() => FeeCreateWithoutListingInputSchema),z.lazy(() => FeeCreateWithoutListingInputSchema).array(),z.lazy(() => FeeUncheckedCreateWithoutListingInputSchema),z.lazy(() => FeeUncheckedCreateWithoutListingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeeCreateOrConnectWithoutListingInputSchema),z.lazy(() => FeeCreateOrConnectWithoutListingInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FeeUpsertWithWhereUniqueWithoutListingInputSchema),z.lazy(() => FeeUpsertWithWhereUniqueWithoutListingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeeCreateManyListingInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FeeWhereUniqueInputSchema),z.lazy(() => FeeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FeeWhereUniqueInputSchema),z.lazy(() => FeeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FeeWhereUniqueInputSchema),z.lazy(() => FeeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FeeWhereUniqueInputSchema),z.lazy(() => FeeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FeeUpdateWithWhereUniqueWithoutListingInputSchema),z.lazy(() => FeeUpdateWithWhereUniqueWithoutListingInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FeeUpdateManyWithWhereWithoutListingInputSchema),z.lazy(() => FeeUpdateManyWithWhereWithoutListingInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FeeScalarWhereInputSchema),z.lazy(() => FeeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TaxRatesUncheckedUpdateOneWithoutListingNestedInputSchema: z.ZodType<Prisma.TaxRatesUncheckedUpdateOneWithoutListingNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaxRatesCreateWithoutListingInputSchema),z.lazy(() => TaxRatesUncheckedCreateWithoutListingInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TaxRatesCreateOrConnectWithoutListingInputSchema).optional(),
  upsert: z.lazy(() => TaxRatesUpsertWithoutListingInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => TaxRatesWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => TaxRatesWhereInputSchema) ]).optional(),
  connect: z.lazy(() => TaxRatesWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TaxRatesUpdateToOneWithWhereWithoutListingInputSchema),z.lazy(() => TaxRatesUpdateWithoutListingInputSchema),z.lazy(() => TaxRatesUncheckedUpdateWithoutListingInputSchema) ]).optional(),
}).strict();

export const CalendarEventUncheckedUpdateManyWithoutListingNestedInputSchema: z.ZodType<Prisma.CalendarEventUncheckedUpdateManyWithoutListingNestedInput> = z.object({
  create: z.union([ z.lazy(() => CalendarEventCreateWithoutListingInputSchema),z.lazy(() => CalendarEventCreateWithoutListingInputSchema).array(),z.lazy(() => CalendarEventUncheckedCreateWithoutListingInputSchema),z.lazy(() => CalendarEventUncheckedCreateWithoutListingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CalendarEventCreateOrConnectWithoutListingInputSchema),z.lazy(() => CalendarEventCreateOrConnectWithoutListingInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CalendarEventUpsertWithWhereUniqueWithoutListingInputSchema),z.lazy(() => CalendarEventUpsertWithWhereUniqueWithoutListingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CalendarEventCreateManyListingInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CalendarEventWhereUniqueInputSchema),z.lazy(() => CalendarEventWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CalendarEventWhereUniqueInputSchema),z.lazy(() => CalendarEventWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CalendarEventWhereUniqueInputSchema),z.lazy(() => CalendarEventWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CalendarEventWhereUniqueInputSchema),z.lazy(() => CalendarEventWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CalendarEventUpdateWithWhereUniqueWithoutListingInputSchema),z.lazy(() => CalendarEventUpdateWithWhereUniqueWithoutListingInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CalendarEventUpdateManyWithWhereWithoutListingInputSchema),z.lazy(() => CalendarEventUpdateManyWithWhereWithoutListingInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CalendarEventScalarWhereInputSchema),z.lazy(() => CalendarEventScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MessageTemplateUncheckedUpdateManyWithoutListingsNestedInputSchema: z.ZodType<Prisma.MessageTemplateUncheckedUpdateManyWithoutListingsNestedInput> = z.object({
  create: z.union([ z.lazy(() => MessageTemplateCreateWithoutListingsInputSchema),z.lazy(() => MessageTemplateCreateWithoutListingsInputSchema).array(),z.lazy(() => MessageTemplateUncheckedCreateWithoutListingsInputSchema),z.lazy(() => MessageTemplateUncheckedCreateWithoutListingsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MessageTemplateCreateOrConnectWithoutListingsInputSchema),z.lazy(() => MessageTemplateCreateOrConnectWithoutListingsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MessageTemplateUpsertWithWhereUniqueWithoutListingsInputSchema),z.lazy(() => MessageTemplateUpsertWithWhereUniqueWithoutListingsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => MessageTemplateWhereUniqueInputSchema),z.lazy(() => MessageTemplateWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MessageTemplateWhereUniqueInputSchema),z.lazy(() => MessageTemplateWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MessageTemplateWhereUniqueInputSchema),z.lazy(() => MessageTemplateWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MessageTemplateWhereUniqueInputSchema),z.lazy(() => MessageTemplateWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MessageTemplateUpdateWithWhereUniqueWithoutListingsInputSchema),z.lazy(() => MessageTemplateUpdateWithWhereUniqueWithoutListingsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MessageTemplateUpdateManyWithWhereWithoutListingsInputSchema),z.lazy(() => MessageTemplateUpdateManyWithWhereWithoutListingsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MessageTemplateScalarWhereInputSchema),z.lazy(() => MessageTemplateScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const DeductionsUncheckedUpdateOneWithoutListingNestedInputSchema: z.ZodType<Prisma.DeductionsUncheckedUpdateOneWithoutListingNestedInput> = z.object({
  create: z.union([ z.lazy(() => DeductionsCreateWithoutListingInputSchema),z.lazy(() => DeductionsUncheckedCreateWithoutListingInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => DeductionsCreateOrConnectWithoutListingInputSchema).optional(),
  upsert: z.lazy(() => DeductionsUpsertWithoutListingInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => DeductionsWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => DeductionsWhereInputSchema) ]).optional(),
  connect: z.lazy(() => DeductionsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => DeductionsUpdateToOneWithWhereWithoutListingInputSchema),z.lazy(() => DeductionsUpdateWithoutListingInputSchema),z.lazy(() => DeductionsUncheckedUpdateWithoutListingInputSchema) ]).optional(),
}).strict();

export const MessageThreadUncheckedUpdateManyWithoutListingNestedInputSchema: z.ZodType<Prisma.MessageThreadUncheckedUpdateManyWithoutListingNestedInput> = z.object({
  create: z.union([ z.lazy(() => MessageThreadCreateWithoutListingInputSchema),z.lazy(() => MessageThreadCreateWithoutListingInputSchema).array(),z.lazy(() => MessageThreadUncheckedCreateWithoutListingInputSchema),z.lazy(() => MessageThreadUncheckedCreateWithoutListingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MessageThreadCreateOrConnectWithoutListingInputSchema),z.lazy(() => MessageThreadCreateOrConnectWithoutListingInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MessageThreadUpsertWithWhereUniqueWithoutListingInputSchema),z.lazy(() => MessageThreadUpsertWithWhereUniqueWithoutListingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MessageThreadCreateManyListingInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MessageThreadWhereUniqueInputSchema),z.lazy(() => MessageThreadWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MessageThreadWhereUniqueInputSchema),z.lazy(() => MessageThreadWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MessageThreadWhereUniqueInputSchema),z.lazy(() => MessageThreadWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MessageThreadWhereUniqueInputSchema),z.lazy(() => MessageThreadWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MessageThreadUpdateWithWhereUniqueWithoutListingInputSchema),z.lazy(() => MessageThreadUpdateWithWhereUniqueWithoutListingInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MessageThreadUpdateManyWithWhereWithoutListingInputSchema),z.lazy(() => MessageThreadUpdateManyWithWhereWithoutListingInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MessageThreadScalarWhereInputSchema),z.lazy(() => MessageThreadScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ListingExpenseUncheckedUpdateManyWithoutListingNestedInputSchema: z.ZodType<Prisma.ListingExpenseUncheckedUpdateManyWithoutListingNestedInput> = z.object({
  create: z.union([ z.lazy(() => ListingExpenseCreateWithoutListingInputSchema),z.lazy(() => ListingExpenseCreateWithoutListingInputSchema).array(),z.lazy(() => ListingExpenseUncheckedCreateWithoutListingInputSchema),z.lazy(() => ListingExpenseUncheckedCreateWithoutListingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ListingExpenseCreateOrConnectWithoutListingInputSchema),z.lazy(() => ListingExpenseCreateOrConnectWithoutListingInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ListingExpenseUpsertWithWhereUniqueWithoutListingInputSchema),z.lazy(() => ListingExpenseUpsertWithWhereUniqueWithoutListingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ListingExpenseCreateManyListingInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ListingExpenseWhereUniqueInputSchema),z.lazy(() => ListingExpenseWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ListingExpenseWhereUniqueInputSchema),z.lazy(() => ListingExpenseWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ListingExpenseWhereUniqueInputSchema),z.lazy(() => ListingExpenseWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ListingExpenseWhereUniqueInputSchema),z.lazy(() => ListingExpenseWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ListingExpenseUpdateWithWhereUniqueWithoutListingInputSchema),z.lazy(() => ListingExpenseUpdateWithWhereUniqueWithoutListingInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ListingExpenseUpdateManyWithWhereWithoutListingInputSchema),z.lazy(() => ListingExpenseUpdateManyWithWhereWithoutListingInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ListingExpenseScalarWhereInputSchema),z.lazy(() => ListingExpenseScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OwnerStatementUncheckedUpdateManyWithoutListingNestedInputSchema: z.ZodType<Prisma.OwnerStatementUncheckedUpdateManyWithoutListingNestedInput> = z.object({
  create: z.union([ z.lazy(() => OwnerStatementCreateWithoutListingInputSchema),z.lazy(() => OwnerStatementCreateWithoutListingInputSchema).array(),z.lazy(() => OwnerStatementUncheckedCreateWithoutListingInputSchema),z.lazy(() => OwnerStatementUncheckedCreateWithoutListingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OwnerStatementCreateOrConnectWithoutListingInputSchema),z.lazy(() => OwnerStatementCreateOrConnectWithoutListingInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => OwnerStatementUpsertWithWhereUniqueWithoutListingInputSchema),z.lazy(() => OwnerStatementUpsertWithWhereUniqueWithoutListingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OwnerStatementCreateManyListingInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => OwnerStatementWhereUniqueInputSchema),z.lazy(() => OwnerStatementWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => OwnerStatementWhereUniqueInputSchema),z.lazy(() => OwnerStatementWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => OwnerStatementWhereUniqueInputSchema),z.lazy(() => OwnerStatementWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => OwnerStatementWhereUniqueInputSchema),z.lazy(() => OwnerStatementWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => OwnerStatementUpdateWithWhereUniqueWithoutListingInputSchema),z.lazy(() => OwnerStatementUpdateWithWhereUniqueWithoutListingInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => OwnerStatementUpdateManyWithWhereWithoutListingInputSchema),z.lazy(() => OwnerStatementUpdateManyWithWhereWithoutListingInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => OwnerStatementScalarWhereInputSchema),z.lazy(() => OwnerStatementScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const DailyRateUncheckedUpdateManyWithoutListingNestedInputSchema: z.ZodType<Prisma.DailyRateUncheckedUpdateManyWithoutListingNestedInput> = z.object({
  create: z.union([ z.lazy(() => DailyRateCreateWithoutListingInputSchema),z.lazy(() => DailyRateCreateWithoutListingInputSchema).array(),z.lazy(() => DailyRateUncheckedCreateWithoutListingInputSchema),z.lazy(() => DailyRateUncheckedCreateWithoutListingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DailyRateCreateOrConnectWithoutListingInputSchema),z.lazy(() => DailyRateCreateOrConnectWithoutListingInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => DailyRateUpsertWithWhereUniqueWithoutListingInputSchema),z.lazy(() => DailyRateUpsertWithWhereUniqueWithoutListingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DailyRateCreateManyListingInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => DailyRateWhereUniqueInputSchema),z.lazy(() => DailyRateWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => DailyRateWhereUniqueInputSchema),z.lazy(() => DailyRateWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => DailyRateWhereUniqueInputSchema),z.lazy(() => DailyRateWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => DailyRateWhereUniqueInputSchema),z.lazy(() => DailyRateWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => DailyRateUpdateWithWhereUniqueWithoutListingInputSchema),z.lazy(() => DailyRateUpdateWithWhereUniqueWithoutListingInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => DailyRateUpdateManyWithWhereWithoutListingInputSchema),z.lazy(() => DailyRateUpdateManyWithWhereWithoutListingInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => DailyRateScalarWhereInputSchema),z.lazy(() => DailyRateScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ListingKeyUncheckedUpdateManyWithoutListingNestedInputSchema: z.ZodType<Prisma.ListingKeyUncheckedUpdateManyWithoutListingNestedInput> = z.object({
  create: z.union([ z.lazy(() => ListingKeyCreateWithoutListingInputSchema),z.lazy(() => ListingKeyCreateWithoutListingInputSchema).array(),z.lazy(() => ListingKeyUncheckedCreateWithoutListingInputSchema),z.lazy(() => ListingKeyUncheckedCreateWithoutListingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ListingKeyCreateOrConnectWithoutListingInputSchema),z.lazy(() => ListingKeyCreateOrConnectWithoutListingInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ListingKeyUpsertWithWhereUniqueWithoutListingInputSchema),z.lazy(() => ListingKeyUpsertWithWhereUniqueWithoutListingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ListingKeyCreateManyListingInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ListingKeyWhereUniqueInputSchema),z.lazy(() => ListingKeyWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ListingKeyWhereUniqueInputSchema),z.lazy(() => ListingKeyWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ListingKeyWhereUniqueInputSchema),z.lazy(() => ListingKeyWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ListingKeyWhereUniqueInputSchema),z.lazy(() => ListingKeyWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ListingKeyUpdateWithWhereUniqueWithoutListingInputSchema),z.lazy(() => ListingKeyUpdateWithWhereUniqueWithoutListingInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ListingKeyUpdateManyWithWhereWithoutListingInputSchema),z.lazy(() => ListingKeyUpdateManyWithWhereWithoutListingInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ListingKeyScalarWhereInputSchema),z.lazy(() => ListingKeyScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ListingCreateNestedOneWithoutKeysInputSchema: z.ZodType<Prisma.ListingCreateNestedOneWithoutKeysInput> = z.object({
  create: z.union([ z.lazy(() => ListingCreateWithoutKeysInputSchema),z.lazy(() => ListingUncheckedCreateWithoutKeysInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ListingCreateOrConnectWithoutKeysInputSchema).optional(),
  connect: z.lazy(() => ListingWhereUniqueInputSchema).optional()
}).strict();

export const EnumKeyTypeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumKeyTypeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => KeyTypeSchema).optional()
}).strict();

export const ListingUpdateOneRequiredWithoutKeysNestedInputSchema: z.ZodType<Prisma.ListingUpdateOneRequiredWithoutKeysNestedInput> = z.object({
  create: z.union([ z.lazy(() => ListingCreateWithoutKeysInputSchema),z.lazy(() => ListingUncheckedCreateWithoutKeysInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ListingCreateOrConnectWithoutKeysInputSchema).optional(),
  upsert: z.lazy(() => ListingUpsertWithoutKeysInputSchema).optional(),
  connect: z.lazy(() => ListingWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ListingUpdateToOneWithWhereWithoutKeysInputSchema),z.lazy(() => ListingUpdateWithoutKeysInputSchema),z.lazy(() => ListingUncheckedUpdateWithoutKeysInputSchema) ]).optional(),
}).strict();

export const ContentCreatephotosInputSchema: z.ZodType<Prisma.ContentCreatephotosInput> = z.object({
  set: z.string().array()
}).strict();

export const ListingCreateNestedOneWithoutContentInputSchema: z.ZodType<Prisma.ListingCreateNestedOneWithoutContentInput> = z.object({
  create: z.union([ z.lazy(() => ListingCreateWithoutContentInputSchema),z.lazy(() => ListingUncheckedCreateWithoutContentInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ListingCreateOrConnectWithoutContentInputSchema).optional(),
  connect: z.lazy(() => ListingWhereUniqueInputSchema).optional()
}).strict();

export const BedroomCreateNestedManyWithoutContentInputSchema: z.ZodType<Prisma.BedroomCreateNestedManyWithoutContentInput> = z.object({
  create: z.union([ z.lazy(() => BedroomCreateWithoutContentInputSchema),z.lazy(() => BedroomCreateWithoutContentInputSchema).array(),z.lazy(() => BedroomUncheckedCreateWithoutContentInputSchema),z.lazy(() => BedroomUncheckedCreateWithoutContentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => BedroomCreateOrConnectWithoutContentInputSchema),z.lazy(() => BedroomCreateOrConnectWithoutContentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => BedroomCreateManyContentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => BedroomWhereUniqueInputSchema),z.lazy(() => BedroomWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const BedroomUncheckedCreateNestedManyWithoutContentInputSchema: z.ZodType<Prisma.BedroomUncheckedCreateNestedManyWithoutContentInput> = z.object({
  create: z.union([ z.lazy(() => BedroomCreateWithoutContentInputSchema),z.lazy(() => BedroomCreateWithoutContentInputSchema).array(),z.lazy(() => BedroomUncheckedCreateWithoutContentInputSchema),z.lazy(() => BedroomUncheckedCreateWithoutContentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => BedroomCreateOrConnectWithoutContentInputSchema),z.lazy(() => BedroomCreateOrConnectWithoutContentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => BedroomCreateManyContentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => BedroomWhereUniqueInputSchema),z.lazy(() => BedroomWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ContentUpdatephotosInputSchema: z.ZodType<Prisma.ContentUpdatephotosInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const ListingUpdateOneRequiredWithoutContentNestedInputSchema: z.ZodType<Prisma.ListingUpdateOneRequiredWithoutContentNestedInput> = z.object({
  create: z.union([ z.lazy(() => ListingCreateWithoutContentInputSchema),z.lazy(() => ListingUncheckedCreateWithoutContentInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ListingCreateOrConnectWithoutContentInputSchema).optional(),
  upsert: z.lazy(() => ListingUpsertWithoutContentInputSchema).optional(),
  connect: z.lazy(() => ListingWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ListingUpdateToOneWithWhereWithoutContentInputSchema),z.lazy(() => ListingUpdateWithoutContentInputSchema),z.lazy(() => ListingUncheckedUpdateWithoutContentInputSchema) ]).optional(),
}).strict();

export const BedroomUpdateManyWithoutContentNestedInputSchema: z.ZodType<Prisma.BedroomUpdateManyWithoutContentNestedInput> = z.object({
  create: z.union([ z.lazy(() => BedroomCreateWithoutContentInputSchema),z.lazy(() => BedroomCreateWithoutContentInputSchema).array(),z.lazy(() => BedroomUncheckedCreateWithoutContentInputSchema),z.lazy(() => BedroomUncheckedCreateWithoutContentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => BedroomCreateOrConnectWithoutContentInputSchema),z.lazy(() => BedroomCreateOrConnectWithoutContentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => BedroomUpsertWithWhereUniqueWithoutContentInputSchema),z.lazy(() => BedroomUpsertWithWhereUniqueWithoutContentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => BedroomCreateManyContentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => BedroomWhereUniqueInputSchema),z.lazy(() => BedroomWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => BedroomWhereUniqueInputSchema),z.lazy(() => BedroomWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => BedroomWhereUniqueInputSchema),z.lazy(() => BedroomWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => BedroomWhereUniqueInputSchema),z.lazy(() => BedroomWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => BedroomUpdateWithWhereUniqueWithoutContentInputSchema),z.lazy(() => BedroomUpdateWithWhereUniqueWithoutContentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => BedroomUpdateManyWithWhereWithoutContentInputSchema),z.lazy(() => BedroomUpdateManyWithWhereWithoutContentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => BedroomScalarWhereInputSchema),z.lazy(() => BedroomScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const BedroomUncheckedUpdateManyWithoutContentNestedInputSchema: z.ZodType<Prisma.BedroomUncheckedUpdateManyWithoutContentNestedInput> = z.object({
  create: z.union([ z.lazy(() => BedroomCreateWithoutContentInputSchema),z.lazy(() => BedroomCreateWithoutContentInputSchema).array(),z.lazy(() => BedroomUncheckedCreateWithoutContentInputSchema),z.lazy(() => BedroomUncheckedCreateWithoutContentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => BedroomCreateOrConnectWithoutContentInputSchema),z.lazy(() => BedroomCreateOrConnectWithoutContentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => BedroomUpsertWithWhereUniqueWithoutContentInputSchema),z.lazy(() => BedroomUpsertWithWhereUniqueWithoutContentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => BedroomCreateManyContentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => BedroomWhereUniqueInputSchema),z.lazy(() => BedroomWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => BedroomWhereUniqueInputSchema),z.lazy(() => BedroomWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => BedroomWhereUniqueInputSchema),z.lazy(() => BedroomWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => BedroomWhereUniqueInputSchema),z.lazy(() => BedroomWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => BedroomUpdateWithWhereUniqueWithoutContentInputSchema),z.lazy(() => BedroomUpdateWithWhereUniqueWithoutContentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => BedroomUpdateManyWithWhereWithoutContentInputSchema),z.lazy(() => BedroomUpdateManyWithWhereWithoutContentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => BedroomScalarWhereInputSchema),z.lazy(() => BedroomScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ListingCreateNestedOneWithoutRulesInputSchema: z.ZodType<Prisma.ListingCreateNestedOneWithoutRulesInput> = z.object({
  create: z.union([ z.lazy(() => ListingCreateWithoutRulesInputSchema),z.lazy(() => ListingUncheckedCreateWithoutRulesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ListingCreateOrConnectWithoutRulesInputSchema).optional(),
  connect: z.lazy(() => ListingWhereUniqueInputSchema).optional()
}).strict();

export const ListingUpdateOneRequiredWithoutRulesNestedInputSchema: z.ZodType<Prisma.ListingUpdateOneRequiredWithoutRulesNestedInput> = z.object({
  create: z.union([ z.lazy(() => ListingCreateWithoutRulesInputSchema),z.lazy(() => ListingUncheckedCreateWithoutRulesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ListingCreateOrConnectWithoutRulesInputSchema).optional(),
  upsert: z.lazy(() => ListingUpsertWithoutRulesInputSchema).optional(),
  connect: z.lazy(() => ListingWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ListingUpdateToOneWithWhereWithoutRulesInputSchema),z.lazy(() => ListingUpdateWithoutRulesInputSchema),z.lazy(() => ListingUncheckedUpdateWithoutRulesInputSchema) ]).optional(),
}).strict();

export const ListingCreateNestedOneWithoutPricingInputSchema: z.ZodType<Prisma.ListingCreateNestedOneWithoutPricingInput> = z.object({
  create: z.union([ z.lazy(() => ListingCreateWithoutPricingInputSchema),z.lazy(() => ListingUncheckedCreateWithoutPricingInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ListingCreateOrConnectWithoutPricingInputSchema).optional(),
  connect: z.lazy(() => ListingWhereUniqueInputSchema).optional()
}).strict();

export const PricingDateCreateNestedManyWithoutPricingInputSchema: z.ZodType<Prisma.PricingDateCreateNestedManyWithoutPricingInput> = z.object({
  create: z.union([ z.lazy(() => PricingDateCreateWithoutPricingInputSchema),z.lazy(() => PricingDateCreateWithoutPricingInputSchema).array(),z.lazy(() => PricingDateUncheckedCreateWithoutPricingInputSchema),z.lazy(() => PricingDateUncheckedCreateWithoutPricingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PricingDateCreateOrConnectWithoutPricingInputSchema),z.lazy(() => PricingDateCreateOrConnectWithoutPricingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PricingDateCreateManyPricingInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PricingDateWhereUniqueInputSchema),z.lazy(() => PricingDateWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const DiscountCreateNestedManyWithoutPricingInputSchema: z.ZodType<Prisma.DiscountCreateNestedManyWithoutPricingInput> = z.object({
  create: z.union([ z.lazy(() => DiscountCreateWithoutPricingInputSchema),z.lazy(() => DiscountCreateWithoutPricingInputSchema).array(),z.lazy(() => DiscountUncheckedCreateWithoutPricingInputSchema),z.lazy(() => DiscountUncheckedCreateWithoutPricingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DiscountCreateOrConnectWithoutPricingInputSchema),z.lazy(() => DiscountCreateOrConnectWithoutPricingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DiscountCreateManyPricingInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => DiscountWhereUniqueInputSchema),z.lazy(() => DiscountWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PricingDateUncheckedCreateNestedManyWithoutPricingInputSchema: z.ZodType<Prisma.PricingDateUncheckedCreateNestedManyWithoutPricingInput> = z.object({
  create: z.union([ z.lazy(() => PricingDateCreateWithoutPricingInputSchema),z.lazy(() => PricingDateCreateWithoutPricingInputSchema).array(),z.lazy(() => PricingDateUncheckedCreateWithoutPricingInputSchema),z.lazy(() => PricingDateUncheckedCreateWithoutPricingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PricingDateCreateOrConnectWithoutPricingInputSchema),z.lazy(() => PricingDateCreateOrConnectWithoutPricingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PricingDateCreateManyPricingInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PricingDateWhereUniqueInputSchema),z.lazy(() => PricingDateWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const DiscountUncheckedCreateNestedManyWithoutPricingInputSchema: z.ZodType<Prisma.DiscountUncheckedCreateNestedManyWithoutPricingInput> = z.object({
  create: z.union([ z.lazy(() => DiscountCreateWithoutPricingInputSchema),z.lazy(() => DiscountCreateWithoutPricingInputSchema).array(),z.lazy(() => DiscountUncheckedCreateWithoutPricingInputSchema),z.lazy(() => DiscountUncheckedCreateWithoutPricingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DiscountCreateOrConnectWithoutPricingInputSchema),z.lazy(() => DiscountCreateOrConnectWithoutPricingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DiscountCreateManyPricingInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => DiscountWhereUniqueInputSchema),z.lazy(() => DiscountWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EnumDynamicPricingFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumDynamicPricingFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => DynamicPricingSchema).optional()
}).strict();

export const ListingUpdateOneRequiredWithoutPricingNestedInputSchema: z.ZodType<Prisma.ListingUpdateOneRequiredWithoutPricingNestedInput> = z.object({
  create: z.union([ z.lazy(() => ListingCreateWithoutPricingInputSchema),z.lazy(() => ListingUncheckedCreateWithoutPricingInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ListingCreateOrConnectWithoutPricingInputSchema).optional(),
  upsert: z.lazy(() => ListingUpsertWithoutPricingInputSchema).optional(),
  connect: z.lazy(() => ListingWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ListingUpdateToOneWithWhereWithoutPricingInputSchema),z.lazy(() => ListingUpdateWithoutPricingInputSchema),z.lazy(() => ListingUncheckedUpdateWithoutPricingInputSchema) ]).optional(),
}).strict();

export const PricingDateUpdateManyWithoutPricingNestedInputSchema: z.ZodType<Prisma.PricingDateUpdateManyWithoutPricingNestedInput> = z.object({
  create: z.union([ z.lazy(() => PricingDateCreateWithoutPricingInputSchema),z.lazy(() => PricingDateCreateWithoutPricingInputSchema).array(),z.lazy(() => PricingDateUncheckedCreateWithoutPricingInputSchema),z.lazy(() => PricingDateUncheckedCreateWithoutPricingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PricingDateCreateOrConnectWithoutPricingInputSchema),z.lazy(() => PricingDateCreateOrConnectWithoutPricingInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PricingDateUpsertWithWhereUniqueWithoutPricingInputSchema),z.lazy(() => PricingDateUpsertWithWhereUniqueWithoutPricingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PricingDateCreateManyPricingInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PricingDateWhereUniqueInputSchema),z.lazy(() => PricingDateWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PricingDateWhereUniqueInputSchema),z.lazy(() => PricingDateWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PricingDateWhereUniqueInputSchema),z.lazy(() => PricingDateWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PricingDateWhereUniqueInputSchema),z.lazy(() => PricingDateWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PricingDateUpdateWithWhereUniqueWithoutPricingInputSchema),z.lazy(() => PricingDateUpdateWithWhereUniqueWithoutPricingInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PricingDateUpdateManyWithWhereWithoutPricingInputSchema),z.lazy(() => PricingDateUpdateManyWithWhereWithoutPricingInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PricingDateScalarWhereInputSchema),z.lazy(() => PricingDateScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const DiscountUpdateManyWithoutPricingNestedInputSchema: z.ZodType<Prisma.DiscountUpdateManyWithoutPricingNestedInput> = z.object({
  create: z.union([ z.lazy(() => DiscountCreateWithoutPricingInputSchema),z.lazy(() => DiscountCreateWithoutPricingInputSchema).array(),z.lazy(() => DiscountUncheckedCreateWithoutPricingInputSchema),z.lazy(() => DiscountUncheckedCreateWithoutPricingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DiscountCreateOrConnectWithoutPricingInputSchema),z.lazy(() => DiscountCreateOrConnectWithoutPricingInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => DiscountUpsertWithWhereUniqueWithoutPricingInputSchema),z.lazy(() => DiscountUpsertWithWhereUniqueWithoutPricingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DiscountCreateManyPricingInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => DiscountWhereUniqueInputSchema),z.lazy(() => DiscountWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => DiscountWhereUniqueInputSchema),z.lazy(() => DiscountWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => DiscountWhereUniqueInputSchema),z.lazy(() => DiscountWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => DiscountWhereUniqueInputSchema),z.lazy(() => DiscountWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => DiscountUpdateWithWhereUniqueWithoutPricingInputSchema),z.lazy(() => DiscountUpdateWithWhereUniqueWithoutPricingInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => DiscountUpdateManyWithWhereWithoutPricingInputSchema),z.lazy(() => DiscountUpdateManyWithWhereWithoutPricingInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => DiscountScalarWhereInputSchema),z.lazy(() => DiscountScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PricingDateUncheckedUpdateManyWithoutPricingNestedInputSchema: z.ZodType<Prisma.PricingDateUncheckedUpdateManyWithoutPricingNestedInput> = z.object({
  create: z.union([ z.lazy(() => PricingDateCreateWithoutPricingInputSchema),z.lazy(() => PricingDateCreateWithoutPricingInputSchema).array(),z.lazy(() => PricingDateUncheckedCreateWithoutPricingInputSchema),z.lazy(() => PricingDateUncheckedCreateWithoutPricingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PricingDateCreateOrConnectWithoutPricingInputSchema),z.lazy(() => PricingDateCreateOrConnectWithoutPricingInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PricingDateUpsertWithWhereUniqueWithoutPricingInputSchema),z.lazy(() => PricingDateUpsertWithWhereUniqueWithoutPricingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PricingDateCreateManyPricingInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PricingDateWhereUniqueInputSchema),z.lazy(() => PricingDateWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PricingDateWhereUniqueInputSchema),z.lazy(() => PricingDateWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PricingDateWhereUniqueInputSchema),z.lazy(() => PricingDateWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PricingDateWhereUniqueInputSchema),z.lazy(() => PricingDateWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PricingDateUpdateWithWhereUniqueWithoutPricingInputSchema),z.lazy(() => PricingDateUpdateWithWhereUniqueWithoutPricingInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PricingDateUpdateManyWithWhereWithoutPricingInputSchema),z.lazy(() => PricingDateUpdateManyWithWhereWithoutPricingInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PricingDateScalarWhereInputSchema),z.lazy(() => PricingDateScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const DiscountUncheckedUpdateManyWithoutPricingNestedInputSchema: z.ZodType<Prisma.DiscountUncheckedUpdateManyWithoutPricingNestedInput> = z.object({
  create: z.union([ z.lazy(() => DiscountCreateWithoutPricingInputSchema),z.lazy(() => DiscountCreateWithoutPricingInputSchema).array(),z.lazy(() => DiscountUncheckedCreateWithoutPricingInputSchema),z.lazy(() => DiscountUncheckedCreateWithoutPricingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DiscountCreateOrConnectWithoutPricingInputSchema),z.lazy(() => DiscountCreateOrConnectWithoutPricingInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => DiscountUpsertWithWhereUniqueWithoutPricingInputSchema),z.lazy(() => DiscountUpsertWithWhereUniqueWithoutPricingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DiscountCreateManyPricingInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => DiscountWhereUniqueInputSchema),z.lazy(() => DiscountWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => DiscountWhereUniqueInputSchema),z.lazy(() => DiscountWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => DiscountWhereUniqueInputSchema),z.lazy(() => DiscountWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => DiscountWhereUniqueInputSchema),z.lazy(() => DiscountWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => DiscountUpdateWithWhereUniqueWithoutPricingInputSchema),z.lazy(() => DiscountUpdateWithWhereUniqueWithoutPricingInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => DiscountUpdateManyWithWhereWithoutPricingInputSchema),z.lazy(() => DiscountUpdateManyWithWhereWithoutPricingInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => DiscountScalarWhereInputSchema),z.lazy(() => DiscountScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PricingCreateNestedOneWithoutDatesInputSchema: z.ZodType<Prisma.PricingCreateNestedOneWithoutDatesInput> = z.object({
  create: z.union([ z.lazy(() => PricingCreateWithoutDatesInputSchema),z.lazy(() => PricingUncheckedCreateWithoutDatesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PricingCreateOrConnectWithoutDatesInputSchema).optional(),
  connect: z.lazy(() => PricingWhereUniqueInputSchema).optional()
}).strict();

export const PricingUpdateOneRequiredWithoutDatesNestedInputSchema: z.ZodType<Prisma.PricingUpdateOneRequiredWithoutDatesNestedInput> = z.object({
  create: z.union([ z.lazy(() => PricingCreateWithoutDatesInputSchema),z.lazy(() => PricingUncheckedCreateWithoutDatesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PricingCreateOrConnectWithoutDatesInputSchema).optional(),
  upsert: z.lazy(() => PricingUpsertWithoutDatesInputSchema).optional(),
  connect: z.lazy(() => PricingWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => PricingUpdateToOneWithWhereWithoutDatesInputSchema),z.lazy(() => PricingUpdateWithoutDatesInputSchema),z.lazy(() => PricingUncheckedUpdateWithoutDatesInputSchema) ]).optional(),
}).strict();

export const PricingCreateNestedOneWithoutDiscountsInputSchema: z.ZodType<Prisma.PricingCreateNestedOneWithoutDiscountsInput> = z.object({
  create: z.union([ z.lazy(() => PricingCreateWithoutDiscountsInputSchema),z.lazy(() => PricingUncheckedCreateWithoutDiscountsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PricingCreateOrConnectWithoutDiscountsInputSchema).optional(),
  connect: z.lazy(() => PricingWhereUniqueInputSchema).optional()
}).strict();

export const PricingUpdateOneRequiredWithoutDiscountsNestedInputSchema: z.ZodType<Prisma.PricingUpdateOneRequiredWithoutDiscountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => PricingCreateWithoutDiscountsInputSchema),z.lazy(() => PricingUncheckedCreateWithoutDiscountsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PricingCreateOrConnectWithoutDiscountsInputSchema).optional(),
  upsert: z.lazy(() => PricingUpsertWithoutDiscountsInputSchema).optional(),
  connect: z.lazy(() => PricingWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => PricingUpdateToOneWithWhereWithoutDiscountsInputSchema),z.lazy(() => PricingUpdateWithoutDiscountsInputSchema),z.lazy(() => PricingUncheckedUpdateWithoutDiscountsInputSchema) ]).optional(),
}).strict();

export const ListingCreateNestedOneWithoutAvailabilityInputSchema: z.ZodType<Prisma.ListingCreateNestedOneWithoutAvailabilityInput> = z.object({
  create: z.union([ z.lazy(() => ListingCreateWithoutAvailabilityInputSchema),z.lazy(() => ListingUncheckedCreateWithoutAvailabilityInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ListingCreateOrConnectWithoutAvailabilityInputSchema).optional(),
  connect: z.lazy(() => ListingWhereUniqueInputSchema).optional()
}).strict();

export const ListingUpdateOneRequiredWithoutAvailabilityNestedInputSchema: z.ZodType<Prisma.ListingUpdateOneRequiredWithoutAvailabilityNestedInput> = z.object({
  create: z.union([ z.lazy(() => ListingCreateWithoutAvailabilityInputSchema),z.lazy(() => ListingUncheckedCreateWithoutAvailabilityInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ListingCreateOrConnectWithoutAvailabilityInputSchema).optional(),
  upsert: z.lazy(() => ListingUpsertWithoutAvailabilityInputSchema).optional(),
  connect: z.lazy(() => ListingWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ListingUpdateToOneWithWhereWithoutAvailabilityInputSchema),z.lazy(() => ListingUpdateWithoutAvailabilityInputSchema),z.lazy(() => ListingUncheckedUpdateWithoutAvailabilityInputSchema) ]).optional(),
}).strict();

export const ListingCreateNestedOneWithoutAmenitiesInputSchema: z.ZodType<Prisma.ListingCreateNestedOneWithoutAmenitiesInput> = z.object({
  create: z.union([ z.lazy(() => ListingCreateWithoutAmenitiesInputSchema),z.lazy(() => ListingUncheckedCreateWithoutAmenitiesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ListingCreateOrConnectWithoutAmenitiesInputSchema).optional(),
  connect: z.lazy(() => ListingWhereUniqueInputSchema).optional()
}).strict();

export const ListingUpdateOneRequiredWithoutAmenitiesNestedInputSchema: z.ZodType<Prisma.ListingUpdateOneRequiredWithoutAmenitiesNestedInput> = z.object({
  create: z.union([ z.lazy(() => ListingCreateWithoutAmenitiesInputSchema),z.lazy(() => ListingUncheckedCreateWithoutAmenitiesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ListingCreateOrConnectWithoutAmenitiesInputSchema).optional(),
  upsert: z.lazy(() => ListingUpsertWithoutAmenitiesInputSchema).optional(),
  connect: z.lazy(() => ListingWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ListingUpdateToOneWithWhereWithoutAmenitiesInputSchema),z.lazy(() => ListingUpdateWithoutAmenitiesInputSchema),z.lazy(() => ListingUncheckedUpdateWithoutAmenitiesInputSchema) ]).optional(),
}).strict();

export const ListingCreateNestedOneWithoutFeesInputSchema: z.ZodType<Prisma.ListingCreateNestedOneWithoutFeesInput> = z.object({
  create: z.union([ z.lazy(() => ListingCreateWithoutFeesInputSchema),z.lazy(() => ListingUncheckedCreateWithoutFeesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ListingCreateOrConnectWithoutFeesInputSchema).optional(),
  connect: z.lazy(() => ListingWhereUniqueInputSchema).optional()
}).strict();

export const ListingUpdateOneRequiredWithoutFeesNestedInputSchema: z.ZodType<Prisma.ListingUpdateOneRequiredWithoutFeesNestedInput> = z.object({
  create: z.union([ z.lazy(() => ListingCreateWithoutFeesInputSchema),z.lazy(() => ListingUncheckedCreateWithoutFeesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ListingCreateOrConnectWithoutFeesInputSchema).optional(),
  upsert: z.lazy(() => ListingUpsertWithoutFeesInputSchema).optional(),
  connect: z.lazy(() => ListingWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ListingUpdateToOneWithWhereWithoutFeesInputSchema),z.lazy(() => ListingUpdateWithoutFeesInputSchema),z.lazy(() => ListingUncheckedUpdateWithoutFeesInputSchema) ]).optional(),
}).strict();

export const ListingCreateNestedOneWithoutTaxRatesInputSchema: z.ZodType<Prisma.ListingCreateNestedOneWithoutTaxRatesInput> = z.object({
  create: z.union([ z.lazy(() => ListingCreateWithoutTaxRatesInputSchema),z.lazy(() => ListingUncheckedCreateWithoutTaxRatesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ListingCreateOrConnectWithoutTaxRatesInputSchema).optional(),
  connect: z.lazy(() => ListingWhereUniqueInputSchema).optional()
}).strict();

export const ListingUpdateOneRequiredWithoutTaxRatesNestedInputSchema: z.ZodType<Prisma.ListingUpdateOneRequiredWithoutTaxRatesNestedInput> = z.object({
  create: z.union([ z.lazy(() => ListingCreateWithoutTaxRatesInputSchema),z.lazy(() => ListingUncheckedCreateWithoutTaxRatesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ListingCreateOrConnectWithoutTaxRatesInputSchema).optional(),
  upsert: z.lazy(() => ListingUpsertWithoutTaxRatesInputSchema).optional(),
  connect: z.lazy(() => ListingWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ListingUpdateToOneWithWhereWithoutTaxRatesInputSchema),z.lazy(() => ListingUpdateWithoutTaxRatesInputSchema),z.lazy(() => ListingUncheckedUpdateWithoutTaxRatesInputSchema) ]).optional(),
}).strict();

export const ListingCreateNestedOneWithoutDeductionsInputSchema: z.ZodType<Prisma.ListingCreateNestedOneWithoutDeductionsInput> = z.object({
  create: z.union([ z.lazy(() => ListingCreateWithoutDeductionsInputSchema),z.lazy(() => ListingUncheckedCreateWithoutDeductionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ListingCreateOrConnectWithoutDeductionsInputSchema).optional(),
  connect: z.lazy(() => ListingWhereUniqueInputSchema).optional()
}).strict();

export const ListingUpdateOneRequiredWithoutDeductionsNestedInputSchema: z.ZodType<Prisma.ListingUpdateOneRequiredWithoutDeductionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ListingCreateWithoutDeductionsInputSchema),z.lazy(() => ListingUncheckedCreateWithoutDeductionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ListingCreateOrConnectWithoutDeductionsInputSchema).optional(),
  upsert: z.lazy(() => ListingUpsertWithoutDeductionsInputSchema).optional(),
  connect: z.lazy(() => ListingWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ListingUpdateToOneWithWhereWithoutDeductionsInputSchema),z.lazy(() => ListingUpdateWithoutDeductionsInputSchema),z.lazy(() => ListingUncheckedUpdateWithoutDeductionsInputSchema) ]).optional(),
}).strict();

export const BedroomCreatebedsInputSchema: z.ZodType<Prisma.BedroomCreatebedsInput> = z.object({
  set: z.string().array()
}).strict();

export const ContentCreateNestedOneWithoutBedroomsInputSchema: z.ZodType<Prisma.ContentCreateNestedOneWithoutBedroomsInput> = z.object({
  create: z.union([ z.lazy(() => ContentCreateWithoutBedroomsInputSchema),z.lazy(() => ContentUncheckedCreateWithoutBedroomsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ContentCreateOrConnectWithoutBedroomsInputSchema).optional(),
  connect: z.lazy(() => ContentWhereUniqueInputSchema).optional()
}).strict();

export const BedroomUpdatebedsInputSchema: z.ZodType<Prisma.BedroomUpdatebedsInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const ContentUpdateOneRequiredWithoutBedroomsNestedInputSchema: z.ZodType<Prisma.ContentUpdateOneRequiredWithoutBedroomsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ContentCreateWithoutBedroomsInputSchema),z.lazy(() => ContentUncheckedCreateWithoutBedroomsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ContentCreateOrConnectWithoutBedroomsInputSchema).optional(),
  upsert: z.lazy(() => ContentUpsertWithoutBedroomsInputSchema).optional(),
  connect: z.lazy(() => ContentWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ContentUpdateToOneWithWhereWithoutBedroomsInputSchema),z.lazy(() => ContentUpdateWithoutBedroomsInputSchema),z.lazy(() => ContentUncheckedUpdateWithoutBedroomsInputSchema) ]).optional(),
}).strict();

export const ListingCreateNestedOneWithoutEventsInputSchema: z.ZodType<Prisma.ListingCreateNestedOneWithoutEventsInput> = z.object({
  create: z.union([ z.lazy(() => ListingCreateWithoutEventsInputSchema),z.lazy(() => ListingUncheckedCreateWithoutEventsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ListingCreateOrConnectWithoutEventsInputSchema).optional(),
  connect: z.lazy(() => ListingWhereUniqueInputSchema).optional()
}).strict();

export const ReservationCreateNestedOneWithoutCalendarEventInputSchema: z.ZodType<Prisma.ReservationCreateNestedOneWithoutCalendarEventInput> = z.object({
  create: z.union([ z.lazy(() => ReservationCreateWithoutCalendarEventInputSchema),z.lazy(() => ReservationUncheckedCreateWithoutCalendarEventInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ReservationCreateOrConnectWithoutCalendarEventInputSchema).optional(),
  connect: z.lazy(() => ReservationWhereUniqueInputSchema).optional()
}).strict();

export const ReservationUncheckedCreateNestedOneWithoutCalendarEventInputSchema: z.ZodType<Prisma.ReservationUncheckedCreateNestedOneWithoutCalendarEventInput> = z.object({
  create: z.union([ z.lazy(() => ReservationCreateWithoutCalendarEventInputSchema),z.lazy(() => ReservationUncheckedCreateWithoutCalendarEventInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ReservationCreateOrConnectWithoutCalendarEventInputSchema).optional(),
  connect: z.lazy(() => ReservationWhereUniqueInputSchema).optional()
}).strict();

export const EnumCalendarEventTypeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumCalendarEventTypeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => CalendarEventTypeSchema).optional()
}).strict();

export const ListingUpdateOneRequiredWithoutEventsNestedInputSchema: z.ZodType<Prisma.ListingUpdateOneRequiredWithoutEventsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ListingCreateWithoutEventsInputSchema),z.lazy(() => ListingUncheckedCreateWithoutEventsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ListingCreateOrConnectWithoutEventsInputSchema).optional(),
  upsert: z.lazy(() => ListingUpsertWithoutEventsInputSchema).optional(),
  connect: z.lazy(() => ListingWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ListingUpdateToOneWithWhereWithoutEventsInputSchema),z.lazy(() => ListingUpdateWithoutEventsInputSchema),z.lazy(() => ListingUncheckedUpdateWithoutEventsInputSchema) ]).optional(),
}).strict();

export const ReservationUpdateOneWithoutCalendarEventNestedInputSchema: z.ZodType<Prisma.ReservationUpdateOneWithoutCalendarEventNestedInput> = z.object({
  create: z.union([ z.lazy(() => ReservationCreateWithoutCalendarEventInputSchema),z.lazy(() => ReservationUncheckedCreateWithoutCalendarEventInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ReservationCreateOrConnectWithoutCalendarEventInputSchema).optional(),
  upsert: z.lazy(() => ReservationUpsertWithoutCalendarEventInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => ReservationWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => ReservationWhereInputSchema) ]).optional(),
  connect: z.lazy(() => ReservationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ReservationUpdateToOneWithWhereWithoutCalendarEventInputSchema),z.lazy(() => ReservationUpdateWithoutCalendarEventInputSchema),z.lazy(() => ReservationUncheckedUpdateWithoutCalendarEventInputSchema) ]).optional(),
}).strict();

export const ReservationUncheckedUpdateOneWithoutCalendarEventNestedInputSchema: z.ZodType<Prisma.ReservationUncheckedUpdateOneWithoutCalendarEventNestedInput> = z.object({
  create: z.union([ z.lazy(() => ReservationCreateWithoutCalendarEventInputSchema),z.lazy(() => ReservationUncheckedCreateWithoutCalendarEventInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ReservationCreateOrConnectWithoutCalendarEventInputSchema).optional(),
  upsert: z.lazy(() => ReservationUpsertWithoutCalendarEventInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => ReservationWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => ReservationWhereInputSchema) ]).optional(),
  connect: z.lazy(() => ReservationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ReservationUpdateToOneWithWhereWithoutCalendarEventInputSchema),z.lazy(() => ReservationUpdateWithoutCalendarEventInputSchema),z.lazy(() => ReservationUncheckedUpdateWithoutCalendarEventInputSchema) ]).optional(),
}).strict();

export const CalendarEventCreateNestedOneWithoutReservationInputSchema: z.ZodType<Prisma.CalendarEventCreateNestedOneWithoutReservationInput> = z.object({
  create: z.union([ z.lazy(() => CalendarEventCreateWithoutReservationInputSchema),z.lazy(() => CalendarEventUncheckedCreateWithoutReservationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CalendarEventCreateOrConnectWithoutReservationInputSchema).optional(),
  connect: z.lazy(() => CalendarEventWhereUniqueInputSchema).optional()
}).strict();

export const ScheduledMessageCreateNestedManyWithoutReservationInputSchema: z.ZodType<Prisma.ScheduledMessageCreateNestedManyWithoutReservationInput> = z.object({
  create: z.union([ z.lazy(() => ScheduledMessageCreateWithoutReservationInputSchema),z.lazy(() => ScheduledMessageCreateWithoutReservationInputSchema).array(),z.lazy(() => ScheduledMessageUncheckedCreateWithoutReservationInputSchema),z.lazy(() => ScheduledMessageUncheckedCreateWithoutReservationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ScheduledMessageCreateOrConnectWithoutReservationInputSchema),z.lazy(() => ScheduledMessageCreateOrConnectWithoutReservationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ScheduledMessageCreateManyReservationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ScheduledMessageWhereUniqueInputSchema),z.lazy(() => ScheduledMessageWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RevenueCreateNestedOneWithoutReservationInputSchema: z.ZodType<Prisma.RevenueCreateNestedOneWithoutReservationInput> = z.object({
  create: z.union([ z.lazy(() => RevenueCreateWithoutReservationInputSchema),z.lazy(() => RevenueUncheckedCreateWithoutReservationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RevenueCreateOrConnectWithoutReservationInputSchema).optional(),
  connect: z.lazy(() => RevenueWhereUniqueInputSchema).optional()
}).strict();

export const GuestCreateNestedOneWithoutReservationsInputSchema: z.ZodType<Prisma.GuestCreateNestedOneWithoutReservationsInput> = z.object({
  create: z.union([ z.lazy(() => GuestCreateWithoutReservationsInputSchema),z.lazy(() => GuestUncheckedCreateWithoutReservationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => GuestCreateOrConnectWithoutReservationsInputSchema).optional(),
  connect: z.lazy(() => GuestWhereUniqueInputSchema).optional()
}).strict();

export const ScheduledMessageUncheckedCreateNestedManyWithoutReservationInputSchema: z.ZodType<Prisma.ScheduledMessageUncheckedCreateNestedManyWithoutReservationInput> = z.object({
  create: z.union([ z.lazy(() => ScheduledMessageCreateWithoutReservationInputSchema),z.lazy(() => ScheduledMessageCreateWithoutReservationInputSchema).array(),z.lazy(() => ScheduledMessageUncheckedCreateWithoutReservationInputSchema),z.lazy(() => ScheduledMessageUncheckedCreateWithoutReservationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ScheduledMessageCreateOrConnectWithoutReservationInputSchema),z.lazy(() => ScheduledMessageCreateOrConnectWithoutReservationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ScheduledMessageCreateManyReservationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ScheduledMessageWhereUniqueInputSchema),z.lazy(() => ScheduledMessageWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RevenueUncheckedCreateNestedOneWithoutReservationInputSchema: z.ZodType<Prisma.RevenueUncheckedCreateNestedOneWithoutReservationInput> = z.object({
  create: z.union([ z.lazy(() => RevenueCreateWithoutReservationInputSchema),z.lazy(() => RevenueUncheckedCreateWithoutReservationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RevenueCreateOrConnectWithoutReservationInputSchema).optional(),
  connect: z.lazy(() => RevenueWhereUniqueInputSchema).optional()
}).strict();

export const EnumChannelFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumChannelFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => ChannelSchema).optional()
}).strict();

export const EnumReservationStatusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumReservationStatusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => ReservationStatusSchema).optional()
}).strict();

export const CalendarEventUpdateOneRequiredWithoutReservationNestedInputSchema: z.ZodType<Prisma.CalendarEventUpdateOneRequiredWithoutReservationNestedInput> = z.object({
  create: z.union([ z.lazy(() => CalendarEventCreateWithoutReservationInputSchema),z.lazy(() => CalendarEventUncheckedCreateWithoutReservationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CalendarEventCreateOrConnectWithoutReservationInputSchema).optional(),
  upsert: z.lazy(() => CalendarEventUpsertWithoutReservationInputSchema).optional(),
  connect: z.lazy(() => CalendarEventWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => CalendarEventUpdateToOneWithWhereWithoutReservationInputSchema),z.lazy(() => CalendarEventUpdateWithoutReservationInputSchema),z.lazy(() => CalendarEventUncheckedUpdateWithoutReservationInputSchema) ]).optional(),
}).strict();

export const ScheduledMessageUpdateManyWithoutReservationNestedInputSchema: z.ZodType<Prisma.ScheduledMessageUpdateManyWithoutReservationNestedInput> = z.object({
  create: z.union([ z.lazy(() => ScheduledMessageCreateWithoutReservationInputSchema),z.lazy(() => ScheduledMessageCreateWithoutReservationInputSchema).array(),z.lazy(() => ScheduledMessageUncheckedCreateWithoutReservationInputSchema),z.lazy(() => ScheduledMessageUncheckedCreateWithoutReservationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ScheduledMessageCreateOrConnectWithoutReservationInputSchema),z.lazy(() => ScheduledMessageCreateOrConnectWithoutReservationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ScheduledMessageUpsertWithWhereUniqueWithoutReservationInputSchema),z.lazy(() => ScheduledMessageUpsertWithWhereUniqueWithoutReservationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ScheduledMessageCreateManyReservationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ScheduledMessageWhereUniqueInputSchema),z.lazy(() => ScheduledMessageWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ScheduledMessageWhereUniqueInputSchema),z.lazy(() => ScheduledMessageWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ScheduledMessageWhereUniqueInputSchema),z.lazy(() => ScheduledMessageWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ScheduledMessageWhereUniqueInputSchema),z.lazy(() => ScheduledMessageWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ScheduledMessageUpdateWithWhereUniqueWithoutReservationInputSchema),z.lazy(() => ScheduledMessageUpdateWithWhereUniqueWithoutReservationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ScheduledMessageUpdateManyWithWhereWithoutReservationInputSchema),z.lazy(() => ScheduledMessageUpdateManyWithWhereWithoutReservationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ScheduledMessageScalarWhereInputSchema),z.lazy(() => ScheduledMessageScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RevenueUpdateOneWithoutReservationNestedInputSchema: z.ZodType<Prisma.RevenueUpdateOneWithoutReservationNestedInput> = z.object({
  create: z.union([ z.lazy(() => RevenueCreateWithoutReservationInputSchema),z.lazy(() => RevenueUncheckedCreateWithoutReservationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RevenueCreateOrConnectWithoutReservationInputSchema).optional(),
  upsert: z.lazy(() => RevenueUpsertWithoutReservationInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => RevenueWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => RevenueWhereInputSchema) ]).optional(),
  connect: z.lazy(() => RevenueWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RevenueUpdateToOneWithWhereWithoutReservationInputSchema),z.lazy(() => RevenueUpdateWithoutReservationInputSchema),z.lazy(() => RevenueUncheckedUpdateWithoutReservationInputSchema) ]).optional(),
}).strict();

export const GuestUpdateOneRequiredWithoutReservationsNestedInputSchema: z.ZodType<Prisma.GuestUpdateOneRequiredWithoutReservationsNestedInput> = z.object({
  create: z.union([ z.lazy(() => GuestCreateWithoutReservationsInputSchema),z.lazy(() => GuestUncheckedCreateWithoutReservationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => GuestCreateOrConnectWithoutReservationsInputSchema).optional(),
  upsert: z.lazy(() => GuestUpsertWithoutReservationsInputSchema).optional(),
  connect: z.lazy(() => GuestWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => GuestUpdateToOneWithWhereWithoutReservationsInputSchema),z.lazy(() => GuestUpdateWithoutReservationsInputSchema),z.lazy(() => GuestUncheckedUpdateWithoutReservationsInputSchema) ]).optional(),
}).strict();

export const ScheduledMessageUncheckedUpdateManyWithoutReservationNestedInputSchema: z.ZodType<Prisma.ScheduledMessageUncheckedUpdateManyWithoutReservationNestedInput> = z.object({
  create: z.union([ z.lazy(() => ScheduledMessageCreateWithoutReservationInputSchema),z.lazy(() => ScheduledMessageCreateWithoutReservationInputSchema).array(),z.lazy(() => ScheduledMessageUncheckedCreateWithoutReservationInputSchema),z.lazy(() => ScheduledMessageUncheckedCreateWithoutReservationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ScheduledMessageCreateOrConnectWithoutReservationInputSchema),z.lazy(() => ScheduledMessageCreateOrConnectWithoutReservationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ScheduledMessageUpsertWithWhereUniqueWithoutReservationInputSchema),z.lazy(() => ScheduledMessageUpsertWithWhereUniqueWithoutReservationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ScheduledMessageCreateManyReservationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ScheduledMessageWhereUniqueInputSchema),z.lazy(() => ScheduledMessageWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ScheduledMessageWhereUniqueInputSchema),z.lazy(() => ScheduledMessageWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ScheduledMessageWhereUniqueInputSchema),z.lazy(() => ScheduledMessageWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ScheduledMessageWhereUniqueInputSchema),z.lazy(() => ScheduledMessageWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ScheduledMessageUpdateWithWhereUniqueWithoutReservationInputSchema),z.lazy(() => ScheduledMessageUpdateWithWhereUniqueWithoutReservationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ScheduledMessageUpdateManyWithWhereWithoutReservationInputSchema),z.lazy(() => ScheduledMessageUpdateManyWithWhereWithoutReservationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ScheduledMessageScalarWhereInputSchema),z.lazy(() => ScheduledMessageScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RevenueUncheckedUpdateOneWithoutReservationNestedInputSchema: z.ZodType<Prisma.RevenueUncheckedUpdateOneWithoutReservationNestedInput> = z.object({
  create: z.union([ z.lazy(() => RevenueCreateWithoutReservationInputSchema),z.lazy(() => RevenueUncheckedCreateWithoutReservationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RevenueCreateOrConnectWithoutReservationInputSchema).optional(),
  upsert: z.lazy(() => RevenueUpsertWithoutReservationInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => RevenueWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => RevenueWhereInputSchema) ]).optional(),
  connect: z.lazy(() => RevenueWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RevenueUpdateToOneWithWhereWithoutReservationInputSchema),z.lazy(() => RevenueUpdateWithoutReservationInputSchema),z.lazy(() => RevenueUncheckedUpdateWithoutReservationInputSchema) ]).optional(),
}).strict();

export const EnumQueueStatusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumQueueStatusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => QueueStatusSchema).optional()
}).strict();

export const ReservationCreateNestedManyWithoutGuestInputSchema: z.ZodType<Prisma.ReservationCreateNestedManyWithoutGuestInput> = z.object({
  create: z.union([ z.lazy(() => ReservationCreateWithoutGuestInputSchema),z.lazy(() => ReservationCreateWithoutGuestInputSchema).array(),z.lazy(() => ReservationUncheckedCreateWithoutGuestInputSchema),z.lazy(() => ReservationUncheckedCreateWithoutGuestInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ReservationCreateOrConnectWithoutGuestInputSchema),z.lazy(() => ReservationCreateOrConnectWithoutGuestInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ReservationCreateManyGuestInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ReservationWhereUniqueInputSchema),z.lazy(() => ReservationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MessageThreadCreateNestedManyWithoutGuestInputSchema: z.ZodType<Prisma.MessageThreadCreateNestedManyWithoutGuestInput> = z.object({
  create: z.union([ z.lazy(() => MessageThreadCreateWithoutGuestInputSchema),z.lazy(() => MessageThreadCreateWithoutGuestInputSchema).array(),z.lazy(() => MessageThreadUncheckedCreateWithoutGuestInputSchema),z.lazy(() => MessageThreadUncheckedCreateWithoutGuestInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MessageThreadCreateOrConnectWithoutGuestInputSchema),z.lazy(() => MessageThreadCreateOrConnectWithoutGuestInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MessageThreadCreateManyGuestInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MessageThreadWhereUniqueInputSchema),z.lazy(() => MessageThreadWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutGuestsInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutGuestsInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutGuestsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutGuestsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutGuestsInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const ReservationUncheckedCreateNestedManyWithoutGuestInputSchema: z.ZodType<Prisma.ReservationUncheckedCreateNestedManyWithoutGuestInput> = z.object({
  create: z.union([ z.lazy(() => ReservationCreateWithoutGuestInputSchema),z.lazy(() => ReservationCreateWithoutGuestInputSchema).array(),z.lazy(() => ReservationUncheckedCreateWithoutGuestInputSchema),z.lazy(() => ReservationUncheckedCreateWithoutGuestInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ReservationCreateOrConnectWithoutGuestInputSchema),z.lazy(() => ReservationCreateOrConnectWithoutGuestInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ReservationCreateManyGuestInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ReservationWhereUniqueInputSchema),z.lazy(() => ReservationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MessageThreadUncheckedCreateNestedManyWithoutGuestInputSchema: z.ZodType<Prisma.MessageThreadUncheckedCreateNestedManyWithoutGuestInput> = z.object({
  create: z.union([ z.lazy(() => MessageThreadCreateWithoutGuestInputSchema),z.lazy(() => MessageThreadCreateWithoutGuestInputSchema).array(),z.lazy(() => MessageThreadUncheckedCreateWithoutGuestInputSchema),z.lazy(() => MessageThreadUncheckedCreateWithoutGuestInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MessageThreadCreateOrConnectWithoutGuestInputSchema),z.lazy(() => MessageThreadCreateOrConnectWithoutGuestInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MessageThreadCreateManyGuestInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MessageThreadWhereUniqueInputSchema),z.lazy(() => MessageThreadWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ReservationUpdateManyWithoutGuestNestedInputSchema: z.ZodType<Prisma.ReservationUpdateManyWithoutGuestNestedInput> = z.object({
  create: z.union([ z.lazy(() => ReservationCreateWithoutGuestInputSchema),z.lazy(() => ReservationCreateWithoutGuestInputSchema).array(),z.lazy(() => ReservationUncheckedCreateWithoutGuestInputSchema),z.lazy(() => ReservationUncheckedCreateWithoutGuestInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ReservationCreateOrConnectWithoutGuestInputSchema),z.lazy(() => ReservationCreateOrConnectWithoutGuestInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ReservationUpsertWithWhereUniqueWithoutGuestInputSchema),z.lazy(() => ReservationUpsertWithWhereUniqueWithoutGuestInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ReservationCreateManyGuestInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ReservationWhereUniqueInputSchema),z.lazy(() => ReservationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ReservationWhereUniqueInputSchema),z.lazy(() => ReservationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ReservationWhereUniqueInputSchema),z.lazy(() => ReservationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ReservationWhereUniqueInputSchema),z.lazy(() => ReservationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ReservationUpdateWithWhereUniqueWithoutGuestInputSchema),z.lazy(() => ReservationUpdateWithWhereUniqueWithoutGuestInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ReservationUpdateManyWithWhereWithoutGuestInputSchema),z.lazy(() => ReservationUpdateManyWithWhereWithoutGuestInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ReservationScalarWhereInputSchema),z.lazy(() => ReservationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MessageThreadUpdateManyWithoutGuestNestedInputSchema: z.ZodType<Prisma.MessageThreadUpdateManyWithoutGuestNestedInput> = z.object({
  create: z.union([ z.lazy(() => MessageThreadCreateWithoutGuestInputSchema),z.lazy(() => MessageThreadCreateWithoutGuestInputSchema).array(),z.lazy(() => MessageThreadUncheckedCreateWithoutGuestInputSchema),z.lazy(() => MessageThreadUncheckedCreateWithoutGuestInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MessageThreadCreateOrConnectWithoutGuestInputSchema),z.lazy(() => MessageThreadCreateOrConnectWithoutGuestInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MessageThreadUpsertWithWhereUniqueWithoutGuestInputSchema),z.lazy(() => MessageThreadUpsertWithWhereUniqueWithoutGuestInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MessageThreadCreateManyGuestInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MessageThreadWhereUniqueInputSchema),z.lazy(() => MessageThreadWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MessageThreadWhereUniqueInputSchema),z.lazy(() => MessageThreadWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MessageThreadWhereUniqueInputSchema),z.lazy(() => MessageThreadWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MessageThreadWhereUniqueInputSchema),z.lazy(() => MessageThreadWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MessageThreadUpdateWithWhereUniqueWithoutGuestInputSchema),z.lazy(() => MessageThreadUpdateWithWhereUniqueWithoutGuestInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MessageThreadUpdateManyWithWhereWithoutGuestInputSchema),z.lazy(() => MessageThreadUpdateManyWithWhereWithoutGuestInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MessageThreadScalarWhereInputSchema),z.lazy(() => MessageThreadScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUpdateOneRequiredWithoutGuestsNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutGuestsNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutGuestsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutGuestsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutGuestsInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutGuestsInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutGuestsInputSchema),z.lazy(() => OrganizationUpdateWithoutGuestsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutGuestsInputSchema) ]).optional(),
}).strict();

export const ReservationUncheckedUpdateManyWithoutGuestNestedInputSchema: z.ZodType<Prisma.ReservationUncheckedUpdateManyWithoutGuestNestedInput> = z.object({
  create: z.union([ z.lazy(() => ReservationCreateWithoutGuestInputSchema),z.lazy(() => ReservationCreateWithoutGuestInputSchema).array(),z.lazy(() => ReservationUncheckedCreateWithoutGuestInputSchema),z.lazy(() => ReservationUncheckedCreateWithoutGuestInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ReservationCreateOrConnectWithoutGuestInputSchema),z.lazy(() => ReservationCreateOrConnectWithoutGuestInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ReservationUpsertWithWhereUniqueWithoutGuestInputSchema),z.lazy(() => ReservationUpsertWithWhereUniqueWithoutGuestInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ReservationCreateManyGuestInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ReservationWhereUniqueInputSchema),z.lazy(() => ReservationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ReservationWhereUniqueInputSchema),z.lazy(() => ReservationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ReservationWhereUniqueInputSchema),z.lazy(() => ReservationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ReservationWhereUniqueInputSchema),z.lazy(() => ReservationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ReservationUpdateWithWhereUniqueWithoutGuestInputSchema),z.lazy(() => ReservationUpdateWithWhereUniqueWithoutGuestInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ReservationUpdateManyWithWhereWithoutGuestInputSchema),z.lazy(() => ReservationUpdateManyWithWhereWithoutGuestInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ReservationScalarWhereInputSchema),z.lazy(() => ReservationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MessageThreadUncheckedUpdateManyWithoutGuestNestedInputSchema: z.ZodType<Prisma.MessageThreadUncheckedUpdateManyWithoutGuestNestedInput> = z.object({
  create: z.union([ z.lazy(() => MessageThreadCreateWithoutGuestInputSchema),z.lazy(() => MessageThreadCreateWithoutGuestInputSchema).array(),z.lazy(() => MessageThreadUncheckedCreateWithoutGuestInputSchema),z.lazy(() => MessageThreadUncheckedCreateWithoutGuestInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MessageThreadCreateOrConnectWithoutGuestInputSchema),z.lazy(() => MessageThreadCreateOrConnectWithoutGuestInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MessageThreadUpsertWithWhereUniqueWithoutGuestInputSchema),z.lazy(() => MessageThreadUpsertWithWhereUniqueWithoutGuestInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MessageThreadCreateManyGuestInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MessageThreadWhereUniqueInputSchema),z.lazy(() => MessageThreadWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MessageThreadWhereUniqueInputSchema),z.lazy(() => MessageThreadWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MessageThreadWhereUniqueInputSchema),z.lazy(() => MessageThreadWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MessageThreadWhereUniqueInputSchema),z.lazy(() => MessageThreadWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MessageThreadUpdateWithWhereUniqueWithoutGuestInputSchema),z.lazy(() => MessageThreadUpdateWithWhereUniqueWithoutGuestInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MessageThreadUpdateManyWithWhereWithoutGuestInputSchema),z.lazy(() => MessageThreadUpdateManyWithWhereWithoutGuestInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MessageThreadScalarWhereInputSchema),z.lazy(() => MessageThreadScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ListingCreateNestedOneWithoutMessageThreadsInputSchema: z.ZodType<Prisma.ListingCreateNestedOneWithoutMessageThreadsInput> = z.object({
  create: z.union([ z.lazy(() => ListingCreateWithoutMessageThreadsInputSchema),z.lazy(() => ListingUncheckedCreateWithoutMessageThreadsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ListingCreateOrConnectWithoutMessageThreadsInputSchema).optional(),
  connect: z.lazy(() => ListingWhereUniqueInputSchema).optional()
}).strict();

export const GuestCreateNestedOneWithoutMessageThreadsInputSchema: z.ZodType<Prisma.GuestCreateNestedOneWithoutMessageThreadsInput> = z.object({
  create: z.union([ z.lazy(() => GuestCreateWithoutMessageThreadsInputSchema),z.lazy(() => GuestUncheckedCreateWithoutMessageThreadsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => GuestCreateOrConnectWithoutMessageThreadsInputSchema).optional(),
  connect: z.lazy(() => GuestWhereUniqueInputSchema).optional()
}).strict();

export const MessageCreateNestedManyWithoutMessageThreadInputSchema: z.ZodType<Prisma.MessageCreateNestedManyWithoutMessageThreadInput> = z.object({
  create: z.union([ z.lazy(() => MessageCreateWithoutMessageThreadInputSchema),z.lazy(() => MessageCreateWithoutMessageThreadInputSchema).array(),z.lazy(() => MessageUncheckedCreateWithoutMessageThreadInputSchema),z.lazy(() => MessageUncheckedCreateWithoutMessageThreadInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MessageCreateOrConnectWithoutMessageThreadInputSchema),z.lazy(() => MessageCreateOrConnectWithoutMessageThreadInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MessageCreateManyMessageThreadInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MessageWhereUniqueInputSchema),z.lazy(() => MessageWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MessageUncheckedCreateNestedManyWithoutMessageThreadInputSchema: z.ZodType<Prisma.MessageUncheckedCreateNestedManyWithoutMessageThreadInput> = z.object({
  create: z.union([ z.lazy(() => MessageCreateWithoutMessageThreadInputSchema),z.lazy(() => MessageCreateWithoutMessageThreadInputSchema).array(),z.lazy(() => MessageUncheckedCreateWithoutMessageThreadInputSchema),z.lazy(() => MessageUncheckedCreateWithoutMessageThreadInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MessageCreateOrConnectWithoutMessageThreadInputSchema),z.lazy(() => MessageCreateOrConnectWithoutMessageThreadInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MessageCreateManyMessageThreadInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MessageWhereUniqueInputSchema),z.lazy(() => MessageWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ListingUpdateOneRequiredWithoutMessageThreadsNestedInputSchema: z.ZodType<Prisma.ListingUpdateOneRequiredWithoutMessageThreadsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ListingCreateWithoutMessageThreadsInputSchema),z.lazy(() => ListingUncheckedCreateWithoutMessageThreadsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ListingCreateOrConnectWithoutMessageThreadsInputSchema).optional(),
  upsert: z.lazy(() => ListingUpsertWithoutMessageThreadsInputSchema).optional(),
  connect: z.lazy(() => ListingWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ListingUpdateToOneWithWhereWithoutMessageThreadsInputSchema),z.lazy(() => ListingUpdateWithoutMessageThreadsInputSchema),z.lazy(() => ListingUncheckedUpdateWithoutMessageThreadsInputSchema) ]).optional(),
}).strict();

export const GuestUpdateOneRequiredWithoutMessageThreadsNestedInputSchema: z.ZodType<Prisma.GuestUpdateOneRequiredWithoutMessageThreadsNestedInput> = z.object({
  create: z.union([ z.lazy(() => GuestCreateWithoutMessageThreadsInputSchema),z.lazy(() => GuestUncheckedCreateWithoutMessageThreadsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => GuestCreateOrConnectWithoutMessageThreadsInputSchema).optional(),
  upsert: z.lazy(() => GuestUpsertWithoutMessageThreadsInputSchema).optional(),
  connect: z.lazy(() => GuestWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => GuestUpdateToOneWithWhereWithoutMessageThreadsInputSchema),z.lazy(() => GuestUpdateWithoutMessageThreadsInputSchema),z.lazy(() => GuestUncheckedUpdateWithoutMessageThreadsInputSchema) ]).optional(),
}).strict();

export const MessageUpdateManyWithoutMessageThreadNestedInputSchema: z.ZodType<Prisma.MessageUpdateManyWithoutMessageThreadNestedInput> = z.object({
  create: z.union([ z.lazy(() => MessageCreateWithoutMessageThreadInputSchema),z.lazy(() => MessageCreateWithoutMessageThreadInputSchema).array(),z.lazy(() => MessageUncheckedCreateWithoutMessageThreadInputSchema),z.lazy(() => MessageUncheckedCreateWithoutMessageThreadInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MessageCreateOrConnectWithoutMessageThreadInputSchema),z.lazy(() => MessageCreateOrConnectWithoutMessageThreadInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MessageUpsertWithWhereUniqueWithoutMessageThreadInputSchema),z.lazy(() => MessageUpsertWithWhereUniqueWithoutMessageThreadInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MessageCreateManyMessageThreadInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MessageWhereUniqueInputSchema),z.lazy(() => MessageWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MessageWhereUniqueInputSchema),z.lazy(() => MessageWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MessageWhereUniqueInputSchema),z.lazy(() => MessageWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MessageWhereUniqueInputSchema),z.lazy(() => MessageWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MessageUpdateWithWhereUniqueWithoutMessageThreadInputSchema),z.lazy(() => MessageUpdateWithWhereUniqueWithoutMessageThreadInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MessageUpdateManyWithWhereWithoutMessageThreadInputSchema),z.lazy(() => MessageUpdateManyWithWhereWithoutMessageThreadInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MessageScalarWhereInputSchema),z.lazy(() => MessageScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MessageUncheckedUpdateManyWithoutMessageThreadNestedInputSchema: z.ZodType<Prisma.MessageUncheckedUpdateManyWithoutMessageThreadNestedInput> = z.object({
  create: z.union([ z.lazy(() => MessageCreateWithoutMessageThreadInputSchema),z.lazy(() => MessageCreateWithoutMessageThreadInputSchema).array(),z.lazy(() => MessageUncheckedCreateWithoutMessageThreadInputSchema),z.lazy(() => MessageUncheckedCreateWithoutMessageThreadInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MessageCreateOrConnectWithoutMessageThreadInputSchema),z.lazy(() => MessageCreateOrConnectWithoutMessageThreadInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MessageUpsertWithWhereUniqueWithoutMessageThreadInputSchema),z.lazy(() => MessageUpsertWithWhereUniqueWithoutMessageThreadInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MessageCreateManyMessageThreadInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MessageWhereUniqueInputSchema),z.lazy(() => MessageWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MessageWhereUniqueInputSchema),z.lazy(() => MessageWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MessageWhereUniqueInputSchema),z.lazy(() => MessageWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MessageWhereUniqueInputSchema),z.lazy(() => MessageWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MessageUpdateWithWhereUniqueWithoutMessageThreadInputSchema),z.lazy(() => MessageUpdateWithWhereUniqueWithoutMessageThreadInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MessageUpdateManyWithWhereWithoutMessageThreadInputSchema),z.lazy(() => MessageUpdateManyWithWhereWithoutMessageThreadInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MessageScalarWhereInputSchema),z.lazy(() => MessageScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MessageThreadCreateNestedOneWithoutMessagesInputSchema: z.ZodType<Prisma.MessageThreadCreateNestedOneWithoutMessagesInput> = z.object({
  create: z.union([ z.lazy(() => MessageThreadCreateWithoutMessagesInputSchema),z.lazy(() => MessageThreadUncheckedCreateWithoutMessagesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => MessageThreadCreateOrConnectWithoutMessagesInputSchema).optional(),
  connect: z.lazy(() => MessageThreadWhereUniqueInputSchema).optional()
}).strict();

export const EnumMessageUserFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumMessageUserFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => MessageUserSchema).optional()
}).strict();

export const MessageThreadUpdateOneRequiredWithoutMessagesNestedInputSchema: z.ZodType<Prisma.MessageThreadUpdateOneRequiredWithoutMessagesNestedInput> = z.object({
  create: z.union([ z.lazy(() => MessageThreadCreateWithoutMessagesInputSchema),z.lazy(() => MessageThreadUncheckedCreateWithoutMessagesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => MessageThreadCreateOrConnectWithoutMessagesInputSchema).optional(),
  upsert: z.lazy(() => MessageThreadUpsertWithoutMessagesInputSchema).optional(),
  connect: z.lazy(() => MessageThreadWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => MessageThreadUpdateToOneWithWhereWithoutMessagesInputSchema),z.lazy(() => MessageThreadUpdateWithoutMessagesInputSchema),z.lazy(() => MessageThreadUncheckedUpdateWithoutMessagesInputSchema) ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutMessageTemplatesInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutMessageTemplatesInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutMessageTemplatesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutMessageTemplatesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutMessageTemplatesInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const ScheduledMessageCreateNestedManyWithoutMessageTemplateInputSchema: z.ZodType<Prisma.ScheduledMessageCreateNestedManyWithoutMessageTemplateInput> = z.object({
  create: z.union([ z.lazy(() => ScheduledMessageCreateWithoutMessageTemplateInputSchema),z.lazy(() => ScheduledMessageCreateWithoutMessageTemplateInputSchema).array(),z.lazy(() => ScheduledMessageUncheckedCreateWithoutMessageTemplateInputSchema),z.lazy(() => ScheduledMessageUncheckedCreateWithoutMessageTemplateInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ScheduledMessageCreateOrConnectWithoutMessageTemplateInputSchema),z.lazy(() => ScheduledMessageCreateOrConnectWithoutMessageTemplateInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ScheduledMessageCreateManyMessageTemplateInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ScheduledMessageWhereUniqueInputSchema),z.lazy(() => ScheduledMessageWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ListingCreateNestedManyWithoutMessageTemplatesInputSchema: z.ZodType<Prisma.ListingCreateNestedManyWithoutMessageTemplatesInput> = z.object({
  create: z.union([ z.lazy(() => ListingCreateWithoutMessageTemplatesInputSchema),z.lazy(() => ListingCreateWithoutMessageTemplatesInputSchema).array(),z.lazy(() => ListingUncheckedCreateWithoutMessageTemplatesInputSchema),z.lazy(() => ListingUncheckedCreateWithoutMessageTemplatesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ListingCreateOrConnectWithoutMessageTemplatesInputSchema),z.lazy(() => ListingCreateOrConnectWithoutMessageTemplatesInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ListingWhereUniqueInputSchema),z.lazy(() => ListingWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ScheduledMessageUncheckedCreateNestedManyWithoutMessageTemplateInputSchema: z.ZodType<Prisma.ScheduledMessageUncheckedCreateNestedManyWithoutMessageTemplateInput> = z.object({
  create: z.union([ z.lazy(() => ScheduledMessageCreateWithoutMessageTemplateInputSchema),z.lazy(() => ScheduledMessageCreateWithoutMessageTemplateInputSchema).array(),z.lazy(() => ScheduledMessageUncheckedCreateWithoutMessageTemplateInputSchema),z.lazy(() => ScheduledMessageUncheckedCreateWithoutMessageTemplateInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ScheduledMessageCreateOrConnectWithoutMessageTemplateInputSchema),z.lazy(() => ScheduledMessageCreateOrConnectWithoutMessageTemplateInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ScheduledMessageCreateManyMessageTemplateInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ScheduledMessageWhereUniqueInputSchema),z.lazy(() => ScheduledMessageWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ListingUncheckedCreateNestedManyWithoutMessageTemplatesInputSchema: z.ZodType<Prisma.ListingUncheckedCreateNestedManyWithoutMessageTemplatesInput> = z.object({
  create: z.union([ z.lazy(() => ListingCreateWithoutMessageTemplatesInputSchema),z.lazy(() => ListingCreateWithoutMessageTemplatesInputSchema).array(),z.lazy(() => ListingUncheckedCreateWithoutMessageTemplatesInputSchema),z.lazy(() => ListingUncheckedCreateWithoutMessageTemplatesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ListingCreateOrConnectWithoutMessageTemplatesInputSchema),z.lazy(() => ListingCreateOrConnectWithoutMessageTemplatesInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ListingWhereUniqueInputSchema),z.lazy(() => ListingWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const NullableEnumTriggerFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableEnumTriggerFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => TriggerSchema).optional().nullable()
}).strict();

export const NullableEnumTriggerRangeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableEnumTriggerRangeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => TriggerRangeSchema).optional().nullable()
}).strict();

export const NullableEnumTriggerUnitFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableEnumTriggerUnitFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => TriggerUnitSchema).optional().nullable()
}).strict();

export const OrganizationUpdateOneRequiredWithoutMessageTemplatesNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutMessageTemplatesNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutMessageTemplatesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutMessageTemplatesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutMessageTemplatesInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutMessageTemplatesInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutMessageTemplatesInputSchema),z.lazy(() => OrganizationUpdateWithoutMessageTemplatesInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutMessageTemplatesInputSchema) ]).optional(),
}).strict();

export const ScheduledMessageUpdateManyWithoutMessageTemplateNestedInputSchema: z.ZodType<Prisma.ScheduledMessageUpdateManyWithoutMessageTemplateNestedInput> = z.object({
  create: z.union([ z.lazy(() => ScheduledMessageCreateWithoutMessageTemplateInputSchema),z.lazy(() => ScheduledMessageCreateWithoutMessageTemplateInputSchema).array(),z.lazy(() => ScheduledMessageUncheckedCreateWithoutMessageTemplateInputSchema),z.lazy(() => ScheduledMessageUncheckedCreateWithoutMessageTemplateInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ScheduledMessageCreateOrConnectWithoutMessageTemplateInputSchema),z.lazy(() => ScheduledMessageCreateOrConnectWithoutMessageTemplateInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ScheduledMessageUpsertWithWhereUniqueWithoutMessageTemplateInputSchema),z.lazy(() => ScheduledMessageUpsertWithWhereUniqueWithoutMessageTemplateInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ScheduledMessageCreateManyMessageTemplateInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ScheduledMessageWhereUniqueInputSchema),z.lazy(() => ScheduledMessageWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ScheduledMessageWhereUniqueInputSchema),z.lazy(() => ScheduledMessageWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ScheduledMessageWhereUniqueInputSchema),z.lazy(() => ScheduledMessageWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ScheduledMessageWhereUniqueInputSchema),z.lazy(() => ScheduledMessageWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ScheduledMessageUpdateWithWhereUniqueWithoutMessageTemplateInputSchema),z.lazy(() => ScheduledMessageUpdateWithWhereUniqueWithoutMessageTemplateInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ScheduledMessageUpdateManyWithWhereWithoutMessageTemplateInputSchema),z.lazy(() => ScheduledMessageUpdateManyWithWhereWithoutMessageTemplateInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ScheduledMessageScalarWhereInputSchema),z.lazy(() => ScheduledMessageScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ListingUpdateManyWithoutMessageTemplatesNestedInputSchema: z.ZodType<Prisma.ListingUpdateManyWithoutMessageTemplatesNestedInput> = z.object({
  create: z.union([ z.lazy(() => ListingCreateWithoutMessageTemplatesInputSchema),z.lazy(() => ListingCreateWithoutMessageTemplatesInputSchema).array(),z.lazy(() => ListingUncheckedCreateWithoutMessageTemplatesInputSchema),z.lazy(() => ListingUncheckedCreateWithoutMessageTemplatesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ListingCreateOrConnectWithoutMessageTemplatesInputSchema),z.lazy(() => ListingCreateOrConnectWithoutMessageTemplatesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ListingUpsertWithWhereUniqueWithoutMessageTemplatesInputSchema),z.lazy(() => ListingUpsertWithWhereUniqueWithoutMessageTemplatesInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => ListingWhereUniqueInputSchema),z.lazy(() => ListingWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ListingWhereUniqueInputSchema),z.lazy(() => ListingWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ListingWhereUniqueInputSchema),z.lazy(() => ListingWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ListingWhereUniqueInputSchema),z.lazy(() => ListingWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ListingUpdateWithWhereUniqueWithoutMessageTemplatesInputSchema),z.lazy(() => ListingUpdateWithWhereUniqueWithoutMessageTemplatesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ListingUpdateManyWithWhereWithoutMessageTemplatesInputSchema),z.lazy(() => ListingUpdateManyWithWhereWithoutMessageTemplatesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ListingScalarWhereInputSchema),z.lazy(() => ListingScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ScheduledMessageUncheckedUpdateManyWithoutMessageTemplateNestedInputSchema: z.ZodType<Prisma.ScheduledMessageUncheckedUpdateManyWithoutMessageTemplateNestedInput> = z.object({
  create: z.union([ z.lazy(() => ScheduledMessageCreateWithoutMessageTemplateInputSchema),z.lazy(() => ScheduledMessageCreateWithoutMessageTemplateInputSchema).array(),z.lazy(() => ScheduledMessageUncheckedCreateWithoutMessageTemplateInputSchema),z.lazy(() => ScheduledMessageUncheckedCreateWithoutMessageTemplateInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ScheduledMessageCreateOrConnectWithoutMessageTemplateInputSchema),z.lazy(() => ScheduledMessageCreateOrConnectWithoutMessageTemplateInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ScheduledMessageUpsertWithWhereUniqueWithoutMessageTemplateInputSchema),z.lazy(() => ScheduledMessageUpsertWithWhereUniqueWithoutMessageTemplateInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ScheduledMessageCreateManyMessageTemplateInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ScheduledMessageWhereUniqueInputSchema),z.lazy(() => ScheduledMessageWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ScheduledMessageWhereUniqueInputSchema),z.lazy(() => ScheduledMessageWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ScheduledMessageWhereUniqueInputSchema),z.lazy(() => ScheduledMessageWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ScheduledMessageWhereUniqueInputSchema),z.lazy(() => ScheduledMessageWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ScheduledMessageUpdateWithWhereUniqueWithoutMessageTemplateInputSchema),z.lazy(() => ScheduledMessageUpdateWithWhereUniqueWithoutMessageTemplateInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ScheduledMessageUpdateManyWithWhereWithoutMessageTemplateInputSchema),z.lazy(() => ScheduledMessageUpdateManyWithWhereWithoutMessageTemplateInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ScheduledMessageScalarWhereInputSchema),z.lazy(() => ScheduledMessageScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ListingUncheckedUpdateManyWithoutMessageTemplatesNestedInputSchema: z.ZodType<Prisma.ListingUncheckedUpdateManyWithoutMessageTemplatesNestedInput> = z.object({
  create: z.union([ z.lazy(() => ListingCreateWithoutMessageTemplatesInputSchema),z.lazy(() => ListingCreateWithoutMessageTemplatesInputSchema).array(),z.lazy(() => ListingUncheckedCreateWithoutMessageTemplatesInputSchema),z.lazy(() => ListingUncheckedCreateWithoutMessageTemplatesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ListingCreateOrConnectWithoutMessageTemplatesInputSchema),z.lazy(() => ListingCreateOrConnectWithoutMessageTemplatesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ListingUpsertWithWhereUniqueWithoutMessageTemplatesInputSchema),z.lazy(() => ListingUpsertWithWhereUniqueWithoutMessageTemplatesInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => ListingWhereUniqueInputSchema),z.lazy(() => ListingWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ListingWhereUniqueInputSchema),z.lazy(() => ListingWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ListingWhereUniqueInputSchema),z.lazy(() => ListingWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ListingWhereUniqueInputSchema),z.lazy(() => ListingWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ListingUpdateWithWhereUniqueWithoutMessageTemplatesInputSchema),z.lazy(() => ListingUpdateWithWhereUniqueWithoutMessageTemplatesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ListingUpdateManyWithWhereWithoutMessageTemplatesInputSchema),z.lazy(() => ListingUpdateManyWithWhereWithoutMessageTemplatesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ListingScalarWhereInputSchema),z.lazy(() => ListingScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ReservationCreateNestedOneWithoutScheduledMessagesInputSchema: z.ZodType<Prisma.ReservationCreateNestedOneWithoutScheduledMessagesInput> = z.object({
  create: z.union([ z.lazy(() => ReservationCreateWithoutScheduledMessagesInputSchema),z.lazy(() => ReservationUncheckedCreateWithoutScheduledMessagesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ReservationCreateOrConnectWithoutScheduledMessagesInputSchema).optional(),
  connect: z.lazy(() => ReservationWhereUniqueInputSchema).optional()
}).strict();

export const MessageTemplateCreateNestedOneWithoutScheduledMessagesInputSchema: z.ZodType<Prisma.MessageTemplateCreateNestedOneWithoutScheduledMessagesInput> = z.object({
  create: z.union([ z.lazy(() => MessageTemplateCreateWithoutScheduledMessagesInputSchema),z.lazy(() => MessageTemplateUncheckedCreateWithoutScheduledMessagesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => MessageTemplateCreateOrConnectWithoutScheduledMessagesInputSchema).optional(),
  connect: z.lazy(() => MessageTemplateWhereUniqueInputSchema).optional()
}).strict();

export const EnumScheduledMessageStatusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumScheduledMessageStatusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => ScheduledMessageStatusSchema).optional()
}).strict();

export const ReservationUpdateOneRequiredWithoutScheduledMessagesNestedInputSchema: z.ZodType<Prisma.ReservationUpdateOneRequiredWithoutScheduledMessagesNestedInput> = z.object({
  create: z.union([ z.lazy(() => ReservationCreateWithoutScheduledMessagesInputSchema),z.lazy(() => ReservationUncheckedCreateWithoutScheduledMessagesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ReservationCreateOrConnectWithoutScheduledMessagesInputSchema).optional(),
  upsert: z.lazy(() => ReservationUpsertWithoutScheduledMessagesInputSchema).optional(),
  connect: z.lazy(() => ReservationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ReservationUpdateToOneWithWhereWithoutScheduledMessagesInputSchema),z.lazy(() => ReservationUpdateWithoutScheduledMessagesInputSchema),z.lazy(() => ReservationUncheckedUpdateWithoutScheduledMessagesInputSchema) ]).optional(),
}).strict();

export const MessageTemplateUpdateOneRequiredWithoutScheduledMessagesNestedInputSchema: z.ZodType<Prisma.MessageTemplateUpdateOneRequiredWithoutScheduledMessagesNestedInput> = z.object({
  create: z.union([ z.lazy(() => MessageTemplateCreateWithoutScheduledMessagesInputSchema),z.lazy(() => MessageTemplateUncheckedCreateWithoutScheduledMessagesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => MessageTemplateCreateOrConnectWithoutScheduledMessagesInputSchema).optional(),
  upsert: z.lazy(() => MessageTemplateUpsertWithoutScheduledMessagesInputSchema).optional(),
  connect: z.lazy(() => MessageTemplateWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => MessageTemplateUpdateToOneWithWhereWithoutScheduledMessagesInputSchema),z.lazy(() => MessageTemplateUpdateWithoutScheduledMessagesInputSchema),z.lazy(() => MessageTemplateUncheckedUpdateWithoutScheduledMessagesInputSchema) ]).optional(),
}).strict();

export const ReservationCreateNestedOneWithoutRevenueInputSchema: z.ZodType<Prisma.ReservationCreateNestedOneWithoutRevenueInput> = z.object({
  create: z.union([ z.lazy(() => ReservationCreateWithoutRevenueInputSchema),z.lazy(() => ReservationUncheckedCreateWithoutRevenueInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ReservationCreateOrConnectWithoutRevenueInputSchema).optional(),
  connect: z.lazy(() => ReservationWhereUniqueInputSchema).optional()
}).strict();

export const RevenueFeeCreateNestedManyWithoutRevenueInputSchema: z.ZodType<Prisma.RevenueFeeCreateNestedManyWithoutRevenueInput> = z.object({
  create: z.union([ z.lazy(() => RevenueFeeCreateWithoutRevenueInputSchema),z.lazy(() => RevenueFeeCreateWithoutRevenueInputSchema).array(),z.lazy(() => RevenueFeeUncheckedCreateWithoutRevenueInputSchema),z.lazy(() => RevenueFeeUncheckedCreateWithoutRevenueInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RevenueFeeCreateOrConnectWithoutRevenueInputSchema),z.lazy(() => RevenueFeeCreateOrConnectWithoutRevenueInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RevenueFeeCreateManyRevenueInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RevenueFeeWhereUniqueInputSchema),z.lazy(() => RevenueFeeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OwnerStatementCreateNestedOneWithoutRevenueInputSchema: z.ZodType<Prisma.OwnerStatementCreateNestedOneWithoutRevenueInput> = z.object({
  create: z.union([ z.lazy(() => OwnerStatementCreateWithoutRevenueInputSchema),z.lazy(() => OwnerStatementUncheckedCreateWithoutRevenueInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OwnerStatementCreateOrConnectWithoutRevenueInputSchema).optional(),
  connect: z.lazy(() => OwnerStatementWhereUniqueInputSchema).optional()
}).strict();

export const RevenuePayoutCreateNestedManyWithoutRevenueInputSchema: z.ZodType<Prisma.RevenuePayoutCreateNestedManyWithoutRevenueInput> = z.object({
  create: z.union([ z.lazy(() => RevenuePayoutCreateWithoutRevenueInputSchema),z.lazy(() => RevenuePayoutCreateWithoutRevenueInputSchema).array(),z.lazy(() => RevenuePayoutUncheckedCreateWithoutRevenueInputSchema),z.lazy(() => RevenuePayoutUncheckedCreateWithoutRevenueInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RevenuePayoutCreateOrConnectWithoutRevenueInputSchema),z.lazy(() => RevenuePayoutCreateOrConnectWithoutRevenueInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RevenuePayoutCreateManyRevenueInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RevenuePayoutWhereUniqueInputSchema),z.lazy(() => RevenuePayoutWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RevenueFeeUncheckedCreateNestedManyWithoutRevenueInputSchema: z.ZodType<Prisma.RevenueFeeUncheckedCreateNestedManyWithoutRevenueInput> = z.object({
  create: z.union([ z.lazy(() => RevenueFeeCreateWithoutRevenueInputSchema),z.lazy(() => RevenueFeeCreateWithoutRevenueInputSchema).array(),z.lazy(() => RevenueFeeUncheckedCreateWithoutRevenueInputSchema),z.lazy(() => RevenueFeeUncheckedCreateWithoutRevenueInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RevenueFeeCreateOrConnectWithoutRevenueInputSchema),z.lazy(() => RevenueFeeCreateOrConnectWithoutRevenueInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RevenueFeeCreateManyRevenueInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RevenueFeeWhereUniqueInputSchema),z.lazy(() => RevenueFeeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RevenuePayoutUncheckedCreateNestedManyWithoutRevenueInputSchema: z.ZodType<Prisma.RevenuePayoutUncheckedCreateNestedManyWithoutRevenueInput> = z.object({
  create: z.union([ z.lazy(() => RevenuePayoutCreateWithoutRevenueInputSchema),z.lazy(() => RevenuePayoutCreateWithoutRevenueInputSchema).array(),z.lazy(() => RevenuePayoutUncheckedCreateWithoutRevenueInputSchema),z.lazy(() => RevenuePayoutUncheckedCreateWithoutRevenueInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RevenuePayoutCreateOrConnectWithoutRevenueInputSchema),z.lazy(() => RevenuePayoutCreateOrConnectWithoutRevenueInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RevenuePayoutCreateManyRevenueInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RevenuePayoutWhereUniqueInputSchema),z.lazy(() => RevenuePayoutWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EnumRevenuePayoutStatusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumRevenuePayoutStatusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => RevenuePayoutStatusSchema).optional()
}).strict();

export const ReservationUpdateOneRequiredWithoutRevenueNestedInputSchema: z.ZodType<Prisma.ReservationUpdateOneRequiredWithoutRevenueNestedInput> = z.object({
  create: z.union([ z.lazy(() => ReservationCreateWithoutRevenueInputSchema),z.lazy(() => ReservationUncheckedCreateWithoutRevenueInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ReservationCreateOrConnectWithoutRevenueInputSchema).optional(),
  upsert: z.lazy(() => ReservationUpsertWithoutRevenueInputSchema).optional(),
  connect: z.lazy(() => ReservationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ReservationUpdateToOneWithWhereWithoutRevenueInputSchema),z.lazy(() => ReservationUpdateWithoutRevenueInputSchema),z.lazy(() => ReservationUncheckedUpdateWithoutRevenueInputSchema) ]).optional(),
}).strict();

export const RevenueFeeUpdateManyWithoutRevenueNestedInputSchema: z.ZodType<Prisma.RevenueFeeUpdateManyWithoutRevenueNestedInput> = z.object({
  create: z.union([ z.lazy(() => RevenueFeeCreateWithoutRevenueInputSchema),z.lazy(() => RevenueFeeCreateWithoutRevenueInputSchema).array(),z.lazy(() => RevenueFeeUncheckedCreateWithoutRevenueInputSchema),z.lazy(() => RevenueFeeUncheckedCreateWithoutRevenueInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RevenueFeeCreateOrConnectWithoutRevenueInputSchema),z.lazy(() => RevenueFeeCreateOrConnectWithoutRevenueInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RevenueFeeUpsertWithWhereUniqueWithoutRevenueInputSchema),z.lazy(() => RevenueFeeUpsertWithWhereUniqueWithoutRevenueInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RevenueFeeCreateManyRevenueInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RevenueFeeWhereUniqueInputSchema),z.lazy(() => RevenueFeeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RevenueFeeWhereUniqueInputSchema),z.lazy(() => RevenueFeeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RevenueFeeWhereUniqueInputSchema),z.lazy(() => RevenueFeeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RevenueFeeWhereUniqueInputSchema),z.lazy(() => RevenueFeeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RevenueFeeUpdateWithWhereUniqueWithoutRevenueInputSchema),z.lazy(() => RevenueFeeUpdateWithWhereUniqueWithoutRevenueInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RevenueFeeUpdateManyWithWhereWithoutRevenueInputSchema),z.lazy(() => RevenueFeeUpdateManyWithWhereWithoutRevenueInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RevenueFeeScalarWhereInputSchema),z.lazy(() => RevenueFeeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OwnerStatementUpdateOneWithoutRevenueNestedInputSchema: z.ZodType<Prisma.OwnerStatementUpdateOneWithoutRevenueNestedInput> = z.object({
  create: z.union([ z.lazy(() => OwnerStatementCreateWithoutRevenueInputSchema),z.lazy(() => OwnerStatementUncheckedCreateWithoutRevenueInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OwnerStatementCreateOrConnectWithoutRevenueInputSchema).optional(),
  upsert: z.lazy(() => OwnerStatementUpsertWithoutRevenueInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => OwnerStatementWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => OwnerStatementWhereInputSchema) ]).optional(),
  connect: z.lazy(() => OwnerStatementWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OwnerStatementUpdateToOneWithWhereWithoutRevenueInputSchema),z.lazy(() => OwnerStatementUpdateWithoutRevenueInputSchema),z.lazy(() => OwnerStatementUncheckedUpdateWithoutRevenueInputSchema) ]).optional(),
}).strict();

export const RevenuePayoutUpdateManyWithoutRevenueNestedInputSchema: z.ZodType<Prisma.RevenuePayoutUpdateManyWithoutRevenueNestedInput> = z.object({
  create: z.union([ z.lazy(() => RevenuePayoutCreateWithoutRevenueInputSchema),z.lazy(() => RevenuePayoutCreateWithoutRevenueInputSchema).array(),z.lazy(() => RevenuePayoutUncheckedCreateWithoutRevenueInputSchema),z.lazy(() => RevenuePayoutUncheckedCreateWithoutRevenueInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RevenuePayoutCreateOrConnectWithoutRevenueInputSchema),z.lazy(() => RevenuePayoutCreateOrConnectWithoutRevenueInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RevenuePayoutUpsertWithWhereUniqueWithoutRevenueInputSchema),z.lazy(() => RevenuePayoutUpsertWithWhereUniqueWithoutRevenueInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RevenuePayoutCreateManyRevenueInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RevenuePayoutWhereUniqueInputSchema),z.lazy(() => RevenuePayoutWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RevenuePayoutWhereUniqueInputSchema),z.lazy(() => RevenuePayoutWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RevenuePayoutWhereUniqueInputSchema),z.lazy(() => RevenuePayoutWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RevenuePayoutWhereUniqueInputSchema),z.lazy(() => RevenuePayoutWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RevenuePayoutUpdateWithWhereUniqueWithoutRevenueInputSchema),z.lazy(() => RevenuePayoutUpdateWithWhereUniqueWithoutRevenueInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RevenuePayoutUpdateManyWithWhereWithoutRevenueInputSchema),z.lazy(() => RevenuePayoutUpdateManyWithWhereWithoutRevenueInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RevenuePayoutScalarWhereInputSchema),z.lazy(() => RevenuePayoutScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RevenueFeeUncheckedUpdateManyWithoutRevenueNestedInputSchema: z.ZodType<Prisma.RevenueFeeUncheckedUpdateManyWithoutRevenueNestedInput> = z.object({
  create: z.union([ z.lazy(() => RevenueFeeCreateWithoutRevenueInputSchema),z.lazy(() => RevenueFeeCreateWithoutRevenueInputSchema).array(),z.lazy(() => RevenueFeeUncheckedCreateWithoutRevenueInputSchema),z.lazy(() => RevenueFeeUncheckedCreateWithoutRevenueInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RevenueFeeCreateOrConnectWithoutRevenueInputSchema),z.lazy(() => RevenueFeeCreateOrConnectWithoutRevenueInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RevenueFeeUpsertWithWhereUniqueWithoutRevenueInputSchema),z.lazy(() => RevenueFeeUpsertWithWhereUniqueWithoutRevenueInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RevenueFeeCreateManyRevenueInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RevenueFeeWhereUniqueInputSchema),z.lazy(() => RevenueFeeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RevenueFeeWhereUniqueInputSchema),z.lazy(() => RevenueFeeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RevenueFeeWhereUniqueInputSchema),z.lazy(() => RevenueFeeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RevenueFeeWhereUniqueInputSchema),z.lazy(() => RevenueFeeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RevenueFeeUpdateWithWhereUniqueWithoutRevenueInputSchema),z.lazy(() => RevenueFeeUpdateWithWhereUniqueWithoutRevenueInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RevenueFeeUpdateManyWithWhereWithoutRevenueInputSchema),z.lazy(() => RevenueFeeUpdateManyWithWhereWithoutRevenueInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RevenueFeeScalarWhereInputSchema),z.lazy(() => RevenueFeeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RevenuePayoutUncheckedUpdateManyWithoutRevenueNestedInputSchema: z.ZodType<Prisma.RevenuePayoutUncheckedUpdateManyWithoutRevenueNestedInput> = z.object({
  create: z.union([ z.lazy(() => RevenuePayoutCreateWithoutRevenueInputSchema),z.lazy(() => RevenuePayoutCreateWithoutRevenueInputSchema).array(),z.lazy(() => RevenuePayoutUncheckedCreateWithoutRevenueInputSchema),z.lazy(() => RevenuePayoutUncheckedCreateWithoutRevenueInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RevenuePayoutCreateOrConnectWithoutRevenueInputSchema),z.lazy(() => RevenuePayoutCreateOrConnectWithoutRevenueInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RevenuePayoutUpsertWithWhereUniqueWithoutRevenueInputSchema),z.lazy(() => RevenuePayoutUpsertWithWhereUniqueWithoutRevenueInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RevenuePayoutCreateManyRevenueInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RevenuePayoutWhereUniqueInputSchema),z.lazy(() => RevenuePayoutWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RevenuePayoutWhereUniqueInputSchema),z.lazy(() => RevenuePayoutWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RevenuePayoutWhereUniqueInputSchema),z.lazy(() => RevenuePayoutWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RevenuePayoutWhereUniqueInputSchema),z.lazy(() => RevenuePayoutWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RevenuePayoutUpdateWithWhereUniqueWithoutRevenueInputSchema),z.lazy(() => RevenuePayoutUpdateWithWhereUniqueWithoutRevenueInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RevenuePayoutUpdateManyWithWhereWithoutRevenueInputSchema),z.lazy(() => RevenuePayoutUpdateManyWithWhereWithoutRevenueInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RevenuePayoutScalarWhereInputSchema),z.lazy(() => RevenuePayoutScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RevenueFeeCreateNestedOneWithoutDeductionsInputSchema: z.ZodType<Prisma.RevenueFeeCreateNestedOneWithoutDeductionsInput> = z.object({
  create: z.union([ z.lazy(() => RevenueFeeCreateWithoutDeductionsInputSchema),z.lazy(() => RevenueFeeUncheckedCreateWithoutDeductionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RevenueFeeCreateOrConnectWithoutDeductionsInputSchema).optional(),
  connect: z.lazy(() => RevenueFeeWhereUniqueInputSchema).optional()
}).strict();

export const EnumRevenueDeductionTypeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumRevenueDeductionTypeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => RevenueDeductionTypeSchema).optional()
}).strict();

export const RevenueFeeUpdateOneRequiredWithoutDeductionsNestedInputSchema: z.ZodType<Prisma.RevenueFeeUpdateOneRequiredWithoutDeductionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => RevenueFeeCreateWithoutDeductionsInputSchema),z.lazy(() => RevenueFeeUncheckedCreateWithoutDeductionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RevenueFeeCreateOrConnectWithoutDeductionsInputSchema).optional(),
  upsert: z.lazy(() => RevenueFeeUpsertWithoutDeductionsInputSchema).optional(),
  connect: z.lazy(() => RevenueFeeWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RevenueFeeUpdateToOneWithWhereWithoutDeductionsInputSchema),z.lazy(() => RevenueFeeUpdateWithoutDeductionsInputSchema),z.lazy(() => RevenueFeeUncheckedUpdateWithoutDeductionsInputSchema) ]).optional(),
}).strict();

export const RevenueCreateNestedOneWithoutFeesInputSchema: z.ZodType<Prisma.RevenueCreateNestedOneWithoutFeesInput> = z.object({
  create: z.union([ z.lazy(() => RevenueCreateWithoutFeesInputSchema),z.lazy(() => RevenueUncheckedCreateWithoutFeesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RevenueCreateOrConnectWithoutFeesInputSchema).optional(),
  connect: z.lazy(() => RevenueWhereUniqueInputSchema).optional()
}).strict();

export const RevenueTaxCreateNestedManyWithoutRevenueFeeInputSchema: z.ZodType<Prisma.RevenueTaxCreateNestedManyWithoutRevenueFeeInput> = z.object({
  create: z.union([ z.lazy(() => RevenueTaxCreateWithoutRevenueFeeInputSchema),z.lazy(() => RevenueTaxCreateWithoutRevenueFeeInputSchema).array(),z.lazy(() => RevenueTaxUncheckedCreateWithoutRevenueFeeInputSchema),z.lazy(() => RevenueTaxUncheckedCreateWithoutRevenueFeeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RevenueTaxCreateOrConnectWithoutRevenueFeeInputSchema),z.lazy(() => RevenueTaxCreateOrConnectWithoutRevenueFeeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RevenueTaxCreateManyRevenueFeeInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RevenueTaxWhereUniqueInputSchema),z.lazy(() => RevenueTaxWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RevenueTaxUncheckedCreateNestedManyWithoutRevenueFeeInputSchema: z.ZodType<Prisma.RevenueTaxUncheckedCreateNestedManyWithoutRevenueFeeInput> = z.object({
  create: z.union([ z.lazy(() => RevenueTaxCreateWithoutRevenueFeeInputSchema),z.lazy(() => RevenueTaxCreateWithoutRevenueFeeInputSchema).array(),z.lazy(() => RevenueTaxUncheckedCreateWithoutRevenueFeeInputSchema),z.lazy(() => RevenueTaxUncheckedCreateWithoutRevenueFeeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RevenueTaxCreateOrConnectWithoutRevenueFeeInputSchema),z.lazy(() => RevenueTaxCreateOrConnectWithoutRevenueFeeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RevenueTaxCreateManyRevenueFeeInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RevenueTaxWhereUniqueInputSchema),z.lazy(() => RevenueTaxWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EnumRevenueEntryTypeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumRevenueEntryTypeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => RevenueEntryTypeSchema).optional()
}).strict();

export const RevenueUpdateOneRequiredWithoutFeesNestedInputSchema: z.ZodType<Prisma.RevenueUpdateOneRequiredWithoutFeesNestedInput> = z.object({
  create: z.union([ z.lazy(() => RevenueCreateWithoutFeesInputSchema),z.lazy(() => RevenueUncheckedCreateWithoutFeesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RevenueCreateOrConnectWithoutFeesInputSchema).optional(),
  upsert: z.lazy(() => RevenueUpsertWithoutFeesInputSchema).optional(),
  connect: z.lazy(() => RevenueWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RevenueUpdateToOneWithWhereWithoutFeesInputSchema),z.lazy(() => RevenueUpdateWithoutFeesInputSchema),z.lazy(() => RevenueUncheckedUpdateWithoutFeesInputSchema) ]).optional(),
}).strict();

export const RevenueTaxUpdateManyWithoutRevenueFeeNestedInputSchema: z.ZodType<Prisma.RevenueTaxUpdateManyWithoutRevenueFeeNestedInput> = z.object({
  create: z.union([ z.lazy(() => RevenueTaxCreateWithoutRevenueFeeInputSchema),z.lazy(() => RevenueTaxCreateWithoutRevenueFeeInputSchema).array(),z.lazy(() => RevenueTaxUncheckedCreateWithoutRevenueFeeInputSchema),z.lazy(() => RevenueTaxUncheckedCreateWithoutRevenueFeeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RevenueTaxCreateOrConnectWithoutRevenueFeeInputSchema),z.lazy(() => RevenueTaxCreateOrConnectWithoutRevenueFeeInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RevenueTaxUpsertWithWhereUniqueWithoutRevenueFeeInputSchema),z.lazy(() => RevenueTaxUpsertWithWhereUniqueWithoutRevenueFeeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RevenueTaxCreateManyRevenueFeeInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RevenueTaxWhereUniqueInputSchema),z.lazy(() => RevenueTaxWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RevenueTaxWhereUniqueInputSchema),z.lazy(() => RevenueTaxWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RevenueTaxWhereUniqueInputSchema),z.lazy(() => RevenueTaxWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RevenueTaxWhereUniqueInputSchema),z.lazy(() => RevenueTaxWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RevenueTaxUpdateWithWhereUniqueWithoutRevenueFeeInputSchema),z.lazy(() => RevenueTaxUpdateWithWhereUniqueWithoutRevenueFeeInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RevenueTaxUpdateManyWithWhereWithoutRevenueFeeInputSchema),z.lazy(() => RevenueTaxUpdateManyWithWhereWithoutRevenueFeeInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RevenueTaxScalarWhereInputSchema),z.lazy(() => RevenueTaxScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RevenueTaxUncheckedUpdateManyWithoutRevenueFeeNestedInputSchema: z.ZodType<Prisma.RevenueTaxUncheckedUpdateManyWithoutRevenueFeeNestedInput> = z.object({
  create: z.union([ z.lazy(() => RevenueTaxCreateWithoutRevenueFeeInputSchema),z.lazy(() => RevenueTaxCreateWithoutRevenueFeeInputSchema).array(),z.lazy(() => RevenueTaxUncheckedCreateWithoutRevenueFeeInputSchema),z.lazy(() => RevenueTaxUncheckedCreateWithoutRevenueFeeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RevenueTaxCreateOrConnectWithoutRevenueFeeInputSchema),z.lazy(() => RevenueTaxCreateOrConnectWithoutRevenueFeeInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RevenueTaxUpsertWithWhereUniqueWithoutRevenueFeeInputSchema),z.lazy(() => RevenueTaxUpsertWithWhereUniqueWithoutRevenueFeeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RevenueTaxCreateManyRevenueFeeInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RevenueTaxWhereUniqueInputSchema),z.lazy(() => RevenueTaxWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RevenueTaxWhereUniqueInputSchema),z.lazy(() => RevenueTaxWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RevenueTaxWhereUniqueInputSchema),z.lazy(() => RevenueTaxWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RevenueTaxWhereUniqueInputSchema),z.lazy(() => RevenueTaxWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RevenueTaxUpdateWithWhereUniqueWithoutRevenueFeeInputSchema),z.lazy(() => RevenueTaxUpdateWithWhereUniqueWithoutRevenueFeeInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RevenueTaxUpdateManyWithWhereWithoutRevenueFeeInputSchema),z.lazy(() => RevenueTaxUpdateManyWithWhereWithoutRevenueFeeInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RevenueTaxScalarWhereInputSchema),z.lazy(() => RevenueTaxScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutExpensesInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutExpensesInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutExpensesInputSchema),z.lazy(() => UserUncheckedCreateWithoutExpensesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutExpensesInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const ListingExpenseCreateNestedManyWithoutExpenseInputSchema: z.ZodType<Prisma.ListingExpenseCreateNestedManyWithoutExpenseInput> = z.object({
  create: z.union([ z.lazy(() => ListingExpenseCreateWithoutExpenseInputSchema),z.lazy(() => ListingExpenseCreateWithoutExpenseInputSchema).array(),z.lazy(() => ListingExpenseUncheckedCreateWithoutExpenseInputSchema),z.lazy(() => ListingExpenseUncheckedCreateWithoutExpenseInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ListingExpenseCreateOrConnectWithoutExpenseInputSchema),z.lazy(() => ListingExpenseCreateOrConnectWithoutExpenseInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ListingExpenseCreateManyExpenseInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ListingExpenseWhereUniqueInputSchema),z.lazy(() => ListingExpenseWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PlaidTransactionCreateNestedOneWithoutExpenseInputSchema: z.ZodType<Prisma.PlaidTransactionCreateNestedOneWithoutExpenseInput> = z.object({
  create: z.union([ z.lazy(() => PlaidTransactionCreateWithoutExpenseInputSchema),z.lazy(() => PlaidTransactionUncheckedCreateWithoutExpenseInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PlaidTransactionCreateOrConnectWithoutExpenseInputSchema).optional(),
  connect: z.lazy(() => PlaidTransactionWhereUniqueInputSchema).optional()
}).strict();

export const ListingExpenseUncheckedCreateNestedManyWithoutExpenseInputSchema: z.ZodType<Prisma.ListingExpenseUncheckedCreateNestedManyWithoutExpenseInput> = z.object({
  create: z.union([ z.lazy(() => ListingExpenseCreateWithoutExpenseInputSchema),z.lazy(() => ListingExpenseCreateWithoutExpenseInputSchema).array(),z.lazy(() => ListingExpenseUncheckedCreateWithoutExpenseInputSchema),z.lazy(() => ListingExpenseUncheckedCreateWithoutExpenseInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ListingExpenseCreateOrConnectWithoutExpenseInputSchema),z.lazy(() => ListingExpenseCreateOrConnectWithoutExpenseInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ListingExpenseCreateManyExpenseInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ListingExpenseWhereUniqueInputSchema),z.lazy(() => ListingExpenseWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserUpdateOneWithoutExpensesNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutExpensesNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutExpensesInputSchema),z.lazy(() => UserUncheckedCreateWithoutExpensesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutExpensesInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutExpensesInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutExpensesInputSchema),z.lazy(() => UserUpdateWithoutExpensesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutExpensesInputSchema) ]).optional(),
}).strict();

export const ListingExpenseUpdateManyWithoutExpenseNestedInputSchema: z.ZodType<Prisma.ListingExpenseUpdateManyWithoutExpenseNestedInput> = z.object({
  create: z.union([ z.lazy(() => ListingExpenseCreateWithoutExpenseInputSchema),z.lazy(() => ListingExpenseCreateWithoutExpenseInputSchema).array(),z.lazy(() => ListingExpenseUncheckedCreateWithoutExpenseInputSchema),z.lazy(() => ListingExpenseUncheckedCreateWithoutExpenseInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ListingExpenseCreateOrConnectWithoutExpenseInputSchema),z.lazy(() => ListingExpenseCreateOrConnectWithoutExpenseInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ListingExpenseUpsertWithWhereUniqueWithoutExpenseInputSchema),z.lazy(() => ListingExpenseUpsertWithWhereUniqueWithoutExpenseInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ListingExpenseCreateManyExpenseInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ListingExpenseWhereUniqueInputSchema),z.lazy(() => ListingExpenseWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ListingExpenseWhereUniqueInputSchema),z.lazy(() => ListingExpenseWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ListingExpenseWhereUniqueInputSchema),z.lazy(() => ListingExpenseWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ListingExpenseWhereUniqueInputSchema),z.lazy(() => ListingExpenseWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ListingExpenseUpdateWithWhereUniqueWithoutExpenseInputSchema),z.lazy(() => ListingExpenseUpdateWithWhereUniqueWithoutExpenseInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ListingExpenseUpdateManyWithWhereWithoutExpenseInputSchema),z.lazy(() => ListingExpenseUpdateManyWithWhereWithoutExpenseInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ListingExpenseScalarWhereInputSchema),z.lazy(() => ListingExpenseScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PlaidTransactionUpdateOneWithoutExpenseNestedInputSchema: z.ZodType<Prisma.PlaidTransactionUpdateOneWithoutExpenseNestedInput> = z.object({
  create: z.union([ z.lazy(() => PlaidTransactionCreateWithoutExpenseInputSchema),z.lazy(() => PlaidTransactionUncheckedCreateWithoutExpenseInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PlaidTransactionCreateOrConnectWithoutExpenseInputSchema).optional(),
  upsert: z.lazy(() => PlaidTransactionUpsertWithoutExpenseInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => PlaidTransactionWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => PlaidTransactionWhereInputSchema) ]).optional(),
  connect: z.lazy(() => PlaidTransactionWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => PlaidTransactionUpdateToOneWithWhereWithoutExpenseInputSchema),z.lazy(() => PlaidTransactionUpdateWithoutExpenseInputSchema),z.lazy(() => PlaidTransactionUncheckedUpdateWithoutExpenseInputSchema) ]).optional(),
}).strict();

export const ListingExpenseUncheckedUpdateManyWithoutExpenseNestedInputSchema: z.ZodType<Prisma.ListingExpenseUncheckedUpdateManyWithoutExpenseNestedInput> = z.object({
  create: z.union([ z.lazy(() => ListingExpenseCreateWithoutExpenseInputSchema),z.lazy(() => ListingExpenseCreateWithoutExpenseInputSchema).array(),z.lazy(() => ListingExpenseUncheckedCreateWithoutExpenseInputSchema),z.lazy(() => ListingExpenseUncheckedCreateWithoutExpenseInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ListingExpenseCreateOrConnectWithoutExpenseInputSchema),z.lazy(() => ListingExpenseCreateOrConnectWithoutExpenseInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ListingExpenseUpsertWithWhereUniqueWithoutExpenseInputSchema),z.lazy(() => ListingExpenseUpsertWithWhereUniqueWithoutExpenseInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ListingExpenseCreateManyExpenseInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ListingExpenseWhereUniqueInputSchema),z.lazy(() => ListingExpenseWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ListingExpenseWhereUniqueInputSchema),z.lazy(() => ListingExpenseWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ListingExpenseWhereUniqueInputSchema),z.lazy(() => ListingExpenseWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ListingExpenseWhereUniqueInputSchema),z.lazy(() => ListingExpenseWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ListingExpenseUpdateWithWhereUniqueWithoutExpenseInputSchema),z.lazy(() => ListingExpenseUpdateWithWhereUniqueWithoutExpenseInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ListingExpenseUpdateManyWithWhereWithoutExpenseInputSchema),z.lazy(() => ListingExpenseUpdateManyWithWhereWithoutExpenseInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ListingExpenseScalarWhereInputSchema),z.lazy(() => ListingExpenseScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ExpenseCreateNestedOneWithoutListingExpensesInputSchema: z.ZodType<Prisma.ExpenseCreateNestedOneWithoutListingExpensesInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseCreateWithoutListingExpensesInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutListingExpensesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ExpenseCreateOrConnectWithoutListingExpensesInputSchema).optional(),
  connect: z.lazy(() => ExpenseWhereUniqueInputSchema).optional()
}).strict();

export const ListingCreateNestedOneWithoutListingExpensesInputSchema: z.ZodType<Prisma.ListingCreateNestedOneWithoutListingExpensesInput> = z.object({
  create: z.union([ z.lazy(() => ListingCreateWithoutListingExpensesInputSchema),z.lazy(() => ListingUncheckedCreateWithoutListingExpensesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ListingCreateOrConnectWithoutListingExpensesInputSchema).optional(),
  connect: z.lazy(() => ListingWhereUniqueInputSchema).optional()
}).strict();

export const OwnerStatementCreateNestedOneWithoutListingExpensesInputSchema: z.ZodType<Prisma.OwnerStatementCreateNestedOneWithoutListingExpensesInput> = z.object({
  create: z.union([ z.lazy(() => OwnerStatementCreateWithoutListingExpensesInputSchema),z.lazy(() => OwnerStatementUncheckedCreateWithoutListingExpensesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OwnerStatementCreateOrConnectWithoutListingExpensesInputSchema).optional(),
  connect: z.lazy(() => OwnerStatementWhereUniqueInputSchema).optional()
}).strict();

export const ExpenseUpdateOneRequiredWithoutListingExpensesNestedInputSchema: z.ZodType<Prisma.ExpenseUpdateOneRequiredWithoutListingExpensesNestedInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseCreateWithoutListingExpensesInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutListingExpensesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ExpenseCreateOrConnectWithoutListingExpensesInputSchema).optional(),
  upsert: z.lazy(() => ExpenseUpsertWithoutListingExpensesInputSchema).optional(),
  connect: z.lazy(() => ExpenseWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ExpenseUpdateToOneWithWhereWithoutListingExpensesInputSchema),z.lazy(() => ExpenseUpdateWithoutListingExpensesInputSchema),z.lazy(() => ExpenseUncheckedUpdateWithoutListingExpensesInputSchema) ]).optional(),
}).strict();

export const ListingUpdateOneRequiredWithoutListingExpensesNestedInputSchema: z.ZodType<Prisma.ListingUpdateOneRequiredWithoutListingExpensesNestedInput> = z.object({
  create: z.union([ z.lazy(() => ListingCreateWithoutListingExpensesInputSchema),z.lazy(() => ListingUncheckedCreateWithoutListingExpensesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ListingCreateOrConnectWithoutListingExpensesInputSchema).optional(),
  upsert: z.lazy(() => ListingUpsertWithoutListingExpensesInputSchema).optional(),
  connect: z.lazy(() => ListingWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ListingUpdateToOneWithWhereWithoutListingExpensesInputSchema),z.lazy(() => ListingUpdateWithoutListingExpensesInputSchema),z.lazy(() => ListingUncheckedUpdateWithoutListingExpensesInputSchema) ]).optional(),
}).strict();

export const OwnerStatementUpdateOneWithoutListingExpensesNestedInputSchema: z.ZodType<Prisma.OwnerStatementUpdateOneWithoutListingExpensesNestedInput> = z.object({
  create: z.union([ z.lazy(() => OwnerStatementCreateWithoutListingExpensesInputSchema),z.lazy(() => OwnerStatementUncheckedCreateWithoutListingExpensesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OwnerStatementCreateOrConnectWithoutListingExpensesInputSchema).optional(),
  upsert: z.lazy(() => OwnerStatementUpsertWithoutListingExpensesInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => OwnerStatementWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => OwnerStatementWhereInputSchema) ]).optional(),
  connect: z.lazy(() => OwnerStatementWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OwnerStatementUpdateToOneWithWhereWithoutListingExpensesInputSchema),z.lazy(() => OwnerStatementUpdateWithoutListingExpensesInputSchema),z.lazy(() => OwnerStatementUncheckedUpdateWithoutListingExpensesInputSchema) ]).optional(),
}).strict();

export const ListingCreateNestedOneWithoutOwnerStatementsInputSchema: z.ZodType<Prisma.ListingCreateNestedOneWithoutOwnerStatementsInput> = z.object({
  create: z.union([ z.lazy(() => ListingCreateWithoutOwnerStatementsInputSchema),z.lazy(() => ListingUncheckedCreateWithoutOwnerStatementsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ListingCreateOrConnectWithoutOwnerStatementsInputSchema).optional(),
  connect: z.lazy(() => ListingWhereUniqueInputSchema).optional()
}).strict();

export const ListingExpenseCreateNestedManyWithoutOwnerStatementInputSchema: z.ZodType<Prisma.ListingExpenseCreateNestedManyWithoutOwnerStatementInput> = z.object({
  create: z.union([ z.lazy(() => ListingExpenseCreateWithoutOwnerStatementInputSchema),z.lazy(() => ListingExpenseCreateWithoutOwnerStatementInputSchema).array(),z.lazy(() => ListingExpenseUncheckedCreateWithoutOwnerStatementInputSchema),z.lazy(() => ListingExpenseUncheckedCreateWithoutOwnerStatementInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ListingExpenseCreateOrConnectWithoutOwnerStatementInputSchema),z.lazy(() => ListingExpenseCreateOrConnectWithoutOwnerStatementInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ListingExpenseCreateManyOwnerStatementInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ListingExpenseWhereUniqueInputSchema),z.lazy(() => ListingExpenseWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RevenueCreateNestedManyWithoutOwnerStatementInputSchema: z.ZodType<Prisma.RevenueCreateNestedManyWithoutOwnerStatementInput> = z.object({
  create: z.union([ z.lazy(() => RevenueCreateWithoutOwnerStatementInputSchema),z.lazy(() => RevenueCreateWithoutOwnerStatementInputSchema).array(),z.lazy(() => RevenueUncheckedCreateWithoutOwnerStatementInputSchema),z.lazy(() => RevenueUncheckedCreateWithoutOwnerStatementInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RevenueCreateOrConnectWithoutOwnerStatementInputSchema),z.lazy(() => RevenueCreateOrConnectWithoutOwnerStatementInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RevenueCreateManyOwnerStatementInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RevenueWhereUniqueInputSchema),z.lazy(() => RevenueWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ListingExpenseUncheckedCreateNestedManyWithoutOwnerStatementInputSchema: z.ZodType<Prisma.ListingExpenseUncheckedCreateNestedManyWithoutOwnerStatementInput> = z.object({
  create: z.union([ z.lazy(() => ListingExpenseCreateWithoutOwnerStatementInputSchema),z.lazy(() => ListingExpenseCreateWithoutOwnerStatementInputSchema).array(),z.lazy(() => ListingExpenseUncheckedCreateWithoutOwnerStatementInputSchema),z.lazy(() => ListingExpenseUncheckedCreateWithoutOwnerStatementInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ListingExpenseCreateOrConnectWithoutOwnerStatementInputSchema),z.lazy(() => ListingExpenseCreateOrConnectWithoutOwnerStatementInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ListingExpenseCreateManyOwnerStatementInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ListingExpenseWhereUniqueInputSchema),z.lazy(() => ListingExpenseWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RevenueUncheckedCreateNestedManyWithoutOwnerStatementInputSchema: z.ZodType<Prisma.RevenueUncheckedCreateNestedManyWithoutOwnerStatementInput> = z.object({
  create: z.union([ z.lazy(() => RevenueCreateWithoutOwnerStatementInputSchema),z.lazy(() => RevenueCreateWithoutOwnerStatementInputSchema).array(),z.lazy(() => RevenueUncheckedCreateWithoutOwnerStatementInputSchema),z.lazy(() => RevenueUncheckedCreateWithoutOwnerStatementInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RevenueCreateOrConnectWithoutOwnerStatementInputSchema),z.lazy(() => RevenueCreateOrConnectWithoutOwnerStatementInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RevenueCreateManyOwnerStatementInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RevenueWhereUniqueInputSchema),z.lazy(() => RevenueWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ListingUpdateOneRequiredWithoutOwnerStatementsNestedInputSchema: z.ZodType<Prisma.ListingUpdateOneRequiredWithoutOwnerStatementsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ListingCreateWithoutOwnerStatementsInputSchema),z.lazy(() => ListingUncheckedCreateWithoutOwnerStatementsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ListingCreateOrConnectWithoutOwnerStatementsInputSchema).optional(),
  upsert: z.lazy(() => ListingUpsertWithoutOwnerStatementsInputSchema).optional(),
  connect: z.lazy(() => ListingWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ListingUpdateToOneWithWhereWithoutOwnerStatementsInputSchema),z.lazy(() => ListingUpdateWithoutOwnerStatementsInputSchema),z.lazy(() => ListingUncheckedUpdateWithoutOwnerStatementsInputSchema) ]).optional(),
}).strict();

export const ListingExpenseUpdateManyWithoutOwnerStatementNestedInputSchema: z.ZodType<Prisma.ListingExpenseUpdateManyWithoutOwnerStatementNestedInput> = z.object({
  create: z.union([ z.lazy(() => ListingExpenseCreateWithoutOwnerStatementInputSchema),z.lazy(() => ListingExpenseCreateWithoutOwnerStatementInputSchema).array(),z.lazy(() => ListingExpenseUncheckedCreateWithoutOwnerStatementInputSchema),z.lazy(() => ListingExpenseUncheckedCreateWithoutOwnerStatementInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ListingExpenseCreateOrConnectWithoutOwnerStatementInputSchema),z.lazy(() => ListingExpenseCreateOrConnectWithoutOwnerStatementInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ListingExpenseUpsertWithWhereUniqueWithoutOwnerStatementInputSchema),z.lazy(() => ListingExpenseUpsertWithWhereUniqueWithoutOwnerStatementInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ListingExpenseCreateManyOwnerStatementInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ListingExpenseWhereUniqueInputSchema),z.lazy(() => ListingExpenseWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ListingExpenseWhereUniqueInputSchema),z.lazy(() => ListingExpenseWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ListingExpenseWhereUniqueInputSchema),z.lazy(() => ListingExpenseWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ListingExpenseWhereUniqueInputSchema),z.lazy(() => ListingExpenseWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ListingExpenseUpdateWithWhereUniqueWithoutOwnerStatementInputSchema),z.lazy(() => ListingExpenseUpdateWithWhereUniqueWithoutOwnerStatementInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ListingExpenseUpdateManyWithWhereWithoutOwnerStatementInputSchema),z.lazy(() => ListingExpenseUpdateManyWithWhereWithoutOwnerStatementInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ListingExpenseScalarWhereInputSchema),z.lazy(() => ListingExpenseScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RevenueUpdateManyWithoutOwnerStatementNestedInputSchema: z.ZodType<Prisma.RevenueUpdateManyWithoutOwnerStatementNestedInput> = z.object({
  create: z.union([ z.lazy(() => RevenueCreateWithoutOwnerStatementInputSchema),z.lazy(() => RevenueCreateWithoutOwnerStatementInputSchema).array(),z.lazy(() => RevenueUncheckedCreateWithoutOwnerStatementInputSchema),z.lazy(() => RevenueUncheckedCreateWithoutOwnerStatementInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RevenueCreateOrConnectWithoutOwnerStatementInputSchema),z.lazy(() => RevenueCreateOrConnectWithoutOwnerStatementInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RevenueUpsertWithWhereUniqueWithoutOwnerStatementInputSchema),z.lazy(() => RevenueUpsertWithWhereUniqueWithoutOwnerStatementInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RevenueCreateManyOwnerStatementInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RevenueWhereUniqueInputSchema),z.lazy(() => RevenueWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RevenueWhereUniqueInputSchema),z.lazy(() => RevenueWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RevenueWhereUniqueInputSchema),z.lazy(() => RevenueWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RevenueWhereUniqueInputSchema),z.lazy(() => RevenueWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RevenueUpdateWithWhereUniqueWithoutOwnerStatementInputSchema),z.lazy(() => RevenueUpdateWithWhereUniqueWithoutOwnerStatementInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RevenueUpdateManyWithWhereWithoutOwnerStatementInputSchema),z.lazy(() => RevenueUpdateManyWithWhereWithoutOwnerStatementInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RevenueScalarWhereInputSchema),z.lazy(() => RevenueScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ListingExpenseUncheckedUpdateManyWithoutOwnerStatementNestedInputSchema: z.ZodType<Prisma.ListingExpenseUncheckedUpdateManyWithoutOwnerStatementNestedInput> = z.object({
  create: z.union([ z.lazy(() => ListingExpenseCreateWithoutOwnerStatementInputSchema),z.lazy(() => ListingExpenseCreateWithoutOwnerStatementInputSchema).array(),z.lazy(() => ListingExpenseUncheckedCreateWithoutOwnerStatementInputSchema),z.lazy(() => ListingExpenseUncheckedCreateWithoutOwnerStatementInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ListingExpenseCreateOrConnectWithoutOwnerStatementInputSchema),z.lazy(() => ListingExpenseCreateOrConnectWithoutOwnerStatementInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ListingExpenseUpsertWithWhereUniqueWithoutOwnerStatementInputSchema),z.lazy(() => ListingExpenseUpsertWithWhereUniqueWithoutOwnerStatementInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ListingExpenseCreateManyOwnerStatementInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ListingExpenseWhereUniqueInputSchema),z.lazy(() => ListingExpenseWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ListingExpenseWhereUniqueInputSchema),z.lazy(() => ListingExpenseWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ListingExpenseWhereUniqueInputSchema),z.lazy(() => ListingExpenseWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ListingExpenseWhereUniqueInputSchema),z.lazy(() => ListingExpenseWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ListingExpenseUpdateWithWhereUniqueWithoutOwnerStatementInputSchema),z.lazy(() => ListingExpenseUpdateWithWhereUniqueWithoutOwnerStatementInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ListingExpenseUpdateManyWithWhereWithoutOwnerStatementInputSchema),z.lazy(() => ListingExpenseUpdateManyWithWhereWithoutOwnerStatementInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ListingExpenseScalarWhereInputSchema),z.lazy(() => ListingExpenseScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RevenueUncheckedUpdateManyWithoutOwnerStatementNestedInputSchema: z.ZodType<Prisma.RevenueUncheckedUpdateManyWithoutOwnerStatementNestedInput> = z.object({
  create: z.union([ z.lazy(() => RevenueCreateWithoutOwnerStatementInputSchema),z.lazy(() => RevenueCreateWithoutOwnerStatementInputSchema).array(),z.lazy(() => RevenueUncheckedCreateWithoutOwnerStatementInputSchema),z.lazy(() => RevenueUncheckedCreateWithoutOwnerStatementInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RevenueCreateOrConnectWithoutOwnerStatementInputSchema),z.lazy(() => RevenueCreateOrConnectWithoutOwnerStatementInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RevenueUpsertWithWhereUniqueWithoutOwnerStatementInputSchema),z.lazy(() => RevenueUpsertWithWhereUniqueWithoutOwnerStatementInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RevenueCreateManyOwnerStatementInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RevenueWhereUniqueInputSchema),z.lazy(() => RevenueWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RevenueWhereUniqueInputSchema),z.lazy(() => RevenueWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RevenueWhereUniqueInputSchema),z.lazy(() => RevenueWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RevenueWhereUniqueInputSchema),z.lazy(() => RevenueWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RevenueUpdateWithWhereUniqueWithoutOwnerStatementInputSchema),z.lazy(() => RevenueUpdateWithWhereUniqueWithoutOwnerStatementInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RevenueUpdateManyWithWhereWithoutOwnerStatementInputSchema),z.lazy(() => RevenueUpdateManyWithWhereWithoutOwnerStatementInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RevenueScalarWhereInputSchema),z.lazy(() => RevenueScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutPlaidItemsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutPlaidItemsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutPlaidItemsInputSchema),z.lazy(() => UserUncheckedCreateWithoutPlaidItemsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutPlaidItemsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const OrganizationCreateNestedOneWithoutPlaidItemsInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutPlaidItemsInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutPlaidItemsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutPlaidItemsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutPlaidItemsInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const PlaidAccountCreateNestedManyWithoutItemInputSchema: z.ZodType<Prisma.PlaidAccountCreateNestedManyWithoutItemInput> = z.object({
  create: z.union([ z.lazy(() => PlaidAccountCreateWithoutItemInputSchema),z.lazy(() => PlaidAccountCreateWithoutItemInputSchema).array(),z.lazy(() => PlaidAccountUncheckedCreateWithoutItemInputSchema),z.lazy(() => PlaidAccountUncheckedCreateWithoutItemInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PlaidAccountCreateOrConnectWithoutItemInputSchema),z.lazy(() => PlaidAccountCreateOrConnectWithoutItemInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PlaidAccountCreateManyItemInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PlaidAccountWhereUniqueInputSchema),z.lazy(() => PlaidAccountWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PlaidAccountUncheckedCreateNestedManyWithoutItemInputSchema: z.ZodType<Prisma.PlaidAccountUncheckedCreateNestedManyWithoutItemInput> = z.object({
  create: z.union([ z.lazy(() => PlaidAccountCreateWithoutItemInputSchema),z.lazy(() => PlaidAccountCreateWithoutItemInputSchema).array(),z.lazy(() => PlaidAccountUncheckedCreateWithoutItemInputSchema),z.lazy(() => PlaidAccountUncheckedCreateWithoutItemInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PlaidAccountCreateOrConnectWithoutItemInputSchema),z.lazy(() => PlaidAccountCreateOrConnectWithoutItemInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PlaidAccountCreateManyItemInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PlaidAccountWhereUniqueInputSchema),z.lazy(() => PlaidAccountWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutPlaidItemsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutPlaidItemsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutPlaidItemsInputSchema),z.lazy(() => UserUncheckedCreateWithoutPlaidItemsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutPlaidItemsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutPlaidItemsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutPlaidItemsInputSchema),z.lazy(() => UserUpdateWithoutPlaidItemsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutPlaidItemsInputSchema) ]).optional(),
}).strict();

export const OrganizationUpdateOneRequiredWithoutPlaidItemsNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutPlaidItemsNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutPlaidItemsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutPlaidItemsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutPlaidItemsInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutPlaidItemsInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutPlaidItemsInputSchema),z.lazy(() => OrganizationUpdateWithoutPlaidItemsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutPlaidItemsInputSchema) ]).optional(),
}).strict();

export const PlaidAccountUpdateManyWithoutItemNestedInputSchema: z.ZodType<Prisma.PlaidAccountUpdateManyWithoutItemNestedInput> = z.object({
  create: z.union([ z.lazy(() => PlaidAccountCreateWithoutItemInputSchema),z.lazy(() => PlaidAccountCreateWithoutItemInputSchema).array(),z.lazy(() => PlaidAccountUncheckedCreateWithoutItemInputSchema),z.lazy(() => PlaidAccountUncheckedCreateWithoutItemInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PlaidAccountCreateOrConnectWithoutItemInputSchema),z.lazy(() => PlaidAccountCreateOrConnectWithoutItemInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PlaidAccountUpsertWithWhereUniqueWithoutItemInputSchema),z.lazy(() => PlaidAccountUpsertWithWhereUniqueWithoutItemInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PlaidAccountCreateManyItemInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PlaidAccountWhereUniqueInputSchema),z.lazy(() => PlaidAccountWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PlaidAccountWhereUniqueInputSchema),z.lazy(() => PlaidAccountWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PlaidAccountWhereUniqueInputSchema),z.lazy(() => PlaidAccountWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PlaidAccountWhereUniqueInputSchema),z.lazy(() => PlaidAccountWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PlaidAccountUpdateWithWhereUniqueWithoutItemInputSchema),z.lazy(() => PlaidAccountUpdateWithWhereUniqueWithoutItemInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PlaidAccountUpdateManyWithWhereWithoutItemInputSchema),z.lazy(() => PlaidAccountUpdateManyWithWhereWithoutItemInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PlaidAccountScalarWhereInputSchema),z.lazy(() => PlaidAccountScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PlaidAccountUncheckedUpdateManyWithoutItemNestedInputSchema: z.ZodType<Prisma.PlaidAccountUncheckedUpdateManyWithoutItemNestedInput> = z.object({
  create: z.union([ z.lazy(() => PlaidAccountCreateWithoutItemInputSchema),z.lazy(() => PlaidAccountCreateWithoutItemInputSchema).array(),z.lazy(() => PlaidAccountUncheckedCreateWithoutItemInputSchema),z.lazy(() => PlaidAccountUncheckedCreateWithoutItemInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PlaidAccountCreateOrConnectWithoutItemInputSchema),z.lazy(() => PlaidAccountCreateOrConnectWithoutItemInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PlaidAccountUpsertWithWhereUniqueWithoutItemInputSchema),z.lazy(() => PlaidAccountUpsertWithWhereUniqueWithoutItemInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PlaidAccountCreateManyItemInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PlaidAccountWhereUniqueInputSchema),z.lazy(() => PlaidAccountWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PlaidAccountWhereUniqueInputSchema),z.lazy(() => PlaidAccountWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PlaidAccountWhereUniqueInputSchema),z.lazy(() => PlaidAccountWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PlaidAccountWhereUniqueInputSchema),z.lazy(() => PlaidAccountWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PlaidAccountUpdateWithWhereUniqueWithoutItemInputSchema),z.lazy(() => PlaidAccountUpdateWithWhereUniqueWithoutItemInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PlaidAccountUpdateManyWithWhereWithoutItemInputSchema),z.lazy(() => PlaidAccountUpdateManyWithWhereWithoutItemInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PlaidAccountScalarWhereInputSchema),z.lazy(() => PlaidAccountScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PlaidItemCreateNestedOneWithoutAccountsInputSchema: z.ZodType<Prisma.PlaidItemCreateNestedOneWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => PlaidItemCreateWithoutAccountsInputSchema),z.lazy(() => PlaidItemUncheckedCreateWithoutAccountsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PlaidItemCreateOrConnectWithoutAccountsInputSchema).optional(),
  connect: z.lazy(() => PlaidItemWhereUniqueInputSchema).optional()
}).strict();

export const PlaidTransactionCreateNestedManyWithoutAccountInputSchema: z.ZodType<Prisma.PlaidTransactionCreateNestedManyWithoutAccountInput> = z.object({
  create: z.union([ z.lazy(() => PlaidTransactionCreateWithoutAccountInputSchema),z.lazy(() => PlaidTransactionCreateWithoutAccountInputSchema).array(),z.lazy(() => PlaidTransactionUncheckedCreateWithoutAccountInputSchema),z.lazy(() => PlaidTransactionUncheckedCreateWithoutAccountInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PlaidTransactionCreateOrConnectWithoutAccountInputSchema),z.lazy(() => PlaidTransactionCreateOrConnectWithoutAccountInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PlaidTransactionCreateManyAccountInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PlaidTransactionWhereUniqueInputSchema),z.lazy(() => PlaidTransactionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PlaidTransactionUncheckedCreateNestedManyWithoutAccountInputSchema: z.ZodType<Prisma.PlaidTransactionUncheckedCreateNestedManyWithoutAccountInput> = z.object({
  create: z.union([ z.lazy(() => PlaidTransactionCreateWithoutAccountInputSchema),z.lazy(() => PlaidTransactionCreateWithoutAccountInputSchema).array(),z.lazy(() => PlaidTransactionUncheckedCreateWithoutAccountInputSchema),z.lazy(() => PlaidTransactionUncheckedCreateWithoutAccountInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PlaidTransactionCreateOrConnectWithoutAccountInputSchema),z.lazy(() => PlaidTransactionCreateOrConnectWithoutAccountInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PlaidTransactionCreateManyAccountInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PlaidTransactionWhereUniqueInputSchema),z.lazy(() => PlaidTransactionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PlaidItemUpdateOneRequiredWithoutAccountsNestedInputSchema: z.ZodType<Prisma.PlaidItemUpdateOneRequiredWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => PlaidItemCreateWithoutAccountsInputSchema),z.lazy(() => PlaidItemUncheckedCreateWithoutAccountsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PlaidItemCreateOrConnectWithoutAccountsInputSchema).optional(),
  upsert: z.lazy(() => PlaidItemUpsertWithoutAccountsInputSchema).optional(),
  connect: z.lazy(() => PlaidItemWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => PlaidItemUpdateToOneWithWhereWithoutAccountsInputSchema),z.lazy(() => PlaidItemUpdateWithoutAccountsInputSchema),z.lazy(() => PlaidItemUncheckedUpdateWithoutAccountsInputSchema) ]).optional(),
}).strict();

export const PlaidTransactionUpdateManyWithoutAccountNestedInputSchema: z.ZodType<Prisma.PlaidTransactionUpdateManyWithoutAccountNestedInput> = z.object({
  create: z.union([ z.lazy(() => PlaidTransactionCreateWithoutAccountInputSchema),z.lazy(() => PlaidTransactionCreateWithoutAccountInputSchema).array(),z.lazy(() => PlaidTransactionUncheckedCreateWithoutAccountInputSchema),z.lazy(() => PlaidTransactionUncheckedCreateWithoutAccountInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PlaidTransactionCreateOrConnectWithoutAccountInputSchema),z.lazy(() => PlaidTransactionCreateOrConnectWithoutAccountInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PlaidTransactionUpsertWithWhereUniqueWithoutAccountInputSchema),z.lazy(() => PlaidTransactionUpsertWithWhereUniqueWithoutAccountInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PlaidTransactionCreateManyAccountInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PlaidTransactionWhereUniqueInputSchema),z.lazy(() => PlaidTransactionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PlaidTransactionWhereUniqueInputSchema),z.lazy(() => PlaidTransactionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PlaidTransactionWhereUniqueInputSchema),z.lazy(() => PlaidTransactionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PlaidTransactionWhereUniqueInputSchema),z.lazy(() => PlaidTransactionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PlaidTransactionUpdateWithWhereUniqueWithoutAccountInputSchema),z.lazy(() => PlaidTransactionUpdateWithWhereUniqueWithoutAccountInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PlaidTransactionUpdateManyWithWhereWithoutAccountInputSchema),z.lazy(() => PlaidTransactionUpdateManyWithWhereWithoutAccountInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PlaidTransactionScalarWhereInputSchema),z.lazy(() => PlaidTransactionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PlaidTransactionUncheckedUpdateManyWithoutAccountNestedInputSchema: z.ZodType<Prisma.PlaidTransactionUncheckedUpdateManyWithoutAccountNestedInput> = z.object({
  create: z.union([ z.lazy(() => PlaidTransactionCreateWithoutAccountInputSchema),z.lazy(() => PlaidTransactionCreateWithoutAccountInputSchema).array(),z.lazy(() => PlaidTransactionUncheckedCreateWithoutAccountInputSchema),z.lazy(() => PlaidTransactionUncheckedCreateWithoutAccountInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PlaidTransactionCreateOrConnectWithoutAccountInputSchema),z.lazy(() => PlaidTransactionCreateOrConnectWithoutAccountInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PlaidTransactionUpsertWithWhereUniqueWithoutAccountInputSchema),z.lazy(() => PlaidTransactionUpsertWithWhereUniqueWithoutAccountInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PlaidTransactionCreateManyAccountInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PlaidTransactionWhereUniqueInputSchema),z.lazy(() => PlaidTransactionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PlaidTransactionWhereUniqueInputSchema),z.lazy(() => PlaidTransactionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PlaidTransactionWhereUniqueInputSchema),z.lazy(() => PlaidTransactionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PlaidTransactionWhereUniqueInputSchema),z.lazy(() => PlaidTransactionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PlaidTransactionUpdateWithWhereUniqueWithoutAccountInputSchema),z.lazy(() => PlaidTransactionUpdateWithWhereUniqueWithoutAccountInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PlaidTransactionUpdateManyWithWhereWithoutAccountInputSchema),z.lazy(() => PlaidTransactionUpdateManyWithWhereWithoutAccountInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PlaidTransactionScalarWhereInputSchema),z.lazy(() => PlaidTransactionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PlaidAccountCreateNestedOneWithoutTransactionsInputSchema: z.ZodType<Prisma.PlaidAccountCreateNestedOneWithoutTransactionsInput> = z.object({
  create: z.union([ z.lazy(() => PlaidAccountCreateWithoutTransactionsInputSchema),z.lazy(() => PlaidAccountUncheckedCreateWithoutTransactionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PlaidAccountCreateOrConnectWithoutTransactionsInputSchema).optional(),
  connect: z.lazy(() => PlaidAccountWhereUniqueInputSchema).optional()
}).strict();

export const ExpenseCreateNestedOneWithoutPlaidTransactionInputSchema: z.ZodType<Prisma.ExpenseCreateNestedOneWithoutPlaidTransactionInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseCreateWithoutPlaidTransactionInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutPlaidTransactionInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ExpenseCreateOrConnectWithoutPlaidTransactionInputSchema).optional(),
  connect: z.lazy(() => ExpenseWhereUniqueInputSchema).optional()
}).strict();

export const PayoutCreateNestedOneWithoutPlaidTransactionInputSchema: z.ZodType<Prisma.PayoutCreateNestedOneWithoutPlaidTransactionInput> = z.object({
  create: z.union([ z.lazy(() => PayoutCreateWithoutPlaidTransactionInputSchema),z.lazy(() => PayoutUncheckedCreateWithoutPlaidTransactionInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PayoutCreateOrConnectWithoutPlaidTransactionInputSchema).optional(),
  connect: z.lazy(() => PayoutWhereUniqueInputSchema).optional()
}).strict();

export const ExpenseUncheckedCreateNestedOneWithoutPlaidTransactionInputSchema: z.ZodType<Prisma.ExpenseUncheckedCreateNestedOneWithoutPlaidTransactionInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseCreateWithoutPlaidTransactionInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutPlaidTransactionInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ExpenseCreateOrConnectWithoutPlaidTransactionInputSchema).optional(),
  connect: z.lazy(() => ExpenseWhereUniqueInputSchema).optional()
}).strict();

export const PayoutUncheckedCreateNestedOneWithoutPlaidTransactionInputSchema: z.ZodType<Prisma.PayoutUncheckedCreateNestedOneWithoutPlaidTransactionInput> = z.object({
  create: z.union([ z.lazy(() => PayoutCreateWithoutPlaidTransactionInputSchema),z.lazy(() => PayoutUncheckedCreateWithoutPlaidTransactionInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PayoutCreateOrConnectWithoutPlaidTransactionInputSchema).optional(),
  connect: z.lazy(() => PayoutWhereUniqueInputSchema).optional()
}).strict();

export const EnumPlaidImportStatusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumPlaidImportStatusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => PlaidImportStatusSchema).optional()
}).strict();

export const PlaidAccountUpdateOneRequiredWithoutTransactionsNestedInputSchema: z.ZodType<Prisma.PlaidAccountUpdateOneRequiredWithoutTransactionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => PlaidAccountCreateWithoutTransactionsInputSchema),z.lazy(() => PlaidAccountUncheckedCreateWithoutTransactionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PlaidAccountCreateOrConnectWithoutTransactionsInputSchema).optional(),
  upsert: z.lazy(() => PlaidAccountUpsertWithoutTransactionsInputSchema).optional(),
  connect: z.lazy(() => PlaidAccountWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => PlaidAccountUpdateToOneWithWhereWithoutTransactionsInputSchema),z.lazy(() => PlaidAccountUpdateWithoutTransactionsInputSchema),z.lazy(() => PlaidAccountUncheckedUpdateWithoutTransactionsInputSchema) ]).optional(),
}).strict();

export const ExpenseUpdateOneWithoutPlaidTransactionNestedInputSchema: z.ZodType<Prisma.ExpenseUpdateOneWithoutPlaidTransactionNestedInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseCreateWithoutPlaidTransactionInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutPlaidTransactionInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ExpenseCreateOrConnectWithoutPlaidTransactionInputSchema).optional(),
  upsert: z.lazy(() => ExpenseUpsertWithoutPlaidTransactionInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => ExpenseWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => ExpenseWhereInputSchema) ]).optional(),
  connect: z.lazy(() => ExpenseWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ExpenseUpdateToOneWithWhereWithoutPlaidTransactionInputSchema),z.lazy(() => ExpenseUpdateWithoutPlaidTransactionInputSchema),z.lazy(() => ExpenseUncheckedUpdateWithoutPlaidTransactionInputSchema) ]).optional(),
}).strict();

export const PayoutUpdateOneWithoutPlaidTransactionNestedInputSchema: z.ZodType<Prisma.PayoutUpdateOneWithoutPlaidTransactionNestedInput> = z.object({
  create: z.union([ z.lazy(() => PayoutCreateWithoutPlaidTransactionInputSchema),z.lazy(() => PayoutUncheckedCreateWithoutPlaidTransactionInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PayoutCreateOrConnectWithoutPlaidTransactionInputSchema).optional(),
  upsert: z.lazy(() => PayoutUpsertWithoutPlaidTransactionInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => PayoutWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => PayoutWhereInputSchema) ]).optional(),
  connect: z.lazy(() => PayoutWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => PayoutUpdateToOneWithWhereWithoutPlaidTransactionInputSchema),z.lazy(() => PayoutUpdateWithoutPlaidTransactionInputSchema),z.lazy(() => PayoutUncheckedUpdateWithoutPlaidTransactionInputSchema) ]).optional(),
}).strict();

export const ExpenseUncheckedUpdateOneWithoutPlaidTransactionNestedInputSchema: z.ZodType<Prisma.ExpenseUncheckedUpdateOneWithoutPlaidTransactionNestedInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseCreateWithoutPlaidTransactionInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutPlaidTransactionInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ExpenseCreateOrConnectWithoutPlaidTransactionInputSchema).optional(),
  upsert: z.lazy(() => ExpenseUpsertWithoutPlaidTransactionInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => ExpenseWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => ExpenseWhereInputSchema) ]).optional(),
  connect: z.lazy(() => ExpenseWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ExpenseUpdateToOneWithWhereWithoutPlaidTransactionInputSchema),z.lazy(() => ExpenseUpdateWithoutPlaidTransactionInputSchema),z.lazy(() => ExpenseUncheckedUpdateWithoutPlaidTransactionInputSchema) ]).optional(),
}).strict();

export const PayoutUncheckedUpdateOneWithoutPlaidTransactionNestedInputSchema: z.ZodType<Prisma.PayoutUncheckedUpdateOneWithoutPlaidTransactionNestedInput> = z.object({
  create: z.union([ z.lazy(() => PayoutCreateWithoutPlaidTransactionInputSchema),z.lazy(() => PayoutUncheckedCreateWithoutPlaidTransactionInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PayoutCreateOrConnectWithoutPlaidTransactionInputSchema).optional(),
  upsert: z.lazy(() => PayoutUpsertWithoutPlaidTransactionInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => PayoutWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => PayoutWhereInputSchema) ]).optional(),
  connect: z.lazy(() => PayoutWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => PayoutUpdateToOneWithWhereWithoutPlaidTransactionInputSchema),z.lazy(() => PayoutUpdateWithoutPlaidTransactionInputSchema),z.lazy(() => PayoutUncheckedUpdateWithoutPlaidTransactionInputSchema) ]).optional(),
}).strict();

export const ListingCreateNestedOneWithoutDailyRatesInputSchema: z.ZodType<Prisma.ListingCreateNestedOneWithoutDailyRatesInput> = z.object({
  create: z.union([ z.lazy(() => ListingCreateWithoutDailyRatesInputSchema),z.lazy(() => ListingUncheckedCreateWithoutDailyRatesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ListingCreateOrConnectWithoutDailyRatesInputSchema).optional(),
  connect: z.lazy(() => ListingWhereUniqueInputSchema).optional()
}).strict();

export const ListingUpdateOneRequiredWithoutDailyRatesNestedInputSchema: z.ZodType<Prisma.ListingUpdateOneRequiredWithoutDailyRatesNestedInput> = z.object({
  create: z.union([ z.lazy(() => ListingCreateWithoutDailyRatesInputSchema),z.lazy(() => ListingUncheckedCreateWithoutDailyRatesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ListingCreateOrConnectWithoutDailyRatesInputSchema).optional(),
  upsert: z.lazy(() => ListingUpsertWithoutDailyRatesInputSchema).optional(),
  connect: z.lazy(() => ListingWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ListingUpdateToOneWithWhereWithoutDailyRatesInputSchema),z.lazy(() => ListingUpdateWithoutDailyRatesInputSchema),z.lazy(() => ListingUncheckedUpdateWithoutDailyRatesInputSchema) ]).optional(),
}).strict();

export const PlaidTransactionCreateNestedOneWithoutPayoutInputSchema: z.ZodType<Prisma.PlaidTransactionCreateNestedOneWithoutPayoutInput> = z.object({
  create: z.union([ z.lazy(() => PlaidTransactionCreateWithoutPayoutInputSchema),z.lazy(() => PlaidTransactionUncheckedCreateWithoutPayoutInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PlaidTransactionCreateOrConnectWithoutPayoutInputSchema).optional(),
  connect: z.lazy(() => PlaidTransactionWhereUniqueInputSchema).optional()
}).strict();

export const RevenuePayoutCreateNestedManyWithoutPayoutInputSchema: z.ZodType<Prisma.RevenuePayoutCreateNestedManyWithoutPayoutInput> = z.object({
  create: z.union([ z.lazy(() => RevenuePayoutCreateWithoutPayoutInputSchema),z.lazy(() => RevenuePayoutCreateWithoutPayoutInputSchema).array(),z.lazy(() => RevenuePayoutUncheckedCreateWithoutPayoutInputSchema),z.lazy(() => RevenuePayoutUncheckedCreateWithoutPayoutInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RevenuePayoutCreateOrConnectWithoutPayoutInputSchema),z.lazy(() => RevenuePayoutCreateOrConnectWithoutPayoutInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RevenuePayoutCreateManyPayoutInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RevenuePayoutWhereUniqueInputSchema),z.lazy(() => RevenuePayoutWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RevenuePayoutUncheckedCreateNestedManyWithoutPayoutInputSchema: z.ZodType<Prisma.RevenuePayoutUncheckedCreateNestedManyWithoutPayoutInput> = z.object({
  create: z.union([ z.lazy(() => RevenuePayoutCreateWithoutPayoutInputSchema),z.lazy(() => RevenuePayoutCreateWithoutPayoutInputSchema).array(),z.lazy(() => RevenuePayoutUncheckedCreateWithoutPayoutInputSchema),z.lazy(() => RevenuePayoutUncheckedCreateWithoutPayoutInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RevenuePayoutCreateOrConnectWithoutPayoutInputSchema),z.lazy(() => RevenuePayoutCreateOrConnectWithoutPayoutInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RevenuePayoutCreateManyPayoutInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RevenuePayoutWhereUniqueInputSchema),z.lazy(() => RevenuePayoutWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const DecimalFieldUpdateOperationsInputSchema: z.ZodType<Prisma.DecimalFieldUpdateOperationsInput> = z.object({
  set: z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  increment: z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  decrement: z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  multiply: z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  divide: z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional()
}).strict();

export const PlaidTransactionUpdateOneWithoutPayoutNestedInputSchema: z.ZodType<Prisma.PlaidTransactionUpdateOneWithoutPayoutNestedInput> = z.object({
  create: z.union([ z.lazy(() => PlaidTransactionCreateWithoutPayoutInputSchema),z.lazy(() => PlaidTransactionUncheckedCreateWithoutPayoutInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PlaidTransactionCreateOrConnectWithoutPayoutInputSchema).optional(),
  upsert: z.lazy(() => PlaidTransactionUpsertWithoutPayoutInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => PlaidTransactionWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => PlaidTransactionWhereInputSchema) ]).optional(),
  connect: z.lazy(() => PlaidTransactionWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => PlaidTransactionUpdateToOneWithWhereWithoutPayoutInputSchema),z.lazy(() => PlaidTransactionUpdateWithoutPayoutInputSchema),z.lazy(() => PlaidTransactionUncheckedUpdateWithoutPayoutInputSchema) ]).optional(),
}).strict();

export const RevenuePayoutUpdateManyWithoutPayoutNestedInputSchema: z.ZodType<Prisma.RevenuePayoutUpdateManyWithoutPayoutNestedInput> = z.object({
  create: z.union([ z.lazy(() => RevenuePayoutCreateWithoutPayoutInputSchema),z.lazy(() => RevenuePayoutCreateWithoutPayoutInputSchema).array(),z.lazy(() => RevenuePayoutUncheckedCreateWithoutPayoutInputSchema),z.lazy(() => RevenuePayoutUncheckedCreateWithoutPayoutInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RevenuePayoutCreateOrConnectWithoutPayoutInputSchema),z.lazy(() => RevenuePayoutCreateOrConnectWithoutPayoutInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RevenuePayoutUpsertWithWhereUniqueWithoutPayoutInputSchema),z.lazy(() => RevenuePayoutUpsertWithWhereUniqueWithoutPayoutInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RevenuePayoutCreateManyPayoutInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RevenuePayoutWhereUniqueInputSchema),z.lazy(() => RevenuePayoutWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RevenuePayoutWhereUniqueInputSchema),z.lazy(() => RevenuePayoutWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RevenuePayoutWhereUniqueInputSchema),z.lazy(() => RevenuePayoutWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RevenuePayoutWhereUniqueInputSchema),z.lazy(() => RevenuePayoutWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RevenuePayoutUpdateWithWhereUniqueWithoutPayoutInputSchema),z.lazy(() => RevenuePayoutUpdateWithWhereUniqueWithoutPayoutInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RevenuePayoutUpdateManyWithWhereWithoutPayoutInputSchema),z.lazy(() => RevenuePayoutUpdateManyWithWhereWithoutPayoutInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RevenuePayoutScalarWhereInputSchema),z.lazy(() => RevenuePayoutScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RevenuePayoutUncheckedUpdateManyWithoutPayoutNestedInputSchema: z.ZodType<Prisma.RevenuePayoutUncheckedUpdateManyWithoutPayoutNestedInput> = z.object({
  create: z.union([ z.lazy(() => RevenuePayoutCreateWithoutPayoutInputSchema),z.lazy(() => RevenuePayoutCreateWithoutPayoutInputSchema).array(),z.lazy(() => RevenuePayoutUncheckedCreateWithoutPayoutInputSchema),z.lazy(() => RevenuePayoutUncheckedCreateWithoutPayoutInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RevenuePayoutCreateOrConnectWithoutPayoutInputSchema),z.lazy(() => RevenuePayoutCreateOrConnectWithoutPayoutInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RevenuePayoutUpsertWithWhereUniqueWithoutPayoutInputSchema),z.lazy(() => RevenuePayoutUpsertWithWhereUniqueWithoutPayoutInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RevenuePayoutCreateManyPayoutInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RevenuePayoutWhereUniqueInputSchema),z.lazy(() => RevenuePayoutWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RevenuePayoutWhereUniqueInputSchema),z.lazy(() => RevenuePayoutWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RevenuePayoutWhereUniqueInputSchema),z.lazy(() => RevenuePayoutWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RevenuePayoutWhereUniqueInputSchema),z.lazy(() => RevenuePayoutWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RevenuePayoutUpdateWithWhereUniqueWithoutPayoutInputSchema),z.lazy(() => RevenuePayoutUpdateWithWhereUniqueWithoutPayoutInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RevenuePayoutUpdateManyWithWhereWithoutPayoutInputSchema),z.lazy(() => RevenuePayoutUpdateManyWithWhereWithoutPayoutInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RevenuePayoutScalarWhereInputSchema),z.lazy(() => RevenuePayoutScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutRevenuePayoutsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutRevenuePayoutsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutRevenuePayoutsInputSchema),z.lazy(() => UserUncheckedCreateWithoutRevenuePayoutsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutRevenuePayoutsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const PayoutCreateNestedOneWithoutRevenuePayoutInputSchema: z.ZodType<Prisma.PayoutCreateNestedOneWithoutRevenuePayoutInput> = z.object({
  create: z.union([ z.lazy(() => PayoutCreateWithoutRevenuePayoutInputSchema),z.lazy(() => PayoutUncheckedCreateWithoutRevenuePayoutInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PayoutCreateOrConnectWithoutRevenuePayoutInputSchema).optional(),
  connect: z.lazy(() => PayoutWhereUniqueInputSchema).optional()
}).strict();

export const RevenueCreateNestedOneWithoutPayoutInputSchema: z.ZodType<Prisma.RevenueCreateNestedOneWithoutPayoutInput> = z.object({
  create: z.union([ z.lazy(() => RevenueCreateWithoutPayoutInputSchema),z.lazy(() => RevenueUncheckedCreateWithoutPayoutInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RevenueCreateOrConnectWithoutPayoutInputSchema).optional(),
  connect: z.lazy(() => RevenueWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneWithoutRevenuePayoutsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutRevenuePayoutsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutRevenuePayoutsInputSchema),z.lazy(() => UserUncheckedCreateWithoutRevenuePayoutsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutRevenuePayoutsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutRevenuePayoutsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutRevenuePayoutsInputSchema),z.lazy(() => UserUpdateWithoutRevenuePayoutsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutRevenuePayoutsInputSchema) ]).optional(),
}).strict();

export const PayoutUpdateOneRequiredWithoutRevenuePayoutNestedInputSchema: z.ZodType<Prisma.PayoutUpdateOneRequiredWithoutRevenuePayoutNestedInput> = z.object({
  create: z.union([ z.lazy(() => PayoutCreateWithoutRevenuePayoutInputSchema),z.lazy(() => PayoutUncheckedCreateWithoutRevenuePayoutInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PayoutCreateOrConnectWithoutRevenuePayoutInputSchema).optional(),
  upsert: z.lazy(() => PayoutUpsertWithoutRevenuePayoutInputSchema).optional(),
  connect: z.lazy(() => PayoutWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => PayoutUpdateToOneWithWhereWithoutRevenuePayoutInputSchema),z.lazy(() => PayoutUpdateWithoutRevenuePayoutInputSchema),z.lazy(() => PayoutUncheckedUpdateWithoutRevenuePayoutInputSchema) ]).optional(),
}).strict();

export const RevenueUpdateOneRequiredWithoutPayoutNestedInputSchema: z.ZodType<Prisma.RevenueUpdateOneRequiredWithoutPayoutNestedInput> = z.object({
  create: z.union([ z.lazy(() => RevenueCreateWithoutPayoutInputSchema),z.lazy(() => RevenueUncheckedCreateWithoutPayoutInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RevenueCreateOrConnectWithoutPayoutInputSchema).optional(),
  upsert: z.lazy(() => RevenueUpsertWithoutPayoutInputSchema).optional(),
  connect: z.lazy(() => RevenueWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RevenueUpdateToOneWithWhereWithoutPayoutInputSchema),z.lazy(() => RevenueUpdateWithoutPayoutInputSchema),z.lazy(() => RevenueUncheckedUpdateWithoutPayoutInputSchema) ]).optional(),
}).strict();

export const NestedStringFilterSchema: z.ZodType<Prisma.NestedStringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringFilterSchema) ]).optional(),
}).strict();

export const NestedStringNullableFilterSchema: z.ZodType<Prisma.NestedStringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedIntNullableFilterSchema: z.ZodType<Prisma.NestedIntNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedStringWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const NestedIntFilterSchema: z.ZodType<Prisma.NestedIntFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntFilterSchema) ]).optional(),
}).strict();

export const NestedStringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const NestedIntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();

export const NestedFloatNullableFilterSchema: z.ZodType<Prisma.NestedFloatNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedDateTimeFilterSchema: z.ZodType<Prisma.NestedDateTimeFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeFilterSchema) ]).optional(),
}).strict();

export const NestedDateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();

export const NestedDateTimeNullableFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedEnumGlobalRoleFilterSchema: z.ZodType<Prisma.NestedEnumGlobalRoleFilter> = z.object({
  equals: z.lazy(() => GlobalRoleSchema).optional(),
  in: z.lazy(() => GlobalRoleSchema).array().optional(),
  notIn: z.lazy(() => GlobalRoleSchema).array().optional(),
  not: z.union([ z.lazy(() => GlobalRoleSchema),z.lazy(() => NestedEnumGlobalRoleFilterSchema) ]).optional(),
}).strict();

export const NestedEnumOrganizationRoleNullableFilterSchema: z.ZodType<Prisma.NestedEnumOrganizationRoleNullableFilter> = z.object({
  equals: z.lazy(() => OrganizationRoleSchema).optional().nullable(),
  in: z.lazy(() => OrganizationRoleSchema).array().optional().nullable(),
  notIn: z.lazy(() => OrganizationRoleSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => OrganizationRoleSchema),z.lazy(() => NestedEnumOrganizationRoleNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedDateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
}).strict();

export const NestedEnumGlobalRoleWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumGlobalRoleWithAggregatesFilter> = z.object({
  equals: z.lazy(() => GlobalRoleSchema).optional(),
  in: z.lazy(() => GlobalRoleSchema).array().optional(),
  notIn: z.lazy(() => GlobalRoleSchema).array().optional(),
  not: z.union([ z.lazy(() => GlobalRoleSchema),z.lazy(() => NestedEnumGlobalRoleWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumGlobalRoleFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumGlobalRoleFilterSchema).optional()
}).strict();

export const NestedEnumOrganizationRoleNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumOrganizationRoleNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => OrganizationRoleSchema).optional().nullable(),
  in: z.lazy(() => OrganizationRoleSchema).array().optional().nullable(),
  notIn: z.lazy(() => OrganizationRoleSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => OrganizationRoleSchema),z.lazy(() => NestedEnumOrganizationRoleNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumOrganizationRoleNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumOrganizationRoleNullableFilterSchema).optional()
}).strict();

export const NestedBoolFilterSchema: z.ZodType<Prisma.NestedBoolFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolFilterSchema) ]).optional(),
}).strict();

export const NestedBoolWithAggregatesFilterSchema: z.ZodType<Prisma.NestedBoolWithAggregatesFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolFilterSchema).optional()
}).strict();

export const NestedIntWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedIntFilterSchema).optional(),
  _max: z.lazy(() => NestedIntFilterSchema).optional()
}).strict();

export const NestedFloatFilterSchema: z.ZodType<Prisma.NestedFloatFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatFilterSchema) ]).optional(),
}).strict();

export const NestedEnumUnitTypeFilterSchema: z.ZodType<Prisma.NestedEnumUnitTypeFilter> = z.object({
  equals: z.lazy(() => UnitTypeSchema).optional(),
  in: z.lazy(() => UnitTypeSchema).array().optional(),
  notIn: z.lazy(() => UnitTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => UnitTypeSchema),z.lazy(() => NestedEnumUnitTypeFilterSchema) ]).optional(),
}).strict();

export const NestedEnumUnitTypeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumUnitTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => UnitTypeSchema).optional(),
  in: z.lazy(() => UnitTypeSchema).array().optional(),
  notIn: z.lazy(() => UnitTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => UnitTypeSchema),z.lazy(() => NestedEnumUnitTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumUnitTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumUnitTypeFilterSchema).optional()
}).strict();

export const NestedFloatWithAggregatesFilterSchema: z.ZodType<Prisma.NestedFloatWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedFloatFilterSchema).optional(),
  _min: z.lazy(() => NestedFloatFilterSchema).optional(),
  _max: z.lazy(() => NestedFloatFilterSchema).optional()
}).strict();

export const NestedFloatNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedFloatNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedFloatNullableFilterSchema).optional()
}).strict();

export const NestedEnumKeyTypeFilterSchema: z.ZodType<Prisma.NestedEnumKeyTypeFilter> = z.object({
  equals: z.lazy(() => KeyTypeSchema).optional(),
  in: z.lazy(() => KeyTypeSchema).array().optional(),
  notIn: z.lazy(() => KeyTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => KeyTypeSchema),z.lazy(() => NestedEnumKeyTypeFilterSchema) ]).optional(),
}).strict();

export const NestedEnumKeyTypeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumKeyTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => KeyTypeSchema).optional(),
  in: z.lazy(() => KeyTypeSchema).array().optional(),
  notIn: z.lazy(() => KeyTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => KeyTypeSchema),z.lazy(() => NestedEnumKeyTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumKeyTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumKeyTypeFilterSchema).optional()
}).strict();

export const NestedEnumDynamicPricingFilterSchema: z.ZodType<Prisma.NestedEnumDynamicPricingFilter> = z.object({
  equals: z.lazy(() => DynamicPricingSchema).optional(),
  in: z.lazy(() => DynamicPricingSchema).array().optional(),
  notIn: z.lazy(() => DynamicPricingSchema).array().optional(),
  not: z.union([ z.lazy(() => DynamicPricingSchema),z.lazy(() => NestedEnumDynamicPricingFilterSchema) ]).optional(),
}).strict();

export const NestedEnumDynamicPricingWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumDynamicPricingWithAggregatesFilter> = z.object({
  equals: z.lazy(() => DynamicPricingSchema).optional(),
  in: z.lazy(() => DynamicPricingSchema).array().optional(),
  notIn: z.lazy(() => DynamicPricingSchema).array().optional(),
  not: z.union([ z.lazy(() => DynamicPricingSchema),z.lazy(() => NestedEnumDynamicPricingWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumDynamicPricingFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumDynamicPricingFilterSchema).optional()
}).strict();

export const NestedEnumCalendarEventTypeFilterSchema: z.ZodType<Prisma.NestedEnumCalendarEventTypeFilter> = z.object({
  equals: z.lazy(() => CalendarEventTypeSchema).optional(),
  in: z.lazy(() => CalendarEventTypeSchema).array().optional(),
  notIn: z.lazy(() => CalendarEventTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => CalendarEventTypeSchema),z.lazy(() => NestedEnumCalendarEventTypeFilterSchema) ]).optional(),
}).strict();

export const NestedEnumCalendarEventTypeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumCalendarEventTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => CalendarEventTypeSchema).optional(),
  in: z.lazy(() => CalendarEventTypeSchema).array().optional(),
  notIn: z.lazy(() => CalendarEventTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => CalendarEventTypeSchema),z.lazy(() => NestedEnumCalendarEventTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumCalendarEventTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumCalendarEventTypeFilterSchema).optional()
}).strict();

export const NestedEnumChannelFilterSchema: z.ZodType<Prisma.NestedEnumChannelFilter> = z.object({
  equals: z.lazy(() => ChannelSchema).optional(),
  in: z.lazy(() => ChannelSchema).array().optional(),
  notIn: z.lazy(() => ChannelSchema).array().optional(),
  not: z.union([ z.lazy(() => ChannelSchema),z.lazy(() => NestedEnumChannelFilterSchema) ]).optional(),
}).strict();

export const NestedEnumReservationStatusFilterSchema: z.ZodType<Prisma.NestedEnumReservationStatusFilter> = z.object({
  equals: z.lazy(() => ReservationStatusSchema).optional(),
  in: z.lazy(() => ReservationStatusSchema).array().optional(),
  notIn: z.lazy(() => ReservationStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ReservationStatusSchema),z.lazy(() => NestedEnumReservationStatusFilterSchema) ]).optional(),
}).strict();

export const NestedEnumChannelWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumChannelWithAggregatesFilter> = z.object({
  equals: z.lazy(() => ChannelSchema).optional(),
  in: z.lazy(() => ChannelSchema).array().optional(),
  notIn: z.lazy(() => ChannelSchema).array().optional(),
  not: z.union([ z.lazy(() => ChannelSchema),z.lazy(() => NestedEnumChannelWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumChannelFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumChannelFilterSchema).optional()
}).strict();

export const NestedEnumReservationStatusWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumReservationStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => ReservationStatusSchema).optional(),
  in: z.lazy(() => ReservationStatusSchema).array().optional(),
  notIn: z.lazy(() => ReservationStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ReservationStatusSchema),z.lazy(() => NestedEnumReservationStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumReservationStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumReservationStatusFilterSchema).optional()
}).strict();

export const NestedEnumQueueStatusFilterSchema: z.ZodType<Prisma.NestedEnumQueueStatusFilter> = z.object({
  equals: z.lazy(() => QueueStatusSchema).optional(),
  in: z.lazy(() => QueueStatusSchema).array().optional(),
  notIn: z.lazy(() => QueueStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => QueueStatusSchema),z.lazy(() => NestedEnumQueueStatusFilterSchema) ]).optional(),
}).strict();

export const NestedEnumQueueStatusWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumQueueStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => QueueStatusSchema).optional(),
  in: z.lazy(() => QueueStatusSchema).array().optional(),
  notIn: z.lazy(() => QueueStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => QueueStatusSchema),z.lazy(() => NestedEnumQueueStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumQueueStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumQueueStatusFilterSchema).optional()
}).strict();

export const NestedEnumMessageUserFilterSchema: z.ZodType<Prisma.NestedEnumMessageUserFilter> = z.object({
  equals: z.lazy(() => MessageUserSchema).optional(),
  in: z.lazy(() => MessageUserSchema).array().optional(),
  notIn: z.lazy(() => MessageUserSchema).array().optional(),
  not: z.union([ z.lazy(() => MessageUserSchema),z.lazy(() => NestedEnumMessageUserFilterSchema) ]).optional(),
}).strict();

export const NestedEnumMessageUserWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumMessageUserWithAggregatesFilter> = z.object({
  equals: z.lazy(() => MessageUserSchema).optional(),
  in: z.lazy(() => MessageUserSchema).array().optional(),
  notIn: z.lazy(() => MessageUserSchema).array().optional(),
  not: z.union([ z.lazy(() => MessageUserSchema),z.lazy(() => NestedEnumMessageUserWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumMessageUserFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumMessageUserFilterSchema).optional()
}).strict();

export const NestedEnumTriggerNullableFilterSchema: z.ZodType<Prisma.NestedEnumTriggerNullableFilter> = z.object({
  equals: z.lazy(() => TriggerSchema).optional().nullable(),
  in: z.lazy(() => TriggerSchema).array().optional().nullable(),
  notIn: z.lazy(() => TriggerSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => TriggerSchema),z.lazy(() => NestedEnumTriggerNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedEnumTriggerRangeNullableFilterSchema: z.ZodType<Prisma.NestedEnumTriggerRangeNullableFilter> = z.object({
  equals: z.lazy(() => TriggerRangeSchema).optional().nullable(),
  in: z.lazy(() => TriggerRangeSchema).array().optional().nullable(),
  notIn: z.lazy(() => TriggerRangeSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => TriggerRangeSchema),z.lazy(() => NestedEnumTriggerRangeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedEnumTriggerUnitNullableFilterSchema: z.ZodType<Prisma.NestedEnumTriggerUnitNullableFilter> = z.object({
  equals: z.lazy(() => TriggerUnitSchema).optional().nullable(),
  in: z.lazy(() => TriggerUnitSchema).array().optional().nullable(),
  notIn: z.lazy(() => TriggerUnitSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => TriggerUnitSchema),z.lazy(() => NestedEnumTriggerUnitNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedEnumTriggerNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumTriggerNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => TriggerSchema).optional().nullable(),
  in: z.lazy(() => TriggerSchema).array().optional().nullable(),
  notIn: z.lazy(() => TriggerSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => TriggerSchema),z.lazy(() => NestedEnumTriggerNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumTriggerNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumTriggerNullableFilterSchema).optional()
}).strict();

export const NestedEnumTriggerRangeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumTriggerRangeNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => TriggerRangeSchema).optional().nullable(),
  in: z.lazy(() => TriggerRangeSchema).array().optional().nullable(),
  notIn: z.lazy(() => TriggerRangeSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => TriggerRangeSchema),z.lazy(() => NestedEnumTriggerRangeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumTriggerRangeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumTriggerRangeNullableFilterSchema).optional()
}).strict();

export const NestedEnumTriggerUnitNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumTriggerUnitNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => TriggerUnitSchema).optional().nullable(),
  in: z.lazy(() => TriggerUnitSchema).array().optional().nullable(),
  notIn: z.lazy(() => TriggerUnitSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => TriggerUnitSchema),z.lazy(() => NestedEnumTriggerUnitNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumTriggerUnitNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumTriggerUnitNullableFilterSchema).optional()
}).strict();

export const NestedEnumScheduledMessageStatusFilterSchema: z.ZodType<Prisma.NestedEnumScheduledMessageStatusFilter> = z.object({
  equals: z.lazy(() => ScheduledMessageStatusSchema).optional(),
  in: z.lazy(() => ScheduledMessageStatusSchema).array().optional(),
  notIn: z.lazy(() => ScheduledMessageStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ScheduledMessageStatusSchema),z.lazy(() => NestedEnumScheduledMessageStatusFilterSchema) ]).optional(),
}).strict();

export const NestedEnumScheduledMessageStatusWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumScheduledMessageStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => ScheduledMessageStatusSchema).optional(),
  in: z.lazy(() => ScheduledMessageStatusSchema).array().optional(),
  notIn: z.lazy(() => ScheduledMessageStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ScheduledMessageStatusSchema),z.lazy(() => NestedEnumScheduledMessageStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumScheduledMessageStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumScheduledMessageStatusFilterSchema).optional()
}).strict();

export const NestedEnumRevenuePayoutStatusFilterSchema: z.ZodType<Prisma.NestedEnumRevenuePayoutStatusFilter> = z.object({
  equals: z.lazy(() => RevenuePayoutStatusSchema).optional(),
  in: z.lazy(() => RevenuePayoutStatusSchema).array().optional(),
  notIn: z.lazy(() => RevenuePayoutStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => RevenuePayoutStatusSchema),z.lazy(() => NestedEnumRevenuePayoutStatusFilterSchema) ]).optional(),
}).strict();

export const NestedEnumRevenuePayoutStatusWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumRevenuePayoutStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => RevenuePayoutStatusSchema).optional(),
  in: z.lazy(() => RevenuePayoutStatusSchema).array().optional(),
  notIn: z.lazy(() => RevenuePayoutStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => RevenuePayoutStatusSchema),z.lazy(() => NestedEnumRevenuePayoutStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumRevenuePayoutStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumRevenuePayoutStatusFilterSchema).optional()
}).strict();

export const NestedEnumRevenueDeductionTypeFilterSchema: z.ZodType<Prisma.NestedEnumRevenueDeductionTypeFilter> = z.object({
  equals: z.lazy(() => RevenueDeductionTypeSchema).optional(),
  in: z.lazy(() => RevenueDeductionTypeSchema).array().optional(),
  notIn: z.lazy(() => RevenueDeductionTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => RevenueDeductionTypeSchema),z.lazy(() => NestedEnumRevenueDeductionTypeFilterSchema) ]).optional(),
}).strict();

export const NestedEnumRevenueDeductionTypeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumRevenueDeductionTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => RevenueDeductionTypeSchema).optional(),
  in: z.lazy(() => RevenueDeductionTypeSchema).array().optional(),
  notIn: z.lazy(() => RevenueDeductionTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => RevenueDeductionTypeSchema),z.lazy(() => NestedEnumRevenueDeductionTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumRevenueDeductionTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumRevenueDeductionTypeFilterSchema).optional()
}).strict();

export const NestedEnumRevenueEntryTypeFilterSchema: z.ZodType<Prisma.NestedEnumRevenueEntryTypeFilter> = z.object({
  equals: z.lazy(() => RevenueEntryTypeSchema).optional(),
  in: z.lazy(() => RevenueEntryTypeSchema).array().optional(),
  notIn: z.lazy(() => RevenueEntryTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => RevenueEntryTypeSchema),z.lazy(() => NestedEnumRevenueEntryTypeFilterSchema) ]).optional(),
}).strict();

export const NestedEnumRevenueEntryTypeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumRevenueEntryTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => RevenueEntryTypeSchema).optional(),
  in: z.lazy(() => RevenueEntryTypeSchema).array().optional(),
  notIn: z.lazy(() => RevenueEntryTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => RevenueEntryTypeSchema),z.lazy(() => NestedEnumRevenueEntryTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumRevenueEntryTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumRevenueEntryTypeFilterSchema).optional()
}).strict();

export const NestedEnumPlaidImportStatusFilterSchema: z.ZodType<Prisma.NestedEnumPlaidImportStatusFilter> = z.object({
  equals: z.lazy(() => PlaidImportStatusSchema).optional(),
  in: z.lazy(() => PlaidImportStatusSchema).array().optional(),
  notIn: z.lazy(() => PlaidImportStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => PlaidImportStatusSchema),z.lazy(() => NestedEnumPlaidImportStatusFilterSchema) ]).optional(),
}).strict();

export const NestedEnumPlaidImportStatusWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumPlaidImportStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => PlaidImportStatusSchema).optional(),
  in: z.lazy(() => PlaidImportStatusSchema).array().optional(),
  notIn: z.lazy(() => PlaidImportStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => PlaidImportStatusSchema),z.lazy(() => NestedEnumPlaidImportStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumPlaidImportStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumPlaidImportStatusFilterSchema).optional()
}).strict();

export const NestedDecimalFilterSchema: z.ZodType<Prisma.NestedDecimalFilter> = z.object({
  equals: z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  in: z.union([z.number().array(),z.string().array(),DecimalJSLikeListSchema,]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional(),
  notIn: z.union([z.number().array(),z.string().array(),DecimalJSLikeListSchema,]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional(),
  lt: z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  lte: z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gt: z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gte: z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  not: z.union([ z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NestedDecimalFilterSchema) ]).optional(),
}).strict();

export const NestedDecimalWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDecimalWithAggregatesFilter> = z.object({
  equals: z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  in: z.union([z.number().array(),z.string().array(),DecimalJSLikeListSchema,]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional(),
  notIn: z.union([z.number().array(),z.string().array(),DecimalJSLikeListSchema,]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional(),
  lt: z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  lte: z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gt: z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gte: z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  not: z.union([ z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NestedDecimalWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedDecimalFilterSchema).optional(),
  _sum: z.lazy(() => NestedDecimalFilterSchema).optional(),
  _min: z.lazy(() => NestedDecimalFilterSchema).optional(),
  _max: z.lazy(() => NestedDecimalFilterSchema).optional()
}).strict();

export const UserCreateWithoutAccountsInputSchema: z.ZodType<Prisma.UserCreateWithoutAccountsInput> = z.object({
  id: z.string().optional(),
  name: z.string().optional().nullable(),
  email: z.string(),
  emailVerified: z.coerce.date().optional().nullable(),
  image: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  globalRole: z.lazy(() => GlobalRoleSchema).optional(),
  organizationRole: z.lazy(() => OrganizationRoleSchema).optional().nullable(),
  ownerEntity: z.string().optional().nullable(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  managedListings: z.lazy(() => ListingCreateNestedManyWithoutPropertyManagerInputSchema).optional(),
  ownedListings: z.lazy(() => ListingCreateNestedManyWithoutPropertyOwnerInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutUserInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionCreateNestedOneWithoutOwnerInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemCreateNestedManyWithoutCreatorInputSchema).optional(),
  revenuePayouts: z.lazy(() => RevenuePayoutCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutAccountsInput> = z.object({
  id: z.string().optional(),
  name: z.string().optional().nullable(),
  email: z.string(),
  emailVerified: z.coerce.date().optional().nullable(),
  image: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  globalRole: z.lazy(() => GlobalRoleSchema).optional(),
  organizationId: z.string().optional().nullable(),
  organizationRole: z.lazy(() => OrganizationRoleSchema).optional().nullable(),
  ownerEntity: z.string().optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  managedListings: z.lazy(() => ListingUncheckedCreateNestedManyWithoutPropertyManagerInputSchema).optional(),
  ownedListings: z.lazy(() => ListingUncheckedCreateNestedManyWithoutPropertyOwnerInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionUncheckedCreateNestedOneWithoutOwnerInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  revenuePayouts: z.lazy(() => RevenuePayoutUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutAccountsInputSchema),z.lazy(() => UserUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const UserUpsertWithoutAccountsInputSchema: z.ZodType<Prisma.UserUpsertWithoutAccountsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutAccountsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutAccountsInputSchema),z.lazy(() => UserUncheckedCreateWithoutAccountsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutAccountsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutAccountsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutAccountsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAccountsInputSchema) ]),
}).strict();

export const UserUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.UserUpdateWithoutAccountsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  globalRole: z.union([ z.lazy(() => GlobalRoleSchema),z.lazy(() => EnumGlobalRoleFieldUpdateOperationsInputSchema) ]).optional(),
  organizationRole: z.union([ z.lazy(() => OrganizationRoleSchema),z.lazy(() => NullableEnumOrganizationRoleFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerEntity: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  managedListings: z.lazy(() => ListingUpdateManyWithoutPropertyManagerNestedInputSchema).optional(),
  ownedListings: z.lazy(() => ListingUpdateManyWithoutPropertyOwnerNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutUserNestedInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionUpdateOneWithoutOwnerNestedInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemUpdateManyWithoutCreatorNestedInputSchema).optional(),
  revenuePayouts: z.lazy(() => RevenuePayoutUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutAccountsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  globalRole: z.union([ z.lazy(() => GlobalRoleSchema),z.lazy(() => EnumGlobalRoleFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationRole: z.union([ z.lazy(() => OrganizationRoleSchema),z.lazy(() => NullableEnumOrganizationRoleFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerEntity: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  managedListings: z.lazy(() => ListingUncheckedUpdateManyWithoutPropertyManagerNestedInputSchema).optional(),
  ownedListings: z.lazy(() => ListingUncheckedUpdateManyWithoutPropertyOwnerNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionUncheckedUpdateOneWithoutOwnerNestedInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  revenuePayouts: z.lazy(() => RevenuePayoutUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const UserCreateWithoutSessionsInputSchema: z.ZodType<Prisma.UserCreateWithoutSessionsInput> = z.object({
  id: z.string().optional(),
  name: z.string().optional().nullable(),
  email: z.string(),
  emailVerified: z.coerce.date().optional().nullable(),
  image: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  globalRole: z.lazy(() => GlobalRoleSchema).optional(),
  organizationRole: z.lazy(() => OrganizationRoleSchema).optional().nullable(),
  ownerEntity: z.string().optional().nullable(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  managedListings: z.lazy(() => ListingCreateNestedManyWithoutPropertyManagerInputSchema).optional(),
  ownedListings: z.lazy(() => ListingCreateNestedManyWithoutPropertyOwnerInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutUserInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionCreateNestedOneWithoutOwnerInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemCreateNestedManyWithoutCreatorInputSchema).optional(),
  revenuePayouts: z.lazy(() => RevenuePayoutCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutSessionsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutSessionsInput> = z.object({
  id: z.string().optional(),
  name: z.string().optional().nullable(),
  email: z.string(),
  emailVerified: z.coerce.date().optional().nullable(),
  image: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  globalRole: z.lazy(() => GlobalRoleSchema).optional(),
  organizationId: z.string().optional().nullable(),
  organizationRole: z.lazy(() => OrganizationRoleSchema).optional().nullable(),
  ownerEntity: z.string().optional().nullable(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  managedListings: z.lazy(() => ListingUncheckedCreateNestedManyWithoutPropertyManagerInputSchema).optional(),
  ownedListings: z.lazy(() => ListingUncheckedCreateNestedManyWithoutPropertyOwnerInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionUncheckedCreateNestedOneWithoutOwnerInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  revenuePayouts: z.lazy(() => RevenuePayoutUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutSessionsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutSessionsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutSessionsInputSchema) ]),
}).strict();

export const UserUpsertWithoutSessionsInputSchema: z.ZodType<Prisma.UserUpsertWithoutSessionsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSessionsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutSessionsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutSessionsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutSessionsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSessionsInputSchema) ]),
}).strict();

export const UserUpdateWithoutSessionsInputSchema: z.ZodType<Prisma.UserUpdateWithoutSessionsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  globalRole: z.union([ z.lazy(() => GlobalRoleSchema),z.lazy(() => EnumGlobalRoleFieldUpdateOperationsInputSchema) ]).optional(),
  organizationRole: z.union([ z.lazy(() => OrganizationRoleSchema),z.lazy(() => NullableEnumOrganizationRoleFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerEntity: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  managedListings: z.lazy(() => ListingUpdateManyWithoutPropertyManagerNestedInputSchema).optional(),
  ownedListings: z.lazy(() => ListingUpdateManyWithoutPropertyOwnerNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutUserNestedInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionUpdateOneWithoutOwnerNestedInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemUpdateManyWithoutCreatorNestedInputSchema).optional(),
  revenuePayouts: z.lazy(() => RevenuePayoutUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutSessionsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutSessionsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  globalRole: z.union([ z.lazy(() => GlobalRoleSchema),z.lazy(() => EnumGlobalRoleFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationRole: z.union([ z.lazy(() => OrganizationRoleSchema),z.lazy(() => NullableEnumOrganizationRoleFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerEntity: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  managedListings: z.lazy(() => ListingUncheckedUpdateManyWithoutPropertyManagerNestedInputSchema).optional(),
  ownedListings: z.lazy(() => ListingUncheckedUpdateManyWithoutPropertyOwnerNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionUncheckedUpdateOneWithoutOwnerNestedInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  revenuePayouts: z.lazy(() => RevenuePayoutUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const AccountCreateWithoutUserInputSchema: z.ZodType<Prisma.AccountCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  type: z.string(),
  provider: z.string(),
  providerAccountId: z.string(),
  refresh_token: z.string().optional().nullable(),
  access_token: z.string().optional().nullable(),
  expires_at: z.number().optional().nullable(),
  token_type: z.string().optional().nullable(),
  scope: z.string().optional().nullable(),
  id_token: z.string().optional().nullable(),
  session_state: z.string().optional().nullable()
}).strict();

export const AccountUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.AccountUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  type: z.string(),
  provider: z.string(),
  providerAccountId: z.string(),
  refresh_token: z.string().optional().nullable(),
  access_token: z.string().optional().nullable(),
  expires_at: z.number().optional().nullable(),
  token_type: z.string().optional().nullable(),
  scope: z.string().optional().nullable(),
  id_token: z.string().optional().nullable(),
  session_state: z.string().optional().nullable()
}).strict();

export const AccountCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.AccountCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => AccountWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountCreateWithoutUserInputSchema),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const AccountCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.AccountCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => AccountCreateManyUserInputSchema),z.lazy(() => AccountCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const SessionCreateWithoutUserInputSchema: z.ZodType<Prisma.SessionCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  sessionToken: z.string(),
  expires: z.coerce.date()
}).strict();

export const SessionUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.SessionUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  sessionToken: z.string(),
  expires: z.coerce.date()
}).strict();

export const SessionCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.SessionCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => SessionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const SessionCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.SessionCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => SessionCreateManyUserInputSchema),z.lazy(() => SessionCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const OrganizationCreateWithoutUsersInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutUsersInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  language: z.string().optional(),
  adminName: z.string(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  website: z.string(),
  phone: z.string(),
  currency: z.string().optional(),
  startDate: z.coerce.date().optional(),
  directBooking: z.boolean().optional(),
  logoUrl: z.string().optional().nullable(),
  listings: z.lazy(() => ListingCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionCreateNestedOneWithoutOrganizationInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateCreateNestedManyWithoutOrganizationInputSchema).optional(),
  guests: z.lazy(() => GuestCreateNestedManyWithoutOrganizationInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemCreateNestedManyWithoutOrganizationInputSchema).optional(),
  priceLabsConnection: z.lazy(() => PriceLabsConnectionCreateNestedOneWithoutOrganizationInputSchema).optional(),
  stripeConnection: z.lazy(() => StripeConnectionCreateNestedOneWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutUsersInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutUsersInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  language: z.string().optional(),
  adminName: z.string(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  website: z.string(),
  phone: z.string(),
  currency: z.string().optional(),
  startDate: z.coerce.date().optional(),
  directBooking: z.boolean().optional(),
  logoUrl: z.string().optional().nullable(),
  listings: z.lazy(() => ListingUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionUncheckedCreateNestedOneWithoutOrganizationInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  guests: z.lazy(() => GuestUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  priceLabsConnection: z.lazy(() => PriceLabsConnectionUncheckedCreateNestedOneWithoutOrganizationInputSchema).optional(),
  stripeConnection: z.lazy(() => StripeConnectionUncheckedCreateNestedOneWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutUsersInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutUsersInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutUsersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const ListingCreateWithoutPropertyManagerInputSchema: z.ZodType<Prisma.ListingCreateWithoutPropertyManagerInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  unitType: z.lazy(() => UnitTypeSchema),
  beds: z.number(),
  baths: z.number(),
  guests: z.number(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  timeZone: z.string(),
  airbnbRemitsTaxes: z.boolean().optional(),
  wifiName: z.string().optional().nullable(),
  wifiPassword: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  bpProductId: z.string().optional().nullable(),
  doorCode: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  basePrice: z.number().optional(),
  iCalKey: z.string().optional().nullable(),
  content: z.lazy(() => ContentCreateNestedOneWithoutListingInputSchema).optional(),
  rules: z.lazy(() => RulesCreateNestedOneWithoutListingInputSchema).optional(),
  pricing: z.lazy(() => PricingCreateNestedOneWithoutListingInputSchema).optional(),
  availability: z.lazy(() => AvailabilityCreateNestedOneWithoutListingInputSchema).optional(),
  amenities: z.lazy(() => AmenityCreateNestedManyWithoutListingInputSchema).optional(),
  fees: z.lazy(() => FeeCreateNestedManyWithoutListingInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesCreateNestedOneWithoutListingInputSchema).optional(),
  events: z.lazy(() => CalendarEventCreateNestedManyWithoutListingInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateCreateNestedManyWithoutListingsInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutListingsInputSchema),
  deductions: z.lazy(() => DeductionsCreateNestedOneWithoutListingInputSchema).optional(),
  propertyOwner: z.lazy(() => UserCreateNestedOneWithoutOwnedListingsInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadCreateNestedManyWithoutListingInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseCreateNestedManyWithoutListingInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementCreateNestedManyWithoutListingInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateCreateNestedManyWithoutListingInputSchema).optional(),
  keys: z.lazy(() => ListingKeyCreateNestedManyWithoutListingInputSchema).optional()
}).strict();

export const ListingUncheckedCreateWithoutPropertyManagerInputSchema: z.ZodType<Prisma.ListingUncheckedCreateWithoutPropertyManagerInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  unitType: z.lazy(() => UnitTypeSchema),
  beds: z.number(),
  baths: z.number(),
  guests: z.number(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  timeZone: z.string(),
  airbnbRemitsTaxes: z.boolean().optional(),
  organizationId: z.string(),
  propertyOwnerId: z.string().optional().nullable(),
  wifiName: z.string().optional().nullable(),
  wifiPassword: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  bpProductId: z.string().optional().nullable(),
  doorCode: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  basePrice: z.number().optional(),
  iCalKey: z.string().optional().nullable(),
  content: z.lazy(() => ContentUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  rules: z.lazy(() => RulesUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  pricing: z.lazy(() => PricingUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  amenities: z.lazy(() => AmenityUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  fees: z.lazy(() => FeeUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  events: z.lazy(() => CalendarEventUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUncheckedCreateNestedManyWithoutListingsInputSchema).optional(),
  deductions: z.lazy(() => DeductionsUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  keys: z.lazy(() => ListingKeyUncheckedCreateNestedManyWithoutListingInputSchema).optional()
}).strict();

export const ListingCreateOrConnectWithoutPropertyManagerInputSchema: z.ZodType<Prisma.ListingCreateOrConnectWithoutPropertyManagerInput> = z.object({
  where: z.lazy(() => ListingWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ListingCreateWithoutPropertyManagerInputSchema),z.lazy(() => ListingUncheckedCreateWithoutPropertyManagerInputSchema) ]),
}).strict();

export const ListingCreateManyPropertyManagerInputEnvelopeSchema: z.ZodType<Prisma.ListingCreateManyPropertyManagerInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ListingCreateManyPropertyManagerInputSchema),z.lazy(() => ListingCreateManyPropertyManagerInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ListingCreateWithoutPropertyOwnerInputSchema: z.ZodType<Prisma.ListingCreateWithoutPropertyOwnerInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  unitType: z.lazy(() => UnitTypeSchema),
  beds: z.number(),
  baths: z.number(),
  guests: z.number(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  timeZone: z.string(),
  airbnbRemitsTaxes: z.boolean().optional(),
  wifiName: z.string().optional().nullable(),
  wifiPassword: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  bpProductId: z.string().optional().nullable(),
  doorCode: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  basePrice: z.number().optional(),
  iCalKey: z.string().optional().nullable(),
  content: z.lazy(() => ContentCreateNestedOneWithoutListingInputSchema).optional(),
  rules: z.lazy(() => RulesCreateNestedOneWithoutListingInputSchema).optional(),
  pricing: z.lazy(() => PricingCreateNestedOneWithoutListingInputSchema).optional(),
  availability: z.lazy(() => AvailabilityCreateNestedOneWithoutListingInputSchema).optional(),
  amenities: z.lazy(() => AmenityCreateNestedManyWithoutListingInputSchema).optional(),
  fees: z.lazy(() => FeeCreateNestedManyWithoutListingInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesCreateNestedOneWithoutListingInputSchema).optional(),
  events: z.lazy(() => CalendarEventCreateNestedManyWithoutListingInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateCreateNestedManyWithoutListingsInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutListingsInputSchema),
  deductions: z.lazy(() => DeductionsCreateNestedOneWithoutListingInputSchema).optional(),
  propertyManager: z.lazy(() => UserCreateNestedOneWithoutManagedListingsInputSchema),
  messageThreads: z.lazy(() => MessageThreadCreateNestedManyWithoutListingInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseCreateNestedManyWithoutListingInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementCreateNestedManyWithoutListingInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateCreateNestedManyWithoutListingInputSchema).optional(),
  keys: z.lazy(() => ListingKeyCreateNestedManyWithoutListingInputSchema).optional()
}).strict();

export const ListingUncheckedCreateWithoutPropertyOwnerInputSchema: z.ZodType<Prisma.ListingUncheckedCreateWithoutPropertyOwnerInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  unitType: z.lazy(() => UnitTypeSchema),
  beds: z.number(),
  baths: z.number(),
  guests: z.number(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  timeZone: z.string(),
  airbnbRemitsTaxes: z.boolean().optional(),
  organizationId: z.string(),
  propertyManagerId: z.string(),
  wifiName: z.string().optional().nullable(),
  wifiPassword: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  bpProductId: z.string().optional().nullable(),
  doorCode: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  basePrice: z.number().optional(),
  iCalKey: z.string().optional().nullable(),
  content: z.lazy(() => ContentUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  rules: z.lazy(() => RulesUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  pricing: z.lazy(() => PricingUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  amenities: z.lazy(() => AmenityUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  fees: z.lazy(() => FeeUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  events: z.lazy(() => CalendarEventUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUncheckedCreateNestedManyWithoutListingsInputSchema).optional(),
  deductions: z.lazy(() => DeductionsUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  keys: z.lazy(() => ListingKeyUncheckedCreateNestedManyWithoutListingInputSchema).optional()
}).strict();

export const ListingCreateOrConnectWithoutPropertyOwnerInputSchema: z.ZodType<Prisma.ListingCreateOrConnectWithoutPropertyOwnerInput> = z.object({
  where: z.lazy(() => ListingWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ListingCreateWithoutPropertyOwnerInputSchema),z.lazy(() => ListingUncheckedCreateWithoutPropertyOwnerInputSchema) ]),
}).strict();

export const ListingCreateManyPropertyOwnerInputEnvelopeSchema: z.ZodType<Prisma.ListingCreateManyPropertyOwnerInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ListingCreateManyPropertyOwnerInputSchema),z.lazy(() => ListingCreateManyPropertyOwnerInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ExpenseCreateWithoutUserInputSchema: z.ZodType<Prisma.ExpenseCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  date: z.coerce.date(),
  amount: z.number(),
  vendor: z.string(),
  description: z.string().optional().nullable(),
  workOrder: z.string().optional().nullable(),
  receiptUrl: z.string().optional().nullable(),
  invoiceUrl: z.string().optional().nullable(),
  listingExpenses: z.lazy(() => ListingExpenseCreateNestedManyWithoutExpenseInputSchema).optional(),
  plaidTransaction: z.lazy(() => PlaidTransactionCreateNestedOneWithoutExpenseInputSchema).optional()
}).strict();

export const ExpenseUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.ExpenseUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  date: z.coerce.date(),
  amount: z.number(),
  vendor: z.string(),
  description: z.string().optional().nullable(),
  workOrder: z.string().optional().nullable(),
  receiptUrl: z.string().optional().nullable(),
  invoiceUrl: z.string().optional().nullable(),
  plaidTransactionId: z.string().optional().nullable(),
  listingExpenses: z.lazy(() => ListingExpenseUncheckedCreateNestedManyWithoutExpenseInputSchema).optional()
}).strict();

export const ExpenseCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.ExpenseCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => ExpenseWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ExpenseCreateWithoutUserInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const ExpenseCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.ExpenseCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ExpenseCreateManyUserInputSchema),z.lazy(() => ExpenseCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const BookingPalConnectionCreateWithoutOwnerInputSchema: z.ZodType<Prisma.BookingPalConnectionCreateWithoutOwnerInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  companyId: z.number(),
  email: z.string(),
  password: z.string(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutBookingPalConnectionInputSchema).optional()
}).strict();

export const BookingPalConnectionUncheckedCreateWithoutOwnerInputSchema: z.ZodType<Prisma.BookingPalConnectionUncheckedCreateWithoutOwnerInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organizationId: z.string().optional().nullable(),
  companyId: z.number(),
  email: z.string(),
  password: z.string()
}).strict();

export const BookingPalConnectionCreateOrConnectWithoutOwnerInputSchema: z.ZodType<Prisma.BookingPalConnectionCreateOrConnectWithoutOwnerInput> = z.object({
  where: z.lazy(() => BookingPalConnectionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => BookingPalConnectionCreateWithoutOwnerInputSchema),z.lazy(() => BookingPalConnectionUncheckedCreateWithoutOwnerInputSchema) ]),
}).strict();

export const PlaidItemCreateWithoutCreatorInputSchema: z.ZodType<Prisma.PlaidItemCreateWithoutCreatorInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  accessToken: z.string(),
  cursor: z.string().optional().nullable(),
  institution: z.string(),
  institutionId: z.string(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutPlaidItemsInputSchema),
  accounts: z.lazy(() => PlaidAccountCreateNestedManyWithoutItemInputSchema).optional()
}).strict();

export const PlaidItemUncheckedCreateWithoutCreatorInputSchema: z.ZodType<Prisma.PlaidItemUncheckedCreateWithoutCreatorInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  accessToken: z.string(),
  cursor: z.string().optional().nullable(),
  institution: z.string(),
  institutionId: z.string(),
  organizationId: z.string(),
  accounts: z.lazy(() => PlaidAccountUncheckedCreateNestedManyWithoutItemInputSchema).optional()
}).strict();

export const PlaidItemCreateOrConnectWithoutCreatorInputSchema: z.ZodType<Prisma.PlaidItemCreateOrConnectWithoutCreatorInput> = z.object({
  where: z.lazy(() => PlaidItemWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PlaidItemCreateWithoutCreatorInputSchema),z.lazy(() => PlaidItemUncheckedCreateWithoutCreatorInputSchema) ]),
}).strict();

export const PlaidItemCreateManyCreatorInputEnvelopeSchema: z.ZodType<Prisma.PlaidItemCreateManyCreatorInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => PlaidItemCreateManyCreatorInputSchema),z.lazy(() => PlaidItemCreateManyCreatorInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const RevenuePayoutCreateWithoutCreatedByInputSchema: z.ZodType<Prisma.RevenuePayoutCreateWithoutCreatedByInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  amount: z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  payout: z.lazy(() => PayoutCreateNestedOneWithoutRevenuePayoutInputSchema),
  revenue: z.lazy(() => RevenueCreateNestedOneWithoutPayoutInputSchema)
}).strict();

export const RevenuePayoutUncheckedCreateWithoutCreatedByInputSchema: z.ZodType<Prisma.RevenuePayoutUncheckedCreateWithoutCreatedByInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  payoutId: z.string(),
  revenueId: z.string(),
  amount: z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
}).strict();

export const RevenuePayoutCreateOrConnectWithoutCreatedByInputSchema: z.ZodType<Prisma.RevenuePayoutCreateOrConnectWithoutCreatedByInput> = z.object({
  where: z.lazy(() => RevenuePayoutWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RevenuePayoutCreateWithoutCreatedByInputSchema),z.lazy(() => RevenuePayoutUncheckedCreateWithoutCreatedByInputSchema) ]),
}).strict();

export const RevenuePayoutCreateManyCreatedByInputEnvelopeSchema: z.ZodType<Prisma.RevenuePayoutCreateManyCreatedByInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => RevenuePayoutCreateManyCreatedByInputSchema),z.lazy(() => RevenuePayoutCreateManyCreatedByInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const AccountUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.AccountUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => AccountWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => AccountUpdateWithoutUserInputSchema),z.lazy(() => AccountUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => AccountCreateWithoutUserInputSchema),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const AccountUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.AccountUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => AccountWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => AccountUpdateWithoutUserInputSchema),z.lazy(() => AccountUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const AccountUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.AccountUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => AccountScalarWhereInputSchema),
  data: z.union([ z.lazy(() => AccountUpdateManyMutationInputSchema),z.lazy(() => AccountUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const AccountScalarWhereInputSchema: z.ZodType<Prisma.AccountScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AccountScalarWhereInputSchema),z.lazy(() => AccountScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AccountScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AccountScalarWhereInputSchema),z.lazy(() => AccountScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  provider: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  providerAccountId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  refresh_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  access_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  expires_at: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  token_type: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  scope: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  id_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  session_state: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const SessionUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.SessionUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => SessionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SessionUpdateWithoutUserInputSchema),z.lazy(() => SessionUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const SessionUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.SessionUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => SessionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SessionUpdateWithoutUserInputSchema),z.lazy(() => SessionUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const SessionUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.SessionUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => SessionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SessionUpdateManyMutationInputSchema),z.lazy(() => SessionUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const SessionScalarWhereInputSchema: z.ZodType<Prisma.SessionScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SessionScalarWhereInputSchema),z.lazy(() => SessionScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionScalarWhereInputSchema),z.lazy(() => SessionScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  sessionToken: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expires: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const OrganizationUpsertWithoutUsersInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutUsersInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutUsersInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutUsersInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutUsersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutUsersInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutUsersInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutUsersInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutUsersInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutUsersInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutUsersInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutUsersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  adminName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  website: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  directBooking: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  logoUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  listings: z.lazy(() => ListingUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionUpdateOneWithoutOrganizationNestedInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  guests: z.lazy(() => GuestUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  priceLabsConnection: z.lazy(() => PriceLabsConnectionUpdateOneWithoutOrganizationNestedInputSchema).optional(),
  stripeConnection: z.lazy(() => StripeConnectionUpdateOneWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutUsersInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutUsersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  adminName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  website: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  directBooking: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  logoUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  listings: z.lazy(() => ListingUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionUncheckedUpdateOneWithoutOrganizationNestedInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  guests: z.lazy(() => GuestUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  priceLabsConnection: z.lazy(() => PriceLabsConnectionUncheckedUpdateOneWithoutOrganizationNestedInputSchema).optional(),
  stripeConnection: z.lazy(() => StripeConnectionUncheckedUpdateOneWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const ListingUpsertWithWhereUniqueWithoutPropertyManagerInputSchema: z.ZodType<Prisma.ListingUpsertWithWhereUniqueWithoutPropertyManagerInput> = z.object({
  where: z.lazy(() => ListingWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ListingUpdateWithoutPropertyManagerInputSchema),z.lazy(() => ListingUncheckedUpdateWithoutPropertyManagerInputSchema) ]),
  create: z.union([ z.lazy(() => ListingCreateWithoutPropertyManagerInputSchema),z.lazy(() => ListingUncheckedCreateWithoutPropertyManagerInputSchema) ]),
}).strict();

export const ListingUpdateWithWhereUniqueWithoutPropertyManagerInputSchema: z.ZodType<Prisma.ListingUpdateWithWhereUniqueWithoutPropertyManagerInput> = z.object({
  where: z.lazy(() => ListingWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ListingUpdateWithoutPropertyManagerInputSchema),z.lazy(() => ListingUncheckedUpdateWithoutPropertyManagerInputSchema) ]),
}).strict();

export const ListingUpdateManyWithWhereWithoutPropertyManagerInputSchema: z.ZodType<Prisma.ListingUpdateManyWithWhereWithoutPropertyManagerInput> = z.object({
  where: z.lazy(() => ListingScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ListingUpdateManyMutationInputSchema),z.lazy(() => ListingUncheckedUpdateManyWithoutPropertyManagerInputSchema) ]),
}).strict();

export const ListingScalarWhereInputSchema: z.ZodType<Prisma.ListingScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ListingScalarWhereInputSchema),z.lazy(() => ListingScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ListingScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ListingScalarWhereInputSchema),z.lazy(() => ListingScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  unitType: z.union([ z.lazy(() => EnumUnitTypeFilterSchema),z.lazy(() => UnitTypeSchema) ]).optional(),
  beds: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  baths: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  guests: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  line1: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  line2: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  city: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  state: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  zip: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  country: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  latitude: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  longitude: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  timeZone: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  airbnbRemitsTaxes: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  propertyManagerId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  propertyOwnerId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  wifiName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  wifiPassword: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  bpProductId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  doorCode: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  url: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  basePrice: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  iCalKey: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const ListingUpsertWithWhereUniqueWithoutPropertyOwnerInputSchema: z.ZodType<Prisma.ListingUpsertWithWhereUniqueWithoutPropertyOwnerInput> = z.object({
  where: z.lazy(() => ListingWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ListingUpdateWithoutPropertyOwnerInputSchema),z.lazy(() => ListingUncheckedUpdateWithoutPropertyOwnerInputSchema) ]),
  create: z.union([ z.lazy(() => ListingCreateWithoutPropertyOwnerInputSchema),z.lazy(() => ListingUncheckedCreateWithoutPropertyOwnerInputSchema) ]),
}).strict();

export const ListingUpdateWithWhereUniqueWithoutPropertyOwnerInputSchema: z.ZodType<Prisma.ListingUpdateWithWhereUniqueWithoutPropertyOwnerInput> = z.object({
  where: z.lazy(() => ListingWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ListingUpdateWithoutPropertyOwnerInputSchema),z.lazy(() => ListingUncheckedUpdateWithoutPropertyOwnerInputSchema) ]),
}).strict();

export const ListingUpdateManyWithWhereWithoutPropertyOwnerInputSchema: z.ZodType<Prisma.ListingUpdateManyWithWhereWithoutPropertyOwnerInput> = z.object({
  where: z.lazy(() => ListingScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ListingUpdateManyMutationInputSchema),z.lazy(() => ListingUncheckedUpdateManyWithoutPropertyOwnerInputSchema) ]),
}).strict();

export const ExpenseUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.ExpenseUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => ExpenseWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ExpenseUpdateWithoutUserInputSchema),z.lazy(() => ExpenseUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => ExpenseCreateWithoutUserInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const ExpenseUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.ExpenseUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => ExpenseWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ExpenseUpdateWithoutUserInputSchema),z.lazy(() => ExpenseUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const ExpenseUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.ExpenseUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => ExpenseScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ExpenseUpdateManyMutationInputSchema),z.lazy(() => ExpenseUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const ExpenseScalarWhereInputSchema: z.ZodType<Prisma.ExpenseScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ExpenseScalarWhereInputSchema),z.lazy(() => ExpenseScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ExpenseScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ExpenseScalarWhereInputSchema),z.lazy(() => ExpenseScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  amount: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  vendor: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  workOrder: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  receiptUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  invoiceUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  plaidTransactionId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const BookingPalConnectionUpsertWithoutOwnerInputSchema: z.ZodType<Prisma.BookingPalConnectionUpsertWithoutOwnerInput> = z.object({
  update: z.union([ z.lazy(() => BookingPalConnectionUpdateWithoutOwnerInputSchema),z.lazy(() => BookingPalConnectionUncheckedUpdateWithoutOwnerInputSchema) ]),
  create: z.union([ z.lazy(() => BookingPalConnectionCreateWithoutOwnerInputSchema),z.lazy(() => BookingPalConnectionUncheckedCreateWithoutOwnerInputSchema) ]),
  where: z.lazy(() => BookingPalConnectionWhereInputSchema).optional()
}).strict();

export const BookingPalConnectionUpdateToOneWithWhereWithoutOwnerInputSchema: z.ZodType<Prisma.BookingPalConnectionUpdateToOneWithWhereWithoutOwnerInput> = z.object({
  where: z.lazy(() => BookingPalConnectionWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => BookingPalConnectionUpdateWithoutOwnerInputSchema),z.lazy(() => BookingPalConnectionUncheckedUpdateWithoutOwnerInputSchema) ]),
}).strict();

export const BookingPalConnectionUpdateWithoutOwnerInputSchema: z.ZodType<Prisma.BookingPalConnectionUpdateWithoutOwnerInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  companyId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutBookingPalConnectionNestedInputSchema).optional()
}).strict();

export const BookingPalConnectionUncheckedUpdateWithoutOwnerInputSchema: z.ZodType<Prisma.BookingPalConnectionUncheckedUpdateWithoutOwnerInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companyId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PlaidItemUpsertWithWhereUniqueWithoutCreatorInputSchema: z.ZodType<Prisma.PlaidItemUpsertWithWhereUniqueWithoutCreatorInput> = z.object({
  where: z.lazy(() => PlaidItemWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => PlaidItemUpdateWithoutCreatorInputSchema),z.lazy(() => PlaidItemUncheckedUpdateWithoutCreatorInputSchema) ]),
  create: z.union([ z.lazy(() => PlaidItemCreateWithoutCreatorInputSchema),z.lazy(() => PlaidItemUncheckedCreateWithoutCreatorInputSchema) ]),
}).strict();

export const PlaidItemUpdateWithWhereUniqueWithoutCreatorInputSchema: z.ZodType<Prisma.PlaidItemUpdateWithWhereUniqueWithoutCreatorInput> = z.object({
  where: z.lazy(() => PlaidItemWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => PlaidItemUpdateWithoutCreatorInputSchema),z.lazy(() => PlaidItemUncheckedUpdateWithoutCreatorInputSchema) ]),
}).strict();

export const PlaidItemUpdateManyWithWhereWithoutCreatorInputSchema: z.ZodType<Prisma.PlaidItemUpdateManyWithWhereWithoutCreatorInput> = z.object({
  where: z.lazy(() => PlaidItemScalarWhereInputSchema),
  data: z.union([ z.lazy(() => PlaidItemUpdateManyMutationInputSchema),z.lazy(() => PlaidItemUncheckedUpdateManyWithoutCreatorInputSchema) ]),
}).strict();

export const PlaidItemScalarWhereInputSchema: z.ZodType<Prisma.PlaidItemScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PlaidItemScalarWhereInputSchema),z.lazy(() => PlaidItemScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PlaidItemScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PlaidItemScalarWhereInputSchema),z.lazy(() => PlaidItemScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  accessToken: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  cursor: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  institution: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  institutionId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  creatorId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const RevenuePayoutUpsertWithWhereUniqueWithoutCreatedByInputSchema: z.ZodType<Prisma.RevenuePayoutUpsertWithWhereUniqueWithoutCreatedByInput> = z.object({
  where: z.lazy(() => RevenuePayoutWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => RevenuePayoutUpdateWithoutCreatedByInputSchema),z.lazy(() => RevenuePayoutUncheckedUpdateWithoutCreatedByInputSchema) ]),
  create: z.union([ z.lazy(() => RevenuePayoutCreateWithoutCreatedByInputSchema),z.lazy(() => RevenuePayoutUncheckedCreateWithoutCreatedByInputSchema) ]),
}).strict();

export const RevenuePayoutUpdateWithWhereUniqueWithoutCreatedByInputSchema: z.ZodType<Prisma.RevenuePayoutUpdateWithWhereUniqueWithoutCreatedByInput> = z.object({
  where: z.lazy(() => RevenuePayoutWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => RevenuePayoutUpdateWithoutCreatedByInputSchema),z.lazy(() => RevenuePayoutUncheckedUpdateWithoutCreatedByInputSchema) ]),
}).strict();

export const RevenuePayoutUpdateManyWithWhereWithoutCreatedByInputSchema: z.ZodType<Prisma.RevenuePayoutUpdateManyWithWhereWithoutCreatedByInput> = z.object({
  where: z.lazy(() => RevenuePayoutScalarWhereInputSchema),
  data: z.union([ z.lazy(() => RevenuePayoutUpdateManyMutationInputSchema),z.lazy(() => RevenuePayoutUncheckedUpdateManyWithoutCreatedByInputSchema) ]),
}).strict();

export const RevenuePayoutScalarWhereInputSchema: z.ZodType<Prisma.RevenuePayoutScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RevenuePayoutScalarWhereInputSchema),z.lazy(() => RevenuePayoutScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RevenuePayoutScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RevenuePayoutScalarWhereInputSchema),z.lazy(() => RevenuePayoutScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdById: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  payoutId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  revenueId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  amount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
}).strict();

export const UserCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.UserCreateWithoutOrganizationInput> = z.object({
  id: z.string().optional(),
  name: z.string().optional().nullable(),
  email: z.string(),
  emailVerified: z.coerce.date().optional().nullable(),
  image: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  globalRole: z.lazy(() => GlobalRoleSchema).optional(),
  organizationRole: z.lazy(() => OrganizationRoleSchema).optional().nullable(),
  ownerEntity: z.string().optional().nullable(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  managedListings: z.lazy(() => ListingCreateNestedManyWithoutPropertyManagerInputSchema).optional(),
  ownedListings: z.lazy(() => ListingCreateNestedManyWithoutPropertyOwnerInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutUserInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionCreateNestedOneWithoutOwnerInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemCreateNestedManyWithoutCreatorInputSchema).optional(),
  revenuePayouts: z.lazy(() => RevenuePayoutCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().optional(),
  name: z.string().optional().nullable(),
  email: z.string(),
  emailVerified: z.coerce.date().optional().nullable(),
  image: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  globalRole: z.lazy(() => GlobalRoleSchema).optional(),
  organizationRole: z.lazy(() => OrganizationRoleSchema).optional().nullable(),
  ownerEntity: z.string().optional().nullable(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  managedListings: z.lazy(() => ListingUncheckedCreateNestedManyWithoutPropertyManagerInputSchema).optional(),
  ownedListings: z.lazy(() => ListingUncheckedCreateNestedManyWithoutPropertyOwnerInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionUncheckedCreateNestedOneWithoutOwnerInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  revenuePayouts: z.lazy(() => RevenuePayoutUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutOrganizationInputSchema),z.lazy(() => UserUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const UserCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.UserCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => UserCreateManyOrganizationInputSchema),z.lazy(() => UserCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ListingCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.ListingCreateWithoutOrganizationInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  unitType: z.lazy(() => UnitTypeSchema),
  beds: z.number(),
  baths: z.number(),
  guests: z.number(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  timeZone: z.string(),
  airbnbRemitsTaxes: z.boolean().optional(),
  wifiName: z.string().optional().nullable(),
  wifiPassword: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  bpProductId: z.string().optional().nullable(),
  doorCode: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  basePrice: z.number().optional(),
  iCalKey: z.string().optional().nullable(),
  content: z.lazy(() => ContentCreateNestedOneWithoutListingInputSchema).optional(),
  rules: z.lazy(() => RulesCreateNestedOneWithoutListingInputSchema).optional(),
  pricing: z.lazy(() => PricingCreateNestedOneWithoutListingInputSchema).optional(),
  availability: z.lazy(() => AvailabilityCreateNestedOneWithoutListingInputSchema).optional(),
  amenities: z.lazy(() => AmenityCreateNestedManyWithoutListingInputSchema).optional(),
  fees: z.lazy(() => FeeCreateNestedManyWithoutListingInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesCreateNestedOneWithoutListingInputSchema).optional(),
  events: z.lazy(() => CalendarEventCreateNestedManyWithoutListingInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateCreateNestedManyWithoutListingsInputSchema).optional(),
  deductions: z.lazy(() => DeductionsCreateNestedOneWithoutListingInputSchema).optional(),
  propertyManager: z.lazy(() => UserCreateNestedOneWithoutManagedListingsInputSchema),
  propertyOwner: z.lazy(() => UserCreateNestedOneWithoutOwnedListingsInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadCreateNestedManyWithoutListingInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseCreateNestedManyWithoutListingInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementCreateNestedManyWithoutListingInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateCreateNestedManyWithoutListingInputSchema).optional(),
  keys: z.lazy(() => ListingKeyCreateNestedManyWithoutListingInputSchema).optional()
}).strict();

export const ListingUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.ListingUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  unitType: z.lazy(() => UnitTypeSchema),
  beds: z.number(),
  baths: z.number(),
  guests: z.number(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  timeZone: z.string(),
  airbnbRemitsTaxes: z.boolean().optional(),
  propertyManagerId: z.string(),
  propertyOwnerId: z.string().optional().nullable(),
  wifiName: z.string().optional().nullable(),
  wifiPassword: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  bpProductId: z.string().optional().nullable(),
  doorCode: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  basePrice: z.number().optional(),
  iCalKey: z.string().optional().nullable(),
  content: z.lazy(() => ContentUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  rules: z.lazy(() => RulesUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  pricing: z.lazy(() => PricingUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  amenities: z.lazy(() => AmenityUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  fees: z.lazy(() => FeeUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  events: z.lazy(() => CalendarEventUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUncheckedCreateNestedManyWithoutListingsInputSchema).optional(),
  deductions: z.lazy(() => DeductionsUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  keys: z.lazy(() => ListingKeyUncheckedCreateNestedManyWithoutListingInputSchema).optional()
}).strict();

export const ListingCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.ListingCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => ListingWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ListingCreateWithoutOrganizationInputSchema),z.lazy(() => ListingUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const ListingCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.ListingCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ListingCreateManyOrganizationInputSchema),z.lazy(() => ListingCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const BookingPalConnectionCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.BookingPalConnectionCreateWithoutOrganizationInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  companyId: z.number(),
  email: z.string(),
  password: z.string(),
  owner: z.lazy(() => UserCreateNestedOneWithoutBookingPalConnectionInputSchema).optional()
}).strict();

export const BookingPalConnectionUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.BookingPalConnectionUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  companyId: z.number(),
  email: z.string(),
  password: z.string(),
  ownerId: z.string().optional().nullable()
}).strict();

export const BookingPalConnectionCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.BookingPalConnectionCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => BookingPalConnectionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => BookingPalConnectionCreateWithoutOrganizationInputSchema),z.lazy(() => BookingPalConnectionUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const MessageTemplateCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.MessageTemplateCreateWithoutOrganizationInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  title: z.string(),
  body: z.string(),
  bodyHtml: z.string(),
  enabled: z.boolean().optional(),
  trigger: z.lazy(() => TriggerSchema).optional().nullable(),
  triggerRange: z.lazy(() => TriggerRangeSchema).optional().nullable(),
  triggerUnit: z.lazy(() => TriggerUnitSchema).optional().nullable(),
  triggerValue: z.number().optional().nullable(),
  allListings: z.boolean().optional(),
  scheduledMessages: z.lazy(() => ScheduledMessageCreateNestedManyWithoutMessageTemplateInputSchema).optional(),
  listings: z.lazy(() => ListingCreateNestedManyWithoutMessageTemplatesInputSchema).optional()
}).strict();

export const MessageTemplateUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.MessageTemplateUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  title: z.string(),
  body: z.string(),
  bodyHtml: z.string(),
  enabled: z.boolean().optional(),
  trigger: z.lazy(() => TriggerSchema).optional().nullable(),
  triggerRange: z.lazy(() => TriggerRangeSchema).optional().nullable(),
  triggerUnit: z.lazy(() => TriggerUnitSchema).optional().nullable(),
  triggerValue: z.number().optional().nullable(),
  allListings: z.boolean().optional(),
  scheduledMessages: z.lazy(() => ScheduledMessageUncheckedCreateNestedManyWithoutMessageTemplateInputSchema).optional(),
  listings: z.lazy(() => ListingUncheckedCreateNestedManyWithoutMessageTemplatesInputSchema).optional()
}).strict();

export const MessageTemplateCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.MessageTemplateCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => MessageTemplateWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => MessageTemplateCreateWithoutOrganizationInputSchema),z.lazy(() => MessageTemplateUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const MessageTemplateCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.MessageTemplateCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => MessageTemplateCreateManyOrganizationInputSchema),z.lazy(() => MessageTemplateCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const GuestCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.GuestCreateWithoutOrganizationInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  reservations: z.lazy(() => ReservationCreateNestedManyWithoutGuestInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadCreateNestedManyWithoutGuestInputSchema).optional()
}).strict();

export const GuestUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.GuestUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  reservations: z.lazy(() => ReservationUncheckedCreateNestedManyWithoutGuestInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUncheckedCreateNestedManyWithoutGuestInputSchema).optional()
}).strict();

export const GuestCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.GuestCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => GuestWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => GuestCreateWithoutOrganizationInputSchema),z.lazy(() => GuestUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const GuestCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.GuestCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => GuestCreateManyOrganizationInputSchema),z.lazy(() => GuestCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const PlaidItemCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.PlaidItemCreateWithoutOrganizationInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  accessToken: z.string(),
  cursor: z.string().optional().nullable(),
  institution: z.string(),
  institutionId: z.string(),
  creator: z.lazy(() => UserCreateNestedOneWithoutPlaidItemsInputSchema),
  accounts: z.lazy(() => PlaidAccountCreateNestedManyWithoutItemInputSchema).optional()
}).strict();

export const PlaidItemUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.PlaidItemUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  accessToken: z.string(),
  cursor: z.string().optional().nullable(),
  institution: z.string(),
  institutionId: z.string(),
  creatorId: z.string(),
  accounts: z.lazy(() => PlaidAccountUncheckedCreateNestedManyWithoutItemInputSchema).optional()
}).strict();

export const PlaidItemCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.PlaidItemCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => PlaidItemWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PlaidItemCreateWithoutOrganizationInputSchema),z.lazy(() => PlaidItemUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const PlaidItemCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.PlaidItemCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => PlaidItemCreateManyOrganizationInputSchema),z.lazy(() => PlaidItemCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const PriceLabsConnectionCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.PriceLabsConnectionCreateWithoutOrganizationInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  accountEmail: z.string()
}).strict();

export const PriceLabsConnectionUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.PriceLabsConnectionUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  accountEmail: z.string()
}).strict();

export const PriceLabsConnectionCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.PriceLabsConnectionCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => PriceLabsConnectionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PriceLabsConnectionCreateWithoutOrganizationInputSchema),z.lazy(() => PriceLabsConnectionUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const StripeConnectionCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.StripeConnectionCreateWithoutOrganizationInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  accountId: z.string(),
  detailsSubmitted: z.boolean().optional()
}).strict();

export const StripeConnectionUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.StripeConnectionUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  accountId: z.string(),
  detailsSubmitted: z.boolean().optional()
}).strict();

export const StripeConnectionCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.StripeConnectionCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => StripeConnectionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => StripeConnectionCreateWithoutOrganizationInputSchema),z.lazy(() => StripeConnectionUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const UserUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.UserUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => UserUpdateWithoutOrganizationInputSchema),z.lazy(() => UserUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutOrganizationInputSchema),z.lazy(() => UserUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const UserUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.UserUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => UserUpdateWithoutOrganizationInputSchema),z.lazy(() => UserUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const UserUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.UserUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => UserScalarWhereInputSchema),
  data: z.union([ z.lazy(() => UserUpdateManyMutationInputSchema),z.lazy(() => UserUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const UserScalarWhereInputSchema: z.ZodType<Prisma.UserScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserScalarWhereInputSchema),z.lazy(() => UserScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserScalarWhereInputSchema),z.lazy(() => UserScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  emailVerified: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  image: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  globalRole: z.union([ z.lazy(() => EnumGlobalRoleFilterSchema),z.lazy(() => GlobalRoleSchema) ]).optional(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationRole: z.union([ z.lazy(() => EnumOrganizationRoleNullableFilterSchema),z.lazy(() => OrganizationRoleSchema) ]).optional().nullable(),
  ownerEntity: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const ListingUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.ListingUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => ListingWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ListingUpdateWithoutOrganizationInputSchema),z.lazy(() => ListingUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => ListingCreateWithoutOrganizationInputSchema),z.lazy(() => ListingUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const ListingUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.ListingUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => ListingWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ListingUpdateWithoutOrganizationInputSchema),z.lazy(() => ListingUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const ListingUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.ListingUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => ListingScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ListingUpdateManyMutationInputSchema),z.lazy(() => ListingUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const BookingPalConnectionUpsertWithoutOrganizationInputSchema: z.ZodType<Prisma.BookingPalConnectionUpsertWithoutOrganizationInput> = z.object({
  update: z.union([ z.lazy(() => BookingPalConnectionUpdateWithoutOrganizationInputSchema),z.lazy(() => BookingPalConnectionUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => BookingPalConnectionCreateWithoutOrganizationInputSchema),z.lazy(() => BookingPalConnectionUncheckedCreateWithoutOrganizationInputSchema) ]),
  where: z.lazy(() => BookingPalConnectionWhereInputSchema).optional()
}).strict();

export const BookingPalConnectionUpdateToOneWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.BookingPalConnectionUpdateToOneWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => BookingPalConnectionWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => BookingPalConnectionUpdateWithoutOrganizationInputSchema),z.lazy(() => BookingPalConnectionUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const BookingPalConnectionUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.BookingPalConnectionUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  companyId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  owner: z.lazy(() => UserUpdateOneWithoutBookingPalConnectionNestedInputSchema).optional()
}).strict();

export const BookingPalConnectionUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.BookingPalConnectionUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  companyId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ownerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const MessageTemplateUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.MessageTemplateUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => MessageTemplateWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => MessageTemplateUpdateWithoutOrganizationInputSchema),z.lazy(() => MessageTemplateUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => MessageTemplateCreateWithoutOrganizationInputSchema),z.lazy(() => MessageTemplateUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const MessageTemplateUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.MessageTemplateUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => MessageTemplateWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => MessageTemplateUpdateWithoutOrganizationInputSchema),z.lazy(() => MessageTemplateUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const MessageTemplateUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.MessageTemplateUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => MessageTemplateScalarWhereInputSchema),
  data: z.union([ z.lazy(() => MessageTemplateUpdateManyMutationInputSchema),z.lazy(() => MessageTemplateUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const MessageTemplateScalarWhereInputSchema: z.ZodType<Prisma.MessageTemplateScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => MessageTemplateScalarWhereInputSchema),z.lazy(() => MessageTemplateScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MessageTemplateScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MessageTemplateScalarWhereInputSchema),z.lazy(() => MessageTemplateScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  body: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  bodyHtml: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  enabled: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  trigger: z.union([ z.lazy(() => EnumTriggerNullableFilterSchema),z.lazy(() => TriggerSchema) ]).optional().nullable(),
  triggerRange: z.union([ z.lazy(() => EnumTriggerRangeNullableFilterSchema),z.lazy(() => TriggerRangeSchema) ]).optional().nullable(),
  triggerUnit: z.union([ z.lazy(() => EnumTriggerUnitNullableFilterSchema),z.lazy(() => TriggerUnitSchema) ]).optional().nullable(),
  triggerValue: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  allListings: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const GuestUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.GuestUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => GuestWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => GuestUpdateWithoutOrganizationInputSchema),z.lazy(() => GuestUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => GuestCreateWithoutOrganizationInputSchema),z.lazy(() => GuestUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const GuestUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.GuestUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => GuestWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => GuestUpdateWithoutOrganizationInputSchema),z.lazy(() => GuestUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const GuestUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.GuestUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => GuestScalarWhereInputSchema),
  data: z.union([ z.lazy(() => GuestUpdateManyMutationInputSchema),z.lazy(() => GuestUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const GuestScalarWhereInputSchema: z.ZodType<Prisma.GuestScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => GuestScalarWhereInputSchema),z.lazy(() => GuestScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => GuestScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => GuestScalarWhereInputSchema),z.lazy(() => GuestScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const PlaidItemUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.PlaidItemUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => PlaidItemWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => PlaidItemUpdateWithoutOrganizationInputSchema),z.lazy(() => PlaidItemUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => PlaidItemCreateWithoutOrganizationInputSchema),z.lazy(() => PlaidItemUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const PlaidItemUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.PlaidItemUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => PlaidItemWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => PlaidItemUpdateWithoutOrganizationInputSchema),z.lazy(() => PlaidItemUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const PlaidItemUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.PlaidItemUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => PlaidItemScalarWhereInputSchema),
  data: z.union([ z.lazy(() => PlaidItemUpdateManyMutationInputSchema),z.lazy(() => PlaidItemUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const PriceLabsConnectionUpsertWithoutOrganizationInputSchema: z.ZodType<Prisma.PriceLabsConnectionUpsertWithoutOrganizationInput> = z.object({
  update: z.union([ z.lazy(() => PriceLabsConnectionUpdateWithoutOrganizationInputSchema),z.lazy(() => PriceLabsConnectionUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => PriceLabsConnectionCreateWithoutOrganizationInputSchema),z.lazy(() => PriceLabsConnectionUncheckedCreateWithoutOrganizationInputSchema) ]),
  where: z.lazy(() => PriceLabsConnectionWhereInputSchema).optional()
}).strict();

export const PriceLabsConnectionUpdateToOneWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.PriceLabsConnectionUpdateToOneWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => PriceLabsConnectionWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => PriceLabsConnectionUpdateWithoutOrganizationInputSchema),z.lazy(() => PriceLabsConnectionUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const PriceLabsConnectionUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.PriceLabsConnectionUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  accountEmail: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PriceLabsConnectionUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.PriceLabsConnectionUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  accountEmail: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const StripeConnectionUpsertWithoutOrganizationInputSchema: z.ZodType<Prisma.StripeConnectionUpsertWithoutOrganizationInput> = z.object({
  update: z.union([ z.lazy(() => StripeConnectionUpdateWithoutOrganizationInputSchema),z.lazy(() => StripeConnectionUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => StripeConnectionCreateWithoutOrganizationInputSchema),z.lazy(() => StripeConnectionUncheckedCreateWithoutOrganizationInputSchema) ]),
  where: z.lazy(() => StripeConnectionWhereInputSchema).optional()
}).strict();

export const StripeConnectionUpdateToOneWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.StripeConnectionUpdateToOneWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => StripeConnectionWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => StripeConnectionUpdateWithoutOrganizationInputSchema),z.lazy(() => StripeConnectionUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const StripeConnectionUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.StripeConnectionUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  accountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  detailsSubmitted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const StripeConnectionUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.StripeConnectionUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  accountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  detailsSubmitted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const OrganizationCreateWithoutBookingPalConnectionInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutBookingPalConnectionInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  language: z.string().optional(),
  adminName: z.string(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  website: z.string(),
  phone: z.string(),
  currency: z.string().optional(),
  startDate: z.coerce.date().optional(),
  directBooking: z.boolean().optional(),
  logoUrl: z.string().optional().nullable(),
  users: z.lazy(() => UserCreateNestedManyWithoutOrganizationInputSchema).optional(),
  listings: z.lazy(() => ListingCreateNestedManyWithoutOrganizationInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateCreateNestedManyWithoutOrganizationInputSchema).optional(),
  guests: z.lazy(() => GuestCreateNestedManyWithoutOrganizationInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemCreateNestedManyWithoutOrganizationInputSchema).optional(),
  priceLabsConnection: z.lazy(() => PriceLabsConnectionCreateNestedOneWithoutOrganizationInputSchema).optional(),
  stripeConnection: z.lazy(() => StripeConnectionCreateNestedOneWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutBookingPalConnectionInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutBookingPalConnectionInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  language: z.string().optional(),
  adminName: z.string(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  website: z.string(),
  phone: z.string(),
  currency: z.string().optional(),
  startDate: z.coerce.date().optional(),
  directBooking: z.boolean().optional(),
  logoUrl: z.string().optional().nullable(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  listings: z.lazy(() => ListingUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  guests: z.lazy(() => GuestUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  priceLabsConnection: z.lazy(() => PriceLabsConnectionUncheckedCreateNestedOneWithoutOrganizationInputSchema).optional(),
  stripeConnection: z.lazy(() => StripeConnectionUncheckedCreateNestedOneWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutBookingPalConnectionInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutBookingPalConnectionInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutBookingPalConnectionInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutBookingPalConnectionInputSchema) ]),
}).strict();

export const UserCreateWithoutBookingPalConnectionInputSchema: z.ZodType<Prisma.UserCreateWithoutBookingPalConnectionInput> = z.object({
  id: z.string().optional(),
  name: z.string().optional().nullable(),
  email: z.string(),
  emailVerified: z.coerce.date().optional().nullable(),
  image: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  globalRole: z.lazy(() => GlobalRoleSchema).optional(),
  organizationRole: z.lazy(() => OrganizationRoleSchema).optional().nullable(),
  ownerEntity: z.string().optional().nullable(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  managedListings: z.lazy(() => ListingCreateNestedManyWithoutPropertyManagerInputSchema).optional(),
  ownedListings: z.lazy(() => ListingCreateNestedManyWithoutPropertyOwnerInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutUserInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemCreateNestedManyWithoutCreatorInputSchema).optional(),
  revenuePayouts: z.lazy(() => RevenuePayoutCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutBookingPalConnectionInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutBookingPalConnectionInput> = z.object({
  id: z.string().optional(),
  name: z.string().optional().nullable(),
  email: z.string(),
  emailVerified: z.coerce.date().optional().nullable(),
  image: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  globalRole: z.lazy(() => GlobalRoleSchema).optional(),
  organizationId: z.string().optional().nullable(),
  organizationRole: z.lazy(() => OrganizationRoleSchema).optional().nullable(),
  ownerEntity: z.string().optional().nullable(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  managedListings: z.lazy(() => ListingUncheckedCreateNestedManyWithoutPropertyManagerInputSchema).optional(),
  ownedListings: z.lazy(() => ListingUncheckedCreateNestedManyWithoutPropertyOwnerInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  revenuePayouts: z.lazy(() => RevenuePayoutUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutBookingPalConnectionInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutBookingPalConnectionInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutBookingPalConnectionInputSchema),z.lazy(() => UserUncheckedCreateWithoutBookingPalConnectionInputSchema) ]),
}).strict();

export const OrganizationUpsertWithoutBookingPalConnectionInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutBookingPalConnectionInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutBookingPalConnectionInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutBookingPalConnectionInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutBookingPalConnectionInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutBookingPalConnectionInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutBookingPalConnectionInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutBookingPalConnectionInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutBookingPalConnectionInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutBookingPalConnectionInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutBookingPalConnectionInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutBookingPalConnectionInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  adminName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  website: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  directBooking: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  logoUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UserUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  listings: z.lazy(() => ListingUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  guests: z.lazy(() => GuestUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  priceLabsConnection: z.lazy(() => PriceLabsConnectionUpdateOneWithoutOrganizationNestedInputSchema).optional(),
  stripeConnection: z.lazy(() => StripeConnectionUpdateOneWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutBookingPalConnectionInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutBookingPalConnectionInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  adminName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  website: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  directBooking: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  logoUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  listings: z.lazy(() => ListingUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  guests: z.lazy(() => GuestUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  priceLabsConnection: z.lazy(() => PriceLabsConnectionUncheckedUpdateOneWithoutOrganizationNestedInputSchema).optional(),
  stripeConnection: z.lazy(() => StripeConnectionUncheckedUpdateOneWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutBookingPalConnectionInputSchema: z.ZodType<Prisma.UserUpsertWithoutBookingPalConnectionInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutBookingPalConnectionInputSchema),z.lazy(() => UserUncheckedUpdateWithoutBookingPalConnectionInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutBookingPalConnectionInputSchema),z.lazy(() => UserUncheckedCreateWithoutBookingPalConnectionInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutBookingPalConnectionInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutBookingPalConnectionInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutBookingPalConnectionInputSchema),z.lazy(() => UserUncheckedUpdateWithoutBookingPalConnectionInputSchema) ]),
}).strict();

export const UserUpdateWithoutBookingPalConnectionInputSchema: z.ZodType<Prisma.UserUpdateWithoutBookingPalConnectionInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  globalRole: z.union([ z.lazy(() => GlobalRoleSchema),z.lazy(() => EnumGlobalRoleFieldUpdateOperationsInputSchema) ]).optional(),
  organizationRole: z.union([ z.lazy(() => OrganizationRoleSchema),z.lazy(() => NullableEnumOrganizationRoleFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerEntity: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  managedListings: z.lazy(() => ListingUpdateManyWithoutPropertyManagerNestedInputSchema).optional(),
  ownedListings: z.lazy(() => ListingUpdateManyWithoutPropertyOwnerNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutUserNestedInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemUpdateManyWithoutCreatorNestedInputSchema).optional(),
  revenuePayouts: z.lazy(() => RevenuePayoutUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutBookingPalConnectionInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutBookingPalConnectionInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  globalRole: z.union([ z.lazy(() => GlobalRoleSchema),z.lazy(() => EnumGlobalRoleFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationRole: z.union([ z.lazy(() => OrganizationRoleSchema),z.lazy(() => NullableEnumOrganizationRoleFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerEntity: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  managedListings: z.lazy(() => ListingUncheckedUpdateManyWithoutPropertyManagerNestedInputSchema).optional(),
  ownedListings: z.lazy(() => ListingUncheckedUpdateManyWithoutPropertyOwnerNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  revenuePayouts: z.lazy(() => RevenuePayoutUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const OrganizationCreateWithoutPriceLabsConnectionInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutPriceLabsConnectionInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  language: z.string().optional(),
  adminName: z.string(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  website: z.string(),
  phone: z.string(),
  currency: z.string().optional(),
  startDate: z.coerce.date().optional(),
  directBooking: z.boolean().optional(),
  logoUrl: z.string().optional().nullable(),
  users: z.lazy(() => UserCreateNestedManyWithoutOrganizationInputSchema).optional(),
  listings: z.lazy(() => ListingCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionCreateNestedOneWithoutOrganizationInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateCreateNestedManyWithoutOrganizationInputSchema).optional(),
  guests: z.lazy(() => GuestCreateNestedManyWithoutOrganizationInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemCreateNestedManyWithoutOrganizationInputSchema).optional(),
  stripeConnection: z.lazy(() => StripeConnectionCreateNestedOneWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutPriceLabsConnectionInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutPriceLabsConnectionInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  language: z.string().optional(),
  adminName: z.string(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  website: z.string(),
  phone: z.string(),
  currency: z.string().optional(),
  startDate: z.coerce.date().optional(),
  directBooking: z.boolean().optional(),
  logoUrl: z.string().optional().nullable(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  listings: z.lazy(() => ListingUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionUncheckedCreateNestedOneWithoutOrganizationInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  guests: z.lazy(() => GuestUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  stripeConnection: z.lazy(() => StripeConnectionUncheckedCreateNestedOneWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutPriceLabsConnectionInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutPriceLabsConnectionInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutPriceLabsConnectionInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutPriceLabsConnectionInputSchema) ]),
}).strict();

export const OrganizationUpsertWithoutPriceLabsConnectionInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutPriceLabsConnectionInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutPriceLabsConnectionInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutPriceLabsConnectionInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutPriceLabsConnectionInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutPriceLabsConnectionInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutPriceLabsConnectionInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutPriceLabsConnectionInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutPriceLabsConnectionInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutPriceLabsConnectionInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutPriceLabsConnectionInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutPriceLabsConnectionInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  adminName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  website: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  directBooking: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  logoUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UserUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  listings: z.lazy(() => ListingUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionUpdateOneWithoutOrganizationNestedInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  guests: z.lazy(() => GuestUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  stripeConnection: z.lazy(() => StripeConnectionUpdateOneWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutPriceLabsConnectionInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutPriceLabsConnectionInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  adminName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  website: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  directBooking: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  logoUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  listings: z.lazy(() => ListingUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionUncheckedUpdateOneWithoutOrganizationNestedInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  guests: z.lazy(() => GuestUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  stripeConnection: z.lazy(() => StripeConnectionUncheckedUpdateOneWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationCreateWithoutStripeConnectionInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutStripeConnectionInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  language: z.string().optional(),
  adminName: z.string(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  website: z.string(),
  phone: z.string(),
  currency: z.string().optional(),
  startDate: z.coerce.date().optional(),
  directBooking: z.boolean().optional(),
  logoUrl: z.string().optional().nullable(),
  users: z.lazy(() => UserCreateNestedManyWithoutOrganizationInputSchema).optional(),
  listings: z.lazy(() => ListingCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionCreateNestedOneWithoutOrganizationInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateCreateNestedManyWithoutOrganizationInputSchema).optional(),
  guests: z.lazy(() => GuestCreateNestedManyWithoutOrganizationInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemCreateNestedManyWithoutOrganizationInputSchema).optional(),
  priceLabsConnection: z.lazy(() => PriceLabsConnectionCreateNestedOneWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutStripeConnectionInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutStripeConnectionInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  language: z.string().optional(),
  adminName: z.string(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  website: z.string(),
  phone: z.string(),
  currency: z.string().optional(),
  startDate: z.coerce.date().optional(),
  directBooking: z.boolean().optional(),
  logoUrl: z.string().optional().nullable(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  listings: z.lazy(() => ListingUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionUncheckedCreateNestedOneWithoutOrganizationInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  guests: z.lazy(() => GuestUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  priceLabsConnection: z.lazy(() => PriceLabsConnectionUncheckedCreateNestedOneWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutStripeConnectionInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutStripeConnectionInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutStripeConnectionInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutStripeConnectionInputSchema) ]),
}).strict();

export const OrganizationUpsertWithoutStripeConnectionInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutStripeConnectionInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutStripeConnectionInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutStripeConnectionInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutStripeConnectionInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutStripeConnectionInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutStripeConnectionInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutStripeConnectionInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutStripeConnectionInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutStripeConnectionInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutStripeConnectionInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutStripeConnectionInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  adminName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  website: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  directBooking: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  logoUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UserUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  listings: z.lazy(() => ListingUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionUpdateOneWithoutOrganizationNestedInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  guests: z.lazy(() => GuestUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  priceLabsConnection: z.lazy(() => PriceLabsConnectionUpdateOneWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutStripeConnectionInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutStripeConnectionInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  adminName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  website: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  directBooking: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  logoUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  listings: z.lazy(() => ListingUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionUncheckedUpdateOneWithoutOrganizationNestedInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  guests: z.lazy(() => GuestUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  priceLabsConnection: z.lazy(() => PriceLabsConnectionUncheckedUpdateOneWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const ContentCreateWithoutListingInputSchema: z.ZodType<Prisma.ContentCreateWithoutListingInput> = z.object({
  id: z.string().optional(),
  photos: z.union([ z.lazy(() => ContentCreatephotosInputSchema),z.string().array() ]).optional(),
  title: z.string(),
  description: z.string(),
  aiInfo: z.string().optional().nullable(),
  bedrooms: z.lazy(() => BedroomCreateNestedManyWithoutContentInputSchema).optional()
}).strict();

export const ContentUncheckedCreateWithoutListingInputSchema: z.ZodType<Prisma.ContentUncheckedCreateWithoutListingInput> = z.object({
  id: z.string().optional(),
  photos: z.union([ z.lazy(() => ContentCreatephotosInputSchema),z.string().array() ]).optional(),
  title: z.string(),
  description: z.string(),
  aiInfo: z.string().optional().nullable(),
  bedrooms: z.lazy(() => BedroomUncheckedCreateNestedManyWithoutContentInputSchema).optional()
}).strict();

export const ContentCreateOrConnectWithoutListingInputSchema: z.ZodType<Prisma.ContentCreateOrConnectWithoutListingInput> = z.object({
  where: z.lazy(() => ContentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ContentCreateWithoutListingInputSchema),z.lazy(() => ContentUncheckedCreateWithoutListingInputSchema) ]),
}).strict();

export const RulesCreateWithoutListingInputSchema: z.ZodType<Prisma.RulesCreateWithoutListingInput> = z.object({
  id: z.string().optional(),
  pets: z.boolean().optional(),
  children: z.boolean().optional(),
  smoking: z.boolean().optional(),
  deposit: z.boolean().optional(),
  house: z.string().optional().nullable()
}).strict();

export const RulesUncheckedCreateWithoutListingInputSchema: z.ZodType<Prisma.RulesUncheckedCreateWithoutListingInput> = z.object({
  id: z.string().optional(),
  pets: z.boolean().optional(),
  children: z.boolean().optional(),
  smoking: z.boolean().optional(),
  deposit: z.boolean().optional(),
  house: z.string().optional().nullable()
}).strict();

export const RulesCreateOrConnectWithoutListingInputSchema: z.ZodType<Prisma.RulesCreateOrConnectWithoutListingInput> = z.object({
  where: z.lazy(() => RulesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RulesCreateWithoutListingInputSchema),z.lazy(() => RulesUncheckedCreateWithoutListingInputSchema) ]),
}).strict();

export const PricingCreateWithoutListingInputSchema: z.ZodType<Prisma.PricingCreateWithoutListingInput> = z.object({
  id: z.string().optional(),
  minimum: z.number(),
  weekday: z.number(),
  weekend: z.number(),
  minStay: z.number(),
  maxStay: z.number(),
  dynamicPricing: z.lazy(() => DynamicPricingSchema).optional(),
  dates: z.lazy(() => PricingDateCreateNestedManyWithoutPricingInputSchema).optional(),
  discounts: z.lazy(() => DiscountCreateNestedManyWithoutPricingInputSchema).optional()
}).strict();

export const PricingUncheckedCreateWithoutListingInputSchema: z.ZodType<Prisma.PricingUncheckedCreateWithoutListingInput> = z.object({
  id: z.string().optional(),
  minimum: z.number(),
  weekday: z.number(),
  weekend: z.number(),
  minStay: z.number(),
  maxStay: z.number(),
  dynamicPricing: z.lazy(() => DynamicPricingSchema).optional(),
  dates: z.lazy(() => PricingDateUncheckedCreateNestedManyWithoutPricingInputSchema).optional(),
  discounts: z.lazy(() => DiscountUncheckedCreateNestedManyWithoutPricingInputSchema).optional()
}).strict();

export const PricingCreateOrConnectWithoutListingInputSchema: z.ZodType<Prisma.PricingCreateOrConnectWithoutListingInput> = z.object({
  where: z.lazy(() => PricingWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PricingCreateWithoutListingInputSchema),z.lazy(() => PricingUncheckedCreateWithoutListingInputSchema) ]),
}).strict();

export const AvailabilityCreateWithoutListingInputSchema: z.ZodType<Prisma.AvailabilityCreateWithoutListingInput> = z.object({
  id: z.string().optional(),
  checkIn: z.string(),
  checkOut: z.string(),
  leadTime: z.number().optional()
}).strict();

export const AvailabilityUncheckedCreateWithoutListingInputSchema: z.ZodType<Prisma.AvailabilityUncheckedCreateWithoutListingInput> = z.object({
  id: z.string().optional(),
  checkIn: z.string(),
  checkOut: z.string(),
  leadTime: z.number().optional()
}).strict();

export const AvailabilityCreateOrConnectWithoutListingInputSchema: z.ZodType<Prisma.AvailabilityCreateOrConnectWithoutListingInput> = z.object({
  where: z.lazy(() => AvailabilityWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AvailabilityCreateWithoutListingInputSchema),z.lazy(() => AvailabilityUncheckedCreateWithoutListingInputSchema) ]),
}).strict();

export const AmenityCreateWithoutListingInputSchema: z.ZodType<Prisma.AmenityCreateWithoutListingInput> = z.object({
  id: z.string().optional(),
  typeId: z.string(),
  note: z.string().optional().nullable()
}).strict();

export const AmenityUncheckedCreateWithoutListingInputSchema: z.ZodType<Prisma.AmenityUncheckedCreateWithoutListingInput> = z.object({
  id: z.string().optional(),
  typeId: z.string(),
  note: z.string().optional().nullable()
}).strict();

export const AmenityCreateOrConnectWithoutListingInputSchema: z.ZodType<Prisma.AmenityCreateOrConnectWithoutListingInput> = z.object({
  where: z.lazy(() => AmenityWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AmenityCreateWithoutListingInputSchema),z.lazy(() => AmenityUncheckedCreateWithoutListingInputSchema) ]),
}).strict();

export const AmenityCreateManyListingInputEnvelopeSchema: z.ZodType<Prisma.AmenityCreateManyListingInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => AmenityCreateManyListingInputSchema),z.lazy(() => AmenityCreateManyListingInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const FeeCreateWithoutListingInputSchema: z.ZodType<Prisma.FeeCreateWithoutListingInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  value: z.number(),
  unit: z.string(),
  taxable: z.boolean(),
  type: z.string(),
  share: z.number()
}).strict();

export const FeeUncheckedCreateWithoutListingInputSchema: z.ZodType<Prisma.FeeUncheckedCreateWithoutListingInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  value: z.number(),
  unit: z.string(),
  taxable: z.boolean(),
  type: z.string(),
  share: z.number()
}).strict();

export const FeeCreateOrConnectWithoutListingInputSchema: z.ZodType<Prisma.FeeCreateOrConnectWithoutListingInput> = z.object({
  where: z.lazy(() => FeeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FeeCreateWithoutListingInputSchema),z.lazy(() => FeeUncheckedCreateWithoutListingInputSchema) ]),
}).strict();

export const FeeCreateManyListingInputEnvelopeSchema: z.ZodType<Prisma.FeeCreateManyListingInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => FeeCreateManyListingInputSchema),z.lazy(() => FeeCreateManyListingInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TaxRatesCreateWithoutListingInputSchema: z.ZodType<Prisma.TaxRatesCreateWithoutListingInput> = z.object({
  id: z.string().optional(),
  municipal: z.number().optional(),
  county: z.number().optional(),
  state: z.number().optional()
}).strict();

export const TaxRatesUncheckedCreateWithoutListingInputSchema: z.ZodType<Prisma.TaxRatesUncheckedCreateWithoutListingInput> = z.object({
  id: z.string().optional(),
  municipal: z.number().optional(),
  county: z.number().optional(),
  state: z.number().optional()
}).strict();

export const TaxRatesCreateOrConnectWithoutListingInputSchema: z.ZodType<Prisma.TaxRatesCreateOrConnectWithoutListingInput> = z.object({
  where: z.lazy(() => TaxRatesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TaxRatesCreateWithoutListingInputSchema),z.lazy(() => TaxRatesUncheckedCreateWithoutListingInputSchema) ]),
}).strict();

export const CalendarEventCreateWithoutListingInputSchema: z.ZodType<Prisma.CalendarEventCreateWithoutListingInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  fromDate: z.coerce.date(),
  toDate: z.coerce.date(),
  type: z.lazy(() => CalendarEventTypeSchema),
  notes: z.string().optional().nullable(),
  bookedOn: z.coerce.date().optional().nullable(),
  reservation: z.lazy(() => ReservationCreateNestedOneWithoutCalendarEventInputSchema).optional()
}).strict();

export const CalendarEventUncheckedCreateWithoutListingInputSchema: z.ZodType<Prisma.CalendarEventUncheckedCreateWithoutListingInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  fromDate: z.coerce.date(),
  toDate: z.coerce.date(),
  type: z.lazy(() => CalendarEventTypeSchema),
  notes: z.string().optional().nullable(),
  bookedOn: z.coerce.date().optional().nullable(),
  reservation: z.lazy(() => ReservationUncheckedCreateNestedOneWithoutCalendarEventInputSchema).optional()
}).strict();

export const CalendarEventCreateOrConnectWithoutListingInputSchema: z.ZodType<Prisma.CalendarEventCreateOrConnectWithoutListingInput> = z.object({
  where: z.lazy(() => CalendarEventWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CalendarEventCreateWithoutListingInputSchema),z.lazy(() => CalendarEventUncheckedCreateWithoutListingInputSchema) ]),
}).strict();

export const CalendarEventCreateManyListingInputEnvelopeSchema: z.ZodType<Prisma.CalendarEventCreateManyListingInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CalendarEventCreateManyListingInputSchema),z.lazy(() => CalendarEventCreateManyListingInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const MessageTemplateCreateWithoutListingsInputSchema: z.ZodType<Prisma.MessageTemplateCreateWithoutListingsInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  title: z.string(),
  body: z.string(),
  bodyHtml: z.string(),
  enabled: z.boolean().optional(),
  trigger: z.lazy(() => TriggerSchema).optional().nullable(),
  triggerRange: z.lazy(() => TriggerRangeSchema).optional().nullable(),
  triggerUnit: z.lazy(() => TriggerUnitSchema).optional().nullable(),
  triggerValue: z.number().optional().nullable(),
  allListings: z.boolean().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutMessageTemplatesInputSchema),
  scheduledMessages: z.lazy(() => ScheduledMessageCreateNestedManyWithoutMessageTemplateInputSchema).optional()
}).strict();

export const MessageTemplateUncheckedCreateWithoutListingsInputSchema: z.ZodType<Prisma.MessageTemplateUncheckedCreateWithoutListingsInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  title: z.string(),
  body: z.string(),
  bodyHtml: z.string(),
  enabled: z.boolean().optional(),
  trigger: z.lazy(() => TriggerSchema).optional().nullable(),
  triggerRange: z.lazy(() => TriggerRangeSchema).optional().nullable(),
  triggerUnit: z.lazy(() => TriggerUnitSchema).optional().nullable(),
  triggerValue: z.number().optional().nullable(),
  allListings: z.boolean().optional(),
  organizationId: z.string(),
  scheduledMessages: z.lazy(() => ScheduledMessageUncheckedCreateNestedManyWithoutMessageTemplateInputSchema).optional()
}).strict();

export const MessageTemplateCreateOrConnectWithoutListingsInputSchema: z.ZodType<Prisma.MessageTemplateCreateOrConnectWithoutListingsInput> = z.object({
  where: z.lazy(() => MessageTemplateWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => MessageTemplateCreateWithoutListingsInputSchema),z.lazy(() => MessageTemplateUncheckedCreateWithoutListingsInputSchema) ]),
}).strict();

export const OrganizationCreateWithoutListingsInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutListingsInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  language: z.string().optional(),
  adminName: z.string(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  website: z.string(),
  phone: z.string(),
  currency: z.string().optional(),
  startDate: z.coerce.date().optional(),
  directBooking: z.boolean().optional(),
  logoUrl: z.string().optional().nullable(),
  users: z.lazy(() => UserCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionCreateNestedOneWithoutOrganizationInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateCreateNestedManyWithoutOrganizationInputSchema).optional(),
  guests: z.lazy(() => GuestCreateNestedManyWithoutOrganizationInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemCreateNestedManyWithoutOrganizationInputSchema).optional(),
  priceLabsConnection: z.lazy(() => PriceLabsConnectionCreateNestedOneWithoutOrganizationInputSchema).optional(),
  stripeConnection: z.lazy(() => StripeConnectionCreateNestedOneWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutListingsInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutListingsInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  language: z.string().optional(),
  adminName: z.string(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  website: z.string(),
  phone: z.string(),
  currency: z.string().optional(),
  startDate: z.coerce.date().optional(),
  directBooking: z.boolean().optional(),
  logoUrl: z.string().optional().nullable(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionUncheckedCreateNestedOneWithoutOrganizationInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  guests: z.lazy(() => GuestUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  priceLabsConnection: z.lazy(() => PriceLabsConnectionUncheckedCreateNestedOneWithoutOrganizationInputSchema).optional(),
  stripeConnection: z.lazy(() => StripeConnectionUncheckedCreateNestedOneWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutListingsInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutListingsInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutListingsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutListingsInputSchema) ]),
}).strict();

export const DeductionsCreateWithoutListingInputSchema: z.ZodType<Prisma.DeductionsCreateWithoutListingInput> = z.object({
  id: z.string().optional(),
  channelFees: z.boolean(),
  creditCardFees: z.boolean(),
  discounts: z.boolean(),
  municipalTaxes: z.boolean(),
  countyTaxes: z.boolean(),
  stateTaxes: z.boolean(),
  otherGuestFees: z.boolean(),
  pmcShare: z.number()
}).strict();

export const DeductionsUncheckedCreateWithoutListingInputSchema: z.ZodType<Prisma.DeductionsUncheckedCreateWithoutListingInput> = z.object({
  id: z.string().optional(),
  channelFees: z.boolean(),
  creditCardFees: z.boolean(),
  discounts: z.boolean(),
  municipalTaxes: z.boolean(),
  countyTaxes: z.boolean(),
  stateTaxes: z.boolean(),
  otherGuestFees: z.boolean(),
  pmcShare: z.number()
}).strict();

export const DeductionsCreateOrConnectWithoutListingInputSchema: z.ZodType<Prisma.DeductionsCreateOrConnectWithoutListingInput> = z.object({
  where: z.lazy(() => DeductionsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => DeductionsCreateWithoutListingInputSchema),z.lazy(() => DeductionsUncheckedCreateWithoutListingInputSchema) ]),
}).strict();

export const UserCreateWithoutManagedListingsInputSchema: z.ZodType<Prisma.UserCreateWithoutManagedListingsInput> = z.object({
  id: z.string().optional(),
  name: z.string().optional().nullable(),
  email: z.string(),
  emailVerified: z.coerce.date().optional().nullable(),
  image: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  globalRole: z.lazy(() => GlobalRoleSchema).optional(),
  organizationRole: z.lazy(() => OrganizationRoleSchema).optional().nullable(),
  ownerEntity: z.string().optional().nullable(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  ownedListings: z.lazy(() => ListingCreateNestedManyWithoutPropertyOwnerInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutUserInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionCreateNestedOneWithoutOwnerInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemCreateNestedManyWithoutCreatorInputSchema).optional(),
  revenuePayouts: z.lazy(() => RevenuePayoutCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutManagedListingsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutManagedListingsInput> = z.object({
  id: z.string().optional(),
  name: z.string().optional().nullable(),
  email: z.string(),
  emailVerified: z.coerce.date().optional().nullable(),
  image: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  globalRole: z.lazy(() => GlobalRoleSchema).optional(),
  organizationId: z.string().optional().nullable(),
  organizationRole: z.lazy(() => OrganizationRoleSchema).optional().nullable(),
  ownerEntity: z.string().optional().nullable(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ownedListings: z.lazy(() => ListingUncheckedCreateNestedManyWithoutPropertyOwnerInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionUncheckedCreateNestedOneWithoutOwnerInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  revenuePayouts: z.lazy(() => RevenuePayoutUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutManagedListingsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutManagedListingsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutManagedListingsInputSchema),z.lazy(() => UserUncheckedCreateWithoutManagedListingsInputSchema) ]),
}).strict();

export const UserCreateWithoutOwnedListingsInputSchema: z.ZodType<Prisma.UserCreateWithoutOwnedListingsInput> = z.object({
  id: z.string().optional(),
  name: z.string().optional().nullable(),
  email: z.string(),
  emailVerified: z.coerce.date().optional().nullable(),
  image: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  globalRole: z.lazy(() => GlobalRoleSchema).optional(),
  organizationRole: z.lazy(() => OrganizationRoleSchema).optional().nullable(),
  ownerEntity: z.string().optional().nullable(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  managedListings: z.lazy(() => ListingCreateNestedManyWithoutPropertyManagerInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutUserInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionCreateNestedOneWithoutOwnerInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemCreateNestedManyWithoutCreatorInputSchema).optional(),
  revenuePayouts: z.lazy(() => RevenuePayoutCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutOwnedListingsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutOwnedListingsInput> = z.object({
  id: z.string().optional(),
  name: z.string().optional().nullable(),
  email: z.string(),
  emailVerified: z.coerce.date().optional().nullable(),
  image: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  globalRole: z.lazy(() => GlobalRoleSchema).optional(),
  organizationId: z.string().optional().nullable(),
  organizationRole: z.lazy(() => OrganizationRoleSchema).optional().nullable(),
  ownerEntity: z.string().optional().nullable(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  managedListings: z.lazy(() => ListingUncheckedCreateNestedManyWithoutPropertyManagerInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionUncheckedCreateNestedOneWithoutOwnerInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  revenuePayouts: z.lazy(() => RevenuePayoutUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutOwnedListingsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutOwnedListingsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutOwnedListingsInputSchema),z.lazy(() => UserUncheckedCreateWithoutOwnedListingsInputSchema) ]),
}).strict();

export const MessageThreadCreateWithoutListingInputSchema: z.ZodType<Prisma.MessageThreadCreateWithoutListingInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  bpThreadId: z.string().optional().nullable(),
  channelThreadId: z.string().optional().nullable(),
  lastMessageSentAt: z.string().optional().nullable(),
  dateFrom: z.string(),
  dateTo: z.string(),
  replyTo: z.string().optional().nullable(),
  archived: z.boolean().optional(),
  enableReminder: z.boolean().optional(),
  channel: z.lazy(() => ChannelSchema),
  guest: z.lazy(() => GuestCreateNestedOneWithoutMessageThreadsInputSchema),
  messages: z.lazy(() => MessageCreateNestedManyWithoutMessageThreadInputSchema).optional()
}).strict();

export const MessageThreadUncheckedCreateWithoutListingInputSchema: z.ZodType<Prisma.MessageThreadUncheckedCreateWithoutListingInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  guestId: z.string(),
  bpThreadId: z.string().optional().nullable(),
  channelThreadId: z.string().optional().nullable(),
  lastMessageSentAt: z.string().optional().nullable(),
  dateFrom: z.string(),
  dateTo: z.string(),
  replyTo: z.string().optional().nullable(),
  archived: z.boolean().optional(),
  enableReminder: z.boolean().optional(),
  channel: z.lazy(() => ChannelSchema),
  messages: z.lazy(() => MessageUncheckedCreateNestedManyWithoutMessageThreadInputSchema).optional()
}).strict();

export const MessageThreadCreateOrConnectWithoutListingInputSchema: z.ZodType<Prisma.MessageThreadCreateOrConnectWithoutListingInput> = z.object({
  where: z.lazy(() => MessageThreadWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => MessageThreadCreateWithoutListingInputSchema),z.lazy(() => MessageThreadUncheckedCreateWithoutListingInputSchema) ]),
}).strict();

export const MessageThreadCreateManyListingInputEnvelopeSchema: z.ZodType<Prisma.MessageThreadCreateManyListingInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => MessageThreadCreateManyListingInputSchema),z.lazy(() => MessageThreadCreateManyListingInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ListingExpenseCreateWithoutListingInputSchema: z.ZodType<Prisma.ListingExpenseCreateWithoutListingInput> = z.object({
  id: z.string().optional(),
  confirmationCode: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  amount: z.number(),
  amountPaid: z.number(),
  expense: z.lazy(() => ExpenseCreateNestedOneWithoutListingExpensesInputSchema),
  ownerStatement: z.lazy(() => OwnerStatementCreateNestedOneWithoutListingExpensesInputSchema).optional()
}).strict();

export const ListingExpenseUncheckedCreateWithoutListingInputSchema: z.ZodType<Prisma.ListingExpenseUncheckedCreateWithoutListingInput> = z.object({
  id: z.string().optional(),
  confirmationCode: z.string().optional().nullable(),
  expenseId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  amount: z.number(),
  amountPaid: z.number(),
  ownerStatementId: z.string().optional().nullable()
}).strict();

export const ListingExpenseCreateOrConnectWithoutListingInputSchema: z.ZodType<Prisma.ListingExpenseCreateOrConnectWithoutListingInput> = z.object({
  where: z.lazy(() => ListingExpenseWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ListingExpenseCreateWithoutListingInputSchema),z.lazy(() => ListingExpenseUncheckedCreateWithoutListingInputSchema) ]),
}).strict();

export const ListingExpenseCreateManyListingInputEnvelopeSchema: z.ZodType<Prisma.ListingExpenseCreateManyListingInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ListingExpenseCreateManyListingInputSchema),z.lazy(() => ListingExpenseCreateManyListingInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const OwnerStatementCreateWithoutListingInputSchema: z.ZodType<Prisma.OwnerStatementCreateWithoutListingInput> = z.object({
  id: z.string().optional(),
  month: z.number(),
  year: z.number(),
  locked: z.boolean().optional(),
  isCoHost: z.boolean().optional(),
  listingExpenses: z.lazy(() => ListingExpenseCreateNestedManyWithoutOwnerStatementInputSchema).optional(),
  revenue: z.lazy(() => RevenueCreateNestedManyWithoutOwnerStatementInputSchema).optional()
}).strict();

export const OwnerStatementUncheckedCreateWithoutListingInputSchema: z.ZodType<Prisma.OwnerStatementUncheckedCreateWithoutListingInput> = z.object({
  id: z.string().optional(),
  month: z.number(),
  year: z.number(),
  locked: z.boolean().optional(),
  isCoHost: z.boolean().optional(),
  listingExpenses: z.lazy(() => ListingExpenseUncheckedCreateNestedManyWithoutOwnerStatementInputSchema).optional(),
  revenue: z.lazy(() => RevenueUncheckedCreateNestedManyWithoutOwnerStatementInputSchema).optional()
}).strict();

export const OwnerStatementCreateOrConnectWithoutListingInputSchema: z.ZodType<Prisma.OwnerStatementCreateOrConnectWithoutListingInput> = z.object({
  where: z.lazy(() => OwnerStatementWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OwnerStatementCreateWithoutListingInputSchema),z.lazy(() => OwnerStatementUncheckedCreateWithoutListingInputSchema) ]),
}).strict();

export const OwnerStatementCreateManyListingInputEnvelopeSchema: z.ZodType<Prisma.OwnerStatementCreateManyListingInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => OwnerStatementCreateManyListingInputSchema),z.lazy(() => OwnerStatementCreateManyListingInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const DailyRateCreateWithoutListingInputSchema: z.ZodType<Prisma.DailyRateCreateWithoutListingInput> = z.object({
  id: z.string().optional(),
  date: z.coerce.date(),
  rate: z.number(),
  minStay: z.number().optional()
}).strict();

export const DailyRateUncheckedCreateWithoutListingInputSchema: z.ZodType<Prisma.DailyRateUncheckedCreateWithoutListingInput> = z.object({
  id: z.string().optional(),
  date: z.coerce.date(),
  rate: z.number(),
  minStay: z.number().optional()
}).strict();

export const DailyRateCreateOrConnectWithoutListingInputSchema: z.ZodType<Prisma.DailyRateCreateOrConnectWithoutListingInput> = z.object({
  where: z.lazy(() => DailyRateWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => DailyRateCreateWithoutListingInputSchema),z.lazy(() => DailyRateUncheckedCreateWithoutListingInputSchema) ]),
}).strict();

export const DailyRateCreateManyListingInputEnvelopeSchema: z.ZodType<Prisma.DailyRateCreateManyListingInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => DailyRateCreateManyListingInputSchema),z.lazy(() => DailyRateCreateManyListingInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ListingKeyCreateWithoutListingInputSchema: z.ZodType<Prisma.ListingKeyCreateWithoutListingInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  keyType: z.lazy(() => KeyTypeSchema)
}).strict();

export const ListingKeyUncheckedCreateWithoutListingInputSchema: z.ZodType<Prisma.ListingKeyUncheckedCreateWithoutListingInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  keyType: z.lazy(() => KeyTypeSchema)
}).strict();

export const ListingKeyCreateOrConnectWithoutListingInputSchema: z.ZodType<Prisma.ListingKeyCreateOrConnectWithoutListingInput> = z.object({
  where: z.lazy(() => ListingKeyWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ListingKeyCreateWithoutListingInputSchema),z.lazy(() => ListingKeyUncheckedCreateWithoutListingInputSchema) ]),
}).strict();

export const ListingKeyCreateManyListingInputEnvelopeSchema: z.ZodType<Prisma.ListingKeyCreateManyListingInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ListingKeyCreateManyListingInputSchema),z.lazy(() => ListingKeyCreateManyListingInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ContentUpsertWithoutListingInputSchema: z.ZodType<Prisma.ContentUpsertWithoutListingInput> = z.object({
  update: z.union([ z.lazy(() => ContentUpdateWithoutListingInputSchema),z.lazy(() => ContentUncheckedUpdateWithoutListingInputSchema) ]),
  create: z.union([ z.lazy(() => ContentCreateWithoutListingInputSchema),z.lazy(() => ContentUncheckedCreateWithoutListingInputSchema) ]),
  where: z.lazy(() => ContentWhereInputSchema).optional()
}).strict();

export const ContentUpdateToOneWithWhereWithoutListingInputSchema: z.ZodType<Prisma.ContentUpdateToOneWithWhereWithoutListingInput> = z.object({
  where: z.lazy(() => ContentWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ContentUpdateWithoutListingInputSchema),z.lazy(() => ContentUncheckedUpdateWithoutListingInputSchema) ]),
}).strict();

export const ContentUpdateWithoutListingInputSchema: z.ZodType<Prisma.ContentUpdateWithoutListingInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  photos: z.union([ z.lazy(() => ContentUpdatephotosInputSchema),z.string().array() ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  aiInfo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bedrooms: z.lazy(() => BedroomUpdateManyWithoutContentNestedInputSchema).optional()
}).strict();

export const ContentUncheckedUpdateWithoutListingInputSchema: z.ZodType<Prisma.ContentUncheckedUpdateWithoutListingInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  photos: z.union([ z.lazy(() => ContentUpdatephotosInputSchema),z.string().array() ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  aiInfo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bedrooms: z.lazy(() => BedroomUncheckedUpdateManyWithoutContentNestedInputSchema).optional()
}).strict();

export const RulesUpsertWithoutListingInputSchema: z.ZodType<Prisma.RulesUpsertWithoutListingInput> = z.object({
  update: z.union([ z.lazy(() => RulesUpdateWithoutListingInputSchema),z.lazy(() => RulesUncheckedUpdateWithoutListingInputSchema) ]),
  create: z.union([ z.lazy(() => RulesCreateWithoutListingInputSchema),z.lazy(() => RulesUncheckedCreateWithoutListingInputSchema) ]),
  where: z.lazy(() => RulesWhereInputSchema).optional()
}).strict();

export const RulesUpdateToOneWithWhereWithoutListingInputSchema: z.ZodType<Prisma.RulesUpdateToOneWithWhereWithoutListingInput> = z.object({
  where: z.lazy(() => RulesWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RulesUpdateWithoutListingInputSchema),z.lazy(() => RulesUncheckedUpdateWithoutListingInputSchema) ]),
}).strict();

export const RulesUpdateWithoutListingInputSchema: z.ZodType<Prisma.RulesUpdateWithoutListingInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  pets: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  children: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  smoking: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deposit: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  house: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const RulesUncheckedUpdateWithoutListingInputSchema: z.ZodType<Prisma.RulesUncheckedUpdateWithoutListingInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  pets: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  children: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  smoking: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deposit: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  house: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PricingUpsertWithoutListingInputSchema: z.ZodType<Prisma.PricingUpsertWithoutListingInput> = z.object({
  update: z.union([ z.lazy(() => PricingUpdateWithoutListingInputSchema),z.lazy(() => PricingUncheckedUpdateWithoutListingInputSchema) ]),
  create: z.union([ z.lazy(() => PricingCreateWithoutListingInputSchema),z.lazy(() => PricingUncheckedCreateWithoutListingInputSchema) ]),
  where: z.lazy(() => PricingWhereInputSchema).optional()
}).strict();

export const PricingUpdateToOneWithWhereWithoutListingInputSchema: z.ZodType<Prisma.PricingUpdateToOneWithWhereWithoutListingInput> = z.object({
  where: z.lazy(() => PricingWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => PricingUpdateWithoutListingInputSchema),z.lazy(() => PricingUncheckedUpdateWithoutListingInputSchema) ]),
}).strict();

export const PricingUpdateWithoutListingInputSchema: z.ZodType<Prisma.PricingUpdateWithoutListingInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  minimum: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  weekday: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  weekend: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  minStay: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  maxStay: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  dynamicPricing: z.union([ z.lazy(() => DynamicPricingSchema),z.lazy(() => EnumDynamicPricingFieldUpdateOperationsInputSchema) ]).optional(),
  dates: z.lazy(() => PricingDateUpdateManyWithoutPricingNestedInputSchema).optional(),
  discounts: z.lazy(() => DiscountUpdateManyWithoutPricingNestedInputSchema).optional()
}).strict();

export const PricingUncheckedUpdateWithoutListingInputSchema: z.ZodType<Prisma.PricingUncheckedUpdateWithoutListingInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  minimum: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  weekday: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  weekend: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  minStay: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  maxStay: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  dynamicPricing: z.union([ z.lazy(() => DynamicPricingSchema),z.lazy(() => EnumDynamicPricingFieldUpdateOperationsInputSchema) ]).optional(),
  dates: z.lazy(() => PricingDateUncheckedUpdateManyWithoutPricingNestedInputSchema).optional(),
  discounts: z.lazy(() => DiscountUncheckedUpdateManyWithoutPricingNestedInputSchema).optional()
}).strict();

export const AvailabilityUpsertWithoutListingInputSchema: z.ZodType<Prisma.AvailabilityUpsertWithoutListingInput> = z.object({
  update: z.union([ z.lazy(() => AvailabilityUpdateWithoutListingInputSchema),z.lazy(() => AvailabilityUncheckedUpdateWithoutListingInputSchema) ]),
  create: z.union([ z.lazy(() => AvailabilityCreateWithoutListingInputSchema),z.lazy(() => AvailabilityUncheckedCreateWithoutListingInputSchema) ]),
  where: z.lazy(() => AvailabilityWhereInputSchema).optional()
}).strict();

export const AvailabilityUpdateToOneWithWhereWithoutListingInputSchema: z.ZodType<Prisma.AvailabilityUpdateToOneWithWhereWithoutListingInput> = z.object({
  where: z.lazy(() => AvailabilityWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => AvailabilityUpdateWithoutListingInputSchema),z.lazy(() => AvailabilityUncheckedUpdateWithoutListingInputSchema) ]),
}).strict();

export const AvailabilityUpdateWithoutListingInputSchema: z.ZodType<Prisma.AvailabilityUpdateWithoutListingInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  checkIn: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  checkOut: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  leadTime: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AvailabilityUncheckedUpdateWithoutListingInputSchema: z.ZodType<Prisma.AvailabilityUncheckedUpdateWithoutListingInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  checkIn: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  checkOut: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  leadTime: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AmenityUpsertWithWhereUniqueWithoutListingInputSchema: z.ZodType<Prisma.AmenityUpsertWithWhereUniqueWithoutListingInput> = z.object({
  where: z.lazy(() => AmenityWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => AmenityUpdateWithoutListingInputSchema),z.lazy(() => AmenityUncheckedUpdateWithoutListingInputSchema) ]),
  create: z.union([ z.lazy(() => AmenityCreateWithoutListingInputSchema),z.lazy(() => AmenityUncheckedCreateWithoutListingInputSchema) ]),
}).strict();

export const AmenityUpdateWithWhereUniqueWithoutListingInputSchema: z.ZodType<Prisma.AmenityUpdateWithWhereUniqueWithoutListingInput> = z.object({
  where: z.lazy(() => AmenityWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => AmenityUpdateWithoutListingInputSchema),z.lazy(() => AmenityUncheckedUpdateWithoutListingInputSchema) ]),
}).strict();

export const AmenityUpdateManyWithWhereWithoutListingInputSchema: z.ZodType<Prisma.AmenityUpdateManyWithWhereWithoutListingInput> = z.object({
  where: z.lazy(() => AmenityScalarWhereInputSchema),
  data: z.union([ z.lazy(() => AmenityUpdateManyMutationInputSchema),z.lazy(() => AmenityUncheckedUpdateManyWithoutListingInputSchema) ]),
}).strict();

export const AmenityScalarWhereInputSchema: z.ZodType<Prisma.AmenityScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AmenityScalarWhereInputSchema),z.lazy(() => AmenityScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AmenityScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AmenityScalarWhereInputSchema),z.lazy(() => AmenityScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  listingId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  typeId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  note: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const FeeUpsertWithWhereUniqueWithoutListingInputSchema: z.ZodType<Prisma.FeeUpsertWithWhereUniqueWithoutListingInput> = z.object({
  where: z.lazy(() => FeeWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FeeUpdateWithoutListingInputSchema),z.lazy(() => FeeUncheckedUpdateWithoutListingInputSchema) ]),
  create: z.union([ z.lazy(() => FeeCreateWithoutListingInputSchema),z.lazy(() => FeeUncheckedCreateWithoutListingInputSchema) ]),
}).strict();

export const FeeUpdateWithWhereUniqueWithoutListingInputSchema: z.ZodType<Prisma.FeeUpdateWithWhereUniqueWithoutListingInput> = z.object({
  where: z.lazy(() => FeeWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FeeUpdateWithoutListingInputSchema),z.lazy(() => FeeUncheckedUpdateWithoutListingInputSchema) ]),
}).strict();

export const FeeUpdateManyWithWhereWithoutListingInputSchema: z.ZodType<Prisma.FeeUpdateManyWithWhereWithoutListingInput> = z.object({
  where: z.lazy(() => FeeScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FeeUpdateManyMutationInputSchema),z.lazy(() => FeeUncheckedUpdateManyWithoutListingInputSchema) ]),
}).strict();

export const FeeScalarWhereInputSchema: z.ZodType<Prisma.FeeScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => FeeScalarWhereInputSchema),z.lazy(() => FeeScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FeeScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FeeScalarWhereInputSchema),z.lazy(() => FeeScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  listingId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  unit: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  taxable: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  share: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
}).strict();

export const TaxRatesUpsertWithoutListingInputSchema: z.ZodType<Prisma.TaxRatesUpsertWithoutListingInput> = z.object({
  update: z.union([ z.lazy(() => TaxRatesUpdateWithoutListingInputSchema),z.lazy(() => TaxRatesUncheckedUpdateWithoutListingInputSchema) ]),
  create: z.union([ z.lazy(() => TaxRatesCreateWithoutListingInputSchema),z.lazy(() => TaxRatesUncheckedCreateWithoutListingInputSchema) ]),
  where: z.lazy(() => TaxRatesWhereInputSchema).optional()
}).strict();

export const TaxRatesUpdateToOneWithWhereWithoutListingInputSchema: z.ZodType<Prisma.TaxRatesUpdateToOneWithWhereWithoutListingInput> = z.object({
  where: z.lazy(() => TaxRatesWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => TaxRatesUpdateWithoutListingInputSchema),z.lazy(() => TaxRatesUncheckedUpdateWithoutListingInputSchema) ]),
}).strict();

export const TaxRatesUpdateWithoutListingInputSchema: z.ZodType<Prisma.TaxRatesUpdateWithoutListingInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  municipal: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  county: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TaxRatesUncheckedUpdateWithoutListingInputSchema: z.ZodType<Prisma.TaxRatesUncheckedUpdateWithoutListingInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  municipal: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  county: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CalendarEventUpsertWithWhereUniqueWithoutListingInputSchema: z.ZodType<Prisma.CalendarEventUpsertWithWhereUniqueWithoutListingInput> = z.object({
  where: z.lazy(() => CalendarEventWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CalendarEventUpdateWithoutListingInputSchema),z.lazy(() => CalendarEventUncheckedUpdateWithoutListingInputSchema) ]),
  create: z.union([ z.lazy(() => CalendarEventCreateWithoutListingInputSchema),z.lazy(() => CalendarEventUncheckedCreateWithoutListingInputSchema) ]),
}).strict();

export const CalendarEventUpdateWithWhereUniqueWithoutListingInputSchema: z.ZodType<Prisma.CalendarEventUpdateWithWhereUniqueWithoutListingInput> = z.object({
  where: z.lazy(() => CalendarEventWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CalendarEventUpdateWithoutListingInputSchema),z.lazy(() => CalendarEventUncheckedUpdateWithoutListingInputSchema) ]),
}).strict();

export const CalendarEventUpdateManyWithWhereWithoutListingInputSchema: z.ZodType<Prisma.CalendarEventUpdateManyWithWhereWithoutListingInput> = z.object({
  where: z.lazy(() => CalendarEventScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CalendarEventUpdateManyMutationInputSchema),z.lazy(() => CalendarEventUncheckedUpdateManyWithoutListingInputSchema) ]),
}).strict();

export const CalendarEventScalarWhereInputSchema: z.ZodType<Prisma.CalendarEventScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CalendarEventScalarWhereInputSchema),z.lazy(() => CalendarEventScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CalendarEventScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CalendarEventScalarWhereInputSchema),z.lazy(() => CalendarEventScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  listingId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  fromDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  toDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  type: z.union([ z.lazy(() => EnumCalendarEventTypeFilterSchema),z.lazy(() => CalendarEventTypeSchema) ]).optional(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  bookedOn: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const MessageTemplateUpsertWithWhereUniqueWithoutListingsInputSchema: z.ZodType<Prisma.MessageTemplateUpsertWithWhereUniqueWithoutListingsInput> = z.object({
  where: z.lazy(() => MessageTemplateWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => MessageTemplateUpdateWithoutListingsInputSchema),z.lazy(() => MessageTemplateUncheckedUpdateWithoutListingsInputSchema) ]),
  create: z.union([ z.lazy(() => MessageTemplateCreateWithoutListingsInputSchema),z.lazy(() => MessageTemplateUncheckedCreateWithoutListingsInputSchema) ]),
}).strict();

export const MessageTemplateUpdateWithWhereUniqueWithoutListingsInputSchema: z.ZodType<Prisma.MessageTemplateUpdateWithWhereUniqueWithoutListingsInput> = z.object({
  where: z.lazy(() => MessageTemplateWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => MessageTemplateUpdateWithoutListingsInputSchema),z.lazy(() => MessageTemplateUncheckedUpdateWithoutListingsInputSchema) ]),
}).strict();

export const MessageTemplateUpdateManyWithWhereWithoutListingsInputSchema: z.ZodType<Prisma.MessageTemplateUpdateManyWithWhereWithoutListingsInput> = z.object({
  where: z.lazy(() => MessageTemplateScalarWhereInputSchema),
  data: z.union([ z.lazy(() => MessageTemplateUpdateManyMutationInputSchema),z.lazy(() => MessageTemplateUncheckedUpdateManyWithoutListingsInputSchema) ]),
}).strict();

export const OrganizationUpsertWithoutListingsInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutListingsInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutListingsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutListingsInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutListingsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutListingsInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutListingsInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutListingsInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutListingsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutListingsInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutListingsInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutListingsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  adminName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  website: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  directBooking: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  logoUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UserUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionUpdateOneWithoutOrganizationNestedInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  guests: z.lazy(() => GuestUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  priceLabsConnection: z.lazy(() => PriceLabsConnectionUpdateOneWithoutOrganizationNestedInputSchema).optional(),
  stripeConnection: z.lazy(() => StripeConnectionUpdateOneWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutListingsInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutListingsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  adminName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  website: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  directBooking: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  logoUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionUncheckedUpdateOneWithoutOrganizationNestedInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  guests: z.lazy(() => GuestUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  priceLabsConnection: z.lazy(() => PriceLabsConnectionUncheckedUpdateOneWithoutOrganizationNestedInputSchema).optional(),
  stripeConnection: z.lazy(() => StripeConnectionUncheckedUpdateOneWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const DeductionsUpsertWithoutListingInputSchema: z.ZodType<Prisma.DeductionsUpsertWithoutListingInput> = z.object({
  update: z.union([ z.lazy(() => DeductionsUpdateWithoutListingInputSchema),z.lazy(() => DeductionsUncheckedUpdateWithoutListingInputSchema) ]),
  create: z.union([ z.lazy(() => DeductionsCreateWithoutListingInputSchema),z.lazy(() => DeductionsUncheckedCreateWithoutListingInputSchema) ]),
  where: z.lazy(() => DeductionsWhereInputSchema).optional()
}).strict();

export const DeductionsUpdateToOneWithWhereWithoutListingInputSchema: z.ZodType<Prisma.DeductionsUpdateToOneWithWhereWithoutListingInput> = z.object({
  where: z.lazy(() => DeductionsWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => DeductionsUpdateWithoutListingInputSchema),z.lazy(() => DeductionsUncheckedUpdateWithoutListingInputSchema) ]),
}).strict();

export const DeductionsUpdateWithoutListingInputSchema: z.ZodType<Prisma.DeductionsUpdateWithoutListingInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  channelFees: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  creditCardFees: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  discounts: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  municipalTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  countyTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  stateTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  otherGuestFees: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  pmcShare: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DeductionsUncheckedUpdateWithoutListingInputSchema: z.ZodType<Prisma.DeductionsUncheckedUpdateWithoutListingInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  channelFees: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  creditCardFees: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  discounts: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  municipalTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  countyTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  stateTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  otherGuestFees: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  pmcShare: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserUpsertWithoutManagedListingsInputSchema: z.ZodType<Prisma.UserUpsertWithoutManagedListingsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutManagedListingsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutManagedListingsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutManagedListingsInputSchema),z.lazy(() => UserUncheckedCreateWithoutManagedListingsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutManagedListingsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutManagedListingsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutManagedListingsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutManagedListingsInputSchema) ]),
}).strict();

export const UserUpdateWithoutManagedListingsInputSchema: z.ZodType<Prisma.UserUpdateWithoutManagedListingsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  globalRole: z.union([ z.lazy(() => GlobalRoleSchema),z.lazy(() => EnumGlobalRoleFieldUpdateOperationsInputSchema) ]).optional(),
  organizationRole: z.union([ z.lazy(() => OrganizationRoleSchema),z.lazy(() => NullableEnumOrganizationRoleFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerEntity: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  ownedListings: z.lazy(() => ListingUpdateManyWithoutPropertyOwnerNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutUserNestedInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionUpdateOneWithoutOwnerNestedInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemUpdateManyWithoutCreatorNestedInputSchema).optional(),
  revenuePayouts: z.lazy(() => RevenuePayoutUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutManagedListingsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutManagedListingsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  globalRole: z.union([ z.lazy(() => GlobalRoleSchema),z.lazy(() => EnumGlobalRoleFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationRole: z.union([ z.lazy(() => OrganizationRoleSchema),z.lazy(() => NullableEnumOrganizationRoleFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerEntity: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ownedListings: z.lazy(() => ListingUncheckedUpdateManyWithoutPropertyOwnerNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionUncheckedUpdateOneWithoutOwnerNestedInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  revenuePayouts: z.lazy(() => RevenuePayoutUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutOwnedListingsInputSchema: z.ZodType<Prisma.UserUpsertWithoutOwnedListingsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutOwnedListingsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutOwnedListingsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutOwnedListingsInputSchema),z.lazy(() => UserUncheckedCreateWithoutOwnedListingsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutOwnedListingsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutOwnedListingsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutOwnedListingsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutOwnedListingsInputSchema) ]),
}).strict();

export const UserUpdateWithoutOwnedListingsInputSchema: z.ZodType<Prisma.UserUpdateWithoutOwnedListingsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  globalRole: z.union([ z.lazy(() => GlobalRoleSchema),z.lazy(() => EnumGlobalRoleFieldUpdateOperationsInputSchema) ]).optional(),
  organizationRole: z.union([ z.lazy(() => OrganizationRoleSchema),z.lazy(() => NullableEnumOrganizationRoleFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerEntity: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  managedListings: z.lazy(() => ListingUpdateManyWithoutPropertyManagerNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutUserNestedInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionUpdateOneWithoutOwnerNestedInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemUpdateManyWithoutCreatorNestedInputSchema).optional(),
  revenuePayouts: z.lazy(() => RevenuePayoutUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutOwnedListingsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutOwnedListingsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  globalRole: z.union([ z.lazy(() => GlobalRoleSchema),z.lazy(() => EnumGlobalRoleFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationRole: z.union([ z.lazy(() => OrganizationRoleSchema),z.lazy(() => NullableEnumOrganizationRoleFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerEntity: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  managedListings: z.lazy(() => ListingUncheckedUpdateManyWithoutPropertyManagerNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionUncheckedUpdateOneWithoutOwnerNestedInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  revenuePayouts: z.lazy(() => RevenuePayoutUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const MessageThreadUpsertWithWhereUniqueWithoutListingInputSchema: z.ZodType<Prisma.MessageThreadUpsertWithWhereUniqueWithoutListingInput> = z.object({
  where: z.lazy(() => MessageThreadWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => MessageThreadUpdateWithoutListingInputSchema),z.lazy(() => MessageThreadUncheckedUpdateWithoutListingInputSchema) ]),
  create: z.union([ z.lazy(() => MessageThreadCreateWithoutListingInputSchema),z.lazy(() => MessageThreadUncheckedCreateWithoutListingInputSchema) ]),
}).strict();

export const MessageThreadUpdateWithWhereUniqueWithoutListingInputSchema: z.ZodType<Prisma.MessageThreadUpdateWithWhereUniqueWithoutListingInput> = z.object({
  where: z.lazy(() => MessageThreadWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => MessageThreadUpdateWithoutListingInputSchema),z.lazy(() => MessageThreadUncheckedUpdateWithoutListingInputSchema) ]),
}).strict();

export const MessageThreadUpdateManyWithWhereWithoutListingInputSchema: z.ZodType<Prisma.MessageThreadUpdateManyWithWhereWithoutListingInput> = z.object({
  where: z.lazy(() => MessageThreadScalarWhereInputSchema),
  data: z.union([ z.lazy(() => MessageThreadUpdateManyMutationInputSchema),z.lazy(() => MessageThreadUncheckedUpdateManyWithoutListingInputSchema) ]),
}).strict();

export const MessageThreadScalarWhereInputSchema: z.ZodType<Prisma.MessageThreadScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => MessageThreadScalarWhereInputSchema),z.lazy(() => MessageThreadScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MessageThreadScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MessageThreadScalarWhereInputSchema),z.lazy(() => MessageThreadScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  listingId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  guestId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  bpThreadId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  channelThreadId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  lastMessageSentAt: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  dateFrom: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  dateTo: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  replyTo: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  archived: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  enableReminder: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  channel: z.union([ z.lazy(() => EnumChannelFilterSchema),z.lazy(() => ChannelSchema) ]).optional(),
}).strict();

export const ListingExpenseUpsertWithWhereUniqueWithoutListingInputSchema: z.ZodType<Prisma.ListingExpenseUpsertWithWhereUniqueWithoutListingInput> = z.object({
  where: z.lazy(() => ListingExpenseWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ListingExpenseUpdateWithoutListingInputSchema),z.lazy(() => ListingExpenseUncheckedUpdateWithoutListingInputSchema) ]),
  create: z.union([ z.lazy(() => ListingExpenseCreateWithoutListingInputSchema),z.lazy(() => ListingExpenseUncheckedCreateWithoutListingInputSchema) ]),
}).strict();

export const ListingExpenseUpdateWithWhereUniqueWithoutListingInputSchema: z.ZodType<Prisma.ListingExpenseUpdateWithWhereUniqueWithoutListingInput> = z.object({
  where: z.lazy(() => ListingExpenseWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ListingExpenseUpdateWithoutListingInputSchema),z.lazy(() => ListingExpenseUncheckedUpdateWithoutListingInputSchema) ]),
}).strict();

export const ListingExpenseUpdateManyWithWhereWithoutListingInputSchema: z.ZodType<Prisma.ListingExpenseUpdateManyWithWhereWithoutListingInput> = z.object({
  where: z.lazy(() => ListingExpenseScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ListingExpenseUpdateManyMutationInputSchema),z.lazy(() => ListingExpenseUncheckedUpdateManyWithoutListingInputSchema) ]),
}).strict();

export const ListingExpenseScalarWhereInputSchema: z.ZodType<Prisma.ListingExpenseScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ListingExpenseScalarWhereInputSchema),z.lazy(() => ListingExpenseScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ListingExpenseScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ListingExpenseScalarWhereInputSchema),z.lazy(() => ListingExpenseScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  confirmationCode: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  expenseId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  listingId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  amount: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  amountPaid: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  ownerStatementId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const OwnerStatementUpsertWithWhereUniqueWithoutListingInputSchema: z.ZodType<Prisma.OwnerStatementUpsertWithWhereUniqueWithoutListingInput> = z.object({
  where: z.lazy(() => OwnerStatementWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => OwnerStatementUpdateWithoutListingInputSchema),z.lazy(() => OwnerStatementUncheckedUpdateWithoutListingInputSchema) ]),
  create: z.union([ z.lazy(() => OwnerStatementCreateWithoutListingInputSchema),z.lazy(() => OwnerStatementUncheckedCreateWithoutListingInputSchema) ]),
}).strict();

export const OwnerStatementUpdateWithWhereUniqueWithoutListingInputSchema: z.ZodType<Prisma.OwnerStatementUpdateWithWhereUniqueWithoutListingInput> = z.object({
  where: z.lazy(() => OwnerStatementWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => OwnerStatementUpdateWithoutListingInputSchema),z.lazy(() => OwnerStatementUncheckedUpdateWithoutListingInputSchema) ]),
}).strict();

export const OwnerStatementUpdateManyWithWhereWithoutListingInputSchema: z.ZodType<Prisma.OwnerStatementUpdateManyWithWhereWithoutListingInput> = z.object({
  where: z.lazy(() => OwnerStatementScalarWhereInputSchema),
  data: z.union([ z.lazy(() => OwnerStatementUpdateManyMutationInputSchema),z.lazy(() => OwnerStatementUncheckedUpdateManyWithoutListingInputSchema) ]),
}).strict();

export const OwnerStatementScalarWhereInputSchema: z.ZodType<Prisma.OwnerStatementScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => OwnerStatementScalarWhereInputSchema),z.lazy(() => OwnerStatementScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => OwnerStatementScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OwnerStatementScalarWhereInputSchema),z.lazy(() => OwnerStatementScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  listingId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  month: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  year: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  locked: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  isCoHost: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
}).strict();

export const DailyRateUpsertWithWhereUniqueWithoutListingInputSchema: z.ZodType<Prisma.DailyRateUpsertWithWhereUniqueWithoutListingInput> = z.object({
  where: z.lazy(() => DailyRateWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => DailyRateUpdateWithoutListingInputSchema),z.lazy(() => DailyRateUncheckedUpdateWithoutListingInputSchema) ]),
  create: z.union([ z.lazy(() => DailyRateCreateWithoutListingInputSchema),z.lazy(() => DailyRateUncheckedCreateWithoutListingInputSchema) ]),
}).strict();

export const DailyRateUpdateWithWhereUniqueWithoutListingInputSchema: z.ZodType<Prisma.DailyRateUpdateWithWhereUniqueWithoutListingInput> = z.object({
  where: z.lazy(() => DailyRateWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => DailyRateUpdateWithoutListingInputSchema),z.lazy(() => DailyRateUncheckedUpdateWithoutListingInputSchema) ]),
}).strict();

export const DailyRateUpdateManyWithWhereWithoutListingInputSchema: z.ZodType<Prisma.DailyRateUpdateManyWithWhereWithoutListingInput> = z.object({
  where: z.lazy(() => DailyRateScalarWhereInputSchema),
  data: z.union([ z.lazy(() => DailyRateUpdateManyMutationInputSchema),z.lazy(() => DailyRateUncheckedUpdateManyWithoutListingInputSchema) ]),
}).strict();

export const DailyRateScalarWhereInputSchema: z.ZodType<Prisma.DailyRateScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => DailyRateScalarWhereInputSchema),z.lazy(() => DailyRateScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => DailyRateScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DailyRateScalarWhereInputSchema),z.lazy(() => DailyRateScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  listingId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  rate: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  minStay: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
}).strict();

export const ListingKeyUpsertWithWhereUniqueWithoutListingInputSchema: z.ZodType<Prisma.ListingKeyUpsertWithWhereUniqueWithoutListingInput> = z.object({
  where: z.lazy(() => ListingKeyWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ListingKeyUpdateWithoutListingInputSchema),z.lazy(() => ListingKeyUncheckedUpdateWithoutListingInputSchema) ]),
  create: z.union([ z.lazy(() => ListingKeyCreateWithoutListingInputSchema),z.lazy(() => ListingKeyUncheckedCreateWithoutListingInputSchema) ]),
}).strict();

export const ListingKeyUpdateWithWhereUniqueWithoutListingInputSchema: z.ZodType<Prisma.ListingKeyUpdateWithWhereUniqueWithoutListingInput> = z.object({
  where: z.lazy(() => ListingKeyWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ListingKeyUpdateWithoutListingInputSchema),z.lazy(() => ListingKeyUncheckedUpdateWithoutListingInputSchema) ]),
}).strict();

export const ListingKeyUpdateManyWithWhereWithoutListingInputSchema: z.ZodType<Prisma.ListingKeyUpdateManyWithWhereWithoutListingInput> = z.object({
  where: z.lazy(() => ListingKeyScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ListingKeyUpdateManyMutationInputSchema),z.lazy(() => ListingKeyUncheckedUpdateManyWithoutListingInputSchema) ]),
}).strict();

export const ListingKeyScalarWhereInputSchema: z.ZodType<Prisma.ListingKeyScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ListingKeyScalarWhereInputSchema),z.lazy(() => ListingKeyScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ListingKeyScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ListingKeyScalarWhereInputSchema),z.lazy(() => ListingKeyScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  listingId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  keyType: z.union([ z.lazy(() => EnumKeyTypeFilterSchema),z.lazy(() => KeyTypeSchema) ]).optional(),
}).strict();

export const ListingCreateWithoutKeysInputSchema: z.ZodType<Prisma.ListingCreateWithoutKeysInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  unitType: z.lazy(() => UnitTypeSchema),
  beds: z.number(),
  baths: z.number(),
  guests: z.number(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  timeZone: z.string(),
  airbnbRemitsTaxes: z.boolean().optional(),
  wifiName: z.string().optional().nullable(),
  wifiPassword: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  bpProductId: z.string().optional().nullable(),
  doorCode: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  basePrice: z.number().optional(),
  iCalKey: z.string().optional().nullable(),
  content: z.lazy(() => ContentCreateNestedOneWithoutListingInputSchema).optional(),
  rules: z.lazy(() => RulesCreateNestedOneWithoutListingInputSchema).optional(),
  pricing: z.lazy(() => PricingCreateNestedOneWithoutListingInputSchema).optional(),
  availability: z.lazy(() => AvailabilityCreateNestedOneWithoutListingInputSchema).optional(),
  amenities: z.lazy(() => AmenityCreateNestedManyWithoutListingInputSchema).optional(),
  fees: z.lazy(() => FeeCreateNestedManyWithoutListingInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesCreateNestedOneWithoutListingInputSchema).optional(),
  events: z.lazy(() => CalendarEventCreateNestedManyWithoutListingInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateCreateNestedManyWithoutListingsInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutListingsInputSchema),
  deductions: z.lazy(() => DeductionsCreateNestedOneWithoutListingInputSchema).optional(),
  propertyManager: z.lazy(() => UserCreateNestedOneWithoutManagedListingsInputSchema),
  propertyOwner: z.lazy(() => UserCreateNestedOneWithoutOwnedListingsInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadCreateNestedManyWithoutListingInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseCreateNestedManyWithoutListingInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementCreateNestedManyWithoutListingInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateCreateNestedManyWithoutListingInputSchema).optional()
}).strict();

export const ListingUncheckedCreateWithoutKeysInputSchema: z.ZodType<Prisma.ListingUncheckedCreateWithoutKeysInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  unitType: z.lazy(() => UnitTypeSchema),
  beds: z.number(),
  baths: z.number(),
  guests: z.number(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  timeZone: z.string(),
  airbnbRemitsTaxes: z.boolean().optional(),
  organizationId: z.string(),
  propertyManagerId: z.string(),
  propertyOwnerId: z.string().optional().nullable(),
  wifiName: z.string().optional().nullable(),
  wifiPassword: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  bpProductId: z.string().optional().nullable(),
  doorCode: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  basePrice: z.number().optional(),
  iCalKey: z.string().optional().nullable(),
  content: z.lazy(() => ContentUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  rules: z.lazy(() => RulesUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  pricing: z.lazy(() => PricingUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  amenities: z.lazy(() => AmenityUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  fees: z.lazy(() => FeeUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  events: z.lazy(() => CalendarEventUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUncheckedCreateNestedManyWithoutListingsInputSchema).optional(),
  deductions: z.lazy(() => DeductionsUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateUncheckedCreateNestedManyWithoutListingInputSchema).optional()
}).strict();

export const ListingCreateOrConnectWithoutKeysInputSchema: z.ZodType<Prisma.ListingCreateOrConnectWithoutKeysInput> = z.object({
  where: z.lazy(() => ListingWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ListingCreateWithoutKeysInputSchema),z.lazy(() => ListingUncheckedCreateWithoutKeysInputSchema) ]),
}).strict();

export const ListingUpsertWithoutKeysInputSchema: z.ZodType<Prisma.ListingUpsertWithoutKeysInput> = z.object({
  update: z.union([ z.lazy(() => ListingUpdateWithoutKeysInputSchema),z.lazy(() => ListingUncheckedUpdateWithoutKeysInputSchema) ]),
  create: z.union([ z.lazy(() => ListingCreateWithoutKeysInputSchema),z.lazy(() => ListingUncheckedCreateWithoutKeysInputSchema) ]),
  where: z.lazy(() => ListingWhereInputSchema).optional()
}).strict();

export const ListingUpdateToOneWithWhereWithoutKeysInputSchema: z.ZodType<Prisma.ListingUpdateToOneWithWhereWithoutKeysInput> = z.object({
  where: z.lazy(() => ListingWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ListingUpdateWithoutKeysInputSchema),z.lazy(() => ListingUncheckedUpdateWithoutKeysInputSchema) ]),
}).strict();

export const ListingUpdateWithoutKeysInputSchema: z.ZodType<Prisma.ListingUpdateWithoutKeysInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  unitType: z.union([ z.lazy(() => UnitTypeSchema),z.lazy(() => EnumUnitTypeFieldUpdateOperationsInputSchema) ]).optional(),
  beds: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  baths: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  guests: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timeZone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  airbnbRemitsTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  wifiName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiPassword: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bpProductId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doorCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  basePrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  iCalKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  content: z.lazy(() => ContentUpdateOneWithoutListingNestedInputSchema).optional(),
  rules: z.lazy(() => RulesUpdateOneWithoutListingNestedInputSchema).optional(),
  pricing: z.lazy(() => PricingUpdateOneWithoutListingNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUpdateOneWithoutListingNestedInputSchema).optional(),
  amenities: z.lazy(() => AmenityUpdateManyWithoutListingNestedInputSchema).optional(),
  fees: z.lazy(() => FeeUpdateManyWithoutListingNestedInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesUpdateOneWithoutListingNestedInputSchema).optional(),
  events: z.lazy(() => CalendarEventUpdateManyWithoutListingNestedInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUpdateManyWithoutListingsNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutListingsNestedInputSchema).optional(),
  deductions: z.lazy(() => DeductionsUpdateOneWithoutListingNestedInputSchema).optional(),
  propertyManager: z.lazy(() => UserUpdateOneRequiredWithoutManagedListingsNestedInputSchema).optional(),
  propertyOwner: z.lazy(() => UserUpdateOneWithoutOwnedListingsNestedInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUpdateManyWithoutListingNestedInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUpdateManyWithoutListingNestedInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementUpdateManyWithoutListingNestedInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateUpdateManyWithoutListingNestedInputSchema).optional()
}).strict();

export const ListingUncheckedUpdateWithoutKeysInputSchema: z.ZodType<Prisma.ListingUncheckedUpdateWithoutKeysInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  unitType: z.union([ z.lazy(() => UnitTypeSchema),z.lazy(() => EnumUnitTypeFieldUpdateOperationsInputSchema) ]).optional(),
  beds: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  baths: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  guests: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timeZone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  airbnbRemitsTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  propertyManagerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  propertyOwnerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiPassword: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bpProductId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doorCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  basePrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  iCalKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  content: z.lazy(() => ContentUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  rules: z.lazy(() => RulesUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  pricing: z.lazy(() => PricingUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  amenities: z.lazy(() => AmenityUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  fees: z.lazy(() => FeeUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  events: z.lazy(() => CalendarEventUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUncheckedUpdateManyWithoutListingsNestedInputSchema).optional(),
  deductions: z.lazy(() => DeductionsUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateUncheckedUpdateManyWithoutListingNestedInputSchema).optional()
}).strict();

export const ListingCreateWithoutContentInputSchema: z.ZodType<Prisma.ListingCreateWithoutContentInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  unitType: z.lazy(() => UnitTypeSchema),
  beds: z.number(),
  baths: z.number(),
  guests: z.number(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  timeZone: z.string(),
  airbnbRemitsTaxes: z.boolean().optional(),
  wifiName: z.string().optional().nullable(),
  wifiPassword: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  bpProductId: z.string().optional().nullable(),
  doorCode: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  basePrice: z.number().optional(),
  iCalKey: z.string().optional().nullable(),
  rules: z.lazy(() => RulesCreateNestedOneWithoutListingInputSchema).optional(),
  pricing: z.lazy(() => PricingCreateNestedOneWithoutListingInputSchema).optional(),
  availability: z.lazy(() => AvailabilityCreateNestedOneWithoutListingInputSchema).optional(),
  amenities: z.lazy(() => AmenityCreateNestedManyWithoutListingInputSchema).optional(),
  fees: z.lazy(() => FeeCreateNestedManyWithoutListingInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesCreateNestedOneWithoutListingInputSchema).optional(),
  events: z.lazy(() => CalendarEventCreateNestedManyWithoutListingInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateCreateNestedManyWithoutListingsInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutListingsInputSchema),
  deductions: z.lazy(() => DeductionsCreateNestedOneWithoutListingInputSchema).optional(),
  propertyManager: z.lazy(() => UserCreateNestedOneWithoutManagedListingsInputSchema),
  propertyOwner: z.lazy(() => UserCreateNestedOneWithoutOwnedListingsInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadCreateNestedManyWithoutListingInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseCreateNestedManyWithoutListingInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementCreateNestedManyWithoutListingInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateCreateNestedManyWithoutListingInputSchema).optional(),
  keys: z.lazy(() => ListingKeyCreateNestedManyWithoutListingInputSchema).optional()
}).strict();

export const ListingUncheckedCreateWithoutContentInputSchema: z.ZodType<Prisma.ListingUncheckedCreateWithoutContentInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  unitType: z.lazy(() => UnitTypeSchema),
  beds: z.number(),
  baths: z.number(),
  guests: z.number(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  timeZone: z.string(),
  airbnbRemitsTaxes: z.boolean().optional(),
  organizationId: z.string(),
  propertyManagerId: z.string(),
  propertyOwnerId: z.string().optional().nullable(),
  wifiName: z.string().optional().nullable(),
  wifiPassword: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  bpProductId: z.string().optional().nullable(),
  doorCode: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  basePrice: z.number().optional(),
  iCalKey: z.string().optional().nullable(),
  rules: z.lazy(() => RulesUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  pricing: z.lazy(() => PricingUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  amenities: z.lazy(() => AmenityUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  fees: z.lazy(() => FeeUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  events: z.lazy(() => CalendarEventUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUncheckedCreateNestedManyWithoutListingsInputSchema).optional(),
  deductions: z.lazy(() => DeductionsUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  keys: z.lazy(() => ListingKeyUncheckedCreateNestedManyWithoutListingInputSchema).optional()
}).strict();

export const ListingCreateOrConnectWithoutContentInputSchema: z.ZodType<Prisma.ListingCreateOrConnectWithoutContentInput> = z.object({
  where: z.lazy(() => ListingWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ListingCreateWithoutContentInputSchema),z.lazy(() => ListingUncheckedCreateWithoutContentInputSchema) ]),
}).strict();

export const BedroomCreateWithoutContentInputSchema: z.ZodType<Prisma.BedroomCreateWithoutContentInput> = z.object({
  id: z.string().optional(),
  type: z.string(),
  bathroom: z.boolean().optional(),
  beds: z.union([ z.lazy(() => BedroomCreatebedsInputSchema),z.string().array() ]).optional(),
}).strict();

export const BedroomUncheckedCreateWithoutContentInputSchema: z.ZodType<Prisma.BedroomUncheckedCreateWithoutContentInput> = z.object({
  id: z.string().optional(),
  type: z.string(),
  bathroom: z.boolean().optional(),
  beds: z.union([ z.lazy(() => BedroomCreatebedsInputSchema),z.string().array() ]).optional(),
}).strict();

export const BedroomCreateOrConnectWithoutContentInputSchema: z.ZodType<Prisma.BedroomCreateOrConnectWithoutContentInput> = z.object({
  where: z.lazy(() => BedroomWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => BedroomCreateWithoutContentInputSchema),z.lazy(() => BedroomUncheckedCreateWithoutContentInputSchema) ]),
}).strict();

export const BedroomCreateManyContentInputEnvelopeSchema: z.ZodType<Prisma.BedroomCreateManyContentInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => BedroomCreateManyContentInputSchema),z.lazy(() => BedroomCreateManyContentInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ListingUpsertWithoutContentInputSchema: z.ZodType<Prisma.ListingUpsertWithoutContentInput> = z.object({
  update: z.union([ z.lazy(() => ListingUpdateWithoutContentInputSchema),z.lazy(() => ListingUncheckedUpdateWithoutContentInputSchema) ]),
  create: z.union([ z.lazy(() => ListingCreateWithoutContentInputSchema),z.lazy(() => ListingUncheckedCreateWithoutContentInputSchema) ]),
  where: z.lazy(() => ListingWhereInputSchema).optional()
}).strict();

export const ListingUpdateToOneWithWhereWithoutContentInputSchema: z.ZodType<Prisma.ListingUpdateToOneWithWhereWithoutContentInput> = z.object({
  where: z.lazy(() => ListingWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ListingUpdateWithoutContentInputSchema),z.lazy(() => ListingUncheckedUpdateWithoutContentInputSchema) ]),
}).strict();

export const ListingUpdateWithoutContentInputSchema: z.ZodType<Prisma.ListingUpdateWithoutContentInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  unitType: z.union([ z.lazy(() => UnitTypeSchema),z.lazy(() => EnumUnitTypeFieldUpdateOperationsInputSchema) ]).optional(),
  beds: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  baths: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  guests: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timeZone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  airbnbRemitsTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  wifiName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiPassword: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bpProductId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doorCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  basePrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  iCalKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rules: z.lazy(() => RulesUpdateOneWithoutListingNestedInputSchema).optional(),
  pricing: z.lazy(() => PricingUpdateOneWithoutListingNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUpdateOneWithoutListingNestedInputSchema).optional(),
  amenities: z.lazy(() => AmenityUpdateManyWithoutListingNestedInputSchema).optional(),
  fees: z.lazy(() => FeeUpdateManyWithoutListingNestedInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesUpdateOneWithoutListingNestedInputSchema).optional(),
  events: z.lazy(() => CalendarEventUpdateManyWithoutListingNestedInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUpdateManyWithoutListingsNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutListingsNestedInputSchema).optional(),
  deductions: z.lazy(() => DeductionsUpdateOneWithoutListingNestedInputSchema).optional(),
  propertyManager: z.lazy(() => UserUpdateOneRequiredWithoutManagedListingsNestedInputSchema).optional(),
  propertyOwner: z.lazy(() => UserUpdateOneWithoutOwnedListingsNestedInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUpdateManyWithoutListingNestedInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUpdateManyWithoutListingNestedInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementUpdateManyWithoutListingNestedInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateUpdateManyWithoutListingNestedInputSchema).optional(),
  keys: z.lazy(() => ListingKeyUpdateManyWithoutListingNestedInputSchema).optional()
}).strict();

export const ListingUncheckedUpdateWithoutContentInputSchema: z.ZodType<Prisma.ListingUncheckedUpdateWithoutContentInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  unitType: z.union([ z.lazy(() => UnitTypeSchema),z.lazy(() => EnumUnitTypeFieldUpdateOperationsInputSchema) ]).optional(),
  beds: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  baths: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  guests: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timeZone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  airbnbRemitsTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  propertyManagerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  propertyOwnerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiPassword: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bpProductId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doorCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  basePrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  iCalKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rules: z.lazy(() => RulesUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  pricing: z.lazy(() => PricingUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  amenities: z.lazy(() => AmenityUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  fees: z.lazy(() => FeeUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  events: z.lazy(() => CalendarEventUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUncheckedUpdateManyWithoutListingsNestedInputSchema).optional(),
  deductions: z.lazy(() => DeductionsUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  keys: z.lazy(() => ListingKeyUncheckedUpdateManyWithoutListingNestedInputSchema).optional()
}).strict();

export const BedroomUpsertWithWhereUniqueWithoutContentInputSchema: z.ZodType<Prisma.BedroomUpsertWithWhereUniqueWithoutContentInput> = z.object({
  where: z.lazy(() => BedroomWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => BedroomUpdateWithoutContentInputSchema),z.lazy(() => BedroomUncheckedUpdateWithoutContentInputSchema) ]),
  create: z.union([ z.lazy(() => BedroomCreateWithoutContentInputSchema),z.lazy(() => BedroomUncheckedCreateWithoutContentInputSchema) ]),
}).strict();

export const BedroomUpdateWithWhereUniqueWithoutContentInputSchema: z.ZodType<Prisma.BedroomUpdateWithWhereUniqueWithoutContentInput> = z.object({
  where: z.lazy(() => BedroomWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => BedroomUpdateWithoutContentInputSchema),z.lazy(() => BedroomUncheckedUpdateWithoutContentInputSchema) ]),
}).strict();

export const BedroomUpdateManyWithWhereWithoutContentInputSchema: z.ZodType<Prisma.BedroomUpdateManyWithWhereWithoutContentInput> = z.object({
  where: z.lazy(() => BedroomScalarWhereInputSchema),
  data: z.union([ z.lazy(() => BedroomUpdateManyMutationInputSchema),z.lazy(() => BedroomUncheckedUpdateManyWithoutContentInputSchema) ]),
}).strict();

export const BedroomScalarWhereInputSchema: z.ZodType<Prisma.BedroomScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => BedroomScalarWhereInputSchema),z.lazy(() => BedroomScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => BedroomScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => BedroomScalarWhereInputSchema),z.lazy(() => BedroomScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  contentId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  bathroom: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  beds: z.lazy(() => StringNullableListFilterSchema).optional()
}).strict();

export const ListingCreateWithoutRulesInputSchema: z.ZodType<Prisma.ListingCreateWithoutRulesInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  unitType: z.lazy(() => UnitTypeSchema),
  beds: z.number(),
  baths: z.number(),
  guests: z.number(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  timeZone: z.string(),
  airbnbRemitsTaxes: z.boolean().optional(),
  wifiName: z.string().optional().nullable(),
  wifiPassword: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  bpProductId: z.string().optional().nullable(),
  doorCode: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  basePrice: z.number().optional(),
  iCalKey: z.string().optional().nullable(),
  content: z.lazy(() => ContentCreateNestedOneWithoutListingInputSchema).optional(),
  pricing: z.lazy(() => PricingCreateNestedOneWithoutListingInputSchema).optional(),
  availability: z.lazy(() => AvailabilityCreateNestedOneWithoutListingInputSchema).optional(),
  amenities: z.lazy(() => AmenityCreateNestedManyWithoutListingInputSchema).optional(),
  fees: z.lazy(() => FeeCreateNestedManyWithoutListingInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesCreateNestedOneWithoutListingInputSchema).optional(),
  events: z.lazy(() => CalendarEventCreateNestedManyWithoutListingInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateCreateNestedManyWithoutListingsInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutListingsInputSchema),
  deductions: z.lazy(() => DeductionsCreateNestedOneWithoutListingInputSchema).optional(),
  propertyManager: z.lazy(() => UserCreateNestedOneWithoutManagedListingsInputSchema),
  propertyOwner: z.lazy(() => UserCreateNestedOneWithoutOwnedListingsInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadCreateNestedManyWithoutListingInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseCreateNestedManyWithoutListingInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementCreateNestedManyWithoutListingInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateCreateNestedManyWithoutListingInputSchema).optional(),
  keys: z.lazy(() => ListingKeyCreateNestedManyWithoutListingInputSchema).optional()
}).strict();

export const ListingUncheckedCreateWithoutRulesInputSchema: z.ZodType<Prisma.ListingUncheckedCreateWithoutRulesInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  unitType: z.lazy(() => UnitTypeSchema),
  beds: z.number(),
  baths: z.number(),
  guests: z.number(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  timeZone: z.string(),
  airbnbRemitsTaxes: z.boolean().optional(),
  organizationId: z.string(),
  propertyManagerId: z.string(),
  propertyOwnerId: z.string().optional().nullable(),
  wifiName: z.string().optional().nullable(),
  wifiPassword: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  bpProductId: z.string().optional().nullable(),
  doorCode: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  basePrice: z.number().optional(),
  iCalKey: z.string().optional().nullable(),
  content: z.lazy(() => ContentUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  pricing: z.lazy(() => PricingUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  amenities: z.lazy(() => AmenityUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  fees: z.lazy(() => FeeUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  events: z.lazy(() => CalendarEventUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUncheckedCreateNestedManyWithoutListingsInputSchema).optional(),
  deductions: z.lazy(() => DeductionsUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  keys: z.lazy(() => ListingKeyUncheckedCreateNestedManyWithoutListingInputSchema).optional()
}).strict();

export const ListingCreateOrConnectWithoutRulesInputSchema: z.ZodType<Prisma.ListingCreateOrConnectWithoutRulesInput> = z.object({
  where: z.lazy(() => ListingWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ListingCreateWithoutRulesInputSchema),z.lazy(() => ListingUncheckedCreateWithoutRulesInputSchema) ]),
}).strict();

export const ListingUpsertWithoutRulesInputSchema: z.ZodType<Prisma.ListingUpsertWithoutRulesInput> = z.object({
  update: z.union([ z.lazy(() => ListingUpdateWithoutRulesInputSchema),z.lazy(() => ListingUncheckedUpdateWithoutRulesInputSchema) ]),
  create: z.union([ z.lazy(() => ListingCreateWithoutRulesInputSchema),z.lazy(() => ListingUncheckedCreateWithoutRulesInputSchema) ]),
  where: z.lazy(() => ListingWhereInputSchema).optional()
}).strict();

export const ListingUpdateToOneWithWhereWithoutRulesInputSchema: z.ZodType<Prisma.ListingUpdateToOneWithWhereWithoutRulesInput> = z.object({
  where: z.lazy(() => ListingWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ListingUpdateWithoutRulesInputSchema),z.lazy(() => ListingUncheckedUpdateWithoutRulesInputSchema) ]),
}).strict();

export const ListingUpdateWithoutRulesInputSchema: z.ZodType<Prisma.ListingUpdateWithoutRulesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  unitType: z.union([ z.lazy(() => UnitTypeSchema),z.lazy(() => EnumUnitTypeFieldUpdateOperationsInputSchema) ]).optional(),
  beds: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  baths: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  guests: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timeZone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  airbnbRemitsTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  wifiName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiPassword: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bpProductId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doorCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  basePrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  iCalKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  content: z.lazy(() => ContentUpdateOneWithoutListingNestedInputSchema).optional(),
  pricing: z.lazy(() => PricingUpdateOneWithoutListingNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUpdateOneWithoutListingNestedInputSchema).optional(),
  amenities: z.lazy(() => AmenityUpdateManyWithoutListingNestedInputSchema).optional(),
  fees: z.lazy(() => FeeUpdateManyWithoutListingNestedInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesUpdateOneWithoutListingNestedInputSchema).optional(),
  events: z.lazy(() => CalendarEventUpdateManyWithoutListingNestedInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUpdateManyWithoutListingsNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutListingsNestedInputSchema).optional(),
  deductions: z.lazy(() => DeductionsUpdateOneWithoutListingNestedInputSchema).optional(),
  propertyManager: z.lazy(() => UserUpdateOneRequiredWithoutManagedListingsNestedInputSchema).optional(),
  propertyOwner: z.lazy(() => UserUpdateOneWithoutOwnedListingsNestedInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUpdateManyWithoutListingNestedInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUpdateManyWithoutListingNestedInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementUpdateManyWithoutListingNestedInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateUpdateManyWithoutListingNestedInputSchema).optional(),
  keys: z.lazy(() => ListingKeyUpdateManyWithoutListingNestedInputSchema).optional()
}).strict();

export const ListingUncheckedUpdateWithoutRulesInputSchema: z.ZodType<Prisma.ListingUncheckedUpdateWithoutRulesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  unitType: z.union([ z.lazy(() => UnitTypeSchema),z.lazy(() => EnumUnitTypeFieldUpdateOperationsInputSchema) ]).optional(),
  beds: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  baths: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  guests: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timeZone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  airbnbRemitsTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  propertyManagerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  propertyOwnerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiPassword: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bpProductId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doorCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  basePrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  iCalKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  content: z.lazy(() => ContentUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  pricing: z.lazy(() => PricingUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  amenities: z.lazy(() => AmenityUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  fees: z.lazy(() => FeeUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  events: z.lazy(() => CalendarEventUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUncheckedUpdateManyWithoutListingsNestedInputSchema).optional(),
  deductions: z.lazy(() => DeductionsUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  keys: z.lazy(() => ListingKeyUncheckedUpdateManyWithoutListingNestedInputSchema).optional()
}).strict();

export const ListingCreateWithoutPricingInputSchema: z.ZodType<Prisma.ListingCreateWithoutPricingInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  unitType: z.lazy(() => UnitTypeSchema),
  beds: z.number(),
  baths: z.number(),
  guests: z.number(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  timeZone: z.string(),
  airbnbRemitsTaxes: z.boolean().optional(),
  wifiName: z.string().optional().nullable(),
  wifiPassword: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  bpProductId: z.string().optional().nullable(),
  doorCode: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  basePrice: z.number().optional(),
  iCalKey: z.string().optional().nullable(),
  content: z.lazy(() => ContentCreateNestedOneWithoutListingInputSchema).optional(),
  rules: z.lazy(() => RulesCreateNestedOneWithoutListingInputSchema).optional(),
  availability: z.lazy(() => AvailabilityCreateNestedOneWithoutListingInputSchema).optional(),
  amenities: z.lazy(() => AmenityCreateNestedManyWithoutListingInputSchema).optional(),
  fees: z.lazy(() => FeeCreateNestedManyWithoutListingInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesCreateNestedOneWithoutListingInputSchema).optional(),
  events: z.lazy(() => CalendarEventCreateNestedManyWithoutListingInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateCreateNestedManyWithoutListingsInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutListingsInputSchema),
  deductions: z.lazy(() => DeductionsCreateNestedOneWithoutListingInputSchema).optional(),
  propertyManager: z.lazy(() => UserCreateNestedOneWithoutManagedListingsInputSchema),
  propertyOwner: z.lazy(() => UserCreateNestedOneWithoutOwnedListingsInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadCreateNestedManyWithoutListingInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseCreateNestedManyWithoutListingInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementCreateNestedManyWithoutListingInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateCreateNestedManyWithoutListingInputSchema).optional(),
  keys: z.lazy(() => ListingKeyCreateNestedManyWithoutListingInputSchema).optional()
}).strict();

export const ListingUncheckedCreateWithoutPricingInputSchema: z.ZodType<Prisma.ListingUncheckedCreateWithoutPricingInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  unitType: z.lazy(() => UnitTypeSchema),
  beds: z.number(),
  baths: z.number(),
  guests: z.number(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  timeZone: z.string(),
  airbnbRemitsTaxes: z.boolean().optional(),
  organizationId: z.string(),
  propertyManagerId: z.string(),
  propertyOwnerId: z.string().optional().nullable(),
  wifiName: z.string().optional().nullable(),
  wifiPassword: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  bpProductId: z.string().optional().nullable(),
  doorCode: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  basePrice: z.number().optional(),
  iCalKey: z.string().optional().nullable(),
  content: z.lazy(() => ContentUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  rules: z.lazy(() => RulesUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  amenities: z.lazy(() => AmenityUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  fees: z.lazy(() => FeeUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  events: z.lazy(() => CalendarEventUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUncheckedCreateNestedManyWithoutListingsInputSchema).optional(),
  deductions: z.lazy(() => DeductionsUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  keys: z.lazy(() => ListingKeyUncheckedCreateNestedManyWithoutListingInputSchema).optional()
}).strict();

export const ListingCreateOrConnectWithoutPricingInputSchema: z.ZodType<Prisma.ListingCreateOrConnectWithoutPricingInput> = z.object({
  where: z.lazy(() => ListingWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ListingCreateWithoutPricingInputSchema),z.lazy(() => ListingUncheckedCreateWithoutPricingInputSchema) ]),
}).strict();

export const PricingDateCreateWithoutPricingInputSchema: z.ZodType<Prisma.PricingDateCreateWithoutPricingInput> = z.object({
  id: z.string().optional(),
  startDate: z.coerce.date(),
  endDate: z.coerce.date(),
  percent: z.number()
}).strict();

export const PricingDateUncheckedCreateWithoutPricingInputSchema: z.ZodType<Prisma.PricingDateUncheckedCreateWithoutPricingInput> = z.object({
  id: z.string().optional(),
  startDate: z.coerce.date(),
  endDate: z.coerce.date(),
  percent: z.number()
}).strict();

export const PricingDateCreateOrConnectWithoutPricingInputSchema: z.ZodType<Prisma.PricingDateCreateOrConnectWithoutPricingInput> = z.object({
  where: z.lazy(() => PricingDateWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PricingDateCreateWithoutPricingInputSchema),z.lazy(() => PricingDateUncheckedCreateWithoutPricingInputSchema) ]),
}).strict();

export const PricingDateCreateManyPricingInputEnvelopeSchema: z.ZodType<Prisma.PricingDateCreateManyPricingInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => PricingDateCreateManyPricingInputSchema),z.lazy(() => PricingDateCreateManyPricingInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const DiscountCreateWithoutPricingInputSchema: z.ZodType<Prisma.DiscountCreateWithoutPricingInput> = z.object({
  id: z.string().optional(),
  days: z.number(),
  percent: z.number().optional()
}).strict();

export const DiscountUncheckedCreateWithoutPricingInputSchema: z.ZodType<Prisma.DiscountUncheckedCreateWithoutPricingInput> = z.object({
  id: z.string().optional(),
  days: z.number(),
  percent: z.number().optional()
}).strict();

export const DiscountCreateOrConnectWithoutPricingInputSchema: z.ZodType<Prisma.DiscountCreateOrConnectWithoutPricingInput> = z.object({
  where: z.lazy(() => DiscountWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => DiscountCreateWithoutPricingInputSchema),z.lazy(() => DiscountUncheckedCreateWithoutPricingInputSchema) ]),
}).strict();

export const DiscountCreateManyPricingInputEnvelopeSchema: z.ZodType<Prisma.DiscountCreateManyPricingInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => DiscountCreateManyPricingInputSchema),z.lazy(() => DiscountCreateManyPricingInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ListingUpsertWithoutPricingInputSchema: z.ZodType<Prisma.ListingUpsertWithoutPricingInput> = z.object({
  update: z.union([ z.lazy(() => ListingUpdateWithoutPricingInputSchema),z.lazy(() => ListingUncheckedUpdateWithoutPricingInputSchema) ]),
  create: z.union([ z.lazy(() => ListingCreateWithoutPricingInputSchema),z.lazy(() => ListingUncheckedCreateWithoutPricingInputSchema) ]),
  where: z.lazy(() => ListingWhereInputSchema).optional()
}).strict();

export const ListingUpdateToOneWithWhereWithoutPricingInputSchema: z.ZodType<Prisma.ListingUpdateToOneWithWhereWithoutPricingInput> = z.object({
  where: z.lazy(() => ListingWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ListingUpdateWithoutPricingInputSchema),z.lazy(() => ListingUncheckedUpdateWithoutPricingInputSchema) ]),
}).strict();

export const ListingUpdateWithoutPricingInputSchema: z.ZodType<Prisma.ListingUpdateWithoutPricingInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  unitType: z.union([ z.lazy(() => UnitTypeSchema),z.lazy(() => EnumUnitTypeFieldUpdateOperationsInputSchema) ]).optional(),
  beds: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  baths: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  guests: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timeZone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  airbnbRemitsTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  wifiName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiPassword: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bpProductId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doorCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  basePrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  iCalKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  content: z.lazy(() => ContentUpdateOneWithoutListingNestedInputSchema).optional(),
  rules: z.lazy(() => RulesUpdateOneWithoutListingNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUpdateOneWithoutListingNestedInputSchema).optional(),
  amenities: z.lazy(() => AmenityUpdateManyWithoutListingNestedInputSchema).optional(),
  fees: z.lazy(() => FeeUpdateManyWithoutListingNestedInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesUpdateOneWithoutListingNestedInputSchema).optional(),
  events: z.lazy(() => CalendarEventUpdateManyWithoutListingNestedInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUpdateManyWithoutListingsNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutListingsNestedInputSchema).optional(),
  deductions: z.lazy(() => DeductionsUpdateOneWithoutListingNestedInputSchema).optional(),
  propertyManager: z.lazy(() => UserUpdateOneRequiredWithoutManagedListingsNestedInputSchema).optional(),
  propertyOwner: z.lazy(() => UserUpdateOneWithoutOwnedListingsNestedInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUpdateManyWithoutListingNestedInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUpdateManyWithoutListingNestedInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementUpdateManyWithoutListingNestedInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateUpdateManyWithoutListingNestedInputSchema).optional(),
  keys: z.lazy(() => ListingKeyUpdateManyWithoutListingNestedInputSchema).optional()
}).strict();

export const ListingUncheckedUpdateWithoutPricingInputSchema: z.ZodType<Prisma.ListingUncheckedUpdateWithoutPricingInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  unitType: z.union([ z.lazy(() => UnitTypeSchema),z.lazy(() => EnumUnitTypeFieldUpdateOperationsInputSchema) ]).optional(),
  beds: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  baths: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  guests: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timeZone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  airbnbRemitsTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  propertyManagerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  propertyOwnerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiPassword: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bpProductId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doorCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  basePrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  iCalKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  content: z.lazy(() => ContentUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  rules: z.lazy(() => RulesUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  amenities: z.lazy(() => AmenityUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  fees: z.lazy(() => FeeUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  events: z.lazy(() => CalendarEventUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUncheckedUpdateManyWithoutListingsNestedInputSchema).optional(),
  deductions: z.lazy(() => DeductionsUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  keys: z.lazy(() => ListingKeyUncheckedUpdateManyWithoutListingNestedInputSchema).optional()
}).strict();

export const PricingDateUpsertWithWhereUniqueWithoutPricingInputSchema: z.ZodType<Prisma.PricingDateUpsertWithWhereUniqueWithoutPricingInput> = z.object({
  where: z.lazy(() => PricingDateWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => PricingDateUpdateWithoutPricingInputSchema),z.lazy(() => PricingDateUncheckedUpdateWithoutPricingInputSchema) ]),
  create: z.union([ z.lazy(() => PricingDateCreateWithoutPricingInputSchema),z.lazy(() => PricingDateUncheckedCreateWithoutPricingInputSchema) ]),
}).strict();

export const PricingDateUpdateWithWhereUniqueWithoutPricingInputSchema: z.ZodType<Prisma.PricingDateUpdateWithWhereUniqueWithoutPricingInput> = z.object({
  where: z.lazy(() => PricingDateWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => PricingDateUpdateWithoutPricingInputSchema),z.lazy(() => PricingDateUncheckedUpdateWithoutPricingInputSchema) ]),
}).strict();

export const PricingDateUpdateManyWithWhereWithoutPricingInputSchema: z.ZodType<Prisma.PricingDateUpdateManyWithWhereWithoutPricingInput> = z.object({
  where: z.lazy(() => PricingDateScalarWhereInputSchema),
  data: z.union([ z.lazy(() => PricingDateUpdateManyMutationInputSchema),z.lazy(() => PricingDateUncheckedUpdateManyWithoutPricingInputSchema) ]),
}).strict();

export const PricingDateScalarWhereInputSchema: z.ZodType<Prisma.PricingDateScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PricingDateScalarWhereInputSchema),z.lazy(() => PricingDateScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PricingDateScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PricingDateScalarWhereInputSchema),z.lazy(() => PricingDateScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  pricingId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  startDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  endDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  percent: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
}).strict();

export const DiscountUpsertWithWhereUniqueWithoutPricingInputSchema: z.ZodType<Prisma.DiscountUpsertWithWhereUniqueWithoutPricingInput> = z.object({
  where: z.lazy(() => DiscountWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => DiscountUpdateWithoutPricingInputSchema),z.lazy(() => DiscountUncheckedUpdateWithoutPricingInputSchema) ]),
  create: z.union([ z.lazy(() => DiscountCreateWithoutPricingInputSchema),z.lazy(() => DiscountUncheckedCreateWithoutPricingInputSchema) ]),
}).strict();

export const DiscountUpdateWithWhereUniqueWithoutPricingInputSchema: z.ZodType<Prisma.DiscountUpdateWithWhereUniqueWithoutPricingInput> = z.object({
  where: z.lazy(() => DiscountWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => DiscountUpdateWithoutPricingInputSchema),z.lazy(() => DiscountUncheckedUpdateWithoutPricingInputSchema) ]),
}).strict();

export const DiscountUpdateManyWithWhereWithoutPricingInputSchema: z.ZodType<Prisma.DiscountUpdateManyWithWhereWithoutPricingInput> = z.object({
  where: z.lazy(() => DiscountScalarWhereInputSchema),
  data: z.union([ z.lazy(() => DiscountUpdateManyMutationInputSchema),z.lazy(() => DiscountUncheckedUpdateManyWithoutPricingInputSchema) ]),
}).strict();

export const DiscountScalarWhereInputSchema: z.ZodType<Prisma.DiscountScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => DiscountScalarWhereInputSchema),z.lazy(() => DiscountScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => DiscountScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DiscountScalarWhereInputSchema),z.lazy(() => DiscountScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  pricingId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  days: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  percent: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
}).strict();

export const PricingCreateWithoutDatesInputSchema: z.ZodType<Prisma.PricingCreateWithoutDatesInput> = z.object({
  id: z.string().optional(),
  minimum: z.number(),
  weekday: z.number(),
  weekend: z.number(),
  minStay: z.number(),
  maxStay: z.number(),
  dynamicPricing: z.lazy(() => DynamicPricingSchema).optional(),
  listing: z.lazy(() => ListingCreateNestedOneWithoutPricingInputSchema),
  discounts: z.lazy(() => DiscountCreateNestedManyWithoutPricingInputSchema).optional()
}).strict();

export const PricingUncheckedCreateWithoutDatesInputSchema: z.ZodType<Prisma.PricingUncheckedCreateWithoutDatesInput> = z.object({
  id: z.string().optional(),
  listingId: z.string(),
  minimum: z.number(),
  weekday: z.number(),
  weekend: z.number(),
  minStay: z.number(),
  maxStay: z.number(),
  dynamicPricing: z.lazy(() => DynamicPricingSchema).optional(),
  discounts: z.lazy(() => DiscountUncheckedCreateNestedManyWithoutPricingInputSchema).optional()
}).strict();

export const PricingCreateOrConnectWithoutDatesInputSchema: z.ZodType<Prisma.PricingCreateOrConnectWithoutDatesInput> = z.object({
  where: z.lazy(() => PricingWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PricingCreateWithoutDatesInputSchema),z.lazy(() => PricingUncheckedCreateWithoutDatesInputSchema) ]),
}).strict();

export const PricingUpsertWithoutDatesInputSchema: z.ZodType<Prisma.PricingUpsertWithoutDatesInput> = z.object({
  update: z.union([ z.lazy(() => PricingUpdateWithoutDatesInputSchema),z.lazy(() => PricingUncheckedUpdateWithoutDatesInputSchema) ]),
  create: z.union([ z.lazy(() => PricingCreateWithoutDatesInputSchema),z.lazy(() => PricingUncheckedCreateWithoutDatesInputSchema) ]),
  where: z.lazy(() => PricingWhereInputSchema).optional()
}).strict();

export const PricingUpdateToOneWithWhereWithoutDatesInputSchema: z.ZodType<Prisma.PricingUpdateToOneWithWhereWithoutDatesInput> = z.object({
  where: z.lazy(() => PricingWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => PricingUpdateWithoutDatesInputSchema),z.lazy(() => PricingUncheckedUpdateWithoutDatesInputSchema) ]),
}).strict();

export const PricingUpdateWithoutDatesInputSchema: z.ZodType<Prisma.PricingUpdateWithoutDatesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  minimum: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  weekday: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  weekend: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  minStay: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  maxStay: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  dynamicPricing: z.union([ z.lazy(() => DynamicPricingSchema),z.lazy(() => EnumDynamicPricingFieldUpdateOperationsInputSchema) ]).optional(),
  listing: z.lazy(() => ListingUpdateOneRequiredWithoutPricingNestedInputSchema).optional(),
  discounts: z.lazy(() => DiscountUpdateManyWithoutPricingNestedInputSchema).optional()
}).strict();

export const PricingUncheckedUpdateWithoutDatesInputSchema: z.ZodType<Prisma.PricingUncheckedUpdateWithoutDatesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  listingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  minimum: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  weekday: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  weekend: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  minStay: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  maxStay: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  dynamicPricing: z.union([ z.lazy(() => DynamicPricingSchema),z.lazy(() => EnumDynamicPricingFieldUpdateOperationsInputSchema) ]).optional(),
  discounts: z.lazy(() => DiscountUncheckedUpdateManyWithoutPricingNestedInputSchema).optional()
}).strict();

export const PricingCreateWithoutDiscountsInputSchema: z.ZodType<Prisma.PricingCreateWithoutDiscountsInput> = z.object({
  id: z.string().optional(),
  minimum: z.number(),
  weekday: z.number(),
  weekend: z.number(),
  minStay: z.number(),
  maxStay: z.number(),
  dynamicPricing: z.lazy(() => DynamicPricingSchema).optional(),
  listing: z.lazy(() => ListingCreateNestedOneWithoutPricingInputSchema),
  dates: z.lazy(() => PricingDateCreateNestedManyWithoutPricingInputSchema).optional()
}).strict();

export const PricingUncheckedCreateWithoutDiscountsInputSchema: z.ZodType<Prisma.PricingUncheckedCreateWithoutDiscountsInput> = z.object({
  id: z.string().optional(),
  listingId: z.string(),
  minimum: z.number(),
  weekday: z.number(),
  weekend: z.number(),
  minStay: z.number(),
  maxStay: z.number(),
  dynamicPricing: z.lazy(() => DynamicPricingSchema).optional(),
  dates: z.lazy(() => PricingDateUncheckedCreateNestedManyWithoutPricingInputSchema).optional()
}).strict();

export const PricingCreateOrConnectWithoutDiscountsInputSchema: z.ZodType<Prisma.PricingCreateOrConnectWithoutDiscountsInput> = z.object({
  where: z.lazy(() => PricingWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PricingCreateWithoutDiscountsInputSchema),z.lazy(() => PricingUncheckedCreateWithoutDiscountsInputSchema) ]),
}).strict();

export const PricingUpsertWithoutDiscountsInputSchema: z.ZodType<Prisma.PricingUpsertWithoutDiscountsInput> = z.object({
  update: z.union([ z.lazy(() => PricingUpdateWithoutDiscountsInputSchema),z.lazy(() => PricingUncheckedUpdateWithoutDiscountsInputSchema) ]),
  create: z.union([ z.lazy(() => PricingCreateWithoutDiscountsInputSchema),z.lazy(() => PricingUncheckedCreateWithoutDiscountsInputSchema) ]),
  where: z.lazy(() => PricingWhereInputSchema).optional()
}).strict();

export const PricingUpdateToOneWithWhereWithoutDiscountsInputSchema: z.ZodType<Prisma.PricingUpdateToOneWithWhereWithoutDiscountsInput> = z.object({
  where: z.lazy(() => PricingWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => PricingUpdateWithoutDiscountsInputSchema),z.lazy(() => PricingUncheckedUpdateWithoutDiscountsInputSchema) ]),
}).strict();

export const PricingUpdateWithoutDiscountsInputSchema: z.ZodType<Prisma.PricingUpdateWithoutDiscountsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  minimum: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  weekday: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  weekend: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  minStay: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  maxStay: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  dynamicPricing: z.union([ z.lazy(() => DynamicPricingSchema),z.lazy(() => EnumDynamicPricingFieldUpdateOperationsInputSchema) ]).optional(),
  listing: z.lazy(() => ListingUpdateOneRequiredWithoutPricingNestedInputSchema).optional(),
  dates: z.lazy(() => PricingDateUpdateManyWithoutPricingNestedInputSchema).optional()
}).strict();

export const PricingUncheckedUpdateWithoutDiscountsInputSchema: z.ZodType<Prisma.PricingUncheckedUpdateWithoutDiscountsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  listingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  minimum: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  weekday: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  weekend: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  minStay: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  maxStay: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  dynamicPricing: z.union([ z.lazy(() => DynamicPricingSchema),z.lazy(() => EnumDynamicPricingFieldUpdateOperationsInputSchema) ]).optional(),
  dates: z.lazy(() => PricingDateUncheckedUpdateManyWithoutPricingNestedInputSchema).optional()
}).strict();

export const ListingCreateWithoutAvailabilityInputSchema: z.ZodType<Prisma.ListingCreateWithoutAvailabilityInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  unitType: z.lazy(() => UnitTypeSchema),
  beds: z.number(),
  baths: z.number(),
  guests: z.number(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  timeZone: z.string(),
  airbnbRemitsTaxes: z.boolean().optional(),
  wifiName: z.string().optional().nullable(),
  wifiPassword: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  bpProductId: z.string().optional().nullable(),
  doorCode: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  basePrice: z.number().optional(),
  iCalKey: z.string().optional().nullable(),
  content: z.lazy(() => ContentCreateNestedOneWithoutListingInputSchema).optional(),
  rules: z.lazy(() => RulesCreateNestedOneWithoutListingInputSchema).optional(),
  pricing: z.lazy(() => PricingCreateNestedOneWithoutListingInputSchema).optional(),
  amenities: z.lazy(() => AmenityCreateNestedManyWithoutListingInputSchema).optional(),
  fees: z.lazy(() => FeeCreateNestedManyWithoutListingInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesCreateNestedOneWithoutListingInputSchema).optional(),
  events: z.lazy(() => CalendarEventCreateNestedManyWithoutListingInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateCreateNestedManyWithoutListingsInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutListingsInputSchema),
  deductions: z.lazy(() => DeductionsCreateNestedOneWithoutListingInputSchema).optional(),
  propertyManager: z.lazy(() => UserCreateNestedOneWithoutManagedListingsInputSchema),
  propertyOwner: z.lazy(() => UserCreateNestedOneWithoutOwnedListingsInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadCreateNestedManyWithoutListingInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseCreateNestedManyWithoutListingInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementCreateNestedManyWithoutListingInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateCreateNestedManyWithoutListingInputSchema).optional(),
  keys: z.lazy(() => ListingKeyCreateNestedManyWithoutListingInputSchema).optional()
}).strict();

export const ListingUncheckedCreateWithoutAvailabilityInputSchema: z.ZodType<Prisma.ListingUncheckedCreateWithoutAvailabilityInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  unitType: z.lazy(() => UnitTypeSchema),
  beds: z.number(),
  baths: z.number(),
  guests: z.number(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  timeZone: z.string(),
  airbnbRemitsTaxes: z.boolean().optional(),
  organizationId: z.string(),
  propertyManagerId: z.string(),
  propertyOwnerId: z.string().optional().nullable(),
  wifiName: z.string().optional().nullable(),
  wifiPassword: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  bpProductId: z.string().optional().nullable(),
  doorCode: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  basePrice: z.number().optional(),
  iCalKey: z.string().optional().nullable(),
  content: z.lazy(() => ContentUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  rules: z.lazy(() => RulesUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  pricing: z.lazy(() => PricingUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  amenities: z.lazy(() => AmenityUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  fees: z.lazy(() => FeeUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  events: z.lazy(() => CalendarEventUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUncheckedCreateNestedManyWithoutListingsInputSchema).optional(),
  deductions: z.lazy(() => DeductionsUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  keys: z.lazy(() => ListingKeyUncheckedCreateNestedManyWithoutListingInputSchema).optional()
}).strict();

export const ListingCreateOrConnectWithoutAvailabilityInputSchema: z.ZodType<Prisma.ListingCreateOrConnectWithoutAvailabilityInput> = z.object({
  where: z.lazy(() => ListingWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ListingCreateWithoutAvailabilityInputSchema),z.lazy(() => ListingUncheckedCreateWithoutAvailabilityInputSchema) ]),
}).strict();

export const ListingUpsertWithoutAvailabilityInputSchema: z.ZodType<Prisma.ListingUpsertWithoutAvailabilityInput> = z.object({
  update: z.union([ z.lazy(() => ListingUpdateWithoutAvailabilityInputSchema),z.lazy(() => ListingUncheckedUpdateWithoutAvailabilityInputSchema) ]),
  create: z.union([ z.lazy(() => ListingCreateWithoutAvailabilityInputSchema),z.lazy(() => ListingUncheckedCreateWithoutAvailabilityInputSchema) ]),
  where: z.lazy(() => ListingWhereInputSchema).optional()
}).strict();

export const ListingUpdateToOneWithWhereWithoutAvailabilityInputSchema: z.ZodType<Prisma.ListingUpdateToOneWithWhereWithoutAvailabilityInput> = z.object({
  where: z.lazy(() => ListingWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ListingUpdateWithoutAvailabilityInputSchema),z.lazy(() => ListingUncheckedUpdateWithoutAvailabilityInputSchema) ]),
}).strict();

export const ListingUpdateWithoutAvailabilityInputSchema: z.ZodType<Prisma.ListingUpdateWithoutAvailabilityInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  unitType: z.union([ z.lazy(() => UnitTypeSchema),z.lazy(() => EnumUnitTypeFieldUpdateOperationsInputSchema) ]).optional(),
  beds: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  baths: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  guests: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timeZone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  airbnbRemitsTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  wifiName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiPassword: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bpProductId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doorCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  basePrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  iCalKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  content: z.lazy(() => ContentUpdateOneWithoutListingNestedInputSchema).optional(),
  rules: z.lazy(() => RulesUpdateOneWithoutListingNestedInputSchema).optional(),
  pricing: z.lazy(() => PricingUpdateOneWithoutListingNestedInputSchema).optional(),
  amenities: z.lazy(() => AmenityUpdateManyWithoutListingNestedInputSchema).optional(),
  fees: z.lazy(() => FeeUpdateManyWithoutListingNestedInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesUpdateOneWithoutListingNestedInputSchema).optional(),
  events: z.lazy(() => CalendarEventUpdateManyWithoutListingNestedInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUpdateManyWithoutListingsNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutListingsNestedInputSchema).optional(),
  deductions: z.lazy(() => DeductionsUpdateOneWithoutListingNestedInputSchema).optional(),
  propertyManager: z.lazy(() => UserUpdateOneRequiredWithoutManagedListingsNestedInputSchema).optional(),
  propertyOwner: z.lazy(() => UserUpdateOneWithoutOwnedListingsNestedInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUpdateManyWithoutListingNestedInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUpdateManyWithoutListingNestedInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementUpdateManyWithoutListingNestedInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateUpdateManyWithoutListingNestedInputSchema).optional(),
  keys: z.lazy(() => ListingKeyUpdateManyWithoutListingNestedInputSchema).optional()
}).strict();

export const ListingUncheckedUpdateWithoutAvailabilityInputSchema: z.ZodType<Prisma.ListingUncheckedUpdateWithoutAvailabilityInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  unitType: z.union([ z.lazy(() => UnitTypeSchema),z.lazy(() => EnumUnitTypeFieldUpdateOperationsInputSchema) ]).optional(),
  beds: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  baths: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  guests: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timeZone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  airbnbRemitsTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  propertyManagerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  propertyOwnerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiPassword: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bpProductId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doorCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  basePrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  iCalKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  content: z.lazy(() => ContentUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  rules: z.lazy(() => RulesUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  pricing: z.lazy(() => PricingUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  amenities: z.lazy(() => AmenityUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  fees: z.lazy(() => FeeUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  events: z.lazy(() => CalendarEventUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUncheckedUpdateManyWithoutListingsNestedInputSchema).optional(),
  deductions: z.lazy(() => DeductionsUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  keys: z.lazy(() => ListingKeyUncheckedUpdateManyWithoutListingNestedInputSchema).optional()
}).strict();

export const ListingCreateWithoutAmenitiesInputSchema: z.ZodType<Prisma.ListingCreateWithoutAmenitiesInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  unitType: z.lazy(() => UnitTypeSchema),
  beds: z.number(),
  baths: z.number(),
  guests: z.number(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  timeZone: z.string(),
  airbnbRemitsTaxes: z.boolean().optional(),
  wifiName: z.string().optional().nullable(),
  wifiPassword: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  bpProductId: z.string().optional().nullable(),
  doorCode: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  basePrice: z.number().optional(),
  iCalKey: z.string().optional().nullable(),
  content: z.lazy(() => ContentCreateNestedOneWithoutListingInputSchema).optional(),
  rules: z.lazy(() => RulesCreateNestedOneWithoutListingInputSchema).optional(),
  pricing: z.lazy(() => PricingCreateNestedOneWithoutListingInputSchema).optional(),
  availability: z.lazy(() => AvailabilityCreateNestedOneWithoutListingInputSchema).optional(),
  fees: z.lazy(() => FeeCreateNestedManyWithoutListingInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesCreateNestedOneWithoutListingInputSchema).optional(),
  events: z.lazy(() => CalendarEventCreateNestedManyWithoutListingInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateCreateNestedManyWithoutListingsInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutListingsInputSchema),
  deductions: z.lazy(() => DeductionsCreateNestedOneWithoutListingInputSchema).optional(),
  propertyManager: z.lazy(() => UserCreateNestedOneWithoutManagedListingsInputSchema),
  propertyOwner: z.lazy(() => UserCreateNestedOneWithoutOwnedListingsInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadCreateNestedManyWithoutListingInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseCreateNestedManyWithoutListingInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementCreateNestedManyWithoutListingInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateCreateNestedManyWithoutListingInputSchema).optional(),
  keys: z.lazy(() => ListingKeyCreateNestedManyWithoutListingInputSchema).optional()
}).strict();

export const ListingUncheckedCreateWithoutAmenitiesInputSchema: z.ZodType<Prisma.ListingUncheckedCreateWithoutAmenitiesInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  unitType: z.lazy(() => UnitTypeSchema),
  beds: z.number(),
  baths: z.number(),
  guests: z.number(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  timeZone: z.string(),
  airbnbRemitsTaxes: z.boolean().optional(),
  organizationId: z.string(),
  propertyManagerId: z.string(),
  propertyOwnerId: z.string().optional().nullable(),
  wifiName: z.string().optional().nullable(),
  wifiPassword: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  bpProductId: z.string().optional().nullable(),
  doorCode: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  basePrice: z.number().optional(),
  iCalKey: z.string().optional().nullable(),
  content: z.lazy(() => ContentUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  rules: z.lazy(() => RulesUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  pricing: z.lazy(() => PricingUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  fees: z.lazy(() => FeeUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  events: z.lazy(() => CalendarEventUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUncheckedCreateNestedManyWithoutListingsInputSchema).optional(),
  deductions: z.lazy(() => DeductionsUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  keys: z.lazy(() => ListingKeyUncheckedCreateNestedManyWithoutListingInputSchema).optional()
}).strict();

export const ListingCreateOrConnectWithoutAmenitiesInputSchema: z.ZodType<Prisma.ListingCreateOrConnectWithoutAmenitiesInput> = z.object({
  where: z.lazy(() => ListingWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ListingCreateWithoutAmenitiesInputSchema),z.lazy(() => ListingUncheckedCreateWithoutAmenitiesInputSchema) ]),
}).strict();

export const ListingUpsertWithoutAmenitiesInputSchema: z.ZodType<Prisma.ListingUpsertWithoutAmenitiesInput> = z.object({
  update: z.union([ z.lazy(() => ListingUpdateWithoutAmenitiesInputSchema),z.lazy(() => ListingUncheckedUpdateWithoutAmenitiesInputSchema) ]),
  create: z.union([ z.lazy(() => ListingCreateWithoutAmenitiesInputSchema),z.lazy(() => ListingUncheckedCreateWithoutAmenitiesInputSchema) ]),
  where: z.lazy(() => ListingWhereInputSchema).optional()
}).strict();

export const ListingUpdateToOneWithWhereWithoutAmenitiesInputSchema: z.ZodType<Prisma.ListingUpdateToOneWithWhereWithoutAmenitiesInput> = z.object({
  where: z.lazy(() => ListingWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ListingUpdateWithoutAmenitiesInputSchema),z.lazy(() => ListingUncheckedUpdateWithoutAmenitiesInputSchema) ]),
}).strict();

export const ListingUpdateWithoutAmenitiesInputSchema: z.ZodType<Prisma.ListingUpdateWithoutAmenitiesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  unitType: z.union([ z.lazy(() => UnitTypeSchema),z.lazy(() => EnumUnitTypeFieldUpdateOperationsInputSchema) ]).optional(),
  beds: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  baths: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  guests: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timeZone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  airbnbRemitsTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  wifiName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiPassword: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bpProductId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doorCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  basePrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  iCalKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  content: z.lazy(() => ContentUpdateOneWithoutListingNestedInputSchema).optional(),
  rules: z.lazy(() => RulesUpdateOneWithoutListingNestedInputSchema).optional(),
  pricing: z.lazy(() => PricingUpdateOneWithoutListingNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUpdateOneWithoutListingNestedInputSchema).optional(),
  fees: z.lazy(() => FeeUpdateManyWithoutListingNestedInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesUpdateOneWithoutListingNestedInputSchema).optional(),
  events: z.lazy(() => CalendarEventUpdateManyWithoutListingNestedInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUpdateManyWithoutListingsNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutListingsNestedInputSchema).optional(),
  deductions: z.lazy(() => DeductionsUpdateOneWithoutListingNestedInputSchema).optional(),
  propertyManager: z.lazy(() => UserUpdateOneRequiredWithoutManagedListingsNestedInputSchema).optional(),
  propertyOwner: z.lazy(() => UserUpdateOneWithoutOwnedListingsNestedInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUpdateManyWithoutListingNestedInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUpdateManyWithoutListingNestedInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementUpdateManyWithoutListingNestedInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateUpdateManyWithoutListingNestedInputSchema).optional(),
  keys: z.lazy(() => ListingKeyUpdateManyWithoutListingNestedInputSchema).optional()
}).strict();

export const ListingUncheckedUpdateWithoutAmenitiesInputSchema: z.ZodType<Prisma.ListingUncheckedUpdateWithoutAmenitiesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  unitType: z.union([ z.lazy(() => UnitTypeSchema),z.lazy(() => EnumUnitTypeFieldUpdateOperationsInputSchema) ]).optional(),
  beds: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  baths: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  guests: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timeZone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  airbnbRemitsTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  propertyManagerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  propertyOwnerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiPassword: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bpProductId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doorCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  basePrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  iCalKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  content: z.lazy(() => ContentUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  rules: z.lazy(() => RulesUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  pricing: z.lazy(() => PricingUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  fees: z.lazy(() => FeeUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  events: z.lazy(() => CalendarEventUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUncheckedUpdateManyWithoutListingsNestedInputSchema).optional(),
  deductions: z.lazy(() => DeductionsUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  keys: z.lazy(() => ListingKeyUncheckedUpdateManyWithoutListingNestedInputSchema).optional()
}).strict();

export const ListingCreateWithoutFeesInputSchema: z.ZodType<Prisma.ListingCreateWithoutFeesInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  unitType: z.lazy(() => UnitTypeSchema),
  beds: z.number(),
  baths: z.number(),
  guests: z.number(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  timeZone: z.string(),
  airbnbRemitsTaxes: z.boolean().optional(),
  wifiName: z.string().optional().nullable(),
  wifiPassword: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  bpProductId: z.string().optional().nullable(),
  doorCode: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  basePrice: z.number().optional(),
  iCalKey: z.string().optional().nullable(),
  content: z.lazy(() => ContentCreateNestedOneWithoutListingInputSchema).optional(),
  rules: z.lazy(() => RulesCreateNestedOneWithoutListingInputSchema).optional(),
  pricing: z.lazy(() => PricingCreateNestedOneWithoutListingInputSchema).optional(),
  availability: z.lazy(() => AvailabilityCreateNestedOneWithoutListingInputSchema).optional(),
  amenities: z.lazy(() => AmenityCreateNestedManyWithoutListingInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesCreateNestedOneWithoutListingInputSchema).optional(),
  events: z.lazy(() => CalendarEventCreateNestedManyWithoutListingInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateCreateNestedManyWithoutListingsInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutListingsInputSchema),
  deductions: z.lazy(() => DeductionsCreateNestedOneWithoutListingInputSchema).optional(),
  propertyManager: z.lazy(() => UserCreateNestedOneWithoutManagedListingsInputSchema),
  propertyOwner: z.lazy(() => UserCreateNestedOneWithoutOwnedListingsInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadCreateNestedManyWithoutListingInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseCreateNestedManyWithoutListingInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementCreateNestedManyWithoutListingInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateCreateNestedManyWithoutListingInputSchema).optional(),
  keys: z.lazy(() => ListingKeyCreateNestedManyWithoutListingInputSchema).optional()
}).strict();

export const ListingUncheckedCreateWithoutFeesInputSchema: z.ZodType<Prisma.ListingUncheckedCreateWithoutFeesInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  unitType: z.lazy(() => UnitTypeSchema),
  beds: z.number(),
  baths: z.number(),
  guests: z.number(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  timeZone: z.string(),
  airbnbRemitsTaxes: z.boolean().optional(),
  organizationId: z.string(),
  propertyManagerId: z.string(),
  propertyOwnerId: z.string().optional().nullable(),
  wifiName: z.string().optional().nullable(),
  wifiPassword: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  bpProductId: z.string().optional().nullable(),
  doorCode: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  basePrice: z.number().optional(),
  iCalKey: z.string().optional().nullable(),
  content: z.lazy(() => ContentUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  rules: z.lazy(() => RulesUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  pricing: z.lazy(() => PricingUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  amenities: z.lazy(() => AmenityUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  events: z.lazy(() => CalendarEventUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUncheckedCreateNestedManyWithoutListingsInputSchema).optional(),
  deductions: z.lazy(() => DeductionsUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  keys: z.lazy(() => ListingKeyUncheckedCreateNestedManyWithoutListingInputSchema).optional()
}).strict();

export const ListingCreateOrConnectWithoutFeesInputSchema: z.ZodType<Prisma.ListingCreateOrConnectWithoutFeesInput> = z.object({
  where: z.lazy(() => ListingWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ListingCreateWithoutFeesInputSchema),z.lazy(() => ListingUncheckedCreateWithoutFeesInputSchema) ]),
}).strict();

export const ListingUpsertWithoutFeesInputSchema: z.ZodType<Prisma.ListingUpsertWithoutFeesInput> = z.object({
  update: z.union([ z.lazy(() => ListingUpdateWithoutFeesInputSchema),z.lazy(() => ListingUncheckedUpdateWithoutFeesInputSchema) ]),
  create: z.union([ z.lazy(() => ListingCreateWithoutFeesInputSchema),z.lazy(() => ListingUncheckedCreateWithoutFeesInputSchema) ]),
  where: z.lazy(() => ListingWhereInputSchema).optional()
}).strict();

export const ListingUpdateToOneWithWhereWithoutFeesInputSchema: z.ZodType<Prisma.ListingUpdateToOneWithWhereWithoutFeesInput> = z.object({
  where: z.lazy(() => ListingWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ListingUpdateWithoutFeesInputSchema),z.lazy(() => ListingUncheckedUpdateWithoutFeesInputSchema) ]),
}).strict();

export const ListingUpdateWithoutFeesInputSchema: z.ZodType<Prisma.ListingUpdateWithoutFeesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  unitType: z.union([ z.lazy(() => UnitTypeSchema),z.lazy(() => EnumUnitTypeFieldUpdateOperationsInputSchema) ]).optional(),
  beds: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  baths: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  guests: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timeZone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  airbnbRemitsTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  wifiName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiPassword: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bpProductId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doorCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  basePrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  iCalKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  content: z.lazy(() => ContentUpdateOneWithoutListingNestedInputSchema).optional(),
  rules: z.lazy(() => RulesUpdateOneWithoutListingNestedInputSchema).optional(),
  pricing: z.lazy(() => PricingUpdateOneWithoutListingNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUpdateOneWithoutListingNestedInputSchema).optional(),
  amenities: z.lazy(() => AmenityUpdateManyWithoutListingNestedInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesUpdateOneWithoutListingNestedInputSchema).optional(),
  events: z.lazy(() => CalendarEventUpdateManyWithoutListingNestedInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUpdateManyWithoutListingsNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutListingsNestedInputSchema).optional(),
  deductions: z.lazy(() => DeductionsUpdateOneWithoutListingNestedInputSchema).optional(),
  propertyManager: z.lazy(() => UserUpdateOneRequiredWithoutManagedListingsNestedInputSchema).optional(),
  propertyOwner: z.lazy(() => UserUpdateOneWithoutOwnedListingsNestedInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUpdateManyWithoutListingNestedInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUpdateManyWithoutListingNestedInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementUpdateManyWithoutListingNestedInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateUpdateManyWithoutListingNestedInputSchema).optional(),
  keys: z.lazy(() => ListingKeyUpdateManyWithoutListingNestedInputSchema).optional()
}).strict();

export const ListingUncheckedUpdateWithoutFeesInputSchema: z.ZodType<Prisma.ListingUncheckedUpdateWithoutFeesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  unitType: z.union([ z.lazy(() => UnitTypeSchema),z.lazy(() => EnumUnitTypeFieldUpdateOperationsInputSchema) ]).optional(),
  beds: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  baths: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  guests: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timeZone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  airbnbRemitsTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  propertyManagerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  propertyOwnerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiPassword: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bpProductId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doorCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  basePrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  iCalKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  content: z.lazy(() => ContentUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  rules: z.lazy(() => RulesUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  pricing: z.lazy(() => PricingUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  amenities: z.lazy(() => AmenityUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  events: z.lazy(() => CalendarEventUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUncheckedUpdateManyWithoutListingsNestedInputSchema).optional(),
  deductions: z.lazy(() => DeductionsUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  keys: z.lazy(() => ListingKeyUncheckedUpdateManyWithoutListingNestedInputSchema).optional()
}).strict();

export const ListingCreateWithoutTaxRatesInputSchema: z.ZodType<Prisma.ListingCreateWithoutTaxRatesInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  unitType: z.lazy(() => UnitTypeSchema),
  beds: z.number(),
  baths: z.number(),
  guests: z.number(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  timeZone: z.string(),
  airbnbRemitsTaxes: z.boolean().optional(),
  wifiName: z.string().optional().nullable(),
  wifiPassword: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  bpProductId: z.string().optional().nullable(),
  doorCode: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  basePrice: z.number().optional(),
  iCalKey: z.string().optional().nullable(),
  content: z.lazy(() => ContentCreateNestedOneWithoutListingInputSchema).optional(),
  rules: z.lazy(() => RulesCreateNestedOneWithoutListingInputSchema).optional(),
  pricing: z.lazy(() => PricingCreateNestedOneWithoutListingInputSchema).optional(),
  availability: z.lazy(() => AvailabilityCreateNestedOneWithoutListingInputSchema).optional(),
  amenities: z.lazy(() => AmenityCreateNestedManyWithoutListingInputSchema).optional(),
  fees: z.lazy(() => FeeCreateNestedManyWithoutListingInputSchema).optional(),
  events: z.lazy(() => CalendarEventCreateNestedManyWithoutListingInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateCreateNestedManyWithoutListingsInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutListingsInputSchema),
  deductions: z.lazy(() => DeductionsCreateNestedOneWithoutListingInputSchema).optional(),
  propertyManager: z.lazy(() => UserCreateNestedOneWithoutManagedListingsInputSchema),
  propertyOwner: z.lazy(() => UserCreateNestedOneWithoutOwnedListingsInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadCreateNestedManyWithoutListingInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseCreateNestedManyWithoutListingInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementCreateNestedManyWithoutListingInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateCreateNestedManyWithoutListingInputSchema).optional(),
  keys: z.lazy(() => ListingKeyCreateNestedManyWithoutListingInputSchema).optional()
}).strict();

export const ListingUncheckedCreateWithoutTaxRatesInputSchema: z.ZodType<Prisma.ListingUncheckedCreateWithoutTaxRatesInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  unitType: z.lazy(() => UnitTypeSchema),
  beds: z.number(),
  baths: z.number(),
  guests: z.number(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  timeZone: z.string(),
  airbnbRemitsTaxes: z.boolean().optional(),
  organizationId: z.string(),
  propertyManagerId: z.string(),
  propertyOwnerId: z.string().optional().nullable(),
  wifiName: z.string().optional().nullable(),
  wifiPassword: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  bpProductId: z.string().optional().nullable(),
  doorCode: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  basePrice: z.number().optional(),
  iCalKey: z.string().optional().nullable(),
  content: z.lazy(() => ContentUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  rules: z.lazy(() => RulesUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  pricing: z.lazy(() => PricingUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  amenities: z.lazy(() => AmenityUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  fees: z.lazy(() => FeeUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  events: z.lazy(() => CalendarEventUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUncheckedCreateNestedManyWithoutListingsInputSchema).optional(),
  deductions: z.lazy(() => DeductionsUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  keys: z.lazy(() => ListingKeyUncheckedCreateNestedManyWithoutListingInputSchema).optional()
}).strict();

export const ListingCreateOrConnectWithoutTaxRatesInputSchema: z.ZodType<Prisma.ListingCreateOrConnectWithoutTaxRatesInput> = z.object({
  where: z.lazy(() => ListingWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ListingCreateWithoutTaxRatesInputSchema),z.lazy(() => ListingUncheckedCreateWithoutTaxRatesInputSchema) ]),
}).strict();

export const ListingUpsertWithoutTaxRatesInputSchema: z.ZodType<Prisma.ListingUpsertWithoutTaxRatesInput> = z.object({
  update: z.union([ z.lazy(() => ListingUpdateWithoutTaxRatesInputSchema),z.lazy(() => ListingUncheckedUpdateWithoutTaxRatesInputSchema) ]),
  create: z.union([ z.lazy(() => ListingCreateWithoutTaxRatesInputSchema),z.lazy(() => ListingUncheckedCreateWithoutTaxRatesInputSchema) ]),
  where: z.lazy(() => ListingWhereInputSchema).optional()
}).strict();

export const ListingUpdateToOneWithWhereWithoutTaxRatesInputSchema: z.ZodType<Prisma.ListingUpdateToOneWithWhereWithoutTaxRatesInput> = z.object({
  where: z.lazy(() => ListingWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ListingUpdateWithoutTaxRatesInputSchema),z.lazy(() => ListingUncheckedUpdateWithoutTaxRatesInputSchema) ]),
}).strict();

export const ListingUpdateWithoutTaxRatesInputSchema: z.ZodType<Prisma.ListingUpdateWithoutTaxRatesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  unitType: z.union([ z.lazy(() => UnitTypeSchema),z.lazy(() => EnumUnitTypeFieldUpdateOperationsInputSchema) ]).optional(),
  beds: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  baths: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  guests: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timeZone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  airbnbRemitsTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  wifiName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiPassword: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bpProductId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doorCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  basePrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  iCalKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  content: z.lazy(() => ContentUpdateOneWithoutListingNestedInputSchema).optional(),
  rules: z.lazy(() => RulesUpdateOneWithoutListingNestedInputSchema).optional(),
  pricing: z.lazy(() => PricingUpdateOneWithoutListingNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUpdateOneWithoutListingNestedInputSchema).optional(),
  amenities: z.lazy(() => AmenityUpdateManyWithoutListingNestedInputSchema).optional(),
  fees: z.lazy(() => FeeUpdateManyWithoutListingNestedInputSchema).optional(),
  events: z.lazy(() => CalendarEventUpdateManyWithoutListingNestedInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUpdateManyWithoutListingsNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutListingsNestedInputSchema).optional(),
  deductions: z.lazy(() => DeductionsUpdateOneWithoutListingNestedInputSchema).optional(),
  propertyManager: z.lazy(() => UserUpdateOneRequiredWithoutManagedListingsNestedInputSchema).optional(),
  propertyOwner: z.lazy(() => UserUpdateOneWithoutOwnedListingsNestedInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUpdateManyWithoutListingNestedInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUpdateManyWithoutListingNestedInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementUpdateManyWithoutListingNestedInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateUpdateManyWithoutListingNestedInputSchema).optional(),
  keys: z.lazy(() => ListingKeyUpdateManyWithoutListingNestedInputSchema).optional()
}).strict();

export const ListingUncheckedUpdateWithoutTaxRatesInputSchema: z.ZodType<Prisma.ListingUncheckedUpdateWithoutTaxRatesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  unitType: z.union([ z.lazy(() => UnitTypeSchema),z.lazy(() => EnumUnitTypeFieldUpdateOperationsInputSchema) ]).optional(),
  beds: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  baths: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  guests: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timeZone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  airbnbRemitsTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  propertyManagerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  propertyOwnerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiPassword: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bpProductId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doorCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  basePrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  iCalKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  content: z.lazy(() => ContentUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  rules: z.lazy(() => RulesUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  pricing: z.lazy(() => PricingUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  amenities: z.lazy(() => AmenityUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  fees: z.lazy(() => FeeUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  events: z.lazy(() => CalendarEventUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUncheckedUpdateManyWithoutListingsNestedInputSchema).optional(),
  deductions: z.lazy(() => DeductionsUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  keys: z.lazy(() => ListingKeyUncheckedUpdateManyWithoutListingNestedInputSchema).optional()
}).strict();

export const ListingCreateWithoutDeductionsInputSchema: z.ZodType<Prisma.ListingCreateWithoutDeductionsInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  unitType: z.lazy(() => UnitTypeSchema),
  beds: z.number(),
  baths: z.number(),
  guests: z.number(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  timeZone: z.string(),
  airbnbRemitsTaxes: z.boolean().optional(),
  wifiName: z.string().optional().nullable(),
  wifiPassword: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  bpProductId: z.string().optional().nullable(),
  doorCode: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  basePrice: z.number().optional(),
  iCalKey: z.string().optional().nullable(),
  content: z.lazy(() => ContentCreateNestedOneWithoutListingInputSchema).optional(),
  rules: z.lazy(() => RulesCreateNestedOneWithoutListingInputSchema).optional(),
  pricing: z.lazy(() => PricingCreateNestedOneWithoutListingInputSchema).optional(),
  availability: z.lazy(() => AvailabilityCreateNestedOneWithoutListingInputSchema).optional(),
  amenities: z.lazy(() => AmenityCreateNestedManyWithoutListingInputSchema).optional(),
  fees: z.lazy(() => FeeCreateNestedManyWithoutListingInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesCreateNestedOneWithoutListingInputSchema).optional(),
  events: z.lazy(() => CalendarEventCreateNestedManyWithoutListingInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateCreateNestedManyWithoutListingsInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutListingsInputSchema),
  propertyManager: z.lazy(() => UserCreateNestedOneWithoutManagedListingsInputSchema),
  propertyOwner: z.lazy(() => UserCreateNestedOneWithoutOwnedListingsInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadCreateNestedManyWithoutListingInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseCreateNestedManyWithoutListingInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementCreateNestedManyWithoutListingInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateCreateNestedManyWithoutListingInputSchema).optional(),
  keys: z.lazy(() => ListingKeyCreateNestedManyWithoutListingInputSchema).optional()
}).strict();

export const ListingUncheckedCreateWithoutDeductionsInputSchema: z.ZodType<Prisma.ListingUncheckedCreateWithoutDeductionsInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  unitType: z.lazy(() => UnitTypeSchema),
  beds: z.number(),
  baths: z.number(),
  guests: z.number(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  timeZone: z.string(),
  airbnbRemitsTaxes: z.boolean().optional(),
  organizationId: z.string(),
  propertyManagerId: z.string(),
  propertyOwnerId: z.string().optional().nullable(),
  wifiName: z.string().optional().nullable(),
  wifiPassword: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  bpProductId: z.string().optional().nullable(),
  doorCode: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  basePrice: z.number().optional(),
  iCalKey: z.string().optional().nullable(),
  content: z.lazy(() => ContentUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  rules: z.lazy(() => RulesUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  pricing: z.lazy(() => PricingUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  amenities: z.lazy(() => AmenityUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  fees: z.lazy(() => FeeUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  events: z.lazy(() => CalendarEventUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUncheckedCreateNestedManyWithoutListingsInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  keys: z.lazy(() => ListingKeyUncheckedCreateNestedManyWithoutListingInputSchema).optional()
}).strict();

export const ListingCreateOrConnectWithoutDeductionsInputSchema: z.ZodType<Prisma.ListingCreateOrConnectWithoutDeductionsInput> = z.object({
  where: z.lazy(() => ListingWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ListingCreateWithoutDeductionsInputSchema),z.lazy(() => ListingUncheckedCreateWithoutDeductionsInputSchema) ]),
}).strict();

export const ListingUpsertWithoutDeductionsInputSchema: z.ZodType<Prisma.ListingUpsertWithoutDeductionsInput> = z.object({
  update: z.union([ z.lazy(() => ListingUpdateWithoutDeductionsInputSchema),z.lazy(() => ListingUncheckedUpdateWithoutDeductionsInputSchema) ]),
  create: z.union([ z.lazy(() => ListingCreateWithoutDeductionsInputSchema),z.lazy(() => ListingUncheckedCreateWithoutDeductionsInputSchema) ]),
  where: z.lazy(() => ListingWhereInputSchema).optional()
}).strict();

export const ListingUpdateToOneWithWhereWithoutDeductionsInputSchema: z.ZodType<Prisma.ListingUpdateToOneWithWhereWithoutDeductionsInput> = z.object({
  where: z.lazy(() => ListingWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ListingUpdateWithoutDeductionsInputSchema),z.lazy(() => ListingUncheckedUpdateWithoutDeductionsInputSchema) ]),
}).strict();

export const ListingUpdateWithoutDeductionsInputSchema: z.ZodType<Prisma.ListingUpdateWithoutDeductionsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  unitType: z.union([ z.lazy(() => UnitTypeSchema),z.lazy(() => EnumUnitTypeFieldUpdateOperationsInputSchema) ]).optional(),
  beds: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  baths: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  guests: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timeZone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  airbnbRemitsTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  wifiName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiPassword: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bpProductId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doorCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  basePrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  iCalKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  content: z.lazy(() => ContentUpdateOneWithoutListingNestedInputSchema).optional(),
  rules: z.lazy(() => RulesUpdateOneWithoutListingNestedInputSchema).optional(),
  pricing: z.lazy(() => PricingUpdateOneWithoutListingNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUpdateOneWithoutListingNestedInputSchema).optional(),
  amenities: z.lazy(() => AmenityUpdateManyWithoutListingNestedInputSchema).optional(),
  fees: z.lazy(() => FeeUpdateManyWithoutListingNestedInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesUpdateOneWithoutListingNestedInputSchema).optional(),
  events: z.lazy(() => CalendarEventUpdateManyWithoutListingNestedInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUpdateManyWithoutListingsNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutListingsNestedInputSchema).optional(),
  propertyManager: z.lazy(() => UserUpdateOneRequiredWithoutManagedListingsNestedInputSchema).optional(),
  propertyOwner: z.lazy(() => UserUpdateOneWithoutOwnedListingsNestedInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUpdateManyWithoutListingNestedInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUpdateManyWithoutListingNestedInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementUpdateManyWithoutListingNestedInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateUpdateManyWithoutListingNestedInputSchema).optional(),
  keys: z.lazy(() => ListingKeyUpdateManyWithoutListingNestedInputSchema).optional()
}).strict();

export const ListingUncheckedUpdateWithoutDeductionsInputSchema: z.ZodType<Prisma.ListingUncheckedUpdateWithoutDeductionsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  unitType: z.union([ z.lazy(() => UnitTypeSchema),z.lazy(() => EnumUnitTypeFieldUpdateOperationsInputSchema) ]).optional(),
  beds: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  baths: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  guests: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timeZone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  airbnbRemitsTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  propertyManagerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  propertyOwnerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiPassword: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bpProductId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doorCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  basePrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  iCalKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  content: z.lazy(() => ContentUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  rules: z.lazy(() => RulesUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  pricing: z.lazy(() => PricingUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  amenities: z.lazy(() => AmenityUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  fees: z.lazy(() => FeeUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  events: z.lazy(() => CalendarEventUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUncheckedUpdateManyWithoutListingsNestedInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  keys: z.lazy(() => ListingKeyUncheckedUpdateManyWithoutListingNestedInputSchema).optional()
}).strict();

export const ContentCreateWithoutBedroomsInputSchema: z.ZodType<Prisma.ContentCreateWithoutBedroomsInput> = z.object({
  id: z.string().optional(),
  photos: z.union([ z.lazy(() => ContentCreatephotosInputSchema),z.string().array() ]).optional(),
  title: z.string(),
  description: z.string(),
  aiInfo: z.string().optional().nullable(),
  listing: z.lazy(() => ListingCreateNestedOneWithoutContentInputSchema)
}).strict();

export const ContentUncheckedCreateWithoutBedroomsInputSchema: z.ZodType<Prisma.ContentUncheckedCreateWithoutBedroomsInput> = z.object({
  id: z.string().optional(),
  listingId: z.string(),
  photos: z.union([ z.lazy(() => ContentCreatephotosInputSchema),z.string().array() ]).optional(),
  title: z.string(),
  description: z.string(),
  aiInfo: z.string().optional().nullable()
}).strict();

export const ContentCreateOrConnectWithoutBedroomsInputSchema: z.ZodType<Prisma.ContentCreateOrConnectWithoutBedroomsInput> = z.object({
  where: z.lazy(() => ContentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ContentCreateWithoutBedroomsInputSchema),z.lazy(() => ContentUncheckedCreateWithoutBedroomsInputSchema) ]),
}).strict();

export const ContentUpsertWithoutBedroomsInputSchema: z.ZodType<Prisma.ContentUpsertWithoutBedroomsInput> = z.object({
  update: z.union([ z.lazy(() => ContentUpdateWithoutBedroomsInputSchema),z.lazy(() => ContentUncheckedUpdateWithoutBedroomsInputSchema) ]),
  create: z.union([ z.lazy(() => ContentCreateWithoutBedroomsInputSchema),z.lazy(() => ContentUncheckedCreateWithoutBedroomsInputSchema) ]),
  where: z.lazy(() => ContentWhereInputSchema).optional()
}).strict();

export const ContentUpdateToOneWithWhereWithoutBedroomsInputSchema: z.ZodType<Prisma.ContentUpdateToOneWithWhereWithoutBedroomsInput> = z.object({
  where: z.lazy(() => ContentWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ContentUpdateWithoutBedroomsInputSchema),z.lazy(() => ContentUncheckedUpdateWithoutBedroomsInputSchema) ]),
}).strict();

export const ContentUpdateWithoutBedroomsInputSchema: z.ZodType<Prisma.ContentUpdateWithoutBedroomsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  photos: z.union([ z.lazy(() => ContentUpdatephotosInputSchema),z.string().array() ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  aiInfo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  listing: z.lazy(() => ListingUpdateOneRequiredWithoutContentNestedInputSchema).optional()
}).strict();

export const ContentUncheckedUpdateWithoutBedroomsInputSchema: z.ZodType<Prisma.ContentUncheckedUpdateWithoutBedroomsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  listingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  photos: z.union([ z.lazy(() => ContentUpdatephotosInputSchema),z.string().array() ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  aiInfo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ListingCreateWithoutEventsInputSchema: z.ZodType<Prisma.ListingCreateWithoutEventsInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  unitType: z.lazy(() => UnitTypeSchema),
  beds: z.number(),
  baths: z.number(),
  guests: z.number(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  timeZone: z.string(),
  airbnbRemitsTaxes: z.boolean().optional(),
  wifiName: z.string().optional().nullable(),
  wifiPassword: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  bpProductId: z.string().optional().nullable(),
  doorCode: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  basePrice: z.number().optional(),
  iCalKey: z.string().optional().nullable(),
  content: z.lazy(() => ContentCreateNestedOneWithoutListingInputSchema).optional(),
  rules: z.lazy(() => RulesCreateNestedOneWithoutListingInputSchema).optional(),
  pricing: z.lazy(() => PricingCreateNestedOneWithoutListingInputSchema).optional(),
  availability: z.lazy(() => AvailabilityCreateNestedOneWithoutListingInputSchema).optional(),
  amenities: z.lazy(() => AmenityCreateNestedManyWithoutListingInputSchema).optional(),
  fees: z.lazy(() => FeeCreateNestedManyWithoutListingInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesCreateNestedOneWithoutListingInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateCreateNestedManyWithoutListingsInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutListingsInputSchema),
  deductions: z.lazy(() => DeductionsCreateNestedOneWithoutListingInputSchema).optional(),
  propertyManager: z.lazy(() => UserCreateNestedOneWithoutManagedListingsInputSchema),
  propertyOwner: z.lazy(() => UserCreateNestedOneWithoutOwnedListingsInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadCreateNestedManyWithoutListingInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseCreateNestedManyWithoutListingInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementCreateNestedManyWithoutListingInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateCreateNestedManyWithoutListingInputSchema).optional(),
  keys: z.lazy(() => ListingKeyCreateNestedManyWithoutListingInputSchema).optional()
}).strict();

export const ListingUncheckedCreateWithoutEventsInputSchema: z.ZodType<Prisma.ListingUncheckedCreateWithoutEventsInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  unitType: z.lazy(() => UnitTypeSchema),
  beds: z.number(),
  baths: z.number(),
  guests: z.number(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  timeZone: z.string(),
  airbnbRemitsTaxes: z.boolean().optional(),
  organizationId: z.string(),
  propertyManagerId: z.string(),
  propertyOwnerId: z.string().optional().nullable(),
  wifiName: z.string().optional().nullable(),
  wifiPassword: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  bpProductId: z.string().optional().nullable(),
  doorCode: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  basePrice: z.number().optional(),
  iCalKey: z.string().optional().nullable(),
  content: z.lazy(() => ContentUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  rules: z.lazy(() => RulesUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  pricing: z.lazy(() => PricingUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  amenities: z.lazy(() => AmenityUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  fees: z.lazy(() => FeeUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUncheckedCreateNestedManyWithoutListingsInputSchema).optional(),
  deductions: z.lazy(() => DeductionsUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  keys: z.lazy(() => ListingKeyUncheckedCreateNestedManyWithoutListingInputSchema).optional()
}).strict();

export const ListingCreateOrConnectWithoutEventsInputSchema: z.ZodType<Prisma.ListingCreateOrConnectWithoutEventsInput> = z.object({
  where: z.lazy(() => ListingWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ListingCreateWithoutEventsInputSchema),z.lazy(() => ListingUncheckedCreateWithoutEventsInputSchema) ]),
}).strict();

export const ReservationCreateWithoutCalendarEventInputSchema: z.ZodType<Prisma.ReservationCreateWithoutCalendarEventInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  channel: z.lazy(() => ChannelSchema).optional(),
  bpReservationId: z.string().optional().nullable(),
  confirmationCode: z.string().optional().nullable(),
  adults: z.number(),
  children: z.number(),
  pets: z.number().optional(),
  status: z.lazy(() => ReservationStatusSchema).optional(),
  scheduledMessages: z.lazy(() => ScheduledMessageCreateNestedManyWithoutReservationInputSchema).optional(),
  revenue: z.lazy(() => RevenueCreateNestedOneWithoutReservationInputSchema).optional(),
  guest: z.lazy(() => GuestCreateNestedOneWithoutReservationsInputSchema)
}).strict();

export const ReservationUncheckedCreateWithoutCalendarEventInputSchema: z.ZodType<Prisma.ReservationUncheckedCreateWithoutCalendarEventInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  channel: z.lazy(() => ChannelSchema).optional(),
  bpReservationId: z.string().optional().nullable(),
  confirmationCode: z.string().optional().nullable(),
  adults: z.number(),
  children: z.number(),
  pets: z.number().optional(),
  status: z.lazy(() => ReservationStatusSchema).optional(),
  guestId: z.string(),
  scheduledMessages: z.lazy(() => ScheduledMessageUncheckedCreateNestedManyWithoutReservationInputSchema).optional(),
  revenue: z.lazy(() => RevenueUncheckedCreateNestedOneWithoutReservationInputSchema).optional()
}).strict();

export const ReservationCreateOrConnectWithoutCalendarEventInputSchema: z.ZodType<Prisma.ReservationCreateOrConnectWithoutCalendarEventInput> = z.object({
  where: z.lazy(() => ReservationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ReservationCreateWithoutCalendarEventInputSchema),z.lazy(() => ReservationUncheckedCreateWithoutCalendarEventInputSchema) ]),
}).strict();

export const ListingUpsertWithoutEventsInputSchema: z.ZodType<Prisma.ListingUpsertWithoutEventsInput> = z.object({
  update: z.union([ z.lazy(() => ListingUpdateWithoutEventsInputSchema),z.lazy(() => ListingUncheckedUpdateWithoutEventsInputSchema) ]),
  create: z.union([ z.lazy(() => ListingCreateWithoutEventsInputSchema),z.lazy(() => ListingUncheckedCreateWithoutEventsInputSchema) ]),
  where: z.lazy(() => ListingWhereInputSchema).optional()
}).strict();

export const ListingUpdateToOneWithWhereWithoutEventsInputSchema: z.ZodType<Prisma.ListingUpdateToOneWithWhereWithoutEventsInput> = z.object({
  where: z.lazy(() => ListingWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ListingUpdateWithoutEventsInputSchema),z.lazy(() => ListingUncheckedUpdateWithoutEventsInputSchema) ]),
}).strict();

export const ListingUpdateWithoutEventsInputSchema: z.ZodType<Prisma.ListingUpdateWithoutEventsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  unitType: z.union([ z.lazy(() => UnitTypeSchema),z.lazy(() => EnumUnitTypeFieldUpdateOperationsInputSchema) ]).optional(),
  beds: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  baths: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  guests: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timeZone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  airbnbRemitsTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  wifiName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiPassword: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bpProductId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doorCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  basePrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  iCalKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  content: z.lazy(() => ContentUpdateOneWithoutListingNestedInputSchema).optional(),
  rules: z.lazy(() => RulesUpdateOneWithoutListingNestedInputSchema).optional(),
  pricing: z.lazy(() => PricingUpdateOneWithoutListingNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUpdateOneWithoutListingNestedInputSchema).optional(),
  amenities: z.lazy(() => AmenityUpdateManyWithoutListingNestedInputSchema).optional(),
  fees: z.lazy(() => FeeUpdateManyWithoutListingNestedInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesUpdateOneWithoutListingNestedInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUpdateManyWithoutListingsNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutListingsNestedInputSchema).optional(),
  deductions: z.lazy(() => DeductionsUpdateOneWithoutListingNestedInputSchema).optional(),
  propertyManager: z.lazy(() => UserUpdateOneRequiredWithoutManagedListingsNestedInputSchema).optional(),
  propertyOwner: z.lazy(() => UserUpdateOneWithoutOwnedListingsNestedInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUpdateManyWithoutListingNestedInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUpdateManyWithoutListingNestedInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementUpdateManyWithoutListingNestedInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateUpdateManyWithoutListingNestedInputSchema).optional(),
  keys: z.lazy(() => ListingKeyUpdateManyWithoutListingNestedInputSchema).optional()
}).strict();

export const ListingUncheckedUpdateWithoutEventsInputSchema: z.ZodType<Prisma.ListingUncheckedUpdateWithoutEventsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  unitType: z.union([ z.lazy(() => UnitTypeSchema),z.lazy(() => EnumUnitTypeFieldUpdateOperationsInputSchema) ]).optional(),
  beds: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  baths: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  guests: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timeZone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  airbnbRemitsTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  propertyManagerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  propertyOwnerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiPassword: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bpProductId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doorCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  basePrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  iCalKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  content: z.lazy(() => ContentUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  rules: z.lazy(() => RulesUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  pricing: z.lazy(() => PricingUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  amenities: z.lazy(() => AmenityUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  fees: z.lazy(() => FeeUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUncheckedUpdateManyWithoutListingsNestedInputSchema).optional(),
  deductions: z.lazy(() => DeductionsUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  keys: z.lazy(() => ListingKeyUncheckedUpdateManyWithoutListingNestedInputSchema).optional()
}).strict();

export const ReservationUpsertWithoutCalendarEventInputSchema: z.ZodType<Prisma.ReservationUpsertWithoutCalendarEventInput> = z.object({
  update: z.union([ z.lazy(() => ReservationUpdateWithoutCalendarEventInputSchema),z.lazy(() => ReservationUncheckedUpdateWithoutCalendarEventInputSchema) ]),
  create: z.union([ z.lazy(() => ReservationCreateWithoutCalendarEventInputSchema),z.lazy(() => ReservationUncheckedCreateWithoutCalendarEventInputSchema) ]),
  where: z.lazy(() => ReservationWhereInputSchema).optional()
}).strict();

export const ReservationUpdateToOneWithWhereWithoutCalendarEventInputSchema: z.ZodType<Prisma.ReservationUpdateToOneWithWhereWithoutCalendarEventInput> = z.object({
  where: z.lazy(() => ReservationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ReservationUpdateWithoutCalendarEventInputSchema),z.lazy(() => ReservationUncheckedUpdateWithoutCalendarEventInputSchema) ]),
}).strict();

export const ReservationUpdateWithoutCalendarEventInputSchema: z.ZodType<Prisma.ReservationUpdateWithoutCalendarEventInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  channel: z.union([ z.lazy(() => ChannelSchema),z.lazy(() => EnumChannelFieldUpdateOperationsInputSchema) ]).optional(),
  bpReservationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmationCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  adults: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  children: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  pets: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ReservationStatusSchema),z.lazy(() => EnumReservationStatusFieldUpdateOperationsInputSchema) ]).optional(),
  scheduledMessages: z.lazy(() => ScheduledMessageUpdateManyWithoutReservationNestedInputSchema).optional(),
  revenue: z.lazy(() => RevenueUpdateOneWithoutReservationNestedInputSchema).optional(),
  guest: z.lazy(() => GuestUpdateOneRequiredWithoutReservationsNestedInputSchema).optional()
}).strict();

export const ReservationUncheckedUpdateWithoutCalendarEventInputSchema: z.ZodType<Prisma.ReservationUncheckedUpdateWithoutCalendarEventInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  channel: z.union([ z.lazy(() => ChannelSchema),z.lazy(() => EnumChannelFieldUpdateOperationsInputSchema) ]).optional(),
  bpReservationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmationCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  adults: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  children: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  pets: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ReservationStatusSchema),z.lazy(() => EnumReservationStatusFieldUpdateOperationsInputSchema) ]).optional(),
  guestId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  scheduledMessages: z.lazy(() => ScheduledMessageUncheckedUpdateManyWithoutReservationNestedInputSchema).optional(),
  revenue: z.lazy(() => RevenueUncheckedUpdateOneWithoutReservationNestedInputSchema).optional()
}).strict();

export const CalendarEventCreateWithoutReservationInputSchema: z.ZodType<Prisma.CalendarEventCreateWithoutReservationInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  fromDate: z.coerce.date(),
  toDate: z.coerce.date(),
  type: z.lazy(() => CalendarEventTypeSchema),
  notes: z.string().optional().nullable(),
  bookedOn: z.coerce.date().optional().nullable(),
  listing: z.lazy(() => ListingCreateNestedOneWithoutEventsInputSchema)
}).strict();

export const CalendarEventUncheckedCreateWithoutReservationInputSchema: z.ZodType<Prisma.CalendarEventUncheckedCreateWithoutReservationInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  listingId: z.string(),
  fromDate: z.coerce.date(),
  toDate: z.coerce.date(),
  type: z.lazy(() => CalendarEventTypeSchema),
  notes: z.string().optional().nullable(),
  bookedOn: z.coerce.date().optional().nullable()
}).strict();

export const CalendarEventCreateOrConnectWithoutReservationInputSchema: z.ZodType<Prisma.CalendarEventCreateOrConnectWithoutReservationInput> = z.object({
  where: z.lazy(() => CalendarEventWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CalendarEventCreateWithoutReservationInputSchema),z.lazy(() => CalendarEventUncheckedCreateWithoutReservationInputSchema) ]),
}).strict();

export const ScheduledMessageCreateWithoutReservationInputSchema: z.ZodType<Prisma.ScheduledMessageCreateWithoutReservationInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  scheduledAt: z.coerce.date(),
  status: z.lazy(() => ScheduledMessageStatusSchema).optional(),
  completedAt: z.coerce.date().optional().nullable(),
  failureMessage: z.string().optional().nullable(),
  messageTemplate: z.lazy(() => MessageTemplateCreateNestedOneWithoutScheduledMessagesInputSchema)
}).strict();

export const ScheduledMessageUncheckedCreateWithoutReservationInputSchema: z.ZodType<Prisma.ScheduledMessageUncheckedCreateWithoutReservationInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  scheduledAt: z.coerce.date(),
  messageTemplateId: z.string(),
  status: z.lazy(() => ScheduledMessageStatusSchema).optional(),
  completedAt: z.coerce.date().optional().nullable(),
  failureMessage: z.string().optional().nullable()
}).strict();

export const ScheduledMessageCreateOrConnectWithoutReservationInputSchema: z.ZodType<Prisma.ScheduledMessageCreateOrConnectWithoutReservationInput> = z.object({
  where: z.lazy(() => ScheduledMessageWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ScheduledMessageCreateWithoutReservationInputSchema),z.lazy(() => ScheduledMessageUncheckedCreateWithoutReservationInputSchema) ]),
}).strict();

export const ScheduledMessageCreateManyReservationInputEnvelopeSchema: z.ZodType<Prisma.ScheduledMessageCreateManyReservationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ScheduledMessageCreateManyReservationInputSchema),z.lazy(() => ScheduledMessageCreateManyReservationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const RevenueCreateWithoutReservationInputSchema: z.ZodType<Prisma.RevenueCreateWithoutReservationInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  accommodation: z.number().optional().nullable(),
  pmcShare: z.number(),
  discount: z.number().optional().nullable(),
  channelCommission: z.number().optional().nullable(),
  payoutStatus: z.lazy(() => RevenuePayoutStatusSchema).optional(),
  fees: z.lazy(() => RevenueFeeCreateNestedManyWithoutRevenueInputSchema).optional(),
  ownerStatement: z.lazy(() => OwnerStatementCreateNestedOneWithoutRevenueInputSchema).optional(),
  payout: z.lazy(() => RevenuePayoutCreateNestedManyWithoutRevenueInputSchema).optional()
}).strict();

export const RevenueUncheckedCreateWithoutReservationInputSchema: z.ZodType<Prisma.RevenueUncheckedCreateWithoutReservationInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  accommodation: z.number().optional().nullable(),
  pmcShare: z.number(),
  discount: z.number().optional().nullable(),
  channelCommission: z.number().optional().nullable(),
  ownerStatementId: z.string().optional().nullable(),
  payoutStatus: z.lazy(() => RevenuePayoutStatusSchema).optional(),
  fees: z.lazy(() => RevenueFeeUncheckedCreateNestedManyWithoutRevenueInputSchema).optional(),
  payout: z.lazy(() => RevenuePayoutUncheckedCreateNestedManyWithoutRevenueInputSchema).optional()
}).strict();

export const RevenueCreateOrConnectWithoutReservationInputSchema: z.ZodType<Prisma.RevenueCreateOrConnectWithoutReservationInput> = z.object({
  where: z.lazy(() => RevenueWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RevenueCreateWithoutReservationInputSchema),z.lazy(() => RevenueUncheckedCreateWithoutReservationInputSchema) ]),
}).strict();

export const GuestCreateWithoutReservationsInputSchema: z.ZodType<Prisma.GuestCreateWithoutReservationsInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  messageThreads: z.lazy(() => MessageThreadCreateNestedManyWithoutGuestInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutGuestsInputSchema)
}).strict();

export const GuestUncheckedCreateWithoutReservationsInputSchema: z.ZodType<Prisma.GuestUncheckedCreateWithoutReservationsInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  organizationId: z.string(),
  messageThreads: z.lazy(() => MessageThreadUncheckedCreateNestedManyWithoutGuestInputSchema).optional()
}).strict();

export const GuestCreateOrConnectWithoutReservationsInputSchema: z.ZodType<Prisma.GuestCreateOrConnectWithoutReservationsInput> = z.object({
  where: z.lazy(() => GuestWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => GuestCreateWithoutReservationsInputSchema),z.lazy(() => GuestUncheckedCreateWithoutReservationsInputSchema) ]),
}).strict();

export const CalendarEventUpsertWithoutReservationInputSchema: z.ZodType<Prisma.CalendarEventUpsertWithoutReservationInput> = z.object({
  update: z.union([ z.lazy(() => CalendarEventUpdateWithoutReservationInputSchema),z.lazy(() => CalendarEventUncheckedUpdateWithoutReservationInputSchema) ]),
  create: z.union([ z.lazy(() => CalendarEventCreateWithoutReservationInputSchema),z.lazy(() => CalendarEventUncheckedCreateWithoutReservationInputSchema) ]),
  where: z.lazy(() => CalendarEventWhereInputSchema).optional()
}).strict();

export const CalendarEventUpdateToOneWithWhereWithoutReservationInputSchema: z.ZodType<Prisma.CalendarEventUpdateToOneWithWhereWithoutReservationInput> = z.object({
  where: z.lazy(() => CalendarEventWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => CalendarEventUpdateWithoutReservationInputSchema),z.lazy(() => CalendarEventUncheckedUpdateWithoutReservationInputSchema) ]),
}).strict();

export const CalendarEventUpdateWithoutReservationInputSchema: z.ZodType<Prisma.CalendarEventUpdateWithoutReservationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  fromDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  toDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => CalendarEventTypeSchema),z.lazy(() => EnumCalendarEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bookedOn: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  listing: z.lazy(() => ListingUpdateOneRequiredWithoutEventsNestedInputSchema).optional()
}).strict();

export const CalendarEventUncheckedUpdateWithoutReservationInputSchema: z.ZodType<Prisma.CalendarEventUncheckedUpdateWithoutReservationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  listingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fromDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  toDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => CalendarEventTypeSchema),z.lazy(() => EnumCalendarEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bookedOn: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ScheduledMessageUpsertWithWhereUniqueWithoutReservationInputSchema: z.ZodType<Prisma.ScheduledMessageUpsertWithWhereUniqueWithoutReservationInput> = z.object({
  where: z.lazy(() => ScheduledMessageWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ScheduledMessageUpdateWithoutReservationInputSchema),z.lazy(() => ScheduledMessageUncheckedUpdateWithoutReservationInputSchema) ]),
  create: z.union([ z.lazy(() => ScheduledMessageCreateWithoutReservationInputSchema),z.lazy(() => ScheduledMessageUncheckedCreateWithoutReservationInputSchema) ]),
}).strict();

export const ScheduledMessageUpdateWithWhereUniqueWithoutReservationInputSchema: z.ZodType<Prisma.ScheduledMessageUpdateWithWhereUniqueWithoutReservationInput> = z.object({
  where: z.lazy(() => ScheduledMessageWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ScheduledMessageUpdateWithoutReservationInputSchema),z.lazy(() => ScheduledMessageUncheckedUpdateWithoutReservationInputSchema) ]),
}).strict();

export const ScheduledMessageUpdateManyWithWhereWithoutReservationInputSchema: z.ZodType<Prisma.ScheduledMessageUpdateManyWithWhereWithoutReservationInput> = z.object({
  where: z.lazy(() => ScheduledMessageScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ScheduledMessageUpdateManyMutationInputSchema),z.lazy(() => ScheduledMessageUncheckedUpdateManyWithoutReservationInputSchema) ]),
}).strict();

export const ScheduledMessageScalarWhereInputSchema: z.ZodType<Prisma.ScheduledMessageScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ScheduledMessageScalarWhereInputSchema),z.lazy(() => ScheduledMessageScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ScheduledMessageScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ScheduledMessageScalarWhereInputSchema),z.lazy(() => ScheduledMessageScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  scheduledAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  reservationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  messageTemplateId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => EnumScheduledMessageStatusFilterSchema),z.lazy(() => ScheduledMessageStatusSchema) ]).optional(),
  completedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  failureMessage: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const RevenueUpsertWithoutReservationInputSchema: z.ZodType<Prisma.RevenueUpsertWithoutReservationInput> = z.object({
  update: z.union([ z.lazy(() => RevenueUpdateWithoutReservationInputSchema),z.lazy(() => RevenueUncheckedUpdateWithoutReservationInputSchema) ]),
  create: z.union([ z.lazy(() => RevenueCreateWithoutReservationInputSchema),z.lazy(() => RevenueUncheckedCreateWithoutReservationInputSchema) ]),
  where: z.lazy(() => RevenueWhereInputSchema).optional()
}).strict();

export const RevenueUpdateToOneWithWhereWithoutReservationInputSchema: z.ZodType<Prisma.RevenueUpdateToOneWithWhereWithoutReservationInput> = z.object({
  where: z.lazy(() => RevenueWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RevenueUpdateWithoutReservationInputSchema),z.lazy(() => RevenueUncheckedUpdateWithoutReservationInputSchema) ]),
}).strict();

export const RevenueUpdateWithoutReservationInputSchema: z.ZodType<Prisma.RevenueUpdateWithoutReservationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  accommodation: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pmcShare: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  discount: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  channelCommission: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payoutStatus: z.union([ z.lazy(() => RevenuePayoutStatusSchema),z.lazy(() => EnumRevenuePayoutStatusFieldUpdateOperationsInputSchema) ]).optional(),
  fees: z.lazy(() => RevenueFeeUpdateManyWithoutRevenueNestedInputSchema).optional(),
  ownerStatement: z.lazy(() => OwnerStatementUpdateOneWithoutRevenueNestedInputSchema).optional(),
  payout: z.lazy(() => RevenuePayoutUpdateManyWithoutRevenueNestedInputSchema).optional()
}).strict();

export const RevenueUncheckedUpdateWithoutReservationInputSchema: z.ZodType<Prisma.RevenueUncheckedUpdateWithoutReservationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  accommodation: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pmcShare: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  discount: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  channelCommission: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerStatementId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payoutStatus: z.union([ z.lazy(() => RevenuePayoutStatusSchema),z.lazy(() => EnumRevenuePayoutStatusFieldUpdateOperationsInputSchema) ]).optional(),
  fees: z.lazy(() => RevenueFeeUncheckedUpdateManyWithoutRevenueNestedInputSchema).optional(),
  payout: z.lazy(() => RevenuePayoutUncheckedUpdateManyWithoutRevenueNestedInputSchema).optional()
}).strict();

export const GuestUpsertWithoutReservationsInputSchema: z.ZodType<Prisma.GuestUpsertWithoutReservationsInput> = z.object({
  update: z.union([ z.lazy(() => GuestUpdateWithoutReservationsInputSchema),z.lazy(() => GuestUncheckedUpdateWithoutReservationsInputSchema) ]),
  create: z.union([ z.lazy(() => GuestCreateWithoutReservationsInputSchema),z.lazy(() => GuestUncheckedCreateWithoutReservationsInputSchema) ]),
  where: z.lazy(() => GuestWhereInputSchema).optional()
}).strict();

export const GuestUpdateToOneWithWhereWithoutReservationsInputSchema: z.ZodType<Prisma.GuestUpdateToOneWithWhereWithoutReservationsInput> = z.object({
  where: z.lazy(() => GuestWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => GuestUpdateWithoutReservationsInputSchema),z.lazy(() => GuestUncheckedUpdateWithoutReservationsInputSchema) ]),
}).strict();

export const GuestUpdateWithoutReservationsInputSchema: z.ZodType<Prisma.GuestUpdateWithoutReservationsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  messageThreads: z.lazy(() => MessageThreadUpdateManyWithoutGuestNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutGuestsNestedInputSchema).optional()
}).strict();

export const GuestUncheckedUpdateWithoutReservationsInputSchema: z.ZodType<Prisma.GuestUncheckedUpdateWithoutReservationsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  messageThreads: z.lazy(() => MessageThreadUncheckedUpdateManyWithoutGuestNestedInputSchema).optional()
}).strict();

export const ReservationCreateWithoutGuestInputSchema: z.ZodType<Prisma.ReservationCreateWithoutGuestInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  channel: z.lazy(() => ChannelSchema).optional(),
  bpReservationId: z.string().optional().nullable(),
  confirmationCode: z.string().optional().nullable(),
  adults: z.number(),
  children: z.number(),
  pets: z.number().optional(),
  status: z.lazy(() => ReservationStatusSchema).optional(),
  calendarEvent: z.lazy(() => CalendarEventCreateNestedOneWithoutReservationInputSchema),
  scheduledMessages: z.lazy(() => ScheduledMessageCreateNestedManyWithoutReservationInputSchema).optional(),
  revenue: z.lazy(() => RevenueCreateNestedOneWithoutReservationInputSchema).optional()
}).strict();

export const ReservationUncheckedCreateWithoutGuestInputSchema: z.ZodType<Prisma.ReservationUncheckedCreateWithoutGuestInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  calendarEventId: z.string(),
  channel: z.lazy(() => ChannelSchema).optional(),
  bpReservationId: z.string().optional().nullable(),
  confirmationCode: z.string().optional().nullable(),
  adults: z.number(),
  children: z.number(),
  pets: z.number().optional(),
  status: z.lazy(() => ReservationStatusSchema).optional(),
  scheduledMessages: z.lazy(() => ScheduledMessageUncheckedCreateNestedManyWithoutReservationInputSchema).optional(),
  revenue: z.lazy(() => RevenueUncheckedCreateNestedOneWithoutReservationInputSchema).optional()
}).strict();

export const ReservationCreateOrConnectWithoutGuestInputSchema: z.ZodType<Prisma.ReservationCreateOrConnectWithoutGuestInput> = z.object({
  where: z.lazy(() => ReservationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ReservationCreateWithoutGuestInputSchema),z.lazy(() => ReservationUncheckedCreateWithoutGuestInputSchema) ]),
}).strict();

export const ReservationCreateManyGuestInputEnvelopeSchema: z.ZodType<Prisma.ReservationCreateManyGuestInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ReservationCreateManyGuestInputSchema),z.lazy(() => ReservationCreateManyGuestInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const MessageThreadCreateWithoutGuestInputSchema: z.ZodType<Prisma.MessageThreadCreateWithoutGuestInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  bpThreadId: z.string().optional().nullable(),
  channelThreadId: z.string().optional().nullable(),
  lastMessageSentAt: z.string().optional().nullable(),
  dateFrom: z.string(),
  dateTo: z.string(),
  replyTo: z.string().optional().nullable(),
  archived: z.boolean().optional(),
  enableReminder: z.boolean().optional(),
  channel: z.lazy(() => ChannelSchema),
  listing: z.lazy(() => ListingCreateNestedOneWithoutMessageThreadsInputSchema),
  messages: z.lazy(() => MessageCreateNestedManyWithoutMessageThreadInputSchema).optional()
}).strict();

export const MessageThreadUncheckedCreateWithoutGuestInputSchema: z.ZodType<Prisma.MessageThreadUncheckedCreateWithoutGuestInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  listingId: z.string(),
  bpThreadId: z.string().optional().nullable(),
  channelThreadId: z.string().optional().nullable(),
  lastMessageSentAt: z.string().optional().nullable(),
  dateFrom: z.string(),
  dateTo: z.string(),
  replyTo: z.string().optional().nullable(),
  archived: z.boolean().optional(),
  enableReminder: z.boolean().optional(),
  channel: z.lazy(() => ChannelSchema),
  messages: z.lazy(() => MessageUncheckedCreateNestedManyWithoutMessageThreadInputSchema).optional()
}).strict();

export const MessageThreadCreateOrConnectWithoutGuestInputSchema: z.ZodType<Prisma.MessageThreadCreateOrConnectWithoutGuestInput> = z.object({
  where: z.lazy(() => MessageThreadWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => MessageThreadCreateWithoutGuestInputSchema),z.lazy(() => MessageThreadUncheckedCreateWithoutGuestInputSchema) ]),
}).strict();

export const MessageThreadCreateManyGuestInputEnvelopeSchema: z.ZodType<Prisma.MessageThreadCreateManyGuestInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => MessageThreadCreateManyGuestInputSchema),z.lazy(() => MessageThreadCreateManyGuestInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const OrganizationCreateWithoutGuestsInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutGuestsInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  language: z.string().optional(),
  adminName: z.string(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  website: z.string(),
  phone: z.string(),
  currency: z.string().optional(),
  startDate: z.coerce.date().optional(),
  directBooking: z.boolean().optional(),
  logoUrl: z.string().optional().nullable(),
  users: z.lazy(() => UserCreateNestedManyWithoutOrganizationInputSchema).optional(),
  listings: z.lazy(() => ListingCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionCreateNestedOneWithoutOrganizationInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateCreateNestedManyWithoutOrganizationInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemCreateNestedManyWithoutOrganizationInputSchema).optional(),
  priceLabsConnection: z.lazy(() => PriceLabsConnectionCreateNestedOneWithoutOrganizationInputSchema).optional(),
  stripeConnection: z.lazy(() => StripeConnectionCreateNestedOneWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutGuestsInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutGuestsInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  language: z.string().optional(),
  adminName: z.string(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  website: z.string(),
  phone: z.string(),
  currency: z.string().optional(),
  startDate: z.coerce.date().optional(),
  directBooking: z.boolean().optional(),
  logoUrl: z.string().optional().nullable(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  listings: z.lazy(() => ListingUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionUncheckedCreateNestedOneWithoutOrganizationInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  priceLabsConnection: z.lazy(() => PriceLabsConnectionUncheckedCreateNestedOneWithoutOrganizationInputSchema).optional(),
  stripeConnection: z.lazy(() => StripeConnectionUncheckedCreateNestedOneWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutGuestsInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutGuestsInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutGuestsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutGuestsInputSchema) ]),
}).strict();

export const ReservationUpsertWithWhereUniqueWithoutGuestInputSchema: z.ZodType<Prisma.ReservationUpsertWithWhereUniqueWithoutGuestInput> = z.object({
  where: z.lazy(() => ReservationWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ReservationUpdateWithoutGuestInputSchema),z.lazy(() => ReservationUncheckedUpdateWithoutGuestInputSchema) ]),
  create: z.union([ z.lazy(() => ReservationCreateWithoutGuestInputSchema),z.lazy(() => ReservationUncheckedCreateWithoutGuestInputSchema) ]),
}).strict();

export const ReservationUpdateWithWhereUniqueWithoutGuestInputSchema: z.ZodType<Prisma.ReservationUpdateWithWhereUniqueWithoutGuestInput> = z.object({
  where: z.lazy(() => ReservationWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ReservationUpdateWithoutGuestInputSchema),z.lazy(() => ReservationUncheckedUpdateWithoutGuestInputSchema) ]),
}).strict();

export const ReservationUpdateManyWithWhereWithoutGuestInputSchema: z.ZodType<Prisma.ReservationUpdateManyWithWhereWithoutGuestInput> = z.object({
  where: z.lazy(() => ReservationScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ReservationUpdateManyMutationInputSchema),z.lazy(() => ReservationUncheckedUpdateManyWithoutGuestInputSchema) ]),
}).strict();

export const ReservationScalarWhereInputSchema: z.ZodType<Prisma.ReservationScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ReservationScalarWhereInputSchema),z.lazy(() => ReservationScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ReservationScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ReservationScalarWhereInputSchema),z.lazy(() => ReservationScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  calendarEventId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  channel: z.union([ z.lazy(() => EnumChannelFilterSchema),z.lazy(() => ChannelSchema) ]).optional(),
  bpReservationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  confirmationCode: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  adults: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  children: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  pets: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  status: z.union([ z.lazy(() => EnumReservationStatusFilterSchema),z.lazy(() => ReservationStatusSchema) ]).optional(),
  guestId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const MessageThreadUpsertWithWhereUniqueWithoutGuestInputSchema: z.ZodType<Prisma.MessageThreadUpsertWithWhereUniqueWithoutGuestInput> = z.object({
  where: z.lazy(() => MessageThreadWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => MessageThreadUpdateWithoutGuestInputSchema),z.lazy(() => MessageThreadUncheckedUpdateWithoutGuestInputSchema) ]),
  create: z.union([ z.lazy(() => MessageThreadCreateWithoutGuestInputSchema),z.lazy(() => MessageThreadUncheckedCreateWithoutGuestInputSchema) ]),
}).strict();

export const MessageThreadUpdateWithWhereUniqueWithoutGuestInputSchema: z.ZodType<Prisma.MessageThreadUpdateWithWhereUniqueWithoutGuestInput> = z.object({
  where: z.lazy(() => MessageThreadWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => MessageThreadUpdateWithoutGuestInputSchema),z.lazy(() => MessageThreadUncheckedUpdateWithoutGuestInputSchema) ]),
}).strict();

export const MessageThreadUpdateManyWithWhereWithoutGuestInputSchema: z.ZodType<Prisma.MessageThreadUpdateManyWithWhereWithoutGuestInput> = z.object({
  where: z.lazy(() => MessageThreadScalarWhereInputSchema),
  data: z.union([ z.lazy(() => MessageThreadUpdateManyMutationInputSchema),z.lazy(() => MessageThreadUncheckedUpdateManyWithoutGuestInputSchema) ]),
}).strict();

export const OrganizationUpsertWithoutGuestsInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutGuestsInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutGuestsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutGuestsInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutGuestsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutGuestsInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutGuestsInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutGuestsInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutGuestsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutGuestsInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutGuestsInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutGuestsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  adminName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  website: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  directBooking: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  logoUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UserUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  listings: z.lazy(() => ListingUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionUpdateOneWithoutOrganizationNestedInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  priceLabsConnection: z.lazy(() => PriceLabsConnectionUpdateOneWithoutOrganizationNestedInputSchema).optional(),
  stripeConnection: z.lazy(() => StripeConnectionUpdateOneWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutGuestsInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutGuestsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  adminName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  website: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  directBooking: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  logoUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  listings: z.lazy(() => ListingUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionUncheckedUpdateOneWithoutOrganizationNestedInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  priceLabsConnection: z.lazy(() => PriceLabsConnectionUncheckedUpdateOneWithoutOrganizationNestedInputSchema).optional(),
  stripeConnection: z.lazy(() => StripeConnectionUncheckedUpdateOneWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const ListingCreateWithoutMessageThreadsInputSchema: z.ZodType<Prisma.ListingCreateWithoutMessageThreadsInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  unitType: z.lazy(() => UnitTypeSchema),
  beds: z.number(),
  baths: z.number(),
  guests: z.number(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  timeZone: z.string(),
  airbnbRemitsTaxes: z.boolean().optional(),
  wifiName: z.string().optional().nullable(),
  wifiPassword: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  bpProductId: z.string().optional().nullable(),
  doorCode: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  basePrice: z.number().optional(),
  iCalKey: z.string().optional().nullable(),
  content: z.lazy(() => ContentCreateNestedOneWithoutListingInputSchema).optional(),
  rules: z.lazy(() => RulesCreateNestedOneWithoutListingInputSchema).optional(),
  pricing: z.lazy(() => PricingCreateNestedOneWithoutListingInputSchema).optional(),
  availability: z.lazy(() => AvailabilityCreateNestedOneWithoutListingInputSchema).optional(),
  amenities: z.lazy(() => AmenityCreateNestedManyWithoutListingInputSchema).optional(),
  fees: z.lazy(() => FeeCreateNestedManyWithoutListingInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesCreateNestedOneWithoutListingInputSchema).optional(),
  events: z.lazy(() => CalendarEventCreateNestedManyWithoutListingInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateCreateNestedManyWithoutListingsInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutListingsInputSchema),
  deductions: z.lazy(() => DeductionsCreateNestedOneWithoutListingInputSchema).optional(),
  propertyManager: z.lazy(() => UserCreateNestedOneWithoutManagedListingsInputSchema),
  propertyOwner: z.lazy(() => UserCreateNestedOneWithoutOwnedListingsInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseCreateNestedManyWithoutListingInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementCreateNestedManyWithoutListingInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateCreateNestedManyWithoutListingInputSchema).optional(),
  keys: z.lazy(() => ListingKeyCreateNestedManyWithoutListingInputSchema).optional()
}).strict();

export const ListingUncheckedCreateWithoutMessageThreadsInputSchema: z.ZodType<Prisma.ListingUncheckedCreateWithoutMessageThreadsInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  unitType: z.lazy(() => UnitTypeSchema),
  beds: z.number(),
  baths: z.number(),
  guests: z.number(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  timeZone: z.string(),
  airbnbRemitsTaxes: z.boolean().optional(),
  organizationId: z.string(),
  propertyManagerId: z.string(),
  propertyOwnerId: z.string().optional().nullable(),
  wifiName: z.string().optional().nullable(),
  wifiPassword: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  bpProductId: z.string().optional().nullable(),
  doorCode: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  basePrice: z.number().optional(),
  iCalKey: z.string().optional().nullable(),
  content: z.lazy(() => ContentUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  rules: z.lazy(() => RulesUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  pricing: z.lazy(() => PricingUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  amenities: z.lazy(() => AmenityUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  fees: z.lazy(() => FeeUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  events: z.lazy(() => CalendarEventUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUncheckedCreateNestedManyWithoutListingsInputSchema).optional(),
  deductions: z.lazy(() => DeductionsUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  keys: z.lazy(() => ListingKeyUncheckedCreateNestedManyWithoutListingInputSchema).optional()
}).strict();

export const ListingCreateOrConnectWithoutMessageThreadsInputSchema: z.ZodType<Prisma.ListingCreateOrConnectWithoutMessageThreadsInput> = z.object({
  where: z.lazy(() => ListingWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ListingCreateWithoutMessageThreadsInputSchema),z.lazy(() => ListingUncheckedCreateWithoutMessageThreadsInputSchema) ]),
}).strict();

export const GuestCreateWithoutMessageThreadsInputSchema: z.ZodType<Prisma.GuestCreateWithoutMessageThreadsInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  reservations: z.lazy(() => ReservationCreateNestedManyWithoutGuestInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutGuestsInputSchema)
}).strict();

export const GuestUncheckedCreateWithoutMessageThreadsInputSchema: z.ZodType<Prisma.GuestUncheckedCreateWithoutMessageThreadsInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  organizationId: z.string(),
  reservations: z.lazy(() => ReservationUncheckedCreateNestedManyWithoutGuestInputSchema).optional()
}).strict();

export const GuestCreateOrConnectWithoutMessageThreadsInputSchema: z.ZodType<Prisma.GuestCreateOrConnectWithoutMessageThreadsInput> = z.object({
  where: z.lazy(() => GuestWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => GuestCreateWithoutMessageThreadsInputSchema),z.lazy(() => GuestUncheckedCreateWithoutMessageThreadsInputSchema) ]),
}).strict();

export const MessageCreateWithoutMessageThreadInputSchema: z.ZodType<Prisma.MessageCreateWithoutMessageThreadInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  message: z.string(),
  user: z.lazy(() => MessageUserSchema),
  timestamp: z.coerce.date(),
  bpMessageId: z.string().optional().nullable(),
  channelMessageId: z.string().optional().nullable(),
  read: z.boolean().optional()
}).strict();

export const MessageUncheckedCreateWithoutMessageThreadInputSchema: z.ZodType<Prisma.MessageUncheckedCreateWithoutMessageThreadInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  message: z.string(),
  user: z.lazy(() => MessageUserSchema),
  timestamp: z.coerce.date(),
  bpMessageId: z.string().optional().nullable(),
  channelMessageId: z.string().optional().nullable(),
  read: z.boolean().optional()
}).strict();

export const MessageCreateOrConnectWithoutMessageThreadInputSchema: z.ZodType<Prisma.MessageCreateOrConnectWithoutMessageThreadInput> = z.object({
  where: z.lazy(() => MessageWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => MessageCreateWithoutMessageThreadInputSchema),z.lazy(() => MessageUncheckedCreateWithoutMessageThreadInputSchema) ]),
}).strict();

export const MessageCreateManyMessageThreadInputEnvelopeSchema: z.ZodType<Prisma.MessageCreateManyMessageThreadInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => MessageCreateManyMessageThreadInputSchema),z.lazy(() => MessageCreateManyMessageThreadInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ListingUpsertWithoutMessageThreadsInputSchema: z.ZodType<Prisma.ListingUpsertWithoutMessageThreadsInput> = z.object({
  update: z.union([ z.lazy(() => ListingUpdateWithoutMessageThreadsInputSchema),z.lazy(() => ListingUncheckedUpdateWithoutMessageThreadsInputSchema) ]),
  create: z.union([ z.lazy(() => ListingCreateWithoutMessageThreadsInputSchema),z.lazy(() => ListingUncheckedCreateWithoutMessageThreadsInputSchema) ]),
  where: z.lazy(() => ListingWhereInputSchema).optional()
}).strict();

export const ListingUpdateToOneWithWhereWithoutMessageThreadsInputSchema: z.ZodType<Prisma.ListingUpdateToOneWithWhereWithoutMessageThreadsInput> = z.object({
  where: z.lazy(() => ListingWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ListingUpdateWithoutMessageThreadsInputSchema),z.lazy(() => ListingUncheckedUpdateWithoutMessageThreadsInputSchema) ]),
}).strict();

export const ListingUpdateWithoutMessageThreadsInputSchema: z.ZodType<Prisma.ListingUpdateWithoutMessageThreadsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  unitType: z.union([ z.lazy(() => UnitTypeSchema),z.lazy(() => EnumUnitTypeFieldUpdateOperationsInputSchema) ]).optional(),
  beds: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  baths: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  guests: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timeZone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  airbnbRemitsTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  wifiName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiPassword: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bpProductId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doorCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  basePrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  iCalKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  content: z.lazy(() => ContentUpdateOneWithoutListingNestedInputSchema).optional(),
  rules: z.lazy(() => RulesUpdateOneWithoutListingNestedInputSchema).optional(),
  pricing: z.lazy(() => PricingUpdateOneWithoutListingNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUpdateOneWithoutListingNestedInputSchema).optional(),
  amenities: z.lazy(() => AmenityUpdateManyWithoutListingNestedInputSchema).optional(),
  fees: z.lazy(() => FeeUpdateManyWithoutListingNestedInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesUpdateOneWithoutListingNestedInputSchema).optional(),
  events: z.lazy(() => CalendarEventUpdateManyWithoutListingNestedInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUpdateManyWithoutListingsNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutListingsNestedInputSchema).optional(),
  deductions: z.lazy(() => DeductionsUpdateOneWithoutListingNestedInputSchema).optional(),
  propertyManager: z.lazy(() => UserUpdateOneRequiredWithoutManagedListingsNestedInputSchema).optional(),
  propertyOwner: z.lazy(() => UserUpdateOneWithoutOwnedListingsNestedInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUpdateManyWithoutListingNestedInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementUpdateManyWithoutListingNestedInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateUpdateManyWithoutListingNestedInputSchema).optional(),
  keys: z.lazy(() => ListingKeyUpdateManyWithoutListingNestedInputSchema).optional()
}).strict();

export const ListingUncheckedUpdateWithoutMessageThreadsInputSchema: z.ZodType<Prisma.ListingUncheckedUpdateWithoutMessageThreadsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  unitType: z.union([ z.lazy(() => UnitTypeSchema),z.lazy(() => EnumUnitTypeFieldUpdateOperationsInputSchema) ]).optional(),
  beds: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  baths: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  guests: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timeZone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  airbnbRemitsTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  propertyManagerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  propertyOwnerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiPassword: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bpProductId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doorCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  basePrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  iCalKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  content: z.lazy(() => ContentUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  rules: z.lazy(() => RulesUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  pricing: z.lazy(() => PricingUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  amenities: z.lazy(() => AmenityUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  fees: z.lazy(() => FeeUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  events: z.lazy(() => CalendarEventUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUncheckedUpdateManyWithoutListingsNestedInputSchema).optional(),
  deductions: z.lazy(() => DeductionsUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  keys: z.lazy(() => ListingKeyUncheckedUpdateManyWithoutListingNestedInputSchema).optional()
}).strict();

export const GuestUpsertWithoutMessageThreadsInputSchema: z.ZodType<Prisma.GuestUpsertWithoutMessageThreadsInput> = z.object({
  update: z.union([ z.lazy(() => GuestUpdateWithoutMessageThreadsInputSchema),z.lazy(() => GuestUncheckedUpdateWithoutMessageThreadsInputSchema) ]),
  create: z.union([ z.lazy(() => GuestCreateWithoutMessageThreadsInputSchema),z.lazy(() => GuestUncheckedCreateWithoutMessageThreadsInputSchema) ]),
  where: z.lazy(() => GuestWhereInputSchema).optional()
}).strict();

export const GuestUpdateToOneWithWhereWithoutMessageThreadsInputSchema: z.ZodType<Prisma.GuestUpdateToOneWithWhereWithoutMessageThreadsInput> = z.object({
  where: z.lazy(() => GuestWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => GuestUpdateWithoutMessageThreadsInputSchema),z.lazy(() => GuestUncheckedUpdateWithoutMessageThreadsInputSchema) ]),
}).strict();

export const GuestUpdateWithoutMessageThreadsInputSchema: z.ZodType<Prisma.GuestUpdateWithoutMessageThreadsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reservations: z.lazy(() => ReservationUpdateManyWithoutGuestNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutGuestsNestedInputSchema).optional()
}).strict();

export const GuestUncheckedUpdateWithoutMessageThreadsInputSchema: z.ZodType<Prisma.GuestUncheckedUpdateWithoutMessageThreadsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reservations: z.lazy(() => ReservationUncheckedUpdateManyWithoutGuestNestedInputSchema).optional()
}).strict();

export const MessageUpsertWithWhereUniqueWithoutMessageThreadInputSchema: z.ZodType<Prisma.MessageUpsertWithWhereUniqueWithoutMessageThreadInput> = z.object({
  where: z.lazy(() => MessageWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => MessageUpdateWithoutMessageThreadInputSchema),z.lazy(() => MessageUncheckedUpdateWithoutMessageThreadInputSchema) ]),
  create: z.union([ z.lazy(() => MessageCreateWithoutMessageThreadInputSchema),z.lazy(() => MessageUncheckedCreateWithoutMessageThreadInputSchema) ]),
}).strict();

export const MessageUpdateWithWhereUniqueWithoutMessageThreadInputSchema: z.ZodType<Prisma.MessageUpdateWithWhereUniqueWithoutMessageThreadInput> = z.object({
  where: z.lazy(() => MessageWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => MessageUpdateWithoutMessageThreadInputSchema),z.lazy(() => MessageUncheckedUpdateWithoutMessageThreadInputSchema) ]),
}).strict();

export const MessageUpdateManyWithWhereWithoutMessageThreadInputSchema: z.ZodType<Prisma.MessageUpdateManyWithWhereWithoutMessageThreadInput> = z.object({
  where: z.lazy(() => MessageScalarWhereInputSchema),
  data: z.union([ z.lazy(() => MessageUpdateManyMutationInputSchema),z.lazy(() => MessageUncheckedUpdateManyWithoutMessageThreadInputSchema) ]),
}).strict();

export const MessageScalarWhereInputSchema: z.ZodType<Prisma.MessageScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => MessageScalarWhereInputSchema),z.lazy(() => MessageScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MessageScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MessageScalarWhereInputSchema),z.lazy(() => MessageScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  messageThreadId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  message: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  user: z.union([ z.lazy(() => EnumMessageUserFilterSchema),z.lazy(() => MessageUserSchema) ]).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  bpMessageId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  channelMessageId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  read: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
}).strict();

export const MessageThreadCreateWithoutMessagesInputSchema: z.ZodType<Prisma.MessageThreadCreateWithoutMessagesInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  bpThreadId: z.string().optional().nullable(),
  channelThreadId: z.string().optional().nullable(),
  lastMessageSentAt: z.string().optional().nullable(),
  dateFrom: z.string(),
  dateTo: z.string(),
  replyTo: z.string().optional().nullable(),
  archived: z.boolean().optional(),
  enableReminder: z.boolean().optional(),
  channel: z.lazy(() => ChannelSchema),
  listing: z.lazy(() => ListingCreateNestedOneWithoutMessageThreadsInputSchema),
  guest: z.lazy(() => GuestCreateNestedOneWithoutMessageThreadsInputSchema)
}).strict();

export const MessageThreadUncheckedCreateWithoutMessagesInputSchema: z.ZodType<Prisma.MessageThreadUncheckedCreateWithoutMessagesInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  listingId: z.string(),
  guestId: z.string(),
  bpThreadId: z.string().optional().nullable(),
  channelThreadId: z.string().optional().nullable(),
  lastMessageSentAt: z.string().optional().nullable(),
  dateFrom: z.string(),
  dateTo: z.string(),
  replyTo: z.string().optional().nullable(),
  archived: z.boolean().optional(),
  enableReminder: z.boolean().optional(),
  channel: z.lazy(() => ChannelSchema)
}).strict();

export const MessageThreadCreateOrConnectWithoutMessagesInputSchema: z.ZodType<Prisma.MessageThreadCreateOrConnectWithoutMessagesInput> = z.object({
  where: z.lazy(() => MessageThreadWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => MessageThreadCreateWithoutMessagesInputSchema),z.lazy(() => MessageThreadUncheckedCreateWithoutMessagesInputSchema) ]),
}).strict();

export const MessageThreadUpsertWithoutMessagesInputSchema: z.ZodType<Prisma.MessageThreadUpsertWithoutMessagesInput> = z.object({
  update: z.union([ z.lazy(() => MessageThreadUpdateWithoutMessagesInputSchema),z.lazy(() => MessageThreadUncheckedUpdateWithoutMessagesInputSchema) ]),
  create: z.union([ z.lazy(() => MessageThreadCreateWithoutMessagesInputSchema),z.lazy(() => MessageThreadUncheckedCreateWithoutMessagesInputSchema) ]),
  where: z.lazy(() => MessageThreadWhereInputSchema).optional()
}).strict();

export const MessageThreadUpdateToOneWithWhereWithoutMessagesInputSchema: z.ZodType<Prisma.MessageThreadUpdateToOneWithWhereWithoutMessagesInput> = z.object({
  where: z.lazy(() => MessageThreadWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => MessageThreadUpdateWithoutMessagesInputSchema),z.lazy(() => MessageThreadUncheckedUpdateWithoutMessagesInputSchema) ]),
}).strict();

export const MessageThreadUpdateWithoutMessagesInputSchema: z.ZodType<Prisma.MessageThreadUpdateWithoutMessagesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  bpThreadId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  channelThreadId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastMessageSentAt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dateFrom: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dateTo: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  replyTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  archived: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  enableReminder: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  channel: z.union([ z.lazy(() => ChannelSchema),z.lazy(() => EnumChannelFieldUpdateOperationsInputSchema) ]).optional(),
  listing: z.lazy(() => ListingUpdateOneRequiredWithoutMessageThreadsNestedInputSchema).optional(),
  guest: z.lazy(() => GuestUpdateOneRequiredWithoutMessageThreadsNestedInputSchema).optional()
}).strict();

export const MessageThreadUncheckedUpdateWithoutMessagesInputSchema: z.ZodType<Prisma.MessageThreadUncheckedUpdateWithoutMessagesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  listingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  guestId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bpThreadId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  channelThreadId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastMessageSentAt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dateFrom: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dateTo: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  replyTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  archived: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  enableReminder: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  channel: z.union([ z.lazy(() => ChannelSchema),z.lazy(() => EnumChannelFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const OrganizationCreateWithoutMessageTemplatesInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutMessageTemplatesInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  language: z.string().optional(),
  adminName: z.string(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  website: z.string(),
  phone: z.string(),
  currency: z.string().optional(),
  startDate: z.coerce.date().optional(),
  directBooking: z.boolean().optional(),
  logoUrl: z.string().optional().nullable(),
  users: z.lazy(() => UserCreateNestedManyWithoutOrganizationInputSchema).optional(),
  listings: z.lazy(() => ListingCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionCreateNestedOneWithoutOrganizationInputSchema).optional(),
  guests: z.lazy(() => GuestCreateNestedManyWithoutOrganizationInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemCreateNestedManyWithoutOrganizationInputSchema).optional(),
  priceLabsConnection: z.lazy(() => PriceLabsConnectionCreateNestedOneWithoutOrganizationInputSchema).optional(),
  stripeConnection: z.lazy(() => StripeConnectionCreateNestedOneWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutMessageTemplatesInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutMessageTemplatesInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  language: z.string().optional(),
  adminName: z.string(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  website: z.string(),
  phone: z.string(),
  currency: z.string().optional(),
  startDate: z.coerce.date().optional(),
  directBooking: z.boolean().optional(),
  logoUrl: z.string().optional().nullable(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  listings: z.lazy(() => ListingUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionUncheckedCreateNestedOneWithoutOrganizationInputSchema).optional(),
  guests: z.lazy(() => GuestUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  priceLabsConnection: z.lazy(() => PriceLabsConnectionUncheckedCreateNestedOneWithoutOrganizationInputSchema).optional(),
  stripeConnection: z.lazy(() => StripeConnectionUncheckedCreateNestedOneWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutMessageTemplatesInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutMessageTemplatesInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutMessageTemplatesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutMessageTemplatesInputSchema) ]),
}).strict();

export const ScheduledMessageCreateWithoutMessageTemplateInputSchema: z.ZodType<Prisma.ScheduledMessageCreateWithoutMessageTemplateInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  scheduledAt: z.coerce.date(),
  status: z.lazy(() => ScheduledMessageStatusSchema).optional(),
  completedAt: z.coerce.date().optional().nullable(),
  failureMessage: z.string().optional().nullable(),
  reservation: z.lazy(() => ReservationCreateNestedOneWithoutScheduledMessagesInputSchema)
}).strict();

export const ScheduledMessageUncheckedCreateWithoutMessageTemplateInputSchema: z.ZodType<Prisma.ScheduledMessageUncheckedCreateWithoutMessageTemplateInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  scheduledAt: z.coerce.date(),
  reservationId: z.string(),
  status: z.lazy(() => ScheduledMessageStatusSchema).optional(),
  completedAt: z.coerce.date().optional().nullable(),
  failureMessage: z.string().optional().nullable()
}).strict();

export const ScheduledMessageCreateOrConnectWithoutMessageTemplateInputSchema: z.ZodType<Prisma.ScheduledMessageCreateOrConnectWithoutMessageTemplateInput> = z.object({
  where: z.lazy(() => ScheduledMessageWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ScheduledMessageCreateWithoutMessageTemplateInputSchema),z.lazy(() => ScheduledMessageUncheckedCreateWithoutMessageTemplateInputSchema) ]),
}).strict();

export const ScheduledMessageCreateManyMessageTemplateInputEnvelopeSchema: z.ZodType<Prisma.ScheduledMessageCreateManyMessageTemplateInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ScheduledMessageCreateManyMessageTemplateInputSchema),z.lazy(() => ScheduledMessageCreateManyMessageTemplateInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ListingCreateWithoutMessageTemplatesInputSchema: z.ZodType<Prisma.ListingCreateWithoutMessageTemplatesInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  unitType: z.lazy(() => UnitTypeSchema),
  beds: z.number(),
  baths: z.number(),
  guests: z.number(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  timeZone: z.string(),
  airbnbRemitsTaxes: z.boolean().optional(),
  wifiName: z.string().optional().nullable(),
  wifiPassword: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  bpProductId: z.string().optional().nullable(),
  doorCode: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  basePrice: z.number().optional(),
  iCalKey: z.string().optional().nullable(),
  content: z.lazy(() => ContentCreateNestedOneWithoutListingInputSchema).optional(),
  rules: z.lazy(() => RulesCreateNestedOneWithoutListingInputSchema).optional(),
  pricing: z.lazy(() => PricingCreateNestedOneWithoutListingInputSchema).optional(),
  availability: z.lazy(() => AvailabilityCreateNestedOneWithoutListingInputSchema).optional(),
  amenities: z.lazy(() => AmenityCreateNestedManyWithoutListingInputSchema).optional(),
  fees: z.lazy(() => FeeCreateNestedManyWithoutListingInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesCreateNestedOneWithoutListingInputSchema).optional(),
  events: z.lazy(() => CalendarEventCreateNestedManyWithoutListingInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutListingsInputSchema),
  deductions: z.lazy(() => DeductionsCreateNestedOneWithoutListingInputSchema).optional(),
  propertyManager: z.lazy(() => UserCreateNestedOneWithoutManagedListingsInputSchema),
  propertyOwner: z.lazy(() => UserCreateNestedOneWithoutOwnedListingsInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadCreateNestedManyWithoutListingInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseCreateNestedManyWithoutListingInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementCreateNestedManyWithoutListingInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateCreateNestedManyWithoutListingInputSchema).optional(),
  keys: z.lazy(() => ListingKeyCreateNestedManyWithoutListingInputSchema).optional()
}).strict();

export const ListingUncheckedCreateWithoutMessageTemplatesInputSchema: z.ZodType<Prisma.ListingUncheckedCreateWithoutMessageTemplatesInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  unitType: z.lazy(() => UnitTypeSchema),
  beds: z.number(),
  baths: z.number(),
  guests: z.number(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  timeZone: z.string(),
  airbnbRemitsTaxes: z.boolean().optional(),
  organizationId: z.string(),
  propertyManagerId: z.string(),
  propertyOwnerId: z.string().optional().nullable(),
  wifiName: z.string().optional().nullable(),
  wifiPassword: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  bpProductId: z.string().optional().nullable(),
  doorCode: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  basePrice: z.number().optional(),
  iCalKey: z.string().optional().nullable(),
  content: z.lazy(() => ContentUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  rules: z.lazy(() => RulesUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  pricing: z.lazy(() => PricingUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  amenities: z.lazy(() => AmenityUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  fees: z.lazy(() => FeeUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  events: z.lazy(() => CalendarEventUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  deductions: z.lazy(() => DeductionsUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  keys: z.lazy(() => ListingKeyUncheckedCreateNestedManyWithoutListingInputSchema).optional()
}).strict();

export const ListingCreateOrConnectWithoutMessageTemplatesInputSchema: z.ZodType<Prisma.ListingCreateOrConnectWithoutMessageTemplatesInput> = z.object({
  where: z.lazy(() => ListingWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ListingCreateWithoutMessageTemplatesInputSchema),z.lazy(() => ListingUncheckedCreateWithoutMessageTemplatesInputSchema) ]),
}).strict();

export const OrganizationUpsertWithoutMessageTemplatesInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutMessageTemplatesInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutMessageTemplatesInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutMessageTemplatesInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutMessageTemplatesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutMessageTemplatesInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutMessageTemplatesInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutMessageTemplatesInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutMessageTemplatesInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutMessageTemplatesInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutMessageTemplatesInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutMessageTemplatesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  adminName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  website: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  directBooking: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  logoUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UserUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  listings: z.lazy(() => ListingUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionUpdateOneWithoutOrganizationNestedInputSchema).optional(),
  guests: z.lazy(() => GuestUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  priceLabsConnection: z.lazy(() => PriceLabsConnectionUpdateOneWithoutOrganizationNestedInputSchema).optional(),
  stripeConnection: z.lazy(() => StripeConnectionUpdateOneWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutMessageTemplatesInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutMessageTemplatesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  adminName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  website: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  directBooking: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  logoUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  listings: z.lazy(() => ListingUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionUncheckedUpdateOneWithoutOrganizationNestedInputSchema).optional(),
  guests: z.lazy(() => GuestUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  priceLabsConnection: z.lazy(() => PriceLabsConnectionUncheckedUpdateOneWithoutOrganizationNestedInputSchema).optional(),
  stripeConnection: z.lazy(() => StripeConnectionUncheckedUpdateOneWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const ScheduledMessageUpsertWithWhereUniqueWithoutMessageTemplateInputSchema: z.ZodType<Prisma.ScheduledMessageUpsertWithWhereUniqueWithoutMessageTemplateInput> = z.object({
  where: z.lazy(() => ScheduledMessageWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ScheduledMessageUpdateWithoutMessageTemplateInputSchema),z.lazy(() => ScheduledMessageUncheckedUpdateWithoutMessageTemplateInputSchema) ]),
  create: z.union([ z.lazy(() => ScheduledMessageCreateWithoutMessageTemplateInputSchema),z.lazy(() => ScheduledMessageUncheckedCreateWithoutMessageTemplateInputSchema) ]),
}).strict();

export const ScheduledMessageUpdateWithWhereUniqueWithoutMessageTemplateInputSchema: z.ZodType<Prisma.ScheduledMessageUpdateWithWhereUniqueWithoutMessageTemplateInput> = z.object({
  where: z.lazy(() => ScheduledMessageWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ScheduledMessageUpdateWithoutMessageTemplateInputSchema),z.lazy(() => ScheduledMessageUncheckedUpdateWithoutMessageTemplateInputSchema) ]),
}).strict();

export const ScheduledMessageUpdateManyWithWhereWithoutMessageTemplateInputSchema: z.ZodType<Prisma.ScheduledMessageUpdateManyWithWhereWithoutMessageTemplateInput> = z.object({
  where: z.lazy(() => ScheduledMessageScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ScheduledMessageUpdateManyMutationInputSchema),z.lazy(() => ScheduledMessageUncheckedUpdateManyWithoutMessageTemplateInputSchema) ]),
}).strict();

export const ListingUpsertWithWhereUniqueWithoutMessageTemplatesInputSchema: z.ZodType<Prisma.ListingUpsertWithWhereUniqueWithoutMessageTemplatesInput> = z.object({
  where: z.lazy(() => ListingWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ListingUpdateWithoutMessageTemplatesInputSchema),z.lazy(() => ListingUncheckedUpdateWithoutMessageTemplatesInputSchema) ]),
  create: z.union([ z.lazy(() => ListingCreateWithoutMessageTemplatesInputSchema),z.lazy(() => ListingUncheckedCreateWithoutMessageTemplatesInputSchema) ]),
}).strict();

export const ListingUpdateWithWhereUniqueWithoutMessageTemplatesInputSchema: z.ZodType<Prisma.ListingUpdateWithWhereUniqueWithoutMessageTemplatesInput> = z.object({
  where: z.lazy(() => ListingWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ListingUpdateWithoutMessageTemplatesInputSchema),z.lazy(() => ListingUncheckedUpdateWithoutMessageTemplatesInputSchema) ]),
}).strict();

export const ListingUpdateManyWithWhereWithoutMessageTemplatesInputSchema: z.ZodType<Prisma.ListingUpdateManyWithWhereWithoutMessageTemplatesInput> = z.object({
  where: z.lazy(() => ListingScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ListingUpdateManyMutationInputSchema),z.lazy(() => ListingUncheckedUpdateManyWithoutMessageTemplatesInputSchema) ]),
}).strict();

export const ReservationCreateWithoutScheduledMessagesInputSchema: z.ZodType<Prisma.ReservationCreateWithoutScheduledMessagesInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  channel: z.lazy(() => ChannelSchema).optional(),
  bpReservationId: z.string().optional().nullable(),
  confirmationCode: z.string().optional().nullable(),
  adults: z.number(),
  children: z.number(),
  pets: z.number().optional(),
  status: z.lazy(() => ReservationStatusSchema).optional(),
  calendarEvent: z.lazy(() => CalendarEventCreateNestedOneWithoutReservationInputSchema),
  revenue: z.lazy(() => RevenueCreateNestedOneWithoutReservationInputSchema).optional(),
  guest: z.lazy(() => GuestCreateNestedOneWithoutReservationsInputSchema)
}).strict();

export const ReservationUncheckedCreateWithoutScheduledMessagesInputSchema: z.ZodType<Prisma.ReservationUncheckedCreateWithoutScheduledMessagesInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  calendarEventId: z.string(),
  channel: z.lazy(() => ChannelSchema).optional(),
  bpReservationId: z.string().optional().nullable(),
  confirmationCode: z.string().optional().nullable(),
  adults: z.number(),
  children: z.number(),
  pets: z.number().optional(),
  status: z.lazy(() => ReservationStatusSchema).optional(),
  guestId: z.string(),
  revenue: z.lazy(() => RevenueUncheckedCreateNestedOneWithoutReservationInputSchema).optional()
}).strict();

export const ReservationCreateOrConnectWithoutScheduledMessagesInputSchema: z.ZodType<Prisma.ReservationCreateOrConnectWithoutScheduledMessagesInput> = z.object({
  where: z.lazy(() => ReservationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ReservationCreateWithoutScheduledMessagesInputSchema),z.lazy(() => ReservationUncheckedCreateWithoutScheduledMessagesInputSchema) ]),
}).strict();

export const MessageTemplateCreateWithoutScheduledMessagesInputSchema: z.ZodType<Prisma.MessageTemplateCreateWithoutScheduledMessagesInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  title: z.string(),
  body: z.string(),
  bodyHtml: z.string(),
  enabled: z.boolean().optional(),
  trigger: z.lazy(() => TriggerSchema).optional().nullable(),
  triggerRange: z.lazy(() => TriggerRangeSchema).optional().nullable(),
  triggerUnit: z.lazy(() => TriggerUnitSchema).optional().nullable(),
  triggerValue: z.number().optional().nullable(),
  allListings: z.boolean().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutMessageTemplatesInputSchema),
  listings: z.lazy(() => ListingCreateNestedManyWithoutMessageTemplatesInputSchema).optional()
}).strict();

export const MessageTemplateUncheckedCreateWithoutScheduledMessagesInputSchema: z.ZodType<Prisma.MessageTemplateUncheckedCreateWithoutScheduledMessagesInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  title: z.string(),
  body: z.string(),
  bodyHtml: z.string(),
  enabled: z.boolean().optional(),
  trigger: z.lazy(() => TriggerSchema).optional().nullable(),
  triggerRange: z.lazy(() => TriggerRangeSchema).optional().nullable(),
  triggerUnit: z.lazy(() => TriggerUnitSchema).optional().nullable(),
  triggerValue: z.number().optional().nullable(),
  allListings: z.boolean().optional(),
  organizationId: z.string(),
  listings: z.lazy(() => ListingUncheckedCreateNestedManyWithoutMessageTemplatesInputSchema).optional()
}).strict();

export const MessageTemplateCreateOrConnectWithoutScheduledMessagesInputSchema: z.ZodType<Prisma.MessageTemplateCreateOrConnectWithoutScheduledMessagesInput> = z.object({
  where: z.lazy(() => MessageTemplateWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => MessageTemplateCreateWithoutScheduledMessagesInputSchema),z.lazy(() => MessageTemplateUncheckedCreateWithoutScheduledMessagesInputSchema) ]),
}).strict();

export const ReservationUpsertWithoutScheduledMessagesInputSchema: z.ZodType<Prisma.ReservationUpsertWithoutScheduledMessagesInput> = z.object({
  update: z.union([ z.lazy(() => ReservationUpdateWithoutScheduledMessagesInputSchema),z.lazy(() => ReservationUncheckedUpdateWithoutScheduledMessagesInputSchema) ]),
  create: z.union([ z.lazy(() => ReservationCreateWithoutScheduledMessagesInputSchema),z.lazy(() => ReservationUncheckedCreateWithoutScheduledMessagesInputSchema) ]),
  where: z.lazy(() => ReservationWhereInputSchema).optional()
}).strict();

export const ReservationUpdateToOneWithWhereWithoutScheduledMessagesInputSchema: z.ZodType<Prisma.ReservationUpdateToOneWithWhereWithoutScheduledMessagesInput> = z.object({
  where: z.lazy(() => ReservationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ReservationUpdateWithoutScheduledMessagesInputSchema),z.lazy(() => ReservationUncheckedUpdateWithoutScheduledMessagesInputSchema) ]),
}).strict();

export const ReservationUpdateWithoutScheduledMessagesInputSchema: z.ZodType<Prisma.ReservationUpdateWithoutScheduledMessagesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  channel: z.union([ z.lazy(() => ChannelSchema),z.lazy(() => EnumChannelFieldUpdateOperationsInputSchema) ]).optional(),
  bpReservationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmationCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  adults: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  children: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  pets: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ReservationStatusSchema),z.lazy(() => EnumReservationStatusFieldUpdateOperationsInputSchema) ]).optional(),
  calendarEvent: z.lazy(() => CalendarEventUpdateOneRequiredWithoutReservationNestedInputSchema).optional(),
  revenue: z.lazy(() => RevenueUpdateOneWithoutReservationNestedInputSchema).optional(),
  guest: z.lazy(() => GuestUpdateOneRequiredWithoutReservationsNestedInputSchema).optional()
}).strict();

export const ReservationUncheckedUpdateWithoutScheduledMessagesInputSchema: z.ZodType<Prisma.ReservationUncheckedUpdateWithoutScheduledMessagesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  calendarEventId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  channel: z.union([ z.lazy(() => ChannelSchema),z.lazy(() => EnumChannelFieldUpdateOperationsInputSchema) ]).optional(),
  bpReservationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmationCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  adults: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  children: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  pets: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ReservationStatusSchema),z.lazy(() => EnumReservationStatusFieldUpdateOperationsInputSchema) ]).optional(),
  guestId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  revenue: z.lazy(() => RevenueUncheckedUpdateOneWithoutReservationNestedInputSchema).optional()
}).strict();

export const MessageTemplateUpsertWithoutScheduledMessagesInputSchema: z.ZodType<Prisma.MessageTemplateUpsertWithoutScheduledMessagesInput> = z.object({
  update: z.union([ z.lazy(() => MessageTemplateUpdateWithoutScheduledMessagesInputSchema),z.lazy(() => MessageTemplateUncheckedUpdateWithoutScheduledMessagesInputSchema) ]),
  create: z.union([ z.lazy(() => MessageTemplateCreateWithoutScheduledMessagesInputSchema),z.lazy(() => MessageTemplateUncheckedCreateWithoutScheduledMessagesInputSchema) ]),
  where: z.lazy(() => MessageTemplateWhereInputSchema).optional()
}).strict();

export const MessageTemplateUpdateToOneWithWhereWithoutScheduledMessagesInputSchema: z.ZodType<Prisma.MessageTemplateUpdateToOneWithWhereWithoutScheduledMessagesInput> = z.object({
  where: z.lazy(() => MessageTemplateWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => MessageTemplateUpdateWithoutScheduledMessagesInputSchema),z.lazy(() => MessageTemplateUncheckedUpdateWithoutScheduledMessagesInputSchema) ]),
}).strict();

export const MessageTemplateUpdateWithoutScheduledMessagesInputSchema: z.ZodType<Prisma.MessageTemplateUpdateWithoutScheduledMessagesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  body: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bodyHtml: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  enabled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  trigger: z.union([ z.lazy(() => TriggerSchema),z.lazy(() => NullableEnumTriggerFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  triggerRange: z.union([ z.lazy(() => TriggerRangeSchema),z.lazy(() => NullableEnumTriggerRangeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  triggerUnit: z.union([ z.lazy(() => TriggerUnitSchema),z.lazy(() => NullableEnumTriggerUnitFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  triggerValue: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allListings: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutMessageTemplatesNestedInputSchema).optional(),
  listings: z.lazy(() => ListingUpdateManyWithoutMessageTemplatesNestedInputSchema).optional()
}).strict();

export const MessageTemplateUncheckedUpdateWithoutScheduledMessagesInputSchema: z.ZodType<Prisma.MessageTemplateUncheckedUpdateWithoutScheduledMessagesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  body: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bodyHtml: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  enabled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  trigger: z.union([ z.lazy(() => TriggerSchema),z.lazy(() => NullableEnumTriggerFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  triggerRange: z.union([ z.lazy(() => TriggerRangeSchema),z.lazy(() => NullableEnumTriggerRangeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  triggerUnit: z.union([ z.lazy(() => TriggerUnitSchema),z.lazy(() => NullableEnumTriggerUnitFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  triggerValue: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allListings: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  listings: z.lazy(() => ListingUncheckedUpdateManyWithoutMessageTemplatesNestedInputSchema).optional()
}).strict();

export const ReservationCreateWithoutRevenueInputSchema: z.ZodType<Prisma.ReservationCreateWithoutRevenueInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  channel: z.lazy(() => ChannelSchema).optional(),
  bpReservationId: z.string().optional().nullable(),
  confirmationCode: z.string().optional().nullable(),
  adults: z.number(),
  children: z.number(),
  pets: z.number().optional(),
  status: z.lazy(() => ReservationStatusSchema).optional(),
  calendarEvent: z.lazy(() => CalendarEventCreateNestedOneWithoutReservationInputSchema),
  scheduledMessages: z.lazy(() => ScheduledMessageCreateNestedManyWithoutReservationInputSchema).optional(),
  guest: z.lazy(() => GuestCreateNestedOneWithoutReservationsInputSchema)
}).strict();

export const ReservationUncheckedCreateWithoutRevenueInputSchema: z.ZodType<Prisma.ReservationUncheckedCreateWithoutRevenueInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  calendarEventId: z.string(),
  channel: z.lazy(() => ChannelSchema).optional(),
  bpReservationId: z.string().optional().nullable(),
  confirmationCode: z.string().optional().nullable(),
  adults: z.number(),
  children: z.number(),
  pets: z.number().optional(),
  status: z.lazy(() => ReservationStatusSchema).optional(),
  guestId: z.string(),
  scheduledMessages: z.lazy(() => ScheduledMessageUncheckedCreateNestedManyWithoutReservationInputSchema).optional()
}).strict();

export const ReservationCreateOrConnectWithoutRevenueInputSchema: z.ZodType<Prisma.ReservationCreateOrConnectWithoutRevenueInput> = z.object({
  where: z.lazy(() => ReservationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ReservationCreateWithoutRevenueInputSchema),z.lazy(() => ReservationUncheckedCreateWithoutRevenueInputSchema) ]),
}).strict();

export const RevenueFeeCreateWithoutRevenueInputSchema: z.ZodType<Prisma.RevenueFeeCreateWithoutRevenueInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  value: z.number(),
  unit: z.string(),
  pmcShare: z.number(),
  taxable: z.boolean().optional(),
  type: z.lazy(() => RevenueEntryTypeSchema),
  deductions: z.lazy(() => RevenueTaxCreateNestedManyWithoutRevenueFeeInputSchema).optional()
}).strict();

export const RevenueFeeUncheckedCreateWithoutRevenueInputSchema: z.ZodType<Prisma.RevenueFeeUncheckedCreateWithoutRevenueInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  value: z.number(),
  unit: z.string(),
  pmcShare: z.number(),
  taxable: z.boolean().optional(),
  type: z.lazy(() => RevenueEntryTypeSchema),
  deductions: z.lazy(() => RevenueTaxUncheckedCreateNestedManyWithoutRevenueFeeInputSchema).optional()
}).strict();

export const RevenueFeeCreateOrConnectWithoutRevenueInputSchema: z.ZodType<Prisma.RevenueFeeCreateOrConnectWithoutRevenueInput> = z.object({
  where: z.lazy(() => RevenueFeeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RevenueFeeCreateWithoutRevenueInputSchema),z.lazy(() => RevenueFeeUncheckedCreateWithoutRevenueInputSchema) ]),
}).strict();

export const RevenueFeeCreateManyRevenueInputEnvelopeSchema: z.ZodType<Prisma.RevenueFeeCreateManyRevenueInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => RevenueFeeCreateManyRevenueInputSchema),z.lazy(() => RevenueFeeCreateManyRevenueInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const OwnerStatementCreateWithoutRevenueInputSchema: z.ZodType<Prisma.OwnerStatementCreateWithoutRevenueInput> = z.object({
  id: z.string().optional(),
  month: z.number(),
  year: z.number(),
  locked: z.boolean().optional(),
  isCoHost: z.boolean().optional(),
  listing: z.lazy(() => ListingCreateNestedOneWithoutOwnerStatementsInputSchema),
  listingExpenses: z.lazy(() => ListingExpenseCreateNestedManyWithoutOwnerStatementInputSchema).optional()
}).strict();

export const OwnerStatementUncheckedCreateWithoutRevenueInputSchema: z.ZodType<Prisma.OwnerStatementUncheckedCreateWithoutRevenueInput> = z.object({
  id: z.string().optional(),
  listingId: z.string(),
  month: z.number(),
  year: z.number(),
  locked: z.boolean().optional(),
  isCoHost: z.boolean().optional(),
  listingExpenses: z.lazy(() => ListingExpenseUncheckedCreateNestedManyWithoutOwnerStatementInputSchema).optional()
}).strict();

export const OwnerStatementCreateOrConnectWithoutRevenueInputSchema: z.ZodType<Prisma.OwnerStatementCreateOrConnectWithoutRevenueInput> = z.object({
  where: z.lazy(() => OwnerStatementWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OwnerStatementCreateWithoutRevenueInputSchema),z.lazy(() => OwnerStatementUncheckedCreateWithoutRevenueInputSchema) ]),
}).strict();

export const RevenuePayoutCreateWithoutRevenueInputSchema: z.ZodType<Prisma.RevenuePayoutCreateWithoutRevenueInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  amount: z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutRevenuePayoutsInputSchema).optional(),
  payout: z.lazy(() => PayoutCreateNestedOneWithoutRevenuePayoutInputSchema)
}).strict();

export const RevenuePayoutUncheckedCreateWithoutRevenueInputSchema: z.ZodType<Prisma.RevenuePayoutUncheckedCreateWithoutRevenueInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdById: z.string().optional().nullable(),
  payoutId: z.string(),
  amount: z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
}).strict();

export const RevenuePayoutCreateOrConnectWithoutRevenueInputSchema: z.ZodType<Prisma.RevenuePayoutCreateOrConnectWithoutRevenueInput> = z.object({
  where: z.lazy(() => RevenuePayoutWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RevenuePayoutCreateWithoutRevenueInputSchema),z.lazy(() => RevenuePayoutUncheckedCreateWithoutRevenueInputSchema) ]),
}).strict();

export const RevenuePayoutCreateManyRevenueInputEnvelopeSchema: z.ZodType<Prisma.RevenuePayoutCreateManyRevenueInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => RevenuePayoutCreateManyRevenueInputSchema),z.lazy(() => RevenuePayoutCreateManyRevenueInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ReservationUpsertWithoutRevenueInputSchema: z.ZodType<Prisma.ReservationUpsertWithoutRevenueInput> = z.object({
  update: z.union([ z.lazy(() => ReservationUpdateWithoutRevenueInputSchema),z.lazy(() => ReservationUncheckedUpdateWithoutRevenueInputSchema) ]),
  create: z.union([ z.lazy(() => ReservationCreateWithoutRevenueInputSchema),z.lazy(() => ReservationUncheckedCreateWithoutRevenueInputSchema) ]),
  where: z.lazy(() => ReservationWhereInputSchema).optional()
}).strict();

export const ReservationUpdateToOneWithWhereWithoutRevenueInputSchema: z.ZodType<Prisma.ReservationUpdateToOneWithWhereWithoutRevenueInput> = z.object({
  where: z.lazy(() => ReservationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ReservationUpdateWithoutRevenueInputSchema),z.lazy(() => ReservationUncheckedUpdateWithoutRevenueInputSchema) ]),
}).strict();

export const ReservationUpdateWithoutRevenueInputSchema: z.ZodType<Prisma.ReservationUpdateWithoutRevenueInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  channel: z.union([ z.lazy(() => ChannelSchema),z.lazy(() => EnumChannelFieldUpdateOperationsInputSchema) ]).optional(),
  bpReservationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmationCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  adults: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  children: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  pets: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ReservationStatusSchema),z.lazy(() => EnumReservationStatusFieldUpdateOperationsInputSchema) ]).optional(),
  calendarEvent: z.lazy(() => CalendarEventUpdateOneRequiredWithoutReservationNestedInputSchema).optional(),
  scheduledMessages: z.lazy(() => ScheduledMessageUpdateManyWithoutReservationNestedInputSchema).optional(),
  guest: z.lazy(() => GuestUpdateOneRequiredWithoutReservationsNestedInputSchema).optional()
}).strict();

export const ReservationUncheckedUpdateWithoutRevenueInputSchema: z.ZodType<Prisma.ReservationUncheckedUpdateWithoutRevenueInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  calendarEventId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  channel: z.union([ z.lazy(() => ChannelSchema),z.lazy(() => EnumChannelFieldUpdateOperationsInputSchema) ]).optional(),
  bpReservationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmationCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  adults: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  children: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  pets: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ReservationStatusSchema),z.lazy(() => EnumReservationStatusFieldUpdateOperationsInputSchema) ]).optional(),
  guestId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  scheduledMessages: z.lazy(() => ScheduledMessageUncheckedUpdateManyWithoutReservationNestedInputSchema).optional()
}).strict();

export const RevenueFeeUpsertWithWhereUniqueWithoutRevenueInputSchema: z.ZodType<Prisma.RevenueFeeUpsertWithWhereUniqueWithoutRevenueInput> = z.object({
  where: z.lazy(() => RevenueFeeWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => RevenueFeeUpdateWithoutRevenueInputSchema),z.lazy(() => RevenueFeeUncheckedUpdateWithoutRevenueInputSchema) ]),
  create: z.union([ z.lazy(() => RevenueFeeCreateWithoutRevenueInputSchema),z.lazy(() => RevenueFeeUncheckedCreateWithoutRevenueInputSchema) ]),
}).strict();

export const RevenueFeeUpdateWithWhereUniqueWithoutRevenueInputSchema: z.ZodType<Prisma.RevenueFeeUpdateWithWhereUniqueWithoutRevenueInput> = z.object({
  where: z.lazy(() => RevenueFeeWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => RevenueFeeUpdateWithoutRevenueInputSchema),z.lazy(() => RevenueFeeUncheckedUpdateWithoutRevenueInputSchema) ]),
}).strict();

export const RevenueFeeUpdateManyWithWhereWithoutRevenueInputSchema: z.ZodType<Prisma.RevenueFeeUpdateManyWithWhereWithoutRevenueInput> = z.object({
  where: z.lazy(() => RevenueFeeScalarWhereInputSchema),
  data: z.union([ z.lazy(() => RevenueFeeUpdateManyMutationInputSchema),z.lazy(() => RevenueFeeUncheckedUpdateManyWithoutRevenueInputSchema) ]),
}).strict();

export const RevenueFeeScalarWhereInputSchema: z.ZodType<Prisma.RevenueFeeScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RevenueFeeScalarWhereInputSchema),z.lazy(() => RevenueFeeScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RevenueFeeScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RevenueFeeScalarWhereInputSchema),z.lazy(() => RevenueFeeScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  revenueId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  unit: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  pmcShare: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  taxable: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  type: z.union([ z.lazy(() => EnumRevenueEntryTypeFilterSchema),z.lazy(() => RevenueEntryTypeSchema) ]).optional(),
}).strict();

export const OwnerStatementUpsertWithoutRevenueInputSchema: z.ZodType<Prisma.OwnerStatementUpsertWithoutRevenueInput> = z.object({
  update: z.union([ z.lazy(() => OwnerStatementUpdateWithoutRevenueInputSchema),z.lazy(() => OwnerStatementUncheckedUpdateWithoutRevenueInputSchema) ]),
  create: z.union([ z.lazy(() => OwnerStatementCreateWithoutRevenueInputSchema),z.lazy(() => OwnerStatementUncheckedCreateWithoutRevenueInputSchema) ]),
  where: z.lazy(() => OwnerStatementWhereInputSchema).optional()
}).strict();

export const OwnerStatementUpdateToOneWithWhereWithoutRevenueInputSchema: z.ZodType<Prisma.OwnerStatementUpdateToOneWithWhereWithoutRevenueInput> = z.object({
  where: z.lazy(() => OwnerStatementWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OwnerStatementUpdateWithoutRevenueInputSchema),z.lazy(() => OwnerStatementUncheckedUpdateWithoutRevenueInputSchema) ]),
}).strict();

export const OwnerStatementUpdateWithoutRevenueInputSchema: z.ZodType<Prisma.OwnerStatementUpdateWithoutRevenueInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  month: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  locked: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isCoHost: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  listing: z.lazy(() => ListingUpdateOneRequiredWithoutOwnerStatementsNestedInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUpdateManyWithoutOwnerStatementNestedInputSchema).optional()
}).strict();

export const OwnerStatementUncheckedUpdateWithoutRevenueInputSchema: z.ZodType<Prisma.OwnerStatementUncheckedUpdateWithoutRevenueInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  listingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  month: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  locked: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isCoHost: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUncheckedUpdateManyWithoutOwnerStatementNestedInputSchema).optional()
}).strict();

export const RevenuePayoutUpsertWithWhereUniqueWithoutRevenueInputSchema: z.ZodType<Prisma.RevenuePayoutUpsertWithWhereUniqueWithoutRevenueInput> = z.object({
  where: z.lazy(() => RevenuePayoutWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => RevenuePayoutUpdateWithoutRevenueInputSchema),z.lazy(() => RevenuePayoutUncheckedUpdateWithoutRevenueInputSchema) ]),
  create: z.union([ z.lazy(() => RevenuePayoutCreateWithoutRevenueInputSchema),z.lazy(() => RevenuePayoutUncheckedCreateWithoutRevenueInputSchema) ]),
}).strict();

export const RevenuePayoutUpdateWithWhereUniqueWithoutRevenueInputSchema: z.ZodType<Prisma.RevenuePayoutUpdateWithWhereUniqueWithoutRevenueInput> = z.object({
  where: z.lazy(() => RevenuePayoutWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => RevenuePayoutUpdateWithoutRevenueInputSchema),z.lazy(() => RevenuePayoutUncheckedUpdateWithoutRevenueInputSchema) ]),
}).strict();

export const RevenuePayoutUpdateManyWithWhereWithoutRevenueInputSchema: z.ZodType<Prisma.RevenuePayoutUpdateManyWithWhereWithoutRevenueInput> = z.object({
  where: z.lazy(() => RevenuePayoutScalarWhereInputSchema),
  data: z.union([ z.lazy(() => RevenuePayoutUpdateManyMutationInputSchema),z.lazy(() => RevenuePayoutUncheckedUpdateManyWithoutRevenueInputSchema) ]),
}).strict();

export const RevenueFeeCreateWithoutDeductionsInputSchema: z.ZodType<Prisma.RevenueFeeCreateWithoutDeductionsInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  value: z.number(),
  unit: z.string(),
  pmcShare: z.number(),
  taxable: z.boolean().optional(),
  type: z.lazy(() => RevenueEntryTypeSchema),
  revenue: z.lazy(() => RevenueCreateNestedOneWithoutFeesInputSchema)
}).strict();

export const RevenueFeeUncheckedCreateWithoutDeductionsInputSchema: z.ZodType<Prisma.RevenueFeeUncheckedCreateWithoutDeductionsInput> = z.object({
  id: z.string().optional(),
  revenueId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  value: z.number(),
  unit: z.string(),
  pmcShare: z.number(),
  taxable: z.boolean().optional(),
  type: z.lazy(() => RevenueEntryTypeSchema)
}).strict();

export const RevenueFeeCreateOrConnectWithoutDeductionsInputSchema: z.ZodType<Prisma.RevenueFeeCreateOrConnectWithoutDeductionsInput> = z.object({
  where: z.lazy(() => RevenueFeeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RevenueFeeCreateWithoutDeductionsInputSchema),z.lazy(() => RevenueFeeUncheckedCreateWithoutDeductionsInputSchema) ]),
}).strict();

export const RevenueFeeUpsertWithoutDeductionsInputSchema: z.ZodType<Prisma.RevenueFeeUpsertWithoutDeductionsInput> = z.object({
  update: z.union([ z.lazy(() => RevenueFeeUpdateWithoutDeductionsInputSchema),z.lazy(() => RevenueFeeUncheckedUpdateWithoutDeductionsInputSchema) ]),
  create: z.union([ z.lazy(() => RevenueFeeCreateWithoutDeductionsInputSchema),z.lazy(() => RevenueFeeUncheckedCreateWithoutDeductionsInputSchema) ]),
  where: z.lazy(() => RevenueFeeWhereInputSchema).optional()
}).strict();

export const RevenueFeeUpdateToOneWithWhereWithoutDeductionsInputSchema: z.ZodType<Prisma.RevenueFeeUpdateToOneWithWhereWithoutDeductionsInput> = z.object({
  where: z.lazy(() => RevenueFeeWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RevenueFeeUpdateWithoutDeductionsInputSchema),z.lazy(() => RevenueFeeUncheckedUpdateWithoutDeductionsInputSchema) ]),
}).strict();

export const RevenueFeeUpdateWithoutDeductionsInputSchema: z.ZodType<Prisma.RevenueFeeUpdateWithoutDeductionsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  pmcShare: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  taxable: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => RevenueEntryTypeSchema),z.lazy(() => EnumRevenueEntryTypeFieldUpdateOperationsInputSchema) ]).optional(),
  revenue: z.lazy(() => RevenueUpdateOneRequiredWithoutFeesNestedInputSchema).optional()
}).strict();

export const RevenueFeeUncheckedUpdateWithoutDeductionsInputSchema: z.ZodType<Prisma.RevenueFeeUncheckedUpdateWithoutDeductionsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  revenueId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  pmcShare: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  taxable: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => RevenueEntryTypeSchema),z.lazy(() => EnumRevenueEntryTypeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RevenueCreateWithoutFeesInputSchema: z.ZodType<Prisma.RevenueCreateWithoutFeesInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  accommodation: z.number().optional().nullable(),
  pmcShare: z.number(),
  discount: z.number().optional().nullable(),
  channelCommission: z.number().optional().nullable(),
  payoutStatus: z.lazy(() => RevenuePayoutStatusSchema).optional(),
  reservation: z.lazy(() => ReservationCreateNestedOneWithoutRevenueInputSchema),
  ownerStatement: z.lazy(() => OwnerStatementCreateNestedOneWithoutRevenueInputSchema).optional(),
  payout: z.lazy(() => RevenuePayoutCreateNestedManyWithoutRevenueInputSchema).optional()
}).strict();

export const RevenueUncheckedCreateWithoutFeesInputSchema: z.ZodType<Prisma.RevenueUncheckedCreateWithoutFeesInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  reservationId: z.string(),
  accommodation: z.number().optional().nullable(),
  pmcShare: z.number(),
  discount: z.number().optional().nullable(),
  channelCommission: z.number().optional().nullable(),
  ownerStatementId: z.string().optional().nullable(),
  payoutStatus: z.lazy(() => RevenuePayoutStatusSchema).optional(),
  payout: z.lazy(() => RevenuePayoutUncheckedCreateNestedManyWithoutRevenueInputSchema).optional()
}).strict();

export const RevenueCreateOrConnectWithoutFeesInputSchema: z.ZodType<Prisma.RevenueCreateOrConnectWithoutFeesInput> = z.object({
  where: z.lazy(() => RevenueWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RevenueCreateWithoutFeesInputSchema),z.lazy(() => RevenueUncheckedCreateWithoutFeesInputSchema) ]),
}).strict();

export const RevenueTaxCreateWithoutRevenueFeeInputSchema: z.ZodType<Prisma.RevenueTaxCreateWithoutRevenueFeeInput> = z.object({
  id: z.string().optional(),
  revenueId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  description: z.string(),
  value: z.number(),
  type: z.lazy(() => RevenueDeductionTypeSchema)
}).strict();

export const RevenueTaxUncheckedCreateWithoutRevenueFeeInputSchema: z.ZodType<Prisma.RevenueTaxUncheckedCreateWithoutRevenueFeeInput> = z.object({
  id: z.string().optional(),
  revenueId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  description: z.string(),
  value: z.number(),
  type: z.lazy(() => RevenueDeductionTypeSchema)
}).strict();

export const RevenueTaxCreateOrConnectWithoutRevenueFeeInputSchema: z.ZodType<Prisma.RevenueTaxCreateOrConnectWithoutRevenueFeeInput> = z.object({
  where: z.lazy(() => RevenueTaxWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RevenueTaxCreateWithoutRevenueFeeInputSchema),z.lazy(() => RevenueTaxUncheckedCreateWithoutRevenueFeeInputSchema) ]),
}).strict();

export const RevenueTaxCreateManyRevenueFeeInputEnvelopeSchema: z.ZodType<Prisma.RevenueTaxCreateManyRevenueFeeInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => RevenueTaxCreateManyRevenueFeeInputSchema),z.lazy(() => RevenueTaxCreateManyRevenueFeeInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const RevenueUpsertWithoutFeesInputSchema: z.ZodType<Prisma.RevenueUpsertWithoutFeesInput> = z.object({
  update: z.union([ z.lazy(() => RevenueUpdateWithoutFeesInputSchema),z.lazy(() => RevenueUncheckedUpdateWithoutFeesInputSchema) ]),
  create: z.union([ z.lazy(() => RevenueCreateWithoutFeesInputSchema),z.lazy(() => RevenueUncheckedCreateWithoutFeesInputSchema) ]),
  where: z.lazy(() => RevenueWhereInputSchema).optional()
}).strict();

export const RevenueUpdateToOneWithWhereWithoutFeesInputSchema: z.ZodType<Prisma.RevenueUpdateToOneWithWhereWithoutFeesInput> = z.object({
  where: z.lazy(() => RevenueWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RevenueUpdateWithoutFeesInputSchema),z.lazy(() => RevenueUncheckedUpdateWithoutFeesInputSchema) ]),
}).strict();

export const RevenueUpdateWithoutFeesInputSchema: z.ZodType<Prisma.RevenueUpdateWithoutFeesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  accommodation: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pmcShare: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  discount: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  channelCommission: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payoutStatus: z.union([ z.lazy(() => RevenuePayoutStatusSchema),z.lazy(() => EnumRevenuePayoutStatusFieldUpdateOperationsInputSchema) ]).optional(),
  reservation: z.lazy(() => ReservationUpdateOneRequiredWithoutRevenueNestedInputSchema).optional(),
  ownerStatement: z.lazy(() => OwnerStatementUpdateOneWithoutRevenueNestedInputSchema).optional(),
  payout: z.lazy(() => RevenuePayoutUpdateManyWithoutRevenueNestedInputSchema).optional()
}).strict();

export const RevenueUncheckedUpdateWithoutFeesInputSchema: z.ZodType<Prisma.RevenueUncheckedUpdateWithoutFeesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  reservationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accommodation: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pmcShare: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  discount: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  channelCommission: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerStatementId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payoutStatus: z.union([ z.lazy(() => RevenuePayoutStatusSchema),z.lazy(() => EnumRevenuePayoutStatusFieldUpdateOperationsInputSchema) ]).optional(),
  payout: z.lazy(() => RevenuePayoutUncheckedUpdateManyWithoutRevenueNestedInputSchema).optional()
}).strict();

export const RevenueTaxUpsertWithWhereUniqueWithoutRevenueFeeInputSchema: z.ZodType<Prisma.RevenueTaxUpsertWithWhereUniqueWithoutRevenueFeeInput> = z.object({
  where: z.lazy(() => RevenueTaxWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => RevenueTaxUpdateWithoutRevenueFeeInputSchema),z.lazy(() => RevenueTaxUncheckedUpdateWithoutRevenueFeeInputSchema) ]),
  create: z.union([ z.lazy(() => RevenueTaxCreateWithoutRevenueFeeInputSchema),z.lazy(() => RevenueTaxUncheckedCreateWithoutRevenueFeeInputSchema) ]),
}).strict();

export const RevenueTaxUpdateWithWhereUniqueWithoutRevenueFeeInputSchema: z.ZodType<Prisma.RevenueTaxUpdateWithWhereUniqueWithoutRevenueFeeInput> = z.object({
  where: z.lazy(() => RevenueTaxWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => RevenueTaxUpdateWithoutRevenueFeeInputSchema),z.lazy(() => RevenueTaxUncheckedUpdateWithoutRevenueFeeInputSchema) ]),
}).strict();

export const RevenueTaxUpdateManyWithWhereWithoutRevenueFeeInputSchema: z.ZodType<Prisma.RevenueTaxUpdateManyWithWhereWithoutRevenueFeeInput> = z.object({
  where: z.lazy(() => RevenueTaxScalarWhereInputSchema),
  data: z.union([ z.lazy(() => RevenueTaxUpdateManyMutationInputSchema),z.lazy(() => RevenueTaxUncheckedUpdateManyWithoutRevenueFeeInputSchema) ]),
}).strict();

export const RevenueTaxScalarWhereInputSchema: z.ZodType<Prisma.RevenueTaxScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RevenueTaxScalarWhereInputSchema),z.lazy(() => RevenueTaxScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RevenueTaxScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RevenueTaxScalarWhereInputSchema),z.lazy(() => RevenueTaxScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  revenueId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  description: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  revenueFeeId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumRevenueDeductionTypeFilterSchema),z.lazy(() => RevenueDeductionTypeSchema) ]).optional(),
}).strict();

export const UserCreateWithoutExpensesInputSchema: z.ZodType<Prisma.UserCreateWithoutExpensesInput> = z.object({
  id: z.string().optional(),
  name: z.string().optional().nullable(),
  email: z.string(),
  emailVerified: z.coerce.date().optional().nullable(),
  image: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  globalRole: z.lazy(() => GlobalRoleSchema).optional(),
  organizationRole: z.lazy(() => OrganizationRoleSchema).optional().nullable(),
  ownerEntity: z.string().optional().nullable(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  managedListings: z.lazy(() => ListingCreateNestedManyWithoutPropertyManagerInputSchema).optional(),
  ownedListings: z.lazy(() => ListingCreateNestedManyWithoutPropertyOwnerInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionCreateNestedOneWithoutOwnerInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemCreateNestedManyWithoutCreatorInputSchema).optional(),
  revenuePayouts: z.lazy(() => RevenuePayoutCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutExpensesInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutExpensesInput> = z.object({
  id: z.string().optional(),
  name: z.string().optional().nullable(),
  email: z.string(),
  emailVerified: z.coerce.date().optional().nullable(),
  image: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  globalRole: z.lazy(() => GlobalRoleSchema).optional(),
  organizationId: z.string().optional().nullable(),
  organizationRole: z.lazy(() => OrganizationRoleSchema).optional().nullable(),
  ownerEntity: z.string().optional().nullable(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  managedListings: z.lazy(() => ListingUncheckedCreateNestedManyWithoutPropertyManagerInputSchema).optional(),
  ownedListings: z.lazy(() => ListingUncheckedCreateNestedManyWithoutPropertyOwnerInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionUncheckedCreateNestedOneWithoutOwnerInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  revenuePayouts: z.lazy(() => RevenuePayoutUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutExpensesInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutExpensesInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutExpensesInputSchema),z.lazy(() => UserUncheckedCreateWithoutExpensesInputSchema) ]),
}).strict();

export const ListingExpenseCreateWithoutExpenseInputSchema: z.ZodType<Prisma.ListingExpenseCreateWithoutExpenseInput> = z.object({
  id: z.string().optional(),
  confirmationCode: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  amount: z.number(),
  amountPaid: z.number(),
  listing: z.lazy(() => ListingCreateNestedOneWithoutListingExpensesInputSchema),
  ownerStatement: z.lazy(() => OwnerStatementCreateNestedOneWithoutListingExpensesInputSchema).optional()
}).strict();

export const ListingExpenseUncheckedCreateWithoutExpenseInputSchema: z.ZodType<Prisma.ListingExpenseUncheckedCreateWithoutExpenseInput> = z.object({
  id: z.string().optional(),
  confirmationCode: z.string().optional().nullable(),
  listingId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  amount: z.number(),
  amountPaid: z.number(),
  ownerStatementId: z.string().optional().nullable()
}).strict();

export const ListingExpenseCreateOrConnectWithoutExpenseInputSchema: z.ZodType<Prisma.ListingExpenseCreateOrConnectWithoutExpenseInput> = z.object({
  where: z.lazy(() => ListingExpenseWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ListingExpenseCreateWithoutExpenseInputSchema),z.lazy(() => ListingExpenseUncheckedCreateWithoutExpenseInputSchema) ]),
}).strict();

export const ListingExpenseCreateManyExpenseInputEnvelopeSchema: z.ZodType<Prisma.ListingExpenseCreateManyExpenseInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ListingExpenseCreateManyExpenseInputSchema),z.lazy(() => ListingExpenseCreateManyExpenseInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const PlaidTransactionCreateWithoutExpenseInputSchema: z.ZodType<Prisma.PlaidTransactionCreateWithoutExpenseInput> = z.object({
  id: z.string().optional(),
  plaidId: z.string(),
  status: z.lazy(() => PlaidImportStatusSchema).optional(),
  date: z.coerce.date(),
  amount: z.number(),
  vendor: z.string(),
  name: z.string(),
  account: z.lazy(() => PlaidAccountCreateNestedOneWithoutTransactionsInputSchema),
  payout: z.lazy(() => PayoutCreateNestedOneWithoutPlaidTransactionInputSchema).optional()
}).strict();

export const PlaidTransactionUncheckedCreateWithoutExpenseInputSchema: z.ZodType<Prisma.PlaidTransactionUncheckedCreateWithoutExpenseInput> = z.object({
  id: z.string().optional(),
  accountId: z.string(),
  plaidId: z.string(),
  status: z.lazy(() => PlaidImportStatusSchema).optional(),
  date: z.coerce.date(),
  amount: z.number(),
  vendor: z.string(),
  name: z.string(),
  payout: z.lazy(() => PayoutUncheckedCreateNestedOneWithoutPlaidTransactionInputSchema).optional()
}).strict();

export const PlaidTransactionCreateOrConnectWithoutExpenseInputSchema: z.ZodType<Prisma.PlaidTransactionCreateOrConnectWithoutExpenseInput> = z.object({
  where: z.lazy(() => PlaidTransactionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PlaidTransactionCreateWithoutExpenseInputSchema),z.lazy(() => PlaidTransactionUncheckedCreateWithoutExpenseInputSchema) ]),
}).strict();

export const UserUpsertWithoutExpensesInputSchema: z.ZodType<Prisma.UserUpsertWithoutExpensesInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutExpensesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutExpensesInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutExpensesInputSchema),z.lazy(() => UserUncheckedCreateWithoutExpensesInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutExpensesInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutExpensesInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutExpensesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutExpensesInputSchema) ]),
}).strict();

export const UserUpdateWithoutExpensesInputSchema: z.ZodType<Prisma.UserUpdateWithoutExpensesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  globalRole: z.union([ z.lazy(() => GlobalRoleSchema),z.lazy(() => EnumGlobalRoleFieldUpdateOperationsInputSchema) ]).optional(),
  organizationRole: z.union([ z.lazy(() => OrganizationRoleSchema),z.lazy(() => NullableEnumOrganizationRoleFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerEntity: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  managedListings: z.lazy(() => ListingUpdateManyWithoutPropertyManagerNestedInputSchema).optional(),
  ownedListings: z.lazy(() => ListingUpdateManyWithoutPropertyOwnerNestedInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionUpdateOneWithoutOwnerNestedInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemUpdateManyWithoutCreatorNestedInputSchema).optional(),
  revenuePayouts: z.lazy(() => RevenuePayoutUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutExpensesInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutExpensesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  globalRole: z.union([ z.lazy(() => GlobalRoleSchema),z.lazy(() => EnumGlobalRoleFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationRole: z.union([ z.lazy(() => OrganizationRoleSchema),z.lazy(() => NullableEnumOrganizationRoleFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerEntity: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  managedListings: z.lazy(() => ListingUncheckedUpdateManyWithoutPropertyManagerNestedInputSchema).optional(),
  ownedListings: z.lazy(() => ListingUncheckedUpdateManyWithoutPropertyOwnerNestedInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionUncheckedUpdateOneWithoutOwnerNestedInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  revenuePayouts: z.lazy(() => RevenuePayoutUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const ListingExpenseUpsertWithWhereUniqueWithoutExpenseInputSchema: z.ZodType<Prisma.ListingExpenseUpsertWithWhereUniqueWithoutExpenseInput> = z.object({
  where: z.lazy(() => ListingExpenseWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ListingExpenseUpdateWithoutExpenseInputSchema),z.lazy(() => ListingExpenseUncheckedUpdateWithoutExpenseInputSchema) ]),
  create: z.union([ z.lazy(() => ListingExpenseCreateWithoutExpenseInputSchema),z.lazy(() => ListingExpenseUncheckedCreateWithoutExpenseInputSchema) ]),
}).strict();

export const ListingExpenseUpdateWithWhereUniqueWithoutExpenseInputSchema: z.ZodType<Prisma.ListingExpenseUpdateWithWhereUniqueWithoutExpenseInput> = z.object({
  where: z.lazy(() => ListingExpenseWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ListingExpenseUpdateWithoutExpenseInputSchema),z.lazy(() => ListingExpenseUncheckedUpdateWithoutExpenseInputSchema) ]),
}).strict();

export const ListingExpenseUpdateManyWithWhereWithoutExpenseInputSchema: z.ZodType<Prisma.ListingExpenseUpdateManyWithWhereWithoutExpenseInput> = z.object({
  where: z.lazy(() => ListingExpenseScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ListingExpenseUpdateManyMutationInputSchema),z.lazy(() => ListingExpenseUncheckedUpdateManyWithoutExpenseInputSchema) ]),
}).strict();

export const PlaidTransactionUpsertWithoutExpenseInputSchema: z.ZodType<Prisma.PlaidTransactionUpsertWithoutExpenseInput> = z.object({
  update: z.union([ z.lazy(() => PlaidTransactionUpdateWithoutExpenseInputSchema),z.lazy(() => PlaidTransactionUncheckedUpdateWithoutExpenseInputSchema) ]),
  create: z.union([ z.lazy(() => PlaidTransactionCreateWithoutExpenseInputSchema),z.lazy(() => PlaidTransactionUncheckedCreateWithoutExpenseInputSchema) ]),
  where: z.lazy(() => PlaidTransactionWhereInputSchema).optional()
}).strict();

export const PlaidTransactionUpdateToOneWithWhereWithoutExpenseInputSchema: z.ZodType<Prisma.PlaidTransactionUpdateToOneWithWhereWithoutExpenseInput> = z.object({
  where: z.lazy(() => PlaidTransactionWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => PlaidTransactionUpdateWithoutExpenseInputSchema),z.lazy(() => PlaidTransactionUncheckedUpdateWithoutExpenseInputSchema) ]),
}).strict();

export const PlaidTransactionUpdateWithoutExpenseInputSchema: z.ZodType<Prisma.PlaidTransactionUpdateWithoutExpenseInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  plaidId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => PlaidImportStatusSchema),z.lazy(() => EnumPlaidImportStatusFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  vendor: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account: z.lazy(() => PlaidAccountUpdateOneRequiredWithoutTransactionsNestedInputSchema).optional(),
  payout: z.lazy(() => PayoutUpdateOneWithoutPlaidTransactionNestedInputSchema).optional()
}).strict();

export const PlaidTransactionUncheckedUpdateWithoutExpenseInputSchema: z.ZodType<Prisma.PlaidTransactionUncheckedUpdateWithoutExpenseInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  plaidId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => PlaidImportStatusSchema),z.lazy(() => EnumPlaidImportStatusFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  vendor: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  payout: z.lazy(() => PayoutUncheckedUpdateOneWithoutPlaidTransactionNestedInputSchema).optional()
}).strict();

export const ExpenseCreateWithoutListingExpensesInputSchema: z.ZodType<Prisma.ExpenseCreateWithoutListingExpensesInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  date: z.coerce.date(),
  amount: z.number(),
  vendor: z.string(),
  description: z.string().optional().nullable(),
  workOrder: z.string().optional().nullable(),
  receiptUrl: z.string().optional().nullable(),
  invoiceUrl: z.string().optional().nullable(),
  user: z.lazy(() => UserCreateNestedOneWithoutExpensesInputSchema).optional(),
  plaidTransaction: z.lazy(() => PlaidTransactionCreateNestedOneWithoutExpenseInputSchema).optional()
}).strict();

export const ExpenseUncheckedCreateWithoutListingExpensesInputSchema: z.ZodType<Prisma.ExpenseUncheckedCreateWithoutListingExpensesInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  date: z.coerce.date(),
  amount: z.number(),
  vendor: z.string(),
  description: z.string().optional().nullable(),
  workOrder: z.string().optional().nullable(),
  receiptUrl: z.string().optional().nullable(),
  invoiceUrl: z.string().optional().nullable(),
  userId: z.string().optional().nullable(),
  plaidTransactionId: z.string().optional().nullable()
}).strict();

export const ExpenseCreateOrConnectWithoutListingExpensesInputSchema: z.ZodType<Prisma.ExpenseCreateOrConnectWithoutListingExpensesInput> = z.object({
  where: z.lazy(() => ExpenseWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ExpenseCreateWithoutListingExpensesInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutListingExpensesInputSchema) ]),
}).strict();

export const ListingCreateWithoutListingExpensesInputSchema: z.ZodType<Prisma.ListingCreateWithoutListingExpensesInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  unitType: z.lazy(() => UnitTypeSchema),
  beds: z.number(),
  baths: z.number(),
  guests: z.number(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  timeZone: z.string(),
  airbnbRemitsTaxes: z.boolean().optional(),
  wifiName: z.string().optional().nullable(),
  wifiPassword: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  bpProductId: z.string().optional().nullable(),
  doorCode: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  basePrice: z.number().optional(),
  iCalKey: z.string().optional().nullable(),
  content: z.lazy(() => ContentCreateNestedOneWithoutListingInputSchema).optional(),
  rules: z.lazy(() => RulesCreateNestedOneWithoutListingInputSchema).optional(),
  pricing: z.lazy(() => PricingCreateNestedOneWithoutListingInputSchema).optional(),
  availability: z.lazy(() => AvailabilityCreateNestedOneWithoutListingInputSchema).optional(),
  amenities: z.lazy(() => AmenityCreateNestedManyWithoutListingInputSchema).optional(),
  fees: z.lazy(() => FeeCreateNestedManyWithoutListingInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesCreateNestedOneWithoutListingInputSchema).optional(),
  events: z.lazy(() => CalendarEventCreateNestedManyWithoutListingInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateCreateNestedManyWithoutListingsInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutListingsInputSchema),
  deductions: z.lazy(() => DeductionsCreateNestedOneWithoutListingInputSchema).optional(),
  propertyManager: z.lazy(() => UserCreateNestedOneWithoutManagedListingsInputSchema),
  propertyOwner: z.lazy(() => UserCreateNestedOneWithoutOwnedListingsInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadCreateNestedManyWithoutListingInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementCreateNestedManyWithoutListingInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateCreateNestedManyWithoutListingInputSchema).optional(),
  keys: z.lazy(() => ListingKeyCreateNestedManyWithoutListingInputSchema).optional()
}).strict();

export const ListingUncheckedCreateWithoutListingExpensesInputSchema: z.ZodType<Prisma.ListingUncheckedCreateWithoutListingExpensesInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  unitType: z.lazy(() => UnitTypeSchema),
  beds: z.number(),
  baths: z.number(),
  guests: z.number(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  timeZone: z.string(),
  airbnbRemitsTaxes: z.boolean().optional(),
  organizationId: z.string(),
  propertyManagerId: z.string(),
  propertyOwnerId: z.string().optional().nullable(),
  wifiName: z.string().optional().nullable(),
  wifiPassword: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  bpProductId: z.string().optional().nullable(),
  doorCode: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  basePrice: z.number().optional(),
  iCalKey: z.string().optional().nullable(),
  content: z.lazy(() => ContentUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  rules: z.lazy(() => RulesUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  pricing: z.lazy(() => PricingUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  amenities: z.lazy(() => AmenityUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  fees: z.lazy(() => FeeUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  events: z.lazy(() => CalendarEventUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUncheckedCreateNestedManyWithoutListingsInputSchema).optional(),
  deductions: z.lazy(() => DeductionsUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  keys: z.lazy(() => ListingKeyUncheckedCreateNestedManyWithoutListingInputSchema).optional()
}).strict();

export const ListingCreateOrConnectWithoutListingExpensesInputSchema: z.ZodType<Prisma.ListingCreateOrConnectWithoutListingExpensesInput> = z.object({
  where: z.lazy(() => ListingWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ListingCreateWithoutListingExpensesInputSchema),z.lazy(() => ListingUncheckedCreateWithoutListingExpensesInputSchema) ]),
}).strict();

export const OwnerStatementCreateWithoutListingExpensesInputSchema: z.ZodType<Prisma.OwnerStatementCreateWithoutListingExpensesInput> = z.object({
  id: z.string().optional(),
  month: z.number(),
  year: z.number(),
  locked: z.boolean().optional(),
  isCoHost: z.boolean().optional(),
  listing: z.lazy(() => ListingCreateNestedOneWithoutOwnerStatementsInputSchema),
  revenue: z.lazy(() => RevenueCreateNestedManyWithoutOwnerStatementInputSchema).optional()
}).strict();

export const OwnerStatementUncheckedCreateWithoutListingExpensesInputSchema: z.ZodType<Prisma.OwnerStatementUncheckedCreateWithoutListingExpensesInput> = z.object({
  id: z.string().optional(),
  listingId: z.string(),
  month: z.number(),
  year: z.number(),
  locked: z.boolean().optional(),
  isCoHost: z.boolean().optional(),
  revenue: z.lazy(() => RevenueUncheckedCreateNestedManyWithoutOwnerStatementInputSchema).optional()
}).strict();

export const OwnerStatementCreateOrConnectWithoutListingExpensesInputSchema: z.ZodType<Prisma.OwnerStatementCreateOrConnectWithoutListingExpensesInput> = z.object({
  where: z.lazy(() => OwnerStatementWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OwnerStatementCreateWithoutListingExpensesInputSchema),z.lazy(() => OwnerStatementUncheckedCreateWithoutListingExpensesInputSchema) ]),
}).strict();

export const ExpenseUpsertWithoutListingExpensesInputSchema: z.ZodType<Prisma.ExpenseUpsertWithoutListingExpensesInput> = z.object({
  update: z.union([ z.lazy(() => ExpenseUpdateWithoutListingExpensesInputSchema),z.lazy(() => ExpenseUncheckedUpdateWithoutListingExpensesInputSchema) ]),
  create: z.union([ z.lazy(() => ExpenseCreateWithoutListingExpensesInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutListingExpensesInputSchema) ]),
  where: z.lazy(() => ExpenseWhereInputSchema).optional()
}).strict();

export const ExpenseUpdateToOneWithWhereWithoutListingExpensesInputSchema: z.ZodType<Prisma.ExpenseUpdateToOneWithWhereWithoutListingExpensesInput> = z.object({
  where: z.lazy(() => ExpenseWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ExpenseUpdateWithoutListingExpensesInputSchema),z.lazy(() => ExpenseUncheckedUpdateWithoutListingExpensesInputSchema) ]),
}).strict();

export const ExpenseUpdateWithoutListingExpensesInputSchema: z.ZodType<Prisma.ExpenseUpdateWithoutListingExpensesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  vendor: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  workOrder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  receiptUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invoiceUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user: z.lazy(() => UserUpdateOneWithoutExpensesNestedInputSchema).optional(),
  plaidTransaction: z.lazy(() => PlaidTransactionUpdateOneWithoutExpenseNestedInputSchema).optional()
}).strict();

export const ExpenseUncheckedUpdateWithoutListingExpensesInputSchema: z.ZodType<Prisma.ExpenseUncheckedUpdateWithoutListingExpensesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  vendor: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  workOrder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  receiptUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invoiceUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  plaidTransactionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ListingUpsertWithoutListingExpensesInputSchema: z.ZodType<Prisma.ListingUpsertWithoutListingExpensesInput> = z.object({
  update: z.union([ z.lazy(() => ListingUpdateWithoutListingExpensesInputSchema),z.lazy(() => ListingUncheckedUpdateWithoutListingExpensesInputSchema) ]),
  create: z.union([ z.lazy(() => ListingCreateWithoutListingExpensesInputSchema),z.lazy(() => ListingUncheckedCreateWithoutListingExpensesInputSchema) ]),
  where: z.lazy(() => ListingWhereInputSchema).optional()
}).strict();

export const ListingUpdateToOneWithWhereWithoutListingExpensesInputSchema: z.ZodType<Prisma.ListingUpdateToOneWithWhereWithoutListingExpensesInput> = z.object({
  where: z.lazy(() => ListingWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ListingUpdateWithoutListingExpensesInputSchema),z.lazy(() => ListingUncheckedUpdateWithoutListingExpensesInputSchema) ]),
}).strict();

export const ListingUpdateWithoutListingExpensesInputSchema: z.ZodType<Prisma.ListingUpdateWithoutListingExpensesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  unitType: z.union([ z.lazy(() => UnitTypeSchema),z.lazy(() => EnumUnitTypeFieldUpdateOperationsInputSchema) ]).optional(),
  beds: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  baths: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  guests: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timeZone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  airbnbRemitsTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  wifiName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiPassword: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bpProductId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doorCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  basePrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  iCalKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  content: z.lazy(() => ContentUpdateOneWithoutListingNestedInputSchema).optional(),
  rules: z.lazy(() => RulesUpdateOneWithoutListingNestedInputSchema).optional(),
  pricing: z.lazy(() => PricingUpdateOneWithoutListingNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUpdateOneWithoutListingNestedInputSchema).optional(),
  amenities: z.lazy(() => AmenityUpdateManyWithoutListingNestedInputSchema).optional(),
  fees: z.lazy(() => FeeUpdateManyWithoutListingNestedInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesUpdateOneWithoutListingNestedInputSchema).optional(),
  events: z.lazy(() => CalendarEventUpdateManyWithoutListingNestedInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUpdateManyWithoutListingsNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutListingsNestedInputSchema).optional(),
  deductions: z.lazy(() => DeductionsUpdateOneWithoutListingNestedInputSchema).optional(),
  propertyManager: z.lazy(() => UserUpdateOneRequiredWithoutManagedListingsNestedInputSchema).optional(),
  propertyOwner: z.lazy(() => UserUpdateOneWithoutOwnedListingsNestedInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUpdateManyWithoutListingNestedInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementUpdateManyWithoutListingNestedInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateUpdateManyWithoutListingNestedInputSchema).optional(),
  keys: z.lazy(() => ListingKeyUpdateManyWithoutListingNestedInputSchema).optional()
}).strict();

export const ListingUncheckedUpdateWithoutListingExpensesInputSchema: z.ZodType<Prisma.ListingUncheckedUpdateWithoutListingExpensesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  unitType: z.union([ z.lazy(() => UnitTypeSchema),z.lazy(() => EnumUnitTypeFieldUpdateOperationsInputSchema) ]).optional(),
  beds: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  baths: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  guests: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timeZone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  airbnbRemitsTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  propertyManagerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  propertyOwnerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiPassword: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bpProductId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doorCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  basePrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  iCalKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  content: z.lazy(() => ContentUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  rules: z.lazy(() => RulesUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  pricing: z.lazy(() => PricingUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  amenities: z.lazy(() => AmenityUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  fees: z.lazy(() => FeeUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  events: z.lazy(() => CalendarEventUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUncheckedUpdateManyWithoutListingsNestedInputSchema).optional(),
  deductions: z.lazy(() => DeductionsUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  keys: z.lazy(() => ListingKeyUncheckedUpdateManyWithoutListingNestedInputSchema).optional()
}).strict();

export const OwnerStatementUpsertWithoutListingExpensesInputSchema: z.ZodType<Prisma.OwnerStatementUpsertWithoutListingExpensesInput> = z.object({
  update: z.union([ z.lazy(() => OwnerStatementUpdateWithoutListingExpensesInputSchema),z.lazy(() => OwnerStatementUncheckedUpdateWithoutListingExpensesInputSchema) ]),
  create: z.union([ z.lazy(() => OwnerStatementCreateWithoutListingExpensesInputSchema),z.lazy(() => OwnerStatementUncheckedCreateWithoutListingExpensesInputSchema) ]),
  where: z.lazy(() => OwnerStatementWhereInputSchema).optional()
}).strict();

export const OwnerStatementUpdateToOneWithWhereWithoutListingExpensesInputSchema: z.ZodType<Prisma.OwnerStatementUpdateToOneWithWhereWithoutListingExpensesInput> = z.object({
  where: z.lazy(() => OwnerStatementWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OwnerStatementUpdateWithoutListingExpensesInputSchema),z.lazy(() => OwnerStatementUncheckedUpdateWithoutListingExpensesInputSchema) ]),
}).strict();

export const OwnerStatementUpdateWithoutListingExpensesInputSchema: z.ZodType<Prisma.OwnerStatementUpdateWithoutListingExpensesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  month: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  locked: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isCoHost: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  listing: z.lazy(() => ListingUpdateOneRequiredWithoutOwnerStatementsNestedInputSchema).optional(),
  revenue: z.lazy(() => RevenueUpdateManyWithoutOwnerStatementNestedInputSchema).optional()
}).strict();

export const OwnerStatementUncheckedUpdateWithoutListingExpensesInputSchema: z.ZodType<Prisma.OwnerStatementUncheckedUpdateWithoutListingExpensesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  listingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  month: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  locked: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isCoHost: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  revenue: z.lazy(() => RevenueUncheckedUpdateManyWithoutOwnerStatementNestedInputSchema).optional()
}).strict();

export const ListingCreateWithoutOwnerStatementsInputSchema: z.ZodType<Prisma.ListingCreateWithoutOwnerStatementsInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  unitType: z.lazy(() => UnitTypeSchema),
  beds: z.number(),
  baths: z.number(),
  guests: z.number(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  timeZone: z.string(),
  airbnbRemitsTaxes: z.boolean().optional(),
  wifiName: z.string().optional().nullable(),
  wifiPassword: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  bpProductId: z.string().optional().nullable(),
  doorCode: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  basePrice: z.number().optional(),
  iCalKey: z.string().optional().nullable(),
  content: z.lazy(() => ContentCreateNestedOneWithoutListingInputSchema).optional(),
  rules: z.lazy(() => RulesCreateNestedOneWithoutListingInputSchema).optional(),
  pricing: z.lazy(() => PricingCreateNestedOneWithoutListingInputSchema).optional(),
  availability: z.lazy(() => AvailabilityCreateNestedOneWithoutListingInputSchema).optional(),
  amenities: z.lazy(() => AmenityCreateNestedManyWithoutListingInputSchema).optional(),
  fees: z.lazy(() => FeeCreateNestedManyWithoutListingInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesCreateNestedOneWithoutListingInputSchema).optional(),
  events: z.lazy(() => CalendarEventCreateNestedManyWithoutListingInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateCreateNestedManyWithoutListingsInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutListingsInputSchema),
  deductions: z.lazy(() => DeductionsCreateNestedOneWithoutListingInputSchema).optional(),
  propertyManager: z.lazy(() => UserCreateNestedOneWithoutManagedListingsInputSchema),
  propertyOwner: z.lazy(() => UserCreateNestedOneWithoutOwnedListingsInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadCreateNestedManyWithoutListingInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseCreateNestedManyWithoutListingInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateCreateNestedManyWithoutListingInputSchema).optional(),
  keys: z.lazy(() => ListingKeyCreateNestedManyWithoutListingInputSchema).optional()
}).strict();

export const ListingUncheckedCreateWithoutOwnerStatementsInputSchema: z.ZodType<Prisma.ListingUncheckedCreateWithoutOwnerStatementsInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  unitType: z.lazy(() => UnitTypeSchema),
  beds: z.number(),
  baths: z.number(),
  guests: z.number(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  timeZone: z.string(),
  airbnbRemitsTaxes: z.boolean().optional(),
  organizationId: z.string(),
  propertyManagerId: z.string(),
  propertyOwnerId: z.string().optional().nullable(),
  wifiName: z.string().optional().nullable(),
  wifiPassword: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  bpProductId: z.string().optional().nullable(),
  doorCode: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  basePrice: z.number().optional(),
  iCalKey: z.string().optional().nullable(),
  content: z.lazy(() => ContentUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  rules: z.lazy(() => RulesUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  pricing: z.lazy(() => PricingUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  amenities: z.lazy(() => AmenityUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  fees: z.lazy(() => FeeUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  events: z.lazy(() => CalendarEventUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUncheckedCreateNestedManyWithoutListingsInputSchema).optional(),
  deductions: z.lazy(() => DeductionsUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  keys: z.lazy(() => ListingKeyUncheckedCreateNestedManyWithoutListingInputSchema).optional()
}).strict();

export const ListingCreateOrConnectWithoutOwnerStatementsInputSchema: z.ZodType<Prisma.ListingCreateOrConnectWithoutOwnerStatementsInput> = z.object({
  where: z.lazy(() => ListingWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ListingCreateWithoutOwnerStatementsInputSchema),z.lazy(() => ListingUncheckedCreateWithoutOwnerStatementsInputSchema) ]),
}).strict();

export const ListingExpenseCreateWithoutOwnerStatementInputSchema: z.ZodType<Prisma.ListingExpenseCreateWithoutOwnerStatementInput> = z.object({
  id: z.string().optional(),
  confirmationCode: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  amount: z.number(),
  amountPaid: z.number(),
  expense: z.lazy(() => ExpenseCreateNestedOneWithoutListingExpensesInputSchema),
  listing: z.lazy(() => ListingCreateNestedOneWithoutListingExpensesInputSchema)
}).strict();

export const ListingExpenseUncheckedCreateWithoutOwnerStatementInputSchema: z.ZodType<Prisma.ListingExpenseUncheckedCreateWithoutOwnerStatementInput> = z.object({
  id: z.string().optional(),
  confirmationCode: z.string().optional().nullable(),
  expenseId: z.string(),
  listingId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  amount: z.number(),
  amountPaid: z.number()
}).strict();

export const ListingExpenseCreateOrConnectWithoutOwnerStatementInputSchema: z.ZodType<Prisma.ListingExpenseCreateOrConnectWithoutOwnerStatementInput> = z.object({
  where: z.lazy(() => ListingExpenseWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ListingExpenseCreateWithoutOwnerStatementInputSchema),z.lazy(() => ListingExpenseUncheckedCreateWithoutOwnerStatementInputSchema) ]),
}).strict();

export const ListingExpenseCreateManyOwnerStatementInputEnvelopeSchema: z.ZodType<Prisma.ListingExpenseCreateManyOwnerStatementInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ListingExpenseCreateManyOwnerStatementInputSchema),z.lazy(() => ListingExpenseCreateManyOwnerStatementInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const RevenueCreateWithoutOwnerStatementInputSchema: z.ZodType<Prisma.RevenueCreateWithoutOwnerStatementInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  accommodation: z.number().optional().nullable(),
  pmcShare: z.number(),
  discount: z.number().optional().nullable(),
  channelCommission: z.number().optional().nullable(),
  payoutStatus: z.lazy(() => RevenuePayoutStatusSchema).optional(),
  reservation: z.lazy(() => ReservationCreateNestedOneWithoutRevenueInputSchema),
  fees: z.lazy(() => RevenueFeeCreateNestedManyWithoutRevenueInputSchema).optional(),
  payout: z.lazy(() => RevenuePayoutCreateNestedManyWithoutRevenueInputSchema).optional()
}).strict();

export const RevenueUncheckedCreateWithoutOwnerStatementInputSchema: z.ZodType<Prisma.RevenueUncheckedCreateWithoutOwnerStatementInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  reservationId: z.string(),
  accommodation: z.number().optional().nullable(),
  pmcShare: z.number(),
  discount: z.number().optional().nullable(),
  channelCommission: z.number().optional().nullable(),
  payoutStatus: z.lazy(() => RevenuePayoutStatusSchema).optional(),
  fees: z.lazy(() => RevenueFeeUncheckedCreateNestedManyWithoutRevenueInputSchema).optional(),
  payout: z.lazy(() => RevenuePayoutUncheckedCreateNestedManyWithoutRevenueInputSchema).optional()
}).strict();

export const RevenueCreateOrConnectWithoutOwnerStatementInputSchema: z.ZodType<Prisma.RevenueCreateOrConnectWithoutOwnerStatementInput> = z.object({
  where: z.lazy(() => RevenueWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RevenueCreateWithoutOwnerStatementInputSchema),z.lazy(() => RevenueUncheckedCreateWithoutOwnerStatementInputSchema) ]),
}).strict();

export const RevenueCreateManyOwnerStatementInputEnvelopeSchema: z.ZodType<Prisma.RevenueCreateManyOwnerStatementInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => RevenueCreateManyOwnerStatementInputSchema),z.lazy(() => RevenueCreateManyOwnerStatementInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ListingUpsertWithoutOwnerStatementsInputSchema: z.ZodType<Prisma.ListingUpsertWithoutOwnerStatementsInput> = z.object({
  update: z.union([ z.lazy(() => ListingUpdateWithoutOwnerStatementsInputSchema),z.lazy(() => ListingUncheckedUpdateWithoutOwnerStatementsInputSchema) ]),
  create: z.union([ z.lazy(() => ListingCreateWithoutOwnerStatementsInputSchema),z.lazy(() => ListingUncheckedCreateWithoutOwnerStatementsInputSchema) ]),
  where: z.lazy(() => ListingWhereInputSchema).optional()
}).strict();

export const ListingUpdateToOneWithWhereWithoutOwnerStatementsInputSchema: z.ZodType<Prisma.ListingUpdateToOneWithWhereWithoutOwnerStatementsInput> = z.object({
  where: z.lazy(() => ListingWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ListingUpdateWithoutOwnerStatementsInputSchema),z.lazy(() => ListingUncheckedUpdateWithoutOwnerStatementsInputSchema) ]),
}).strict();

export const ListingUpdateWithoutOwnerStatementsInputSchema: z.ZodType<Prisma.ListingUpdateWithoutOwnerStatementsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  unitType: z.union([ z.lazy(() => UnitTypeSchema),z.lazy(() => EnumUnitTypeFieldUpdateOperationsInputSchema) ]).optional(),
  beds: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  baths: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  guests: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timeZone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  airbnbRemitsTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  wifiName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiPassword: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bpProductId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doorCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  basePrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  iCalKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  content: z.lazy(() => ContentUpdateOneWithoutListingNestedInputSchema).optional(),
  rules: z.lazy(() => RulesUpdateOneWithoutListingNestedInputSchema).optional(),
  pricing: z.lazy(() => PricingUpdateOneWithoutListingNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUpdateOneWithoutListingNestedInputSchema).optional(),
  amenities: z.lazy(() => AmenityUpdateManyWithoutListingNestedInputSchema).optional(),
  fees: z.lazy(() => FeeUpdateManyWithoutListingNestedInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesUpdateOneWithoutListingNestedInputSchema).optional(),
  events: z.lazy(() => CalendarEventUpdateManyWithoutListingNestedInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUpdateManyWithoutListingsNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutListingsNestedInputSchema).optional(),
  deductions: z.lazy(() => DeductionsUpdateOneWithoutListingNestedInputSchema).optional(),
  propertyManager: z.lazy(() => UserUpdateOneRequiredWithoutManagedListingsNestedInputSchema).optional(),
  propertyOwner: z.lazy(() => UserUpdateOneWithoutOwnedListingsNestedInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUpdateManyWithoutListingNestedInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUpdateManyWithoutListingNestedInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateUpdateManyWithoutListingNestedInputSchema).optional(),
  keys: z.lazy(() => ListingKeyUpdateManyWithoutListingNestedInputSchema).optional()
}).strict();

export const ListingUncheckedUpdateWithoutOwnerStatementsInputSchema: z.ZodType<Prisma.ListingUncheckedUpdateWithoutOwnerStatementsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  unitType: z.union([ z.lazy(() => UnitTypeSchema),z.lazy(() => EnumUnitTypeFieldUpdateOperationsInputSchema) ]).optional(),
  beds: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  baths: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  guests: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timeZone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  airbnbRemitsTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  propertyManagerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  propertyOwnerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiPassword: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bpProductId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doorCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  basePrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  iCalKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  content: z.lazy(() => ContentUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  rules: z.lazy(() => RulesUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  pricing: z.lazy(() => PricingUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  amenities: z.lazy(() => AmenityUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  fees: z.lazy(() => FeeUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  events: z.lazy(() => CalendarEventUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUncheckedUpdateManyWithoutListingsNestedInputSchema).optional(),
  deductions: z.lazy(() => DeductionsUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  keys: z.lazy(() => ListingKeyUncheckedUpdateManyWithoutListingNestedInputSchema).optional()
}).strict();

export const ListingExpenseUpsertWithWhereUniqueWithoutOwnerStatementInputSchema: z.ZodType<Prisma.ListingExpenseUpsertWithWhereUniqueWithoutOwnerStatementInput> = z.object({
  where: z.lazy(() => ListingExpenseWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ListingExpenseUpdateWithoutOwnerStatementInputSchema),z.lazy(() => ListingExpenseUncheckedUpdateWithoutOwnerStatementInputSchema) ]),
  create: z.union([ z.lazy(() => ListingExpenseCreateWithoutOwnerStatementInputSchema),z.lazy(() => ListingExpenseUncheckedCreateWithoutOwnerStatementInputSchema) ]),
}).strict();

export const ListingExpenseUpdateWithWhereUniqueWithoutOwnerStatementInputSchema: z.ZodType<Prisma.ListingExpenseUpdateWithWhereUniqueWithoutOwnerStatementInput> = z.object({
  where: z.lazy(() => ListingExpenseWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ListingExpenseUpdateWithoutOwnerStatementInputSchema),z.lazy(() => ListingExpenseUncheckedUpdateWithoutOwnerStatementInputSchema) ]),
}).strict();

export const ListingExpenseUpdateManyWithWhereWithoutOwnerStatementInputSchema: z.ZodType<Prisma.ListingExpenseUpdateManyWithWhereWithoutOwnerStatementInput> = z.object({
  where: z.lazy(() => ListingExpenseScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ListingExpenseUpdateManyMutationInputSchema),z.lazy(() => ListingExpenseUncheckedUpdateManyWithoutOwnerStatementInputSchema) ]),
}).strict();

export const RevenueUpsertWithWhereUniqueWithoutOwnerStatementInputSchema: z.ZodType<Prisma.RevenueUpsertWithWhereUniqueWithoutOwnerStatementInput> = z.object({
  where: z.lazy(() => RevenueWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => RevenueUpdateWithoutOwnerStatementInputSchema),z.lazy(() => RevenueUncheckedUpdateWithoutOwnerStatementInputSchema) ]),
  create: z.union([ z.lazy(() => RevenueCreateWithoutOwnerStatementInputSchema),z.lazy(() => RevenueUncheckedCreateWithoutOwnerStatementInputSchema) ]),
}).strict();

export const RevenueUpdateWithWhereUniqueWithoutOwnerStatementInputSchema: z.ZodType<Prisma.RevenueUpdateWithWhereUniqueWithoutOwnerStatementInput> = z.object({
  where: z.lazy(() => RevenueWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => RevenueUpdateWithoutOwnerStatementInputSchema),z.lazy(() => RevenueUncheckedUpdateWithoutOwnerStatementInputSchema) ]),
}).strict();

export const RevenueUpdateManyWithWhereWithoutOwnerStatementInputSchema: z.ZodType<Prisma.RevenueUpdateManyWithWhereWithoutOwnerStatementInput> = z.object({
  where: z.lazy(() => RevenueScalarWhereInputSchema),
  data: z.union([ z.lazy(() => RevenueUpdateManyMutationInputSchema),z.lazy(() => RevenueUncheckedUpdateManyWithoutOwnerStatementInputSchema) ]),
}).strict();

export const RevenueScalarWhereInputSchema: z.ZodType<Prisma.RevenueScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RevenueScalarWhereInputSchema),z.lazy(() => RevenueScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RevenueScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RevenueScalarWhereInputSchema),z.lazy(() => RevenueScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  reservationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  accommodation: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  pmcShare: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  discount: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  channelCommission: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  ownerStatementId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  payoutStatus: z.union([ z.lazy(() => EnumRevenuePayoutStatusFilterSchema),z.lazy(() => RevenuePayoutStatusSchema) ]).optional(),
}).strict();

export const UserCreateWithoutPlaidItemsInputSchema: z.ZodType<Prisma.UserCreateWithoutPlaidItemsInput> = z.object({
  id: z.string().optional(),
  name: z.string().optional().nullable(),
  email: z.string(),
  emailVerified: z.coerce.date().optional().nullable(),
  image: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  globalRole: z.lazy(() => GlobalRoleSchema).optional(),
  organizationRole: z.lazy(() => OrganizationRoleSchema).optional().nullable(),
  ownerEntity: z.string().optional().nullable(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  managedListings: z.lazy(() => ListingCreateNestedManyWithoutPropertyManagerInputSchema).optional(),
  ownedListings: z.lazy(() => ListingCreateNestedManyWithoutPropertyOwnerInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutUserInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionCreateNestedOneWithoutOwnerInputSchema).optional(),
  revenuePayouts: z.lazy(() => RevenuePayoutCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutPlaidItemsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutPlaidItemsInput> = z.object({
  id: z.string().optional(),
  name: z.string().optional().nullable(),
  email: z.string(),
  emailVerified: z.coerce.date().optional().nullable(),
  image: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  globalRole: z.lazy(() => GlobalRoleSchema).optional(),
  organizationId: z.string().optional().nullable(),
  organizationRole: z.lazy(() => OrganizationRoleSchema).optional().nullable(),
  ownerEntity: z.string().optional().nullable(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  managedListings: z.lazy(() => ListingUncheckedCreateNestedManyWithoutPropertyManagerInputSchema).optional(),
  ownedListings: z.lazy(() => ListingUncheckedCreateNestedManyWithoutPropertyOwnerInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionUncheckedCreateNestedOneWithoutOwnerInputSchema).optional(),
  revenuePayouts: z.lazy(() => RevenuePayoutUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutPlaidItemsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutPlaidItemsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutPlaidItemsInputSchema),z.lazy(() => UserUncheckedCreateWithoutPlaidItemsInputSchema) ]),
}).strict();

export const OrganizationCreateWithoutPlaidItemsInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutPlaidItemsInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  language: z.string().optional(),
  adminName: z.string(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  website: z.string(),
  phone: z.string(),
  currency: z.string().optional(),
  startDate: z.coerce.date().optional(),
  directBooking: z.boolean().optional(),
  logoUrl: z.string().optional().nullable(),
  users: z.lazy(() => UserCreateNestedManyWithoutOrganizationInputSchema).optional(),
  listings: z.lazy(() => ListingCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionCreateNestedOneWithoutOrganizationInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateCreateNestedManyWithoutOrganizationInputSchema).optional(),
  guests: z.lazy(() => GuestCreateNestedManyWithoutOrganizationInputSchema).optional(),
  priceLabsConnection: z.lazy(() => PriceLabsConnectionCreateNestedOneWithoutOrganizationInputSchema).optional(),
  stripeConnection: z.lazy(() => StripeConnectionCreateNestedOneWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutPlaidItemsInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutPlaidItemsInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  language: z.string().optional(),
  adminName: z.string(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  website: z.string(),
  phone: z.string(),
  currency: z.string().optional(),
  startDate: z.coerce.date().optional(),
  directBooking: z.boolean().optional(),
  logoUrl: z.string().optional().nullable(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  listings: z.lazy(() => ListingUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionUncheckedCreateNestedOneWithoutOrganizationInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  guests: z.lazy(() => GuestUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  priceLabsConnection: z.lazy(() => PriceLabsConnectionUncheckedCreateNestedOneWithoutOrganizationInputSchema).optional(),
  stripeConnection: z.lazy(() => StripeConnectionUncheckedCreateNestedOneWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutPlaidItemsInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutPlaidItemsInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutPlaidItemsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutPlaidItemsInputSchema) ]),
}).strict();

export const PlaidAccountCreateWithoutItemInputSchema: z.ZodType<Prisma.PlaidAccountCreateWithoutItemInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  plaidId: z.string(),
  name: z.string(),
  mask: z.string(),
  type: z.string(),
  subtype: z.string(),
  verificationStatus: z.string().optional().nullable(),
  transactions: z.lazy(() => PlaidTransactionCreateNestedManyWithoutAccountInputSchema).optional()
}).strict();

export const PlaidAccountUncheckedCreateWithoutItemInputSchema: z.ZodType<Prisma.PlaidAccountUncheckedCreateWithoutItemInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  plaidId: z.string(),
  name: z.string(),
  mask: z.string(),
  type: z.string(),
  subtype: z.string(),
  verificationStatus: z.string().optional().nullable(),
  transactions: z.lazy(() => PlaidTransactionUncheckedCreateNestedManyWithoutAccountInputSchema).optional()
}).strict();

export const PlaidAccountCreateOrConnectWithoutItemInputSchema: z.ZodType<Prisma.PlaidAccountCreateOrConnectWithoutItemInput> = z.object({
  where: z.lazy(() => PlaidAccountWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PlaidAccountCreateWithoutItemInputSchema),z.lazy(() => PlaidAccountUncheckedCreateWithoutItemInputSchema) ]),
}).strict();

export const PlaidAccountCreateManyItemInputEnvelopeSchema: z.ZodType<Prisma.PlaidAccountCreateManyItemInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => PlaidAccountCreateManyItemInputSchema),z.lazy(() => PlaidAccountCreateManyItemInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserUpsertWithoutPlaidItemsInputSchema: z.ZodType<Prisma.UserUpsertWithoutPlaidItemsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutPlaidItemsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutPlaidItemsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutPlaidItemsInputSchema),z.lazy(() => UserUncheckedCreateWithoutPlaidItemsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutPlaidItemsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutPlaidItemsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutPlaidItemsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutPlaidItemsInputSchema) ]),
}).strict();

export const UserUpdateWithoutPlaidItemsInputSchema: z.ZodType<Prisma.UserUpdateWithoutPlaidItemsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  globalRole: z.union([ z.lazy(() => GlobalRoleSchema),z.lazy(() => EnumGlobalRoleFieldUpdateOperationsInputSchema) ]).optional(),
  organizationRole: z.union([ z.lazy(() => OrganizationRoleSchema),z.lazy(() => NullableEnumOrganizationRoleFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerEntity: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  managedListings: z.lazy(() => ListingUpdateManyWithoutPropertyManagerNestedInputSchema).optional(),
  ownedListings: z.lazy(() => ListingUpdateManyWithoutPropertyOwnerNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutUserNestedInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionUpdateOneWithoutOwnerNestedInputSchema).optional(),
  revenuePayouts: z.lazy(() => RevenuePayoutUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutPlaidItemsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutPlaidItemsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  globalRole: z.union([ z.lazy(() => GlobalRoleSchema),z.lazy(() => EnumGlobalRoleFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationRole: z.union([ z.lazy(() => OrganizationRoleSchema),z.lazy(() => NullableEnumOrganizationRoleFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerEntity: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  managedListings: z.lazy(() => ListingUncheckedUpdateManyWithoutPropertyManagerNestedInputSchema).optional(),
  ownedListings: z.lazy(() => ListingUncheckedUpdateManyWithoutPropertyOwnerNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionUncheckedUpdateOneWithoutOwnerNestedInputSchema).optional(),
  revenuePayouts: z.lazy(() => RevenuePayoutUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const OrganizationUpsertWithoutPlaidItemsInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutPlaidItemsInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutPlaidItemsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutPlaidItemsInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutPlaidItemsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutPlaidItemsInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutPlaidItemsInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutPlaidItemsInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutPlaidItemsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutPlaidItemsInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutPlaidItemsInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutPlaidItemsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  adminName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  website: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  directBooking: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  logoUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UserUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  listings: z.lazy(() => ListingUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionUpdateOneWithoutOrganizationNestedInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  guests: z.lazy(() => GuestUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  priceLabsConnection: z.lazy(() => PriceLabsConnectionUpdateOneWithoutOrganizationNestedInputSchema).optional(),
  stripeConnection: z.lazy(() => StripeConnectionUpdateOneWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutPlaidItemsInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutPlaidItemsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  adminName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  website: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  directBooking: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  logoUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  listings: z.lazy(() => ListingUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionUncheckedUpdateOneWithoutOrganizationNestedInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  guests: z.lazy(() => GuestUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  priceLabsConnection: z.lazy(() => PriceLabsConnectionUncheckedUpdateOneWithoutOrganizationNestedInputSchema).optional(),
  stripeConnection: z.lazy(() => StripeConnectionUncheckedUpdateOneWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const PlaidAccountUpsertWithWhereUniqueWithoutItemInputSchema: z.ZodType<Prisma.PlaidAccountUpsertWithWhereUniqueWithoutItemInput> = z.object({
  where: z.lazy(() => PlaidAccountWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => PlaidAccountUpdateWithoutItemInputSchema),z.lazy(() => PlaidAccountUncheckedUpdateWithoutItemInputSchema) ]),
  create: z.union([ z.lazy(() => PlaidAccountCreateWithoutItemInputSchema),z.lazy(() => PlaidAccountUncheckedCreateWithoutItemInputSchema) ]),
}).strict();

export const PlaidAccountUpdateWithWhereUniqueWithoutItemInputSchema: z.ZodType<Prisma.PlaidAccountUpdateWithWhereUniqueWithoutItemInput> = z.object({
  where: z.lazy(() => PlaidAccountWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => PlaidAccountUpdateWithoutItemInputSchema),z.lazy(() => PlaidAccountUncheckedUpdateWithoutItemInputSchema) ]),
}).strict();

export const PlaidAccountUpdateManyWithWhereWithoutItemInputSchema: z.ZodType<Prisma.PlaidAccountUpdateManyWithWhereWithoutItemInput> = z.object({
  where: z.lazy(() => PlaidAccountScalarWhereInputSchema),
  data: z.union([ z.lazy(() => PlaidAccountUpdateManyMutationInputSchema),z.lazy(() => PlaidAccountUncheckedUpdateManyWithoutItemInputSchema) ]),
}).strict();

export const PlaidAccountScalarWhereInputSchema: z.ZodType<Prisma.PlaidAccountScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PlaidAccountScalarWhereInputSchema),z.lazy(() => PlaidAccountScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PlaidAccountScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PlaidAccountScalarWhereInputSchema),z.lazy(() => PlaidAccountScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  itemId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  plaidId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  mask: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  subtype: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  verificationStatus: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const PlaidItemCreateWithoutAccountsInputSchema: z.ZodType<Prisma.PlaidItemCreateWithoutAccountsInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  accessToken: z.string(),
  cursor: z.string().optional().nullable(),
  institution: z.string(),
  institutionId: z.string(),
  creator: z.lazy(() => UserCreateNestedOneWithoutPlaidItemsInputSchema),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutPlaidItemsInputSchema)
}).strict();

export const PlaidItemUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.PlaidItemUncheckedCreateWithoutAccountsInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  accessToken: z.string(),
  cursor: z.string().optional().nullable(),
  institution: z.string(),
  institutionId: z.string(),
  creatorId: z.string(),
  organizationId: z.string()
}).strict();

export const PlaidItemCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.PlaidItemCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => PlaidItemWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PlaidItemCreateWithoutAccountsInputSchema),z.lazy(() => PlaidItemUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const PlaidTransactionCreateWithoutAccountInputSchema: z.ZodType<Prisma.PlaidTransactionCreateWithoutAccountInput> = z.object({
  id: z.string().optional(),
  plaidId: z.string(),
  status: z.lazy(() => PlaidImportStatusSchema).optional(),
  date: z.coerce.date(),
  amount: z.number(),
  vendor: z.string(),
  name: z.string(),
  expense: z.lazy(() => ExpenseCreateNestedOneWithoutPlaidTransactionInputSchema).optional(),
  payout: z.lazy(() => PayoutCreateNestedOneWithoutPlaidTransactionInputSchema).optional()
}).strict();

export const PlaidTransactionUncheckedCreateWithoutAccountInputSchema: z.ZodType<Prisma.PlaidTransactionUncheckedCreateWithoutAccountInput> = z.object({
  id: z.string().optional(),
  plaidId: z.string(),
  status: z.lazy(() => PlaidImportStatusSchema).optional(),
  date: z.coerce.date(),
  amount: z.number(),
  vendor: z.string(),
  name: z.string(),
  expense: z.lazy(() => ExpenseUncheckedCreateNestedOneWithoutPlaidTransactionInputSchema).optional(),
  payout: z.lazy(() => PayoutUncheckedCreateNestedOneWithoutPlaidTransactionInputSchema).optional()
}).strict();

export const PlaidTransactionCreateOrConnectWithoutAccountInputSchema: z.ZodType<Prisma.PlaidTransactionCreateOrConnectWithoutAccountInput> = z.object({
  where: z.lazy(() => PlaidTransactionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PlaidTransactionCreateWithoutAccountInputSchema),z.lazy(() => PlaidTransactionUncheckedCreateWithoutAccountInputSchema) ]),
}).strict();

export const PlaidTransactionCreateManyAccountInputEnvelopeSchema: z.ZodType<Prisma.PlaidTransactionCreateManyAccountInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => PlaidTransactionCreateManyAccountInputSchema),z.lazy(() => PlaidTransactionCreateManyAccountInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const PlaidItemUpsertWithoutAccountsInputSchema: z.ZodType<Prisma.PlaidItemUpsertWithoutAccountsInput> = z.object({
  update: z.union([ z.lazy(() => PlaidItemUpdateWithoutAccountsInputSchema),z.lazy(() => PlaidItemUncheckedUpdateWithoutAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => PlaidItemCreateWithoutAccountsInputSchema),z.lazy(() => PlaidItemUncheckedCreateWithoutAccountsInputSchema) ]),
  where: z.lazy(() => PlaidItemWhereInputSchema).optional()
}).strict();

export const PlaidItemUpdateToOneWithWhereWithoutAccountsInputSchema: z.ZodType<Prisma.PlaidItemUpdateToOneWithWhereWithoutAccountsInput> = z.object({
  where: z.lazy(() => PlaidItemWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => PlaidItemUpdateWithoutAccountsInputSchema),z.lazy(() => PlaidItemUncheckedUpdateWithoutAccountsInputSchema) ]),
}).strict();

export const PlaidItemUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.PlaidItemUpdateWithoutAccountsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  accessToken: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cursor: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  institution: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  institutionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  creator: z.lazy(() => UserUpdateOneRequiredWithoutPlaidItemsNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutPlaidItemsNestedInputSchema).optional()
}).strict();

export const PlaidItemUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.PlaidItemUncheckedUpdateWithoutAccountsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  accessToken: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cursor: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  institution: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  institutionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  creatorId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PlaidTransactionUpsertWithWhereUniqueWithoutAccountInputSchema: z.ZodType<Prisma.PlaidTransactionUpsertWithWhereUniqueWithoutAccountInput> = z.object({
  where: z.lazy(() => PlaidTransactionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => PlaidTransactionUpdateWithoutAccountInputSchema),z.lazy(() => PlaidTransactionUncheckedUpdateWithoutAccountInputSchema) ]),
  create: z.union([ z.lazy(() => PlaidTransactionCreateWithoutAccountInputSchema),z.lazy(() => PlaidTransactionUncheckedCreateWithoutAccountInputSchema) ]),
}).strict();

export const PlaidTransactionUpdateWithWhereUniqueWithoutAccountInputSchema: z.ZodType<Prisma.PlaidTransactionUpdateWithWhereUniqueWithoutAccountInput> = z.object({
  where: z.lazy(() => PlaidTransactionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => PlaidTransactionUpdateWithoutAccountInputSchema),z.lazy(() => PlaidTransactionUncheckedUpdateWithoutAccountInputSchema) ]),
}).strict();

export const PlaidTransactionUpdateManyWithWhereWithoutAccountInputSchema: z.ZodType<Prisma.PlaidTransactionUpdateManyWithWhereWithoutAccountInput> = z.object({
  where: z.lazy(() => PlaidTransactionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => PlaidTransactionUpdateManyMutationInputSchema),z.lazy(() => PlaidTransactionUncheckedUpdateManyWithoutAccountInputSchema) ]),
}).strict();

export const PlaidTransactionScalarWhereInputSchema: z.ZodType<Prisma.PlaidTransactionScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PlaidTransactionScalarWhereInputSchema),z.lazy(() => PlaidTransactionScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PlaidTransactionScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PlaidTransactionScalarWhereInputSchema),z.lazy(() => PlaidTransactionScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  accountId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  plaidId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => EnumPlaidImportStatusFilterSchema),z.lazy(() => PlaidImportStatusSchema) ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  amount: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  vendor: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const PlaidAccountCreateWithoutTransactionsInputSchema: z.ZodType<Prisma.PlaidAccountCreateWithoutTransactionsInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  plaidId: z.string(),
  name: z.string(),
  mask: z.string(),
  type: z.string(),
  subtype: z.string(),
  verificationStatus: z.string().optional().nullable(),
  item: z.lazy(() => PlaidItemCreateNestedOneWithoutAccountsInputSchema)
}).strict();

export const PlaidAccountUncheckedCreateWithoutTransactionsInputSchema: z.ZodType<Prisma.PlaidAccountUncheckedCreateWithoutTransactionsInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  itemId: z.string(),
  plaidId: z.string(),
  name: z.string(),
  mask: z.string(),
  type: z.string(),
  subtype: z.string(),
  verificationStatus: z.string().optional().nullable()
}).strict();

export const PlaidAccountCreateOrConnectWithoutTransactionsInputSchema: z.ZodType<Prisma.PlaidAccountCreateOrConnectWithoutTransactionsInput> = z.object({
  where: z.lazy(() => PlaidAccountWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PlaidAccountCreateWithoutTransactionsInputSchema),z.lazy(() => PlaidAccountUncheckedCreateWithoutTransactionsInputSchema) ]),
}).strict();

export const ExpenseCreateWithoutPlaidTransactionInputSchema: z.ZodType<Prisma.ExpenseCreateWithoutPlaidTransactionInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  date: z.coerce.date(),
  amount: z.number(),
  vendor: z.string(),
  description: z.string().optional().nullable(),
  workOrder: z.string().optional().nullable(),
  receiptUrl: z.string().optional().nullable(),
  invoiceUrl: z.string().optional().nullable(),
  user: z.lazy(() => UserCreateNestedOneWithoutExpensesInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseCreateNestedManyWithoutExpenseInputSchema).optional()
}).strict();

export const ExpenseUncheckedCreateWithoutPlaidTransactionInputSchema: z.ZodType<Prisma.ExpenseUncheckedCreateWithoutPlaidTransactionInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  date: z.coerce.date(),
  amount: z.number(),
  vendor: z.string(),
  description: z.string().optional().nullable(),
  workOrder: z.string().optional().nullable(),
  receiptUrl: z.string().optional().nullable(),
  invoiceUrl: z.string().optional().nullable(),
  userId: z.string().optional().nullable(),
  listingExpenses: z.lazy(() => ListingExpenseUncheckedCreateNestedManyWithoutExpenseInputSchema).optional()
}).strict();

export const ExpenseCreateOrConnectWithoutPlaidTransactionInputSchema: z.ZodType<Prisma.ExpenseCreateOrConnectWithoutPlaidTransactionInput> = z.object({
  where: z.lazy(() => ExpenseWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ExpenseCreateWithoutPlaidTransactionInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutPlaidTransactionInputSchema) ]),
}).strict();

export const PayoutCreateWithoutPlaidTransactionInputSchema: z.ZodType<Prisma.PayoutCreateWithoutPlaidTransactionInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  date: z.coerce.date(),
  amount: z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  allocated: z.boolean().optional(),
  revenuePayout: z.lazy(() => RevenuePayoutCreateNestedManyWithoutPayoutInputSchema).optional()
}).strict();

export const PayoutUncheckedCreateWithoutPlaidTransactionInputSchema: z.ZodType<Prisma.PayoutUncheckedCreateWithoutPlaidTransactionInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  date: z.coerce.date(),
  amount: z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  allocated: z.boolean().optional(),
  revenuePayout: z.lazy(() => RevenuePayoutUncheckedCreateNestedManyWithoutPayoutInputSchema).optional()
}).strict();

export const PayoutCreateOrConnectWithoutPlaidTransactionInputSchema: z.ZodType<Prisma.PayoutCreateOrConnectWithoutPlaidTransactionInput> = z.object({
  where: z.lazy(() => PayoutWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PayoutCreateWithoutPlaidTransactionInputSchema),z.lazy(() => PayoutUncheckedCreateWithoutPlaidTransactionInputSchema) ]),
}).strict();

export const PlaidAccountUpsertWithoutTransactionsInputSchema: z.ZodType<Prisma.PlaidAccountUpsertWithoutTransactionsInput> = z.object({
  update: z.union([ z.lazy(() => PlaidAccountUpdateWithoutTransactionsInputSchema),z.lazy(() => PlaidAccountUncheckedUpdateWithoutTransactionsInputSchema) ]),
  create: z.union([ z.lazy(() => PlaidAccountCreateWithoutTransactionsInputSchema),z.lazy(() => PlaidAccountUncheckedCreateWithoutTransactionsInputSchema) ]),
  where: z.lazy(() => PlaidAccountWhereInputSchema).optional()
}).strict();

export const PlaidAccountUpdateToOneWithWhereWithoutTransactionsInputSchema: z.ZodType<Prisma.PlaidAccountUpdateToOneWithWhereWithoutTransactionsInput> = z.object({
  where: z.lazy(() => PlaidAccountWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => PlaidAccountUpdateWithoutTransactionsInputSchema),z.lazy(() => PlaidAccountUncheckedUpdateWithoutTransactionsInputSchema) ]),
}).strict();

export const PlaidAccountUpdateWithoutTransactionsInputSchema: z.ZodType<Prisma.PlaidAccountUpdateWithoutTransactionsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  plaidId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mask: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subtype: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  verificationStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  item: z.lazy(() => PlaidItemUpdateOneRequiredWithoutAccountsNestedInputSchema).optional()
}).strict();

export const PlaidAccountUncheckedUpdateWithoutTransactionsInputSchema: z.ZodType<Prisma.PlaidAccountUncheckedUpdateWithoutTransactionsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  itemId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  plaidId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mask: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subtype: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  verificationStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ExpenseUpsertWithoutPlaidTransactionInputSchema: z.ZodType<Prisma.ExpenseUpsertWithoutPlaidTransactionInput> = z.object({
  update: z.union([ z.lazy(() => ExpenseUpdateWithoutPlaidTransactionInputSchema),z.lazy(() => ExpenseUncheckedUpdateWithoutPlaidTransactionInputSchema) ]),
  create: z.union([ z.lazy(() => ExpenseCreateWithoutPlaidTransactionInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutPlaidTransactionInputSchema) ]),
  where: z.lazy(() => ExpenseWhereInputSchema).optional()
}).strict();

export const ExpenseUpdateToOneWithWhereWithoutPlaidTransactionInputSchema: z.ZodType<Prisma.ExpenseUpdateToOneWithWhereWithoutPlaidTransactionInput> = z.object({
  where: z.lazy(() => ExpenseWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ExpenseUpdateWithoutPlaidTransactionInputSchema),z.lazy(() => ExpenseUncheckedUpdateWithoutPlaidTransactionInputSchema) ]),
}).strict();

export const ExpenseUpdateWithoutPlaidTransactionInputSchema: z.ZodType<Prisma.ExpenseUpdateWithoutPlaidTransactionInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  vendor: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  workOrder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  receiptUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invoiceUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user: z.lazy(() => UserUpdateOneWithoutExpensesNestedInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUpdateManyWithoutExpenseNestedInputSchema).optional()
}).strict();

export const ExpenseUncheckedUpdateWithoutPlaidTransactionInputSchema: z.ZodType<Prisma.ExpenseUncheckedUpdateWithoutPlaidTransactionInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  vendor: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  workOrder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  receiptUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invoiceUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  listingExpenses: z.lazy(() => ListingExpenseUncheckedUpdateManyWithoutExpenseNestedInputSchema).optional()
}).strict();

export const PayoutUpsertWithoutPlaidTransactionInputSchema: z.ZodType<Prisma.PayoutUpsertWithoutPlaidTransactionInput> = z.object({
  update: z.union([ z.lazy(() => PayoutUpdateWithoutPlaidTransactionInputSchema),z.lazy(() => PayoutUncheckedUpdateWithoutPlaidTransactionInputSchema) ]),
  create: z.union([ z.lazy(() => PayoutCreateWithoutPlaidTransactionInputSchema),z.lazy(() => PayoutUncheckedCreateWithoutPlaidTransactionInputSchema) ]),
  where: z.lazy(() => PayoutWhereInputSchema).optional()
}).strict();

export const PayoutUpdateToOneWithWhereWithoutPlaidTransactionInputSchema: z.ZodType<Prisma.PayoutUpdateToOneWithWhereWithoutPlaidTransactionInput> = z.object({
  where: z.lazy(() => PayoutWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => PayoutUpdateWithoutPlaidTransactionInputSchema),z.lazy(() => PayoutUncheckedUpdateWithoutPlaidTransactionInputSchema) ]),
}).strict();

export const PayoutUpdateWithoutPlaidTransactionInputSchema: z.ZodType<Prisma.PayoutUpdateWithoutPlaidTransactionInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  allocated: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  revenuePayout: z.lazy(() => RevenuePayoutUpdateManyWithoutPayoutNestedInputSchema).optional()
}).strict();

export const PayoutUncheckedUpdateWithoutPlaidTransactionInputSchema: z.ZodType<Prisma.PayoutUncheckedUpdateWithoutPlaidTransactionInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  allocated: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  revenuePayout: z.lazy(() => RevenuePayoutUncheckedUpdateManyWithoutPayoutNestedInputSchema).optional()
}).strict();

export const ListingCreateWithoutDailyRatesInputSchema: z.ZodType<Prisma.ListingCreateWithoutDailyRatesInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  unitType: z.lazy(() => UnitTypeSchema),
  beds: z.number(),
  baths: z.number(),
  guests: z.number(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  timeZone: z.string(),
  airbnbRemitsTaxes: z.boolean().optional(),
  wifiName: z.string().optional().nullable(),
  wifiPassword: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  bpProductId: z.string().optional().nullable(),
  doorCode: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  basePrice: z.number().optional(),
  iCalKey: z.string().optional().nullable(),
  content: z.lazy(() => ContentCreateNestedOneWithoutListingInputSchema).optional(),
  rules: z.lazy(() => RulesCreateNestedOneWithoutListingInputSchema).optional(),
  pricing: z.lazy(() => PricingCreateNestedOneWithoutListingInputSchema).optional(),
  availability: z.lazy(() => AvailabilityCreateNestedOneWithoutListingInputSchema).optional(),
  amenities: z.lazy(() => AmenityCreateNestedManyWithoutListingInputSchema).optional(),
  fees: z.lazy(() => FeeCreateNestedManyWithoutListingInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesCreateNestedOneWithoutListingInputSchema).optional(),
  events: z.lazy(() => CalendarEventCreateNestedManyWithoutListingInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateCreateNestedManyWithoutListingsInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutListingsInputSchema),
  deductions: z.lazy(() => DeductionsCreateNestedOneWithoutListingInputSchema).optional(),
  propertyManager: z.lazy(() => UserCreateNestedOneWithoutManagedListingsInputSchema),
  propertyOwner: z.lazy(() => UserCreateNestedOneWithoutOwnedListingsInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadCreateNestedManyWithoutListingInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseCreateNestedManyWithoutListingInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementCreateNestedManyWithoutListingInputSchema).optional(),
  keys: z.lazy(() => ListingKeyCreateNestedManyWithoutListingInputSchema).optional()
}).strict();

export const ListingUncheckedCreateWithoutDailyRatesInputSchema: z.ZodType<Prisma.ListingUncheckedCreateWithoutDailyRatesInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  unitType: z.lazy(() => UnitTypeSchema),
  beds: z.number(),
  baths: z.number(),
  guests: z.number(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  timeZone: z.string(),
  airbnbRemitsTaxes: z.boolean().optional(),
  organizationId: z.string(),
  propertyManagerId: z.string(),
  propertyOwnerId: z.string().optional().nullable(),
  wifiName: z.string().optional().nullable(),
  wifiPassword: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  bpProductId: z.string().optional().nullable(),
  doorCode: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  basePrice: z.number().optional(),
  iCalKey: z.string().optional().nullable(),
  content: z.lazy(() => ContentUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  rules: z.lazy(() => RulesUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  pricing: z.lazy(() => PricingUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  amenities: z.lazy(() => AmenityUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  fees: z.lazy(() => FeeUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  events: z.lazy(() => CalendarEventUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUncheckedCreateNestedManyWithoutListingsInputSchema).optional(),
  deductions: z.lazy(() => DeductionsUncheckedCreateNestedOneWithoutListingInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementUncheckedCreateNestedManyWithoutListingInputSchema).optional(),
  keys: z.lazy(() => ListingKeyUncheckedCreateNestedManyWithoutListingInputSchema).optional()
}).strict();

export const ListingCreateOrConnectWithoutDailyRatesInputSchema: z.ZodType<Prisma.ListingCreateOrConnectWithoutDailyRatesInput> = z.object({
  where: z.lazy(() => ListingWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ListingCreateWithoutDailyRatesInputSchema),z.lazy(() => ListingUncheckedCreateWithoutDailyRatesInputSchema) ]),
}).strict();

export const ListingUpsertWithoutDailyRatesInputSchema: z.ZodType<Prisma.ListingUpsertWithoutDailyRatesInput> = z.object({
  update: z.union([ z.lazy(() => ListingUpdateWithoutDailyRatesInputSchema),z.lazy(() => ListingUncheckedUpdateWithoutDailyRatesInputSchema) ]),
  create: z.union([ z.lazy(() => ListingCreateWithoutDailyRatesInputSchema),z.lazy(() => ListingUncheckedCreateWithoutDailyRatesInputSchema) ]),
  where: z.lazy(() => ListingWhereInputSchema).optional()
}).strict();

export const ListingUpdateToOneWithWhereWithoutDailyRatesInputSchema: z.ZodType<Prisma.ListingUpdateToOneWithWhereWithoutDailyRatesInput> = z.object({
  where: z.lazy(() => ListingWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ListingUpdateWithoutDailyRatesInputSchema),z.lazy(() => ListingUncheckedUpdateWithoutDailyRatesInputSchema) ]),
}).strict();

export const ListingUpdateWithoutDailyRatesInputSchema: z.ZodType<Prisma.ListingUpdateWithoutDailyRatesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  unitType: z.union([ z.lazy(() => UnitTypeSchema),z.lazy(() => EnumUnitTypeFieldUpdateOperationsInputSchema) ]).optional(),
  beds: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  baths: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  guests: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timeZone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  airbnbRemitsTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  wifiName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiPassword: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bpProductId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doorCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  basePrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  iCalKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  content: z.lazy(() => ContentUpdateOneWithoutListingNestedInputSchema).optional(),
  rules: z.lazy(() => RulesUpdateOneWithoutListingNestedInputSchema).optional(),
  pricing: z.lazy(() => PricingUpdateOneWithoutListingNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUpdateOneWithoutListingNestedInputSchema).optional(),
  amenities: z.lazy(() => AmenityUpdateManyWithoutListingNestedInputSchema).optional(),
  fees: z.lazy(() => FeeUpdateManyWithoutListingNestedInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesUpdateOneWithoutListingNestedInputSchema).optional(),
  events: z.lazy(() => CalendarEventUpdateManyWithoutListingNestedInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUpdateManyWithoutListingsNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutListingsNestedInputSchema).optional(),
  deductions: z.lazy(() => DeductionsUpdateOneWithoutListingNestedInputSchema).optional(),
  propertyManager: z.lazy(() => UserUpdateOneRequiredWithoutManagedListingsNestedInputSchema).optional(),
  propertyOwner: z.lazy(() => UserUpdateOneWithoutOwnedListingsNestedInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUpdateManyWithoutListingNestedInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUpdateManyWithoutListingNestedInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementUpdateManyWithoutListingNestedInputSchema).optional(),
  keys: z.lazy(() => ListingKeyUpdateManyWithoutListingNestedInputSchema).optional()
}).strict();

export const ListingUncheckedUpdateWithoutDailyRatesInputSchema: z.ZodType<Prisma.ListingUncheckedUpdateWithoutDailyRatesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  unitType: z.union([ z.lazy(() => UnitTypeSchema),z.lazy(() => EnumUnitTypeFieldUpdateOperationsInputSchema) ]).optional(),
  beds: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  baths: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  guests: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timeZone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  airbnbRemitsTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  propertyManagerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  propertyOwnerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiPassword: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bpProductId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doorCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  basePrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  iCalKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  content: z.lazy(() => ContentUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  rules: z.lazy(() => RulesUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  pricing: z.lazy(() => PricingUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  amenities: z.lazy(() => AmenityUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  fees: z.lazy(() => FeeUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  events: z.lazy(() => CalendarEventUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUncheckedUpdateManyWithoutListingsNestedInputSchema).optional(),
  deductions: z.lazy(() => DeductionsUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  keys: z.lazy(() => ListingKeyUncheckedUpdateManyWithoutListingNestedInputSchema).optional()
}).strict();

export const PlaidTransactionCreateWithoutPayoutInputSchema: z.ZodType<Prisma.PlaidTransactionCreateWithoutPayoutInput> = z.object({
  id: z.string().optional(),
  plaidId: z.string(),
  status: z.lazy(() => PlaidImportStatusSchema).optional(),
  date: z.coerce.date(),
  amount: z.number(),
  vendor: z.string(),
  name: z.string(),
  account: z.lazy(() => PlaidAccountCreateNestedOneWithoutTransactionsInputSchema),
  expense: z.lazy(() => ExpenseCreateNestedOneWithoutPlaidTransactionInputSchema).optional()
}).strict();

export const PlaidTransactionUncheckedCreateWithoutPayoutInputSchema: z.ZodType<Prisma.PlaidTransactionUncheckedCreateWithoutPayoutInput> = z.object({
  id: z.string().optional(),
  accountId: z.string(),
  plaidId: z.string(),
  status: z.lazy(() => PlaidImportStatusSchema).optional(),
  date: z.coerce.date(),
  amount: z.number(),
  vendor: z.string(),
  name: z.string(),
  expense: z.lazy(() => ExpenseUncheckedCreateNestedOneWithoutPlaidTransactionInputSchema).optional()
}).strict();

export const PlaidTransactionCreateOrConnectWithoutPayoutInputSchema: z.ZodType<Prisma.PlaidTransactionCreateOrConnectWithoutPayoutInput> = z.object({
  where: z.lazy(() => PlaidTransactionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PlaidTransactionCreateWithoutPayoutInputSchema),z.lazy(() => PlaidTransactionUncheckedCreateWithoutPayoutInputSchema) ]),
}).strict();

export const RevenuePayoutCreateWithoutPayoutInputSchema: z.ZodType<Prisma.RevenuePayoutCreateWithoutPayoutInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  amount: z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutRevenuePayoutsInputSchema).optional(),
  revenue: z.lazy(() => RevenueCreateNestedOneWithoutPayoutInputSchema)
}).strict();

export const RevenuePayoutUncheckedCreateWithoutPayoutInputSchema: z.ZodType<Prisma.RevenuePayoutUncheckedCreateWithoutPayoutInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdById: z.string().optional().nullable(),
  revenueId: z.string(),
  amount: z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
}).strict();

export const RevenuePayoutCreateOrConnectWithoutPayoutInputSchema: z.ZodType<Prisma.RevenuePayoutCreateOrConnectWithoutPayoutInput> = z.object({
  where: z.lazy(() => RevenuePayoutWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RevenuePayoutCreateWithoutPayoutInputSchema),z.lazy(() => RevenuePayoutUncheckedCreateWithoutPayoutInputSchema) ]),
}).strict();

export const RevenuePayoutCreateManyPayoutInputEnvelopeSchema: z.ZodType<Prisma.RevenuePayoutCreateManyPayoutInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => RevenuePayoutCreateManyPayoutInputSchema),z.lazy(() => RevenuePayoutCreateManyPayoutInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const PlaidTransactionUpsertWithoutPayoutInputSchema: z.ZodType<Prisma.PlaidTransactionUpsertWithoutPayoutInput> = z.object({
  update: z.union([ z.lazy(() => PlaidTransactionUpdateWithoutPayoutInputSchema),z.lazy(() => PlaidTransactionUncheckedUpdateWithoutPayoutInputSchema) ]),
  create: z.union([ z.lazy(() => PlaidTransactionCreateWithoutPayoutInputSchema),z.lazy(() => PlaidTransactionUncheckedCreateWithoutPayoutInputSchema) ]),
  where: z.lazy(() => PlaidTransactionWhereInputSchema).optional()
}).strict();

export const PlaidTransactionUpdateToOneWithWhereWithoutPayoutInputSchema: z.ZodType<Prisma.PlaidTransactionUpdateToOneWithWhereWithoutPayoutInput> = z.object({
  where: z.lazy(() => PlaidTransactionWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => PlaidTransactionUpdateWithoutPayoutInputSchema),z.lazy(() => PlaidTransactionUncheckedUpdateWithoutPayoutInputSchema) ]),
}).strict();

export const PlaidTransactionUpdateWithoutPayoutInputSchema: z.ZodType<Prisma.PlaidTransactionUpdateWithoutPayoutInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  plaidId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => PlaidImportStatusSchema),z.lazy(() => EnumPlaidImportStatusFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  vendor: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account: z.lazy(() => PlaidAccountUpdateOneRequiredWithoutTransactionsNestedInputSchema).optional(),
  expense: z.lazy(() => ExpenseUpdateOneWithoutPlaidTransactionNestedInputSchema).optional()
}).strict();

export const PlaidTransactionUncheckedUpdateWithoutPayoutInputSchema: z.ZodType<Prisma.PlaidTransactionUncheckedUpdateWithoutPayoutInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  plaidId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => PlaidImportStatusSchema),z.lazy(() => EnumPlaidImportStatusFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  vendor: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expense: z.lazy(() => ExpenseUncheckedUpdateOneWithoutPlaidTransactionNestedInputSchema).optional()
}).strict();

export const RevenuePayoutUpsertWithWhereUniqueWithoutPayoutInputSchema: z.ZodType<Prisma.RevenuePayoutUpsertWithWhereUniqueWithoutPayoutInput> = z.object({
  where: z.lazy(() => RevenuePayoutWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => RevenuePayoutUpdateWithoutPayoutInputSchema),z.lazy(() => RevenuePayoutUncheckedUpdateWithoutPayoutInputSchema) ]),
  create: z.union([ z.lazy(() => RevenuePayoutCreateWithoutPayoutInputSchema),z.lazy(() => RevenuePayoutUncheckedCreateWithoutPayoutInputSchema) ]),
}).strict();

export const RevenuePayoutUpdateWithWhereUniqueWithoutPayoutInputSchema: z.ZodType<Prisma.RevenuePayoutUpdateWithWhereUniqueWithoutPayoutInput> = z.object({
  where: z.lazy(() => RevenuePayoutWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => RevenuePayoutUpdateWithoutPayoutInputSchema),z.lazy(() => RevenuePayoutUncheckedUpdateWithoutPayoutInputSchema) ]),
}).strict();

export const RevenuePayoutUpdateManyWithWhereWithoutPayoutInputSchema: z.ZodType<Prisma.RevenuePayoutUpdateManyWithWhereWithoutPayoutInput> = z.object({
  where: z.lazy(() => RevenuePayoutScalarWhereInputSchema),
  data: z.union([ z.lazy(() => RevenuePayoutUpdateManyMutationInputSchema),z.lazy(() => RevenuePayoutUncheckedUpdateManyWithoutPayoutInputSchema) ]),
}).strict();

export const UserCreateWithoutRevenuePayoutsInputSchema: z.ZodType<Prisma.UserCreateWithoutRevenuePayoutsInput> = z.object({
  id: z.string().optional(),
  name: z.string().optional().nullable(),
  email: z.string(),
  emailVerified: z.coerce.date().optional().nullable(),
  image: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  globalRole: z.lazy(() => GlobalRoleSchema).optional(),
  organizationRole: z.lazy(() => OrganizationRoleSchema).optional().nullable(),
  ownerEntity: z.string().optional().nullable(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  managedListings: z.lazy(() => ListingCreateNestedManyWithoutPropertyManagerInputSchema).optional(),
  ownedListings: z.lazy(() => ListingCreateNestedManyWithoutPropertyOwnerInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutUserInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionCreateNestedOneWithoutOwnerInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemCreateNestedManyWithoutCreatorInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutRevenuePayoutsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutRevenuePayoutsInput> = z.object({
  id: z.string().optional(),
  name: z.string().optional().nullable(),
  email: z.string(),
  emailVerified: z.coerce.date().optional().nullable(),
  image: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  globalRole: z.lazy(() => GlobalRoleSchema).optional(),
  organizationId: z.string().optional().nullable(),
  organizationRole: z.lazy(() => OrganizationRoleSchema).optional().nullable(),
  ownerEntity: z.string().optional().nullable(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  managedListings: z.lazy(() => ListingUncheckedCreateNestedManyWithoutPropertyManagerInputSchema).optional(),
  ownedListings: z.lazy(() => ListingUncheckedCreateNestedManyWithoutPropertyOwnerInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionUncheckedCreateNestedOneWithoutOwnerInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemUncheckedCreateNestedManyWithoutCreatorInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutRevenuePayoutsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutRevenuePayoutsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutRevenuePayoutsInputSchema),z.lazy(() => UserUncheckedCreateWithoutRevenuePayoutsInputSchema) ]),
}).strict();

export const PayoutCreateWithoutRevenuePayoutInputSchema: z.ZodType<Prisma.PayoutCreateWithoutRevenuePayoutInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  date: z.coerce.date(),
  amount: z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  allocated: z.boolean().optional(),
  plaidTransaction: z.lazy(() => PlaidTransactionCreateNestedOneWithoutPayoutInputSchema).optional()
}).strict();

export const PayoutUncheckedCreateWithoutRevenuePayoutInputSchema: z.ZodType<Prisma.PayoutUncheckedCreateWithoutRevenuePayoutInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  date: z.coerce.date(),
  amount: z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  allocated: z.boolean().optional(),
  plaidTransactionId: z.string().optional().nullable()
}).strict();

export const PayoutCreateOrConnectWithoutRevenuePayoutInputSchema: z.ZodType<Prisma.PayoutCreateOrConnectWithoutRevenuePayoutInput> = z.object({
  where: z.lazy(() => PayoutWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PayoutCreateWithoutRevenuePayoutInputSchema),z.lazy(() => PayoutUncheckedCreateWithoutRevenuePayoutInputSchema) ]),
}).strict();

export const RevenueCreateWithoutPayoutInputSchema: z.ZodType<Prisma.RevenueCreateWithoutPayoutInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  accommodation: z.number().optional().nullable(),
  pmcShare: z.number(),
  discount: z.number().optional().nullable(),
  channelCommission: z.number().optional().nullable(),
  payoutStatus: z.lazy(() => RevenuePayoutStatusSchema).optional(),
  reservation: z.lazy(() => ReservationCreateNestedOneWithoutRevenueInputSchema),
  fees: z.lazy(() => RevenueFeeCreateNestedManyWithoutRevenueInputSchema).optional(),
  ownerStatement: z.lazy(() => OwnerStatementCreateNestedOneWithoutRevenueInputSchema).optional()
}).strict();

export const RevenueUncheckedCreateWithoutPayoutInputSchema: z.ZodType<Prisma.RevenueUncheckedCreateWithoutPayoutInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  reservationId: z.string(),
  accommodation: z.number().optional().nullable(),
  pmcShare: z.number(),
  discount: z.number().optional().nullable(),
  channelCommission: z.number().optional().nullable(),
  ownerStatementId: z.string().optional().nullable(),
  payoutStatus: z.lazy(() => RevenuePayoutStatusSchema).optional(),
  fees: z.lazy(() => RevenueFeeUncheckedCreateNestedManyWithoutRevenueInputSchema).optional()
}).strict();

export const RevenueCreateOrConnectWithoutPayoutInputSchema: z.ZodType<Prisma.RevenueCreateOrConnectWithoutPayoutInput> = z.object({
  where: z.lazy(() => RevenueWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RevenueCreateWithoutPayoutInputSchema),z.lazy(() => RevenueUncheckedCreateWithoutPayoutInputSchema) ]),
}).strict();

export const UserUpsertWithoutRevenuePayoutsInputSchema: z.ZodType<Prisma.UserUpsertWithoutRevenuePayoutsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutRevenuePayoutsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutRevenuePayoutsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutRevenuePayoutsInputSchema),z.lazy(() => UserUncheckedCreateWithoutRevenuePayoutsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutRevenuePayoutsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutRevenuePayoutsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutRevenuePayoutsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutRevenuePayoutsInputSchema) ]),
}).strict();

export const UserUpdateWithoutRevenuePayoutsInputSchema: z.ZodType<Prisma.UserUpdateWithoutRevenuePayoutsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  globalRole: z.union([ z.lazy(() => GlobalRoleSchema),z.lazy(() => EnumGlobalRoleFieldUpdateOperationsInputSchema) ]).optional(),
  organizationRole: z.union([ z.lazy(() => OrganizationRoleSchema),z.lazy(() => NullableEnumOrganizationRoleFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerEntity: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  managedListings: z.lazy(() => ListingUpdateManyWithoutPropertyManagerNestedInputSchema).optional(),
  ownedListings: z.lazy(() => ListingUpdateManyWithoutPropertyOwnerNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutUserNestedInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionUpdateOneWithoutOwnerNestedInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemUpdateManyWithoutCreatorNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutRevenuePayoutsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutRevenuePayoutsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  globalRole: z.union([ z.lazy(() => GlobalRoleSchema),z.lazy(() => EnumGlobalRoleFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationRole: z.union([ z.lazy(() => OrganizationRoleSchema),z.lazy(() => NullableEnumOrganizationRoleFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerEntity: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  managedListings: z.lazy(() => ListingUncheckedUpdateManyWithoutPropertyManagerNestedInputSchema).optional(),
  ownedListings: z.lazy(() => ListingUncheckedUpdateManyWithoutPropertyOwnerNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionUncheckedUpdateOneWithoutOwnerNestedInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional()
}).strict();

export const PayoutUpsertWithoutRevenuePayoutInputSchema: z.ZodType<Prisma.PayoutUpsertWithoutRevenuePayoutInput> = z.object({
  update: z.union([ z.lazy(() => PayoutUpdateWithoutRevenuePayoutInputSchema),z.lazy(() => PayoutUncheckedUpdateWithoutRevenuePayoutInputSchema) ]),
  create: z.union([ z.lazy(() => PayoutCreateWithoutRevenuePayoutInputSchema),z.lazy(() => PayoutUncheckedCreateWithoutRevenuePayoutInputSchema) ]),
  where: z.lazy(() => PayoutWhereInputSchema).optional()
}).strict();

export const PayoutUpdateToOneWithWhereWithoutRevenuePayoutInputSchema: z.ZodType<Prisma.PayoutUpdateToOneWithWhereWithoutRevenuePayoutInput> = z.object({
  where: z.lazy(() => PayoutWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => PayoutUpdateWithoutRevenuePayoutInputSchema),z.lazy(() => PayoutUncheckedUpdateWithoutRevenuePayoutInputSchema) ]),
}).strict();

export const PayoutUpdateWithoutRevenuePayoutInputSchema: z.ZodType<Prisma.PayoutUpdateWithoutRevenuePayoutInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  allocated: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  plaidTransaction: z.lazy(() => PlaidTransactionUpdateOneWithoutPayoutNestedInputSchema).optional()
}).strict();

export const PayoutUncheckedUpdateWithoutRevenuePayoutInputSchema: z.ZodType<Prisma.PayoutUncheckedUpdateWithoutRevenuePayoutInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  allocated: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  plaidTransactionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const RevenueUpsertWithoutPayoutInputSchema: z.ZodType<Prisma.RevenueUpsertWithoutPayoutInput> = z.object({
  update: z.union([ z.lazy(() => RevenueUpdateWithoutPayoutInputSchema),z.lazy(() => RevenueUncheckedUpdateWithoutPayoutInputSchema) ]),
  create: z.union([ z.lazy(() => RevenueCreateWithoutPayoutInputSchema),z.lazy(() => RevenueUncheckedCreateWithoutPayoutInputSchema) ]),
  where: z.lazy(() => RevenueWhereInputSchema).optional()
}).strict();

export const RevenueUpdateToOneWithWhereWithoutPayoutInputSchema: z.ZodType<Prisma.RevenueUpdateToOneWithWhereWithoutPayoutInput> = z.object({
  where: z.lazy(() => RevenueWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RevenueUpdateWithoutPayoutInputSchema),z.lazy(() => RevenueUncheckedUpdateWithoutPayoutInputSchema) ]),
}).strict();

export const RevenueUpdateWithoutPayoutInputSchema: z.ZodType<Prisma.RevenueUpdateWithoutPayoutInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  accommodation: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pmcShare: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  discount: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  channelCommission: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payoutStatus: z.union([ z.lazy(() => RevenuePayoutStatusSchema),z.lazy(() => EnumRevenuePayoutStatusFieldUpdateOperationsInputSchema) ]).optional(),
  reservation: z.lazy(() => ReservationUpdateOneRequiredWithoutRevenueNestedInputSchema).optional(),
  fees: z.lazy(() => RevenueFeeUpdateManyWithoutRevenueNestedInputSchema).optional(),
  ownerStatement: z.lazy(() => OwnerStatementUpdateOneWithoutRevenueNestedInputSchema).optional()
}).strict();

export const RevenueUncheckedUpdateWithoutPayoutInputSchema: z.ZodType<Prisma.RevenueUncheckedUpdateWithoutPayoutInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  reservationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accommodation: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pmcShare: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  discount: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  channelCommission: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerStatementId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payoutStatus: z.union([ z.lazy(() => RevenuePayoutStatusSchema),z.lazy(() => EnumRevenuePayoutStatusFieldUpdateOperationsInputSchema) ]).optional(),
  fees: z.lazy(() => RevenueFeeUncheckedUpdateManyWithoutRevenueNestedInputSchema).optional()
}).strict();

export const AccountCreateManyUserInputSchema: z.ZodType<Prisma.AccountCreateManyUserInput> = z.object({
  id: z.string().optional(),
  type: z.string(),
  provider: z.string(),
  providerAccountId: z.string(),
  refresh_token: z.string().optional().nullable(),
  access_token: z.string().optional().nullable(),
  expires_at: z.number().optional().nullable(),
  token_type: z.string().optional().nullable(),
  scope: z.string().optional().nullable(),
  id_token: z.string().optional().nullable(),
  session_state: z.string().optional().nullable()
}).strict();

export const SessionCreateManyUserInputSchema: z.ZodType<Prisma.SessionCreateManyUserInput> = z.object({
  id: z.string().optional(),
  sessionToken: z.string(),
  expires: z.coerce.date()
}).strict();

export const ListingCreateManyPropertyManagerInputSchema: z.ZodType<Prisma.ListingCreateManyPropertyManagerInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  unitType: z.lazy(() => UnitTypeSchema),
  beds: z.number(),
  baths: z.number(),
  guests: z.number(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  timeZone: z.string(),
  airbnbRemitsTaxes: z.boolean().optional(),
  organizationId: z.string(),
  propertyOwnerId: z.string().optional().nullable(),
  wifiName: z.string().optional().nullable(),
  wifiPassword: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  bpProductId: z.string().optional().nullable(),
  doorCode: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  basePrice: z.number().optional(),
  iCalKey: z.string().optional().nullable()
}).strict();

export const ListingCreateManyPropertyOwnerInputSchema: z.ZodType<Prisma.ListingCreateManyPropertyOwnerInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  unitType: z.lazy(() => UnitTypeSchema),
  beds: z.number(),
  baths: z.number(),
  guests: z.number(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  timeZone: z.string(),
  airbnbRemitsTaxes: z.boolean().optional(),
  organizationId: z.string(),
  propertyManagerId: z.string(),
  wifiName: z.string().optional().nullable(),
  wifiPassword: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  bpProductId: z.string().optional().nullable(),
  doorCode: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  basePrice: z.number().optional(),
  iCalKey: z.string().optional().nullable()
}).strict();

export const ExpenseCreateManyUserInputSchema: z.ZodType<Prisma.ExpenseCreateManyUserInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  date: z.coerce.date(),
  amount: z.number(),
  vendor: z.string(),
  description: z.string().optional().nullable(),
  workOrder: z.string().optional().nullable(),
  receiptUrl: z.string().optional().nullable(),
  invoiceUrl: z.string().optional().nullable(),
  plaidTransactionId: z.string().optional().nullable()
}).strict();

export const PlaidItemCreateManyCreatorInputSchema: z.ZodType<Prisma.PlaidItemCreateManyCreatorInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  accessToken: z.string(),
  cursor: z.string().optional().nullable(),
  institution: z.string(),
  institutionId: z.string(),
  organizationId: z.string()
}).strict();

export const RevenuePayoutCreateManyCreatedByInputSchema: z.ZodType<Prisma.RevenuePayoutCreateManyCreatedByInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  payoutId: z.string(),
  revenueId: z.string(),
  amount: z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
}).strict();

export const AccountUpdateWithoutUserInputSchema: z.ZodType<Prisma.AccountUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  provider: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerAccountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  refresh_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  access_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expires_at: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token_type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  session_state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AccountUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  provider: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerAccountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  refresh_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  access_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expires_at: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token_type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  session_state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AccountUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  provider: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerAccountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  refresh_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  access_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expires_at: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token_type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  session_state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SessionUpdateWithoutUserInputSchema: z.ZodType<Prisma.SessionUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sessionToken: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sessionToken: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sessionToken: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ListingUpdateWithoutPropertyManagerInputSchema: z.ZodType<Prisma.ListingUpdateWithoutPropertyManagerInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  unitType: z.union([ z.lazy(() => UnitTypeSchema),z.lazy(() => EnumUnitTypeFieldUpdateOperationsInputSchema) ]).optional(),
  beds: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  baths: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  guests: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timeZone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  airbnbRemitsTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  wifiName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiPassword: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bpProductId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doorCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  basePrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  iCalKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  content: z.lazy(() => ContentUpdateOneWithoutListingNestedInputSchema).optional(),
  rules: z.lazy(() => RulesUpdateOneWithoutListingNestedInputSchema).optional(),
  pricing: z.lazy(() => PricingUpdateOneWithoutListingNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUpdateOneWithoutListingNestedInputSchema).optional(),
  amenities: z.lazy(() => AmenityUpdateManyWithoutListingNestedInputSchema).optional(),
  fees: z.lazy(() => FeeUpdateManyWithoutListingNestedInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesUpdateOneWithoutListingNestedInputSchema).optional(),
  events: z.lazy(() => CalendarEventUpdateManyWithoutListingNestedInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUpdateManyWithoutListingsNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutListingsNestedInputSchema).optional(),
  deductions: z.lazy(() => DeductionsUpdateOneWithoutListingNestedInputSchema).optional(),
  propertyOwner: z.lazy(() => UserUpdateOneWithoutOwnedListingsNestedInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUpdateManyWithoutListingNestedInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUpdateManyWithoutListingNestedInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementUpdateManyWithoutListingNestedInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateUpdateManyWithoutListingNestedInputSchema).optional(),
  keys: z.lazy(() => ListingKeyUpdateManyWithoutListingNestedInputSchema).optional()
}).strict();

export const ListingUncheckedUpdateWithoutPropertyManagerInputSchema: z.ZodType<Prisma.ListingUncheckedUpdateWithoutPropertyManagerInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  unitType: z.union([ z.lazy(() => UnitTypeSchema),z.lazy(() => EnumUnitTypeFieldUpdateOperationsInputSchema) ]).optional(),
  beds: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  baths: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  guests: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timeZone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  airbnbRemitsTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  propertyOwnerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiPassword: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bpProductId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doorCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  basePrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  iCalKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  content: z.lazy(() => ContentUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  rules: z.lazy(() => RulesUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  pricing: z.lazy(() => PricingUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  amenities: z.lazy(() => AmenityUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  fees: z.lazy(() => FeeUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  events: z.lazy(() => CalendarEventUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUncheckedUpdateManyWithoutListingsNestedInputSchema).optional(),
  deductions: z.lazy(() => DeductionsUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  keys: z.lazy(() => ListingKeyUncheckedUpdateManyWithoutListingNestedInputSchema).optional()
}).strict();

export const ListingUncheckedUpdateManyWithoutPropertyManagerInputSchema: z.ZodType<Prisma.ListingUncheckedUpdateManyWithoutPropertyManagerInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  unitType: z.union([ z.lazy(() => UnitTypeSchema),z.lazy(() => EnumUnitTypeFieldUpdateOperationsInputSchema) ]).optional(),
  beds: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  baths: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  guests: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timeZone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  airbnbRemitsTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  propertyOwnerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiPassword: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bpProductId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doorCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  basePrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  iCalKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ListingUpdateWithoutPropertyOwnerInputSchema: z.ZodType<Prisma.ListingUpdateWithoutPropertyOwnerInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  unitType: z.union([ z.lazy(() => UnitTypeSchema),z.lazy(() => EnumUnitTypeFieldUpdateOperationsInputSchema) ]).optional(),
  beds: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  baths: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  guests: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timeZone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  airbnbRemitsTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  wifiName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiPassword: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bpProductId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doorCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  basePrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  iCalKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  content: z.lazy(() => ContentUpdateOneWithoutListingNestedInputSchema).optional(),
  rules: z.lazy(() => RulesUpdateOneWithoutListingNestedInputSchema).optional(),
  pricing: z.lazy(() => PricingUpdateOneWithoutListingNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUpdateOneWithoutListingNestedInputSchema).optional(),
  amenities: z.lazy(() => AmenityUpdateManyWithoutListingNestedInputSchema).optional(),
  fees: z.lazy(() => FeeUpdateManyWithoutListingNestedInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesUpdateOneWithoutListingNestedInputSchema).optional(),
  events: z.lazy(() => CalendarEventUpdateManyWithoutListingNestedInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUpdateManyWithoutListingsNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutListingsNestedInputSchema).optional(),
  deductions: z.lazy(() => DeductionsUpdateOneWithoutListingNestedInputSchema).optional(),
  propertyManager: z.lazy(() => UserUpdateOneRequiredWithoutManagedListingsNestedInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUpdateManyWithoutListingNestedInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUpdateManyWithoutListingNestedInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementUpdateManyWithoutListingNestedInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateUpdateManyWithoutListingNestedInputSchema).optional(),
  keys: z.lazy(() => ListingKeyUpdateManyWithoutListingNestedInputSchema).optional()
}).strict();

export const ListingUncheckedUpdateWithoutPropertyOwnerInputSchema: z.ZodType<Prisma.ListingUncheckedUpdateWithoutPropertyOwnerInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  unitType: z.union([ z.lazy(() => UnitTypeSchema),z.lazy(() => EnumUnitTypeFieldUpdateOperationsInputSchema) ]).optional(),
  beds: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  baths: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  guests: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timeZone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  airbnbRemitsTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  propertyManagerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  wifiName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiPassword: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bpProductId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doorCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  basePrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  iCalKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  content: z.lazy(() => ContentUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  rules: z.lazy(() => RulesUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  pricing: z.lazy(() => PricingUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  amenities: z.lazy(() => AmenityUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  fees: z.lazy(() => FeeUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  events: z.lazy(() => CalendarEventUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUncheckedUpdateManyWithoutListingsNestedInputSchema).optional(),
  deductions: z.lazy(() => DeductionsUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  keys: z.lazy(() => ListingKeyUncheckedUpdateManyWithoutListingNestedInputSchema).optional()
}).strict();

export const ListingUncheckedUpdateManyWithoutPropertyOwnerInputSchema: z.ZodType<Prisma.ListingUncheckedUpdateManyWithoutPropertyOwnerInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  unitType: z.union([ z.lazy(() => UnitTypeSchema),z.lazy(() => EnumUnitTypeFieldUpdateOperationsInputSchema) ]).optional(),
  beds: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  baths: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  guests: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timeZone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  airbnbRemitsTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  propertyManagerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  wifiName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiPassword: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bpProductId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doorCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  basePrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  iCalKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ExpenseUpdateWithoutUserInputSchema: z.ZodType<Prisma.ExpenseUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  vendor: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  workOrder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  receiptUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invoiceUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  listingExpenses: z.lazy(() => ListingExpenseUpdateManyWithoutExpenseNestedInputSchema).optional(),
  plaidTransaction: z.lazy(() => PlaidTransactionUpdateOneWithoutExpenseNestedInputSchema).optional()
}).strict();

export const ExpenseUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.ExpenseUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  vendor: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  workOrder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  receiptUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invoiceUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  plaidTransactionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  listingExpenses: z.lazy(() => ListingExpenseUncheckedUpdateManyWithoutExpenseNestedInputSchema).optional()
}).strict();

export const ExpenseUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.ExpenseUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  vendor: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  workOrder: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  receiptUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invoiceUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  plaidTransactionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PlaidItemUpdateWithoutCreatorInputSchema: z.ZodType<Prisma.PlaidItemUpdateWithoutCreatorInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  accessToken: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cursor: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  institution: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  institutionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutPlaidItemsNestedInputSchema).optional(),
  accounts: z.lazy(() => PlaidAccountUpdateManyWithoutItemNestedInputSchema).optional()
}).strict();

export const PlaidItemUncheckedUpdateWithoutCreatorInputSchema: z.ZodType<Prisma.PlaidItemUncheckedUpdateWithoutCreatorInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  accessToken: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cursor: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  institution: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  institutionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accounts: z.lazy(() => PlaidAccountUncheckedUpdateManyWithoutItemNestedInputSchema).optional()
}).strict();

export const PlaidItemUncheckedUpdateManyWithoutCreatorInputSchema: z.ZodType<Prisma.PlaidItemUncheckedUpdateManyWithoutCreatorInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  accessToken: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cursor: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  institution: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  institutionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RevenuePayoutUpdateWithoutCreatedByInputSchema: z.ZodType<Prisma.RevenuePayoutUpdateWithoutCreatedByInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  payout: z.lazy(() => PayoutUpdateOneRequiredWithoutRevenuePayoutNestedInputSchema).optional(),
  revenue: z.lazy(() => RevenueUpdateOneRequiredWithoutPayoutNestedInputSchema).optional()
}).strict();

export const RevenuePayoutUncheckedUpdateWithoutCreatedByInputSchema: z.ZodType<Prisma.RevenuePayoutUncheckedUpdateWithoutCreatedByInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  payoutId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  revenueId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RevenuePayoutUncheckedUpdateManyWithoutCreatedByInputSchema: z.ZodType<Prisma.RevenuePayoutUncheckedUpdateManyWithoutCreatedByInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  payoutId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  revenueId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserCreateManyOrganizationInputSchema: z.ZodType<Prisma.UserCreateManyOrganizationInput> = z.object({
  id: z.string().optional(),
  name: z.string().optional().nullable(),
  email: z.string(),
  emailVerified: z.coerce.date().optional().nullable(),
  image: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  globalRole: z.lazy(() => GlobalRoleSchema).optional(),
  organizationRole: z.lazy(() => OrganizationRoleSchema).optional().nullable(),
  ownerEntity: z.string().optional().nullable()
}).strict();

export const ListingCreateManyOrganizationInputSchema: z.ZodType<Prisma.ListingCreateManyOrganizationInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  unitType: z.lazy(() => UnitTypeSchema),
  beds: z.number(),
  baths: z.number(),
  guests: z.number(),
  line1: z.string(),
  line2: z.string().optional().nullable(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  timeZone: z.string(),
  airbnbRemitsTaxes: z.boolean().optional(),
  propertyManagerId: z.string(),
  propertyOwnerId: z.string().optional().nullable(),
  wifiName: z.string().optional().nullable(),
  wifiPassword: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  bpProductId: z.string().optional().nullable(),
  doorCode: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  basePrice: z.number().optional(),
  iCalKey: z.string().optional().nullable()
}).strict();

export const MessageTemplateCreateManyOrganizationInputSchema: z.ZodType<Prisma.MessageTemplateCreateManyOrganizationInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  title: z.string(),
  body: z.string(),
  bodyHtml: z.string(),
  enabled: z.boolean().optional(),
  trigger: z.lazy(() => TriggerSchema).optional().nullable(),
  triggerRange: z.lazy(() => TriggerRangeSchema).optional().nullable(),
  triggerUnit: z.lazy(() => TriggerUnitSchema).optional().nullable(),
  triggerValue: z.number().optional().nullable(),
  allListings: z.boolean().optional()
}).strict();

export const GuestCreateManyOrganizationInputSchema: z.ZodType<Prisma.GuestCreateManyOrganizationInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable()
}).strict();

export const PlaidItemCreateManyOrganizationInputSchema: z.ZodType<Prisma.PlaidItemCreateManyOrganizationInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  accessToken: z.string(),
  cursor: z.string().optional().nullable(),
  institution: z.string(),
  institutionId: z.string(),
  creatorId: z.string()
}).strict();

export const UserUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.UserUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  globalRole: z.union([ z.lazy(() => GlobalRoleSchema),z.lazy(() => EnumGlobalRoleFieldUpdateOperationsInputSchema) ]).optional(),
  organizationRole: z.union([ z.lazy(() => OrganizationRoleSchema),z.lazy(() => NullableEnumOrganizationRoleFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerEntity: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  managedListings: z.lazy(() => ListingUpdateManyWithoutPropertyManagerNestedInputSchema).optional(),
  ownedListings: z.lazy(() => ListingUpdateManyWithoutPropertyOwnerNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutUserNestedInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionUpdateOneWithoutOwnerNestedInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemUpdateManyWithoutCreatorNestedInputSchema).optional(),
  revenuePayouts: z.lazy(() => RevenuePayoutUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  globalRole: z.union([ z.lazy(() => GlobalRoleSchema),z.lazy(() => EnumGlobalRoleFieldUpdateOperationsInputSchema) ]).optional(),
  organizationRole: z.union([ z.lazy(() => OrganizationRoleSchema),z.lazy(() => NullableEnumOrganizationRoleFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerEntity: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  managedListings: z.lazy(() => ListingUncheckedUpdateManyWithoutPropertyManagerNestedInputSchema).optional(),
  ownedListings: z.lazy(() => ListingUncheckedUpdateManyWithoutPropertyOwnerNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  bookingPalConnection: z.lazy(() => BookingPalConnectionUncheckedUpdateOneWithoutOwnerNestedInputSchema).optional(),
  plaidItems: z.lazy(() => PlaidItemUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  revenuePayouts: z.lazy(() => RevenuePayoutUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  globalRole: z.union([ z.lazy(() => GlobalRoleSchema),z.lazy(() => EnumGlobalRoleFieldUpdateOperationsInputSchema) ]).optional(),
  organizationRole: z.union([ z.lazy(() => OrganizationRoleSchema),z.lazy(() => NullableEnumOrganizationRoleFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerEntity: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ListingUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.ListingUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  unitType: z.union([ z.lazy(() => UnitTypeSchema),z.lazy(() => EnumUnitTypeFieldUpdateOperationsInputSchema) ]).optional(),
  beds: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  baths: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  guests: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timeZone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  airbnbRemitsTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  wifiName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiPassword: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bpProductId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doorCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  basePrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  iCalKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  content: z.lazy(() => ContentUpdateOneWithoutListingNestedInputSchema).optional(),
  rules: z.lazy(() => RulesUpdateOneWithoutListingNestedInputSchema).optional(),
  pricing: z.lazy(() => PricingUpdateOneWithoutListingNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUpdateOneWithoutListingNestedInputSchema).optional(),
  amenities: z.lazy(() => AmenityUpdateManyWithoutListingNestedInputSchema).optional(),
  fees: z.lazy(() => FeeUpdateManyWithoutListingNestedInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesUpdateOneWithoutListingNestedInputSchema).optional(),
  events: z.lazy(() => CalendarEventUpdateManyWithoutListingNestedInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUpdateManyWithoutListingsNestedInputSchema).optional(),
  deductions: z.lazy(() => DeductionsUpdateOneWithoutListingNestedInputSchema).optional(),
  propertyManager: z.lazy(() => UserUpdateOneRequiredWithoutManagedListingsNestedInputSchema).optional(),
  propertyOwner: z.lazy(() => UserUpdateOneWithoutOwnedListingsNestedInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUpdateManyWithoutListingNestedInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUpdateManyWithoutListingNestedInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementUpdateManyWithoutListingNestedInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateUpdateManyWithoutListingNestedInputSchema).optional(),
  keys: z.lazy(() => ListingKeyUpdateManyWithoutListingNestedInputSchema).optional()
}).strict();

export const ListingUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.ListingUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  unitType: z.union([ z.lazy(() => UnitTypeSchema),z.lazy(() => EnumUnitTypeFieldUpdateOperationsInputSchema) ]).optional(),
  beds: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  baths: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  guests: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timeZone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  airbnbRemitsTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  propertyManagerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  propertyOwnerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiPassword: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bpProductId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doorCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  basePrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  iCalKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  content: z.lazy(() => ContentUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  rules: z.lazy(() => RulesUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  pricing: z.lazy(() => PricingUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  amenities: z.lazy(() => AmenityUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  fees: z.lazy(() => FeeUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  events: z.lazy(() => CalendarEventUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  messageTemplates: z.lazy(() => MessageTemplateUncheckedUpdateManyWithoutListingsNestedInputSchema).optional(),
  deductions: z.lazy(() => DeductionsUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  keys: z.lazy(() => ListingKeyUncheckedUpdateManyWithoutListingNestedInputSchema).optional()
}).strict();

export const ListingUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.ListingUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  unitType: z.union([ z.lazy(() => UnitTypeSchema),z.lazy(() => EnumUnitTypeFieldUpdateOperationsInputSchema) ]).optional(),
  beds: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  baths: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  guests: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timeZone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  airbnbRemitsTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  propertyManagerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  propertyOwnerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiPassword: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bpProductId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doorCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  basePrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  iCalKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const MessageTemplateUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.MessageTemplateUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  body: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bodyHtml: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  enabled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  trigger: z.union([ z.lazy(() => TriggerSchema),z.lazy(() => NullableEnumTriggerFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  triggerRange: z.union([ z.lazy(() => TriggerRangeSchema),z.lazy(() => NullableEnumTriggerRangeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  triggerUnit: z.union([ z.lazy(() => TriggerUnitSchema),z.lazy(() => NullableEnumTriggerUnitFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  triggerValue: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allListings: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  scheduledMessages: z.lazy(() => ScheduledMessageUpdateManyWithoutMessageTemplateNestedInputSchema).optional(),
  listings: z.lazy(() => ListingUpdateManyWithoutMessageTemplatesNestedInputSchema).optional()
}).strict();

export const MessageTemplateUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.MessageTemplateUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  body: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bodyHtml: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  enabled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  trigger: z.union([ z.lazy(() => TriggerSchema),z.lazy(() => NullableEnumTriggerFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  triggerRange: z.union([ z.lazy(() => TriggerRangeSchema),z.lazy(() => NullableEnumTriggerRangeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  triggerUnit: z.union([ z.lazy(() => TriggerUnitSchema),z.lazy(() => NullableEnumTriggerUnitFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  triggerValue: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allListings: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  scheduledMessages: z.lazy(() => ScheduledMessageUncheckedUpdateManyWithoutMessageTemplateNestedInputSchema).optional(),
  listings: z.lazy(() => ListingUncheckedUpdateManyWithoutMessageTemplatesNestedInputSchema).optional()
}).strict();

export const MessageTemplateUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.MessageTemplateUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  body: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bodyHtml: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  enabled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  trigger: z.union([ z.lazy(() => TriggerSchema),z.lazy(() => NullableEnumTriggerFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  triggerRange: z.union([ z.lazy(() => TriggerRangeSchema),z.lazy(() => NullableEnumTriggerRangeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  triggerUnit: z.union([ z.lazy(() => TriggerUnitSchema),z.lazy(() => NullableEnumTriggerUnitFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  triggerValue: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allListings: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const GuestUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.GuestUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reservations: z.lazy(() => ReservationUpdateManyWithoutGuestNestedInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUpdateManyWithoutGuestNestedInputSchema).optional()
}).strict();

export const GuestUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.GuestUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reservations: z.lazy(() => ReservationUncheckedUpdateManyWithoutGuestNestedInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUncheckedUpdateManyWithoutGuestNestedInputSchema).optional()
}).strict();

export const GuestUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.GuestUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PlaidItemUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.PlaidItemUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  accessToken: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cursor: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  institution: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  institutionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  creator: z.lazy(() => UserUpdateOneRequiredWithoutPlaidItemsNestedInputSchema).optional(),
  accounts: z.lazy(() => PlaidAccountUpdateManyWithoutItemNestedInputSchema).optional()
}).strict();

export const PlaidItemUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.PlaidItemUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  accessToken: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cursor: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  institution: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  institutionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  creatorId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accounts: z.lazy(() => PlaidAccountUncheckedUpdateManyWithoutItemNestedInputSchema).optional()
}).strict();

export const PlaidItemUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.PlaidItemUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  accessToken: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cursor: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  institution: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  institutionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  creatorId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AmenityCreateManyListingInputSchema: z.ZodType<Prisma.AmenityCreateManyListingInput> = z.object({
  id: z.string().optional(),
  typeId: z.string(),
  note: z.string().optional().nullable()
}).strict();

export const FeeCreateManyListingInputSchema: z.ZodType<Prisma.FeeCreateManyListingInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  value: z.number(),
  unit: z.string(),
  taxable: z.boolean(),
  type: z.string(),
  share: z.number()
}).strict();

export const CalendarEventCreateManyListingInputSchema: z.ZodType<Prisma.CalendarEventCreateManyListingInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  fromDate: z.coerce.date(),
  toDate: z.coerce.date(),
  type: z.lazy(() => CalendarEventTypeSchema),
  notes: z.string().optional().nullable(),
  bookedOn: z.coerce.date().optional().nullable()
}).strict();

export const MessageThreadCreateManyListingInputSchema: z.ZodType<Prisma.MessageThreadCreateManyListingInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  guestId: z.string(),
  bpThreadId: z.string().optional().nullable(),
  channelThreadId: z.string().optional().nullable(),
  lastMessageSentAt: z.string().optional().nullable(),
  dateFrom: z.string(),
  dateTo: z.string(),
  replyTo: z.string().optional().nullable(),
  archived: z.boolean().optional(),
  enableReminder: z.boolean().optional(),
  channel: z.lazy(() => ChannelSchema)
}).strict();

export const ListingExpenseCreateManyListingInputSchema: z.ZodType<Prisma.ListingExpenseCreateManyListingInput> = z.object({
  id: z.string().optional(),
  confirmationCode: z.string().optional().nullable(),
  expenseId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  amount: z.number(),
  amountPaid: z.number(),
  ownerStatementId: z.string().optional().nullable()
}).strict();

export const OwnerStatementCreateManyListingInputSchema: z.ZodType<Prisma.OwnerStatementCreateManyListingInput> = z.object({
  id: z.string().optional(),
  month: z.number(),
  year: z.number(),
  locked: z.boolean().optional(),
  isCoHost: z.boolean().optional()
}).strict();

export const DailyRateCreateManyListingInputSchema: z.ZodType<Prisma.DailyRateCreateManyListingInput> = z.object({
  id: z.string().optional(),
  date: z.coerce.date(),
  rate: z.number(),
  minStay: z.number().optional()
}).strict();

export const ListingKeyCreateManyListingInputSchema: z.ZodType<Prisma.ListingKeyCreateManyListingInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  keyType: z.lazy(() => KeyTypeSchema)
}).strict();

export const AmenityUpdateWithoutListingInputSchema: z.ZodType<Prisma.AmenityUpdateWithoutListingInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  typeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AmenityUncheckedUpdateWithoutListingInputSchema: z.ZodType<Prisma.AmenityUncheckedUpdateWithoutListingInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  typeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AmenityUncheckedUpdateManyWithoutListingInputSchema: z.ZodType<Prisma.AmenityUncheckedUpdateManyWithoutListingInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  typeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const FeeUpdateWithoutListingInputSchema: z.ZodType<Prisma.FeeUpdateWithoutListingInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  taxable: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  share: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FeeUncheckedUpdateWithoutListingInputSchema: z.ZodType<Prisma.FeeUncheckedUpdateWithoutListingInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  taxable: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  share: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FeeUncheckedUpdateManyWithoutListingInputSchema: z.ZodType<Prisma.FeeUncheckedUpdateManyWithoutListingInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  taxable: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  share: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CalendarEventUpdateWithoutListingInputSchema: z.ZodType<Prisma.CalendarEventUpdateWithoutListingInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  fromDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  toDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => CalendarEventTypeSchema),z.lazy(() => EnumCalendarEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bookedOn: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reservation: z.lazy(() => ReservationUpdateOneWithoutCalendarEventNestedInputSchema).optional()
}).strict();

export const CalendarEventUncheckedUpdateWithoutListingInputSchema: z.ZodType<Prisma.CalendarEventUncheckedUpdateWithoutListingInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  fromDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  toDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => CalendarEventTypeSchema),z.lazy(() => EnumCalendarEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bookedOn: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reservation: z.lazy(() => ReservationUncheckedUpdateOneWithoutCalendarEventNestedInputSchema).optional()
}).strict();

export const CalendarEventUncheckedUpdateManyWithoutListingInputSchema: z.ZodType<Prisma.CalendarEventUncheckedUpdateManyWithoutListingInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  fromDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  toDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => CalendarEventTypeSchema),z.lazy(() => EnumCalendarEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bookedOn: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const MessageTemplateUpdateWithoutListingsInputSchema: z.ZodType<Prisma.MessageTemplateUpdateWithoutListingsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  body: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bodyHtml: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  enabled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  trigger: z.union([ z.lazy(() => TriggerSchema),z.lazy(() => NullableEnumTriggerFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  triggerRange: z.union([ z.lazy(() => TriggerRangeSchema),z.lazy(() => NullableEnumTriggerRangeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  triggerUnit: z.union([ z.lazy(() => TriggerUnitSchema),z.lazy(() => NullableEnumTriggerUnitFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  triggerValue: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allListings: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutMessageTemplatesNestedInputSchema).optional(),
  scheduledMessages: z.lazy(() => ScheduledMessageUpdateManyWithoutMessageTemplateNestedInputSchema).optional()
}).strict();

export const MessageTemplateUncheckedUpdateWithoutListingsInputSchema: z.ZodType<Prisma.MessageTemplateUncheckedUpdateWithoutListingsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  body: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bodyHtml: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  enabled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  trigger: z.union([ z.lazy(() => TriggerSchema),z.lazy(() => NullableEnumTriggerFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  triggerRange: z.union([ z.lazy(() => TriggerRangeSchema),z.lazy(() => NullableEnumTriggerRangeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  triggerUnit: z.union([ z.lazy(() => TriggerUnitSchema),z.lazy(() => NullableEnumTriggerUnitFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  triggerValue: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allListings: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  scheduledMessages: z.lazy(() => ScheduledMessageUncheckedUpdateManyWithoutMessageTemplateNestedInputSchema).optional()
}).strict();

export const MessageTemplateUncheckedUpdateManyWithoutListingsInputSchema: z.ZodType<Prisma.MessageTemplateUncheckedUpdateManyWithoutListingsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  body: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bodyHtml: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  enabled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  trigger: z.union([ z.lazy(() => TriggerSchema),z.lazy(() => NullableEnumTriggerFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  triggerRange: z.union([ z.lazy(() => TriggerRangeSchema),z.lazy(() => NullableEnumTriggerRangeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  triggerUnit: z.union([ z.lazy(() => TriggerUnitSchema),z.lazy(() => NullableEnumTriggerUnitFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  triggerValue: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allListings: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MessageThreadUpdateWithoutListingInputSchema: z.ZodType<Prisma.MessageThreadUpdateWithoutListingInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  bpThreadId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  channelThreadId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastMessageSentAt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dateFrom: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dateTo: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  replyTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  archived: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  enableReminder: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  channel: z.union([ z.lazy(() => ChannelSchema),z.lazy(() => EnumChannelFieldUpdateOperationsInputSchema) ]).optional(),
  guest: z.lazy(() => GuestUpdateOneRequiredWithoutMessageThreadsNestedInputSchema).optional(),
  messages: z.lazy(() => MessageUpdateManyWithoutMessageThreadNestedInputSchema).optional()
}).strict();

export const MessageThreadUncheckedUpdateWithoutListingInputSchema: z.ZodType<Prisma.MessageThreadUncheckedUpdateWithoutListingInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  guestId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bpThreadId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  channelThreadId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastMessageSentAt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dateFrom: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dateTo: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  replyTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  archived: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  enableReminder: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  channel: z.union([ z.lazy(() => ChannelSchema),z.lazy(() => EnumChannelFieldUpdateOperationsInputSchema) ]).optional(),
  messages: z.lazy(() => MessageUncheckedUpdateManyWithoutMessageThreadNestedInputSchema).optional()
}).strict();

export const MessageThreadUncheckedUpdateManyWithoutListingInputSchema: z.ZodType<Prisma.MessageThreadUncheckedUpdateManyWithoutListingInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  guestId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bpThreadId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  channelThreadId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastMessageSentAt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dateFrom: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dateTo: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  replyTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  archived: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  enableReminder: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  channel: z.union([ z.lazy(() => ChannelSchema),z.lazy(() => EnumChannelFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ListingExpenseUpdateWithoutListingInputSchema: z.ZodType<Prisma.ListingExpenseUpdateWithoutListingInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  confirmationCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  amountPaid: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  expense: z.lazy(() => ExpenseUpdateOneRequiredWithoutListingExpensesNestedInputSchema).optional(),
  ownerStatement: z.lazy(() => OwnerStatementUpdateOneWithoutListingExpensesNestedInputSchema).optional()
}).strict();

export const ListingExpenseUncheckedUpdateWithoutListingInputSchema: z.ZodType<Prisma.ListingExpenseUncheckedUpdateWithoutListingInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  confirmationCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expenseId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  amountPaid: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  ownerStatementId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ListingExpenseUncheckedUpdateManyWithoutListingInputSchema: z.ZodType<Prisma.ListingExpenseUncheckedUpdateManyWithoutListingInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  confirmationCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expenseId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  amountPaid: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  ownerStatementId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const OwnerStatementUpdateWithoutListingInputSchema: z.ZodType<Prisma.OwnerStatementUpdateWithoutListingInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  month: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  locked: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isCoHost: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUpdateManyWithoutOwnerStatementNestedInputSchema).optional(),
  revenue: z.lazy(() => RevenueUpdateManyWithoutOwnerStatementNestedInputSchema).optional()
}).strict();

export const OwnerStatementUncheckedUpdateWithoutListingInputSchema: z.ZodType<Prisma.OwnerStatementUncheckedUpdateWithoutListingInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  month: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  locked: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isCoHost: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUncheckedUpdateManyWithoutOwnerStatementNestedInputSchema).optional(),
  revenue: z.lazy(() => RevenueUncheckedUpdateManyWithoutOwnerStatementNestedInputSchema).optional()
}).strict();

export const OwnerStatementUncheckedUpdateManyWithoutListingInputSchema: z.ZodType<Prisma.OwnerStatementUncheckedUpdateManyWithoutListingInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  month: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  locked: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isCoHost: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DailyRateUpdateWithoutListingInputSchema: z.ZodType<Prisma.DailyRateUpdateWithoutListingInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  rate: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  minStay: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DailyRateUncheckedUpdateWithoutListingInputSchema: z.ZodType<Prisma.DailyRateUncheckedUpdateWithoutListingInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  rate: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  minStay: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DailyRateUncheckedUpdateManyWithoutListingInputSchema: z.ZodType<Prisma.DailyRateUncheckedUpdateManyWithoutListingInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  rate: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  minStay: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ListingKeyUpdateWithoutListingInputSchema: z.ZodType<Prisma.ListingKeyUpdateWithoutListingInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  keyType: z.union([ z.lazy(() => KeyTypeSchema),z.lazy(() => EnumKeyTypeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ListingKeyUncheckedUpdateWithoutListingInputSchema: z.ZodType<Prisma.ListingKeyUncheckedUpdateWithoutListingInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  keyType: z.union([ z.lazy(() => KeyTypeSchema),z.lazy(() => EnumKeyTypeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ListingKeyUncheckedUpdateManyWithoutListingInputSchema: z.ZodType<Prisma.ListingKeyUncheckedUpdateManyWithoutListingInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  keyType: z.union([ z.lazy(() => KeyTypeSchema),z.lazy(() => EnumKeyTypeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const BedroomCreateManyContentInputSchema: z.ZodType<Prisma.BedroomCreateManyContentInput> = z.object({
  id: z.string().optional(),
  type: z.string(),
  bathroom: z.boolean().optional(),
  beds: z.union([ z.lazy(() => BedroomCreatebedsInputSchema),z.string().array() ]).optional(),
}).strict();

export const BedroomUpdateWithoutContentInputSchema: z.ZodType<Prisma.BedroomUpdateWithoutContentInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bathroom: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  beds: z.union([ z.lazy(() => BedroomUpdatebedsInputSchema),z.string().array() ]).optional(),
}).strict();

export const BedroomUncheckedUpdateWithoutContentInputSchema: z.ZodType<Prisma.BedroomUncheckedUpdateWithoutContentInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bathroom: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  beds: z.union([ z.lazy(() => BedroomUpdatebedsInputSchema),z.string().array() ]).optional(),
}).strict();

export const BedroomUncheckedUpdateManyWithoutContentInputSchema: z.ZodType<Prisma.BedroomUncheckedUpdateManyWithoutContentInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bathroom: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  beds: z.union([ z.lazy(() => BedroomUpdatebedsInputSchema),z.string().array() ]).optional(),
}).strict();

export const PricingDateCreateManyPricingInputSchema: z.ZodType<Prisma.PricingDateCreateManyPricingInput> = z.object({
  id: z.string().optional(),
  startDate: z.coerce.date(),
  endDate: z.coerce.date(),
  percent: z.number()
}).strict();

export const DiscountCreateManyPricingInputSchema: z.ZodType<Prisma.DiscountCreateManyPricingInput> = z.object({
  id: z.string().optional(),
  days: z.number(),
  percent: z.number().optional()
}).strict();

export const PricingDateUpdateWithoutPricingInputSchema: z.ZodType<Prisma.PricingDateUpdateWithoutPricingInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  percent: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PricingDateUncheckedUpdateWithoutPricingInputSchema: z.ZodType<Prisma.PricingDateUncheckedUpdateWithoutPricingInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  percent: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PricingDateUncheckedUpdateManyWithoutPricingInputSchema: z.ZodType<Prisma.PricingDateUncheckedUpdateManyWithoutPricingInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  percent: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DiscountUpdateWithoutPricingInputSchema: z.ZodType<Prisma.DiscountUpdateWithoutPricingInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  days: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  percent: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DiscountUncheckedUpdateWithoutPricingInputSchema: z.ZodType<Prisma.DiscountUncheckedUpdateWithoutPricingInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  days: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  percent: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DiscountUncheckedUpdateManyWithoutPricingInputSchema: z.ZodType<Prisma.DiscountUncheckedUpdateManyWithoutPricingInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  days: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  percent: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ScheduledMessageCreateManyReservationInputSchema: z.ZodType<Prisma.ScheduledMessageCreateManyReservationInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  scheduledAt: z.coerce.date(),
  messageTemplateId: z.string(),
  status: z.lazy(() => ScheduledMessageStatusSchema).optional(),
  completedAt: z.coerce.date().optional().nullable(),
  failureMessage: z.string().optional().nullable()
}).strict();

export const ScheduledMessageUpdateWithoutReservationInputSchema: z.ZodType<Prisma.ScheduledMessageUpdateWithoutReservationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  scheduledAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ScheduledMessageStatusSchema),z.lazy(() => EnumScheduledMessageStatusFieldUpdateOperationsInputSchema) ]).optional(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  failureMessage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  messageTemplate: z.lazy(() => MessageTemplateUpdateOneRequiredWithoutScheduledMessagesNestedInputSchema).optional()
}).strict();

export const ScheduledMessageUncheckedUpdateWithoutReservationInputSchema: z.ZodType<Prisma.ScheduledMessageUncheckedUpdateWithoutReservationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  scheduledAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  messageTemplateId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ScheduledMessageStatusSchema),z.lazy(() => EnumScheduledMessageStatusFieldUpdateOperationsInputSchema) ]).optional(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  failureMessage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ScheduledMessageUncheckedUpdateManyWithoutReservationInputSchema: z.ZodType<Prisma.ScheduledMessageUncheckedUpdateManyWithoutReservationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  scheduledAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  messageTemplateId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ScheduledMessageStatusSchema),z.lazy(() => EnumScheduledMessageStatusFieldUpdateOperationsInputSchema) ]).optional(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  failureMessage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ReservationCreateManyGuestInputSchema: z.ZodType<Prisma.ReservationCreateManyGuestInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  calendarEventId: z.string(),
  channel: z.lazy(() => ChannelSchema).optional(),
  bpReservationId: z.string().optional().nullable(),
  confirmationCode: z.string().optional().nullable(),
  adults: z.number(),
  children: z.number(),
  pets: z.number().optional(),
  status: z.lazy(() => ReservationStatusSchema).optional()
}).strict();

export const MessageThreadCreateManyGuestInputSchema: z.ZodType<Prisma.MessageThreadCreateManyGuestInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  listingId: z.string(),
  bpThreadId: z.string().optional().nullable(),
  channelThreadId: z.string().optional().nullable(),
  lastMessageSentAt: z.string().optional().nullable(),
  dateFrom: z.string(),
  dateTo: z.string(),
  replyTo: z.string().optional().nullable(),
  archived: z.boolean().optional(),
  enableReminder: z.boolean().optional(),
  channel: z.lazy(() => ChannelSchema)
}).strict();

export const ReservationUpdateWithoutGuestInputSchema: z.ZodType<Prisma.ReservationUpdateWithoutGuestInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  channel: z.union([ z.lazy(() => ChannelSchema),z.lazy(() => EnumChannelFieldUpdateOperationsInputSchema) ]).optional(),
  bpReservationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmationCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  adults: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  children: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  pets: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ReservationStatusSchema),z.lazy(() => EnumReservationStatusFieldUpdateOperationsInputSchema) ]).optional(),
  calendarEvent: z.lazy(() => CalendarEventUpdateOneRequiredWithoutReservationNestedInputSchema).optional(),
  scheduledMessages: z.lazy(() => ScheduledMessageUpdateManyWithoutReservationNestedInputSchema).optional(),
  revenue: z.lazy(() => RevenueUpdateOneWithoutReservationNestedInputSchema).optional()
}).strict();

export const ReservationUncheckedUpdateWithoutGuestInputSchema: z.ZodType<Prisma.ReservationUncheckedUpdateWithoutGuestInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  calendarEventId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  channel: z.union([ z.lazy(() => ChannelSchema),z.lazy(() => EnumChannelFieldUpdateOperationsInputSchema) ]).optional(),
  bpReservationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmationCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  adults: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  children: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  pets: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ReservationStatusSchema),z.lazy(() => EnumReservationStatusFieldUpdateOperationsInputSchema) ]).optional(),
  scheduledMessages: z.lazy(() => ScheduledMessageUncheckedUpdateManyWithoutReservationNestedInputSchema).optional(),
  revenue: z.lazy(() => RevenueUncheckedUpdateOneWithoutReservationNestedInputSchema).optional()
}).strict();

export const ReservationUncheckedUpdateManyWithoutGuestInputSchema: z.ZodType<Prisma.ReservationUncheckedUpdateManyWithoutGuestInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  calendarEventId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  channel: z.union([ z.lazy(() => ChannelSchema),z.lazy(() => EnumChannelFieldUpdateOperationsInputSchema) ]).optional(),
  bpReservationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confirmationCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  adults: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  children: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  pets: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ReservationStatusSchema),z.lazy(() => EnumReservationStatusFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MessageThreadUpdateWithoutGuestInputSchema: z.ZodType<Prisma.MessageThreadUpdateWithoutGuestInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  bpThreadId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  channelThreadId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastMessageSentAt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dateFrom: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dateTo: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  replyTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  archived: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  enableReminder: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  channel: z.union([ z.lazy(() => ChannelSchema),z.lazy(() => EnumChannelFieldUpdateOperationsInputSchema) ]).optional(),
  listing: z.lazy(() => ListingUpdateOneRequiredWithoutMessageThreadsNestedInputSchema).optional(),
  messages: z.lazy(() => MessageUpdateManyWithoutMessageThreadNestedInputSchema).optional()
}).strict();

export const MessageThreadUncheckedUpdateWithoutGuestInputSchema: z.ZodType<Prisma.MessageThreadUncheckedUpdateWithoutGuestInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  listingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bpThreadId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  channelThreadId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastMessageSentAt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dateFrom: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dateTo: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  replyTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  archived: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  enableReminder: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  channel: z.union([ z.lazy(() => ChannelSchema),z.lazy(() => EnumChannelFieldUpdateOperationsInputSchema) ]).optional(),
  messages: z.lazy(() => MessageUncheckedUpdateManyWithoutMessageThreadNestedInputSchema).optional()
}).strict();

export const MessageThreadUncheckedUpdateManyWithoutGuestInputSchema: z.ZodType<Prisma.MessageThreadUncheckedUpdateManyWithoutGuestInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  listingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bpThreadId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  channelThreadId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastMessageSentAt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dateFrom: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dateTo: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  replyTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  archived: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  enableReminder: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  channel: z.union([ z.lazy(() => ChannelSchema),z.lazy(() => EnumChannelFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MessageCreateManyMessageThreadInputSchema: z.ZodType<Prisma.MessageCreateManyMessageThreadInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  message: z.string(),
  user: z.lazy(() => MessageUserSchema),
  timestamp: z.coerce.date(),
  bpMessageId: z.string().optional().nullable(),
  channelMessageId: z.string().optional().nullable(),
  read: z.boolean().optional()
}).strict();

export const MessageUpdateWithoutMessageThreadInputSchema: z.ZodType<Prisma.MessageUpdateWithoutMessageThreadInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  message: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => MessageUserSchema),z.lazy(() => EnumMessageUserFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  bpMessageId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  channelMessageId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  read: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MessageUncheckedUpdateWithoutMessageThreadInputSchema: z.ZodType<Prisma.MessageUncheckedUpdateWithoutMessageThreadInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  message: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => MessageUserSchema),z.lazy(() => EnumMessageUserFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  bpMessageId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  channelMessageId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  read: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MessageUncheckedUpdateManyWithoutMessageThreadInputSchema: z.ZodType<Prisma.MessageUncheckedUpdateManyWithoutMessageThreadInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  message: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => MessageUserSchema),z.lazy(() => EnumMessageUserFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  bpMessageId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  channelMessageId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  read: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ScheduledMessageCreateManyMessageTemplateInputSchema: z.ZodType<Prisma.ScheduledMessageCreateManyMessageTemplateInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  scheduledAt: z.coerce.date(),
  reservationId: z.string(),
  status: z.lazy(() => ScheduledMessageStatusSchema).optional(),
  completedAt: z.coerce.date().optional().nullable(),
  failureMessage: z.string().optional().nullable()
}).strict();

export const ScheduledMessageUpdateWithoutMessageTemplateInputSchema: z.ZodType<Prisma.ScheduledMessageUpdateWithoutMessageTemplateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  scheduledAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ScheduledMessageStatusSchema),z.lazy(() => EnumScheduledMessageStatusFieldUpdateOperationsInputSchema) ]).optional(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  failureMessage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reservation: z.lazy(() => ReservationUpdateOneRequiredWithoutScheduledMessagesNestedInputSchema).optional()
}).strict();

export const ScheduledMessageUncheckedUpdateWithoutMessageTemplateInputSchema: z.ZodType<Prisma.ScheduledMessageUncheckedUpdateWithoutMessageTemplateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  scheduledAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  reservationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ScheduledMessageStatusSchema),z.lazy(() => EnumScheduledMessageStatusFieldUpdateOperationsInputSchema) ]).optional(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  failureMessage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ScheduledMessageUncheckedUpdateManyWithoutMessageTemplateInputSchema: z.ZodType<Prisma.ScheduledMessageUncheckedUpdateManyWithoutMessageTemplateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  scheduledAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  reservationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ScheduledMessageStatusSchema),z.lazy(() => EnumScheduledMessageStatusFieldUpdateOperationsInputSchema) ]).optional(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  failureMessage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ListingUpdateWithoutMessageTemplatesInputSchema: z.ZodType<Prisma.ListingUpdateWithoutMessageTemplatesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  unitType: z.union([ z.lazy(() => UnitTypeSchema),z.lazy(() => EnumUnitTypeFieldUpdateOperationsInputSchema) ]).optional(),
  beds: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  baths: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  guests: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timeZone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  airbnbRemitsTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  wifiName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiPassword: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bpProductId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doorCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  basePrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  iCalKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  content: z.lazy(() => ContentUpdateOneWithoutListingNestedInputSchema).optional(),
  rules: z.lazy(() => RulesUpdateOneWithoutListingNestedInputSchema).optional(),
  pricing: z.lazy(() => PricingUpdateOneWithoutListingNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUpdateOneWithoutListingNestedInputSchema).optional(),
  amenities: z.lazy(() => AmenityUpdateManyWithoutListingNestedInputSchema).optional(),
  fees: z.lazy(() => FeeUpdateManyWithoutListingNestedInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesUpdateOneWithoutListingNestedInputSchema).optional(),
  events: z.lazy(() => CalendarEventUpdateManyWithoutListingNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutListingsNestedInputSchema).optional(),
  deductions: z.lazy(() => DeductionsUpdateOneWithoutListingNestedInputSchema).optional(),
  propertyManager: z.lazy(() => UserUpdateOneRequiredWithoutManagedListingsNestedInputSchema).optional(),
  propertyOwner: z.lazy(() => UserUpdateOneWithoutOwnedListingsNestedInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUpdateManyWithoutListingNestedInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUpdateManyWithoutListingNestedInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementUpdateManyWithoutListingNestedInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateUpdateManyWithoutListingNestedInputSchema).optional(),
  keys: z.lazy(() => ListingKeyUpdateManyWithoutListingNestedInputSchema).optional()
}).strict();

export const ListingUncheckedUpdateWithoutMessageTemplatesInputSchema: z.ZodType<Prisma.ListingUncheckedUpdateWithoutMessageTemplatesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  unitType: z.union([ z.lazy(() => UnitTypeSchema),z.lazy(() => EnumUnitTypeFieldUpdateOperationsInputSchema) ]).optional(),
  beds: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  baths: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  guests: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timeZone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  airbnbRemitsTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  propertyManagerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  propertyOwnerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiPassword: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bpProductId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doorCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  basePrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  iCalKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  content: z.lazy(() => ContentUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  rules: z.lazy(() => RulesUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  pricing: z.lazy(() => PricingUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  amenities: z.lazy(() => AmenityUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  fees: z.lazy(() => FeeUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  taxRates: z.lazy(() => TaxRatesUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  events: z.lazy(() => CalendarEventUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  deductions: z.lazy(() => DeductionsUncheckedUpdateOneWithoutListingNestedInputSchema).optional(),
  messageThreads: z.lazy(() => MessageThreadUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  listingExpenses: z.lazy(() => ListingExpenseUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  ownerStatements: z.lazy(() => OwnerStatementUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  dailyRates: z.lazy(() => DailyRateUncheckedUpdateManyWithoutListingNestedInputSchema).optional(),
  keys: z.lazy(() => ListingKeyUncheckedUpdateManyWithoutListingNestedInputSchema).optional()
}).strict();

export const ListingUncheckedUpdateManyWithoutMessageTemplatesInputSchema: z.ZodType<Prisma.ListingUncheckedUpdateManyWithoutMessageTemplatesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  unitType: z.union([ z.lazy(() => UnitTypeSchema),z.lazy(() => EnumUnitTypeFieldUpdateOperationsInputSchema) ]).optional(),
  beds: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  baths: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  guests: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  line1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  line2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timeZone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  airbnbRemitsTaxes: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  propertyManagerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  propertyOwnerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wifiPassword: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bpProductId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doorCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  basePrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  iCalKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const RevenueFeeCreateManyRevenueInputSchema: z.ZodType<Prisma.RevenueFeeCreateManyRevenueInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  name: z.string(),
  value: z.number(),
  unit: z.string(),
  pmcShare: z.number(),
  taxable: z.boolean().optional(),
  type: z.lazy(() => RevenueEntryTypeSchema)
}).strict();

export const RevenuePayoutCreateManyRevenueInputSchema: z.ZodType<Prisma.RevenuePayoutCreateManyRevenueInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdById: z.string().optional().nullable(),
  payoutId: z.string(),
  amount: z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
}).strict();

export const RevenueFeeUpdateWithoutRevenueInputSchema: z.ZodType<Prisma.RevenueFeeUpdateWithoutRevenueInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  pmcShare: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  taxable: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => RevenueEntryTypeSchema),z.lazy(() => EnumRevenueEntryTypeFieldUpdateOperationsInputSchema) ]).optional(),
  deductions: z.lazy(() => RevenueTaxUpdateManyWithoutRevenueFeeNestedInputSchema).optional()
}).strict();

export const RevenueFeeUncheckedUpdateWithoutRevenueInputSchema: z.ZodType<Prisma.RevenueFeeUncheckedUpdateWithoutRevenueInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  pmcShare: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  taxable: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => RevenueEntryTypeSchema),z.lazy(() => EnumRevenueEntryTypeFieldUpdateOperationsInputSchema) ]).optional(),
  deductions: z.lazy(() => RevenueTaxUncheckedUpdateManyWithoutRevenueFeeNestedInputSchema).optional()
}).strict();

export const RevenueFeeUncheckedUpdateManyWithoutRevenueInputSchema: z.ZodType<Prisma.RevenueFeeUncheckedUpdateManyWithoutRevenueInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  pmcShare: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  taxable: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => RevenueEntryTypeSchema),z.lazy(() => EnumRevenueEntryTypeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RevenuePayoutUpdateWithoutRevenueInputSchema: z.ZodType<Prisma.RevenuePayoutUpdateWithoutRevenueInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  createdBy: z.lazy(() => UserUpdateOneWithoutRevenuePayoutsNestedInputSchema).optional(),
  payout: z.lazy(() => PayoutUpdateOneRequiredWithoutRevenuePayoutNestedInputSchema).optional()
}).strict();

export const RevenuePayoutUncheckedUpdateWithoutRevenueInputSchema: z.ZodType<Prisma.RevenuePayoutUncheckedUpdateWithoutRevenueInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payoutId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RevenuePayoutUncheckedUpdateManyWithoutRevenueInputSchema: z.ZodType<Prisma.RevenuePayoutUncheckedUpdateManyWithoutRevenueInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payoutId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RevenueTaxCreateManyRevenueFeeInputSchema: z.ZodType<Prisma.RevenueTaxCreateManyRevenueFeeInput> = z.object({
  id: z.string().optional(),
  revenueId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  description: z.string(),
  value: z.number(),
  type: z.lazy(() => RevenueDeductionTypeSchema)
}).strict();

export const RevenueTaxUpdateWithoutRevenueFeeInputSchema: z.ZodType<Prisma.RevenueTaxUpdateWithoutRevenueFeeInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  revenueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => RevenueDeductionTypeSchema),z.lazy(() => EnumRevenueDeductionTypeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RevenueTaxUncheckedUpdateWithoutRevenueFeeInputSchema: z.ZodType<Prisma.RevenueTaxUncheckedUpdateWithoutRevenueFeeInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  revenueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => RevenueDeductionTypeSchema),z.lazy(() => EnumRevenueDeductionTypeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RevenueTaxUncheckedUpdateManyWithoutRevenueFeeInputSchema: z.ZodType<Prisma.RevenueTaxUncheckedUpdateManyWithoutRevenueFeeInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  revenueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => RevenueDeductionTypeSchema),z.lazy(() => EnumRevenueDeductionTypeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ListingExpenseCreateManyExpenseInputSchema: z.ZodType<Prisma.ListingExpenseCreateManyExpenseInput> = z.object({
  id: z.string().optional(),
  confirmationCode: z.string().optional().nullable(),
  listingId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  amount: z.number(),
  amountPaid: z.number(),
  ownerStatementId: z.string().optional().nullable()
}).strict();

export const ListingExpenseUpdateWithoutExpenseInputSchema: z.ZodType<Prisma.ListingExpenseUpdateWithoutExpenseInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  confirmationCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  amountPaid: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  listing: z.lazy(() => ListingUpdateOneRequiredWithoutListingExpensesNestedInputSchema).optional(),
  ownerStatement: z.lazy(() => OwnerStatementUpdateOneWithoutListingExpensesNestedInputSchema).optional()
}).strict();

export const ListingExpenseUncheckedUpdateWithoutExpenseInputSchema: z.ZodType<Prisma.ListingExpenseUncheckedUpdateWithoutExpenseInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  confirmationCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  listingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  amountPaid: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  ownerStatementId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ListingExpenseUncheckedUpdateManyWithoutExpenseInputSchema: z.ZodType<Prisma.ListingExpenseUncheckedUpdateManyWithoutExpenseInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  confirmationCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  listingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  amountPaid: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  ownerStatementId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ListingExpenseCreateManyOwnerStatementInputSchema: z.ZodType<Prisma.ListingExpenseCreateManyOwnerStatementInput> = z.object({
  id: z.string().optional(),
  confirmationCode: z.string().optional().nullable(),
  expenseId: z.string(),
  listingId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  amount: z.number(),
  amountPaid: z.number()
}).strict();

export const RevenueCreateManyOwnerStatementInputSchema: z.ZodType<Prisma.RevenueCreateManyOwnerStatementInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  reservationId: z.string(),
  accommodation: z.number().optional().nullable(),
  pmcShare: z.number(),
  discount: z.number().optional().nullable(),
  channelCommission: z.number().optional().nullable(),
  payoutStatus: z.lazy(() => RevenuePayoutStatusSchema).optional()
}).strict();

export const ListingExpenseUpdateWithoutOwnerStatementInputSchema: z.ZodType<Prisma.ListingExpenseUpdateWithoutOwnerStatementInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  confirmationCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  amountPaid: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  expense: z.lazy(() => ExpenseUpdateOneRequiredWithoutListingExpensesNestedInputSchema).optional(),
  listing: z.lazy(() => ListingUpdateOneRequiredWithoutListingExpensesNestedInputSchema).optional()
}).strict();

export const ListingExpenseUncheckedUpdateWithoutOwnerStatementInputSchema: z.ZodType<Prisma.ListingExpenseUncheckedUpdateWithoutOwnerStatementInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  confirmationCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expenseId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  listingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  amountPaid: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ListingExpenseUncheckedUpdateManyWithoutOwnerStatementInputSchema: z.ZodType<Prisma.ListingExpenseUncheckedUpdateManyWithoutOwnerStatementInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  confirmationCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expenseId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  listingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  amountPaid: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RevenueUpdateWithoutOwnerStatementInputSchema: z.ZodType<Prisma.RevenueUpdateWithoutOwnerStatementInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  accommodation: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pmcShare: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  discount: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  channelCommission: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payoutStatus: z.union([ z.lazy(() => RevenuePayoutStatusSchema),z.lazy(() => EnumRevenuePayoutStatusFieldUpdateOperationsInputSchema) ]).optional(),
  reservation: z.lazy(() => ReservationUpdateOneRequiredWithoutRevenueNestedInputSchema).optional(),
  fees: z.lazy(() => RevenueFeeUpdateManyWithoutRevenueNestedInputSchema).optional(),
  payout: z.lazy(() => RevenuePayoutUpdateManyWithoutRevenueNestedInputSchema).optional()
}).strict();

export const RevenueUncheckedUpdateWithoutOwnerStatementInputSchema: z.ZodType<Prisma.RevenueUncheckedUpdateWithoutOwnerStatementInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  reservationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accommodation: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pmcShare: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  discount: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  channelCommission: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payoutStatus: z.union([ z.lazy(() => RevenuePayoutStatusSchema),z.lazy(() => EnumRevenuePayoutStatusFieldUpdateOperationsInputSchema) ]).optional(),
  fees: z.lazy(() => RevenueFeeUncheckedUpdateManyWithoutRevenueNestedInputSchema).optional(),
  payout: z.lazy(() => RevenuePayoutUncheckedUpdateManyWithoutRevenueNestedInputSchema).optional()
}).strict();

export const RevenueUncheckedUpdateManyWithoutOwnerStatementInputSchema: z.ZodType<Prisma.RevenueUncheckedUpdateManyWithoutOwnerStatementInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  reservationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accommodation: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pmcShare: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  discount: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  channelCommission: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payoutStatus: z.union([ z.lazy(() => RevenuePayoutStatusSchema),z.lazy(() => EnumRevenuePayoutStatusFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PlaidAccountCreateManyItemInputSchema: z.ZodType<Prisma.PlaidAccountCreateManyItemInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  plaidId: z.string(),
  name: z.string(),
  mask: z.string(),
  type: z.string(),
  subtype: z.string(),
  verificationStatus: z.string().optional().nullable()
}).strict();

export const PlaidAccountUpdateWithoutItemInputSchema: z.ZodType<Prisma.PlaidAccountUpdateWithoutItemInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  plaidId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mask: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subtype: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  verificationStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  transactions: z.lazy(() => PlaidTransactionUpdateManyWithoutAccountNestedInputSchema).optional()
}).strict();

export const PlaidAccountUncheckedUpdateWithoutItemInputSchema: z.ZodType<Prisma.PlaidAccountUncheckedUpdateWithoutItemInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  plaidId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mask: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subtype: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  verificationStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  transactions: z.lazy(() => PlaidTransactionUncheckedUpdateManyWithoutAccountNestedInputSchema).optional()
}).strict();

export const PlaidAccountUncheckedUpdateManyWithoutItemInputSchema: z.ZodType<Prisma.PlaidAccountUncheckedUpdateManyWithoutItemInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  plaidId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mask: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subtype: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  verificationStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PlaidTransactionCreateManyAccountInputSchema: z.ZodType<Prisma.PlaidTransactionCreateManyAccountInput> = z.object({
  id: z.string().optional(),
  plaidId: z.string(),
  status: z.lazy(() => PlaidImportStatusSchema).optional(),
  date: z.coerce.date(),
  amount: z.number(),
  vendor: z.string(),
  name: z.string()
}).strict();

export const PlaidTransactionUpdateWithoutAccountInputSchema: z.ZodType<Prisma.PlaidTransactionUpdateWithoutAccountInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  plaidId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => PlaidImportStatusSchema),z.lazy(() => EnumPlaidImportStatusFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  vendor: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expense: z.lazy(() => ExpenseUpdateOneWithoutPlaidTransactionNestedInputSchema).optional(),
  payout: z.lazy(() => PayoutUpdateOneWithoutPlaidTransactionNestedInputSchema).optional()
}).strict();

export const PlaidTransactionUncheckedUpdateWithoutAccountInputSchema: z.ZodType<Prisma.PlaidTransactionUncheckedUpdateWithoutAccountInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  plaidId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => PlaidImportStatusSchema),z.lazy(() => EnumPlaidImportStatusFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  vendor: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expense: z.lazy(() => ExpenseUncheckedUpdateOneWithoutPlaidTransactionNestedInputSchema).optional(),
  payout: z.lazy(() => PayoutUncheckedUpdateOneWithoutPlaidTransactionNestedInputSchema).optional()
}).strict();

export const PlaidTransactionUncheckedUpdateManyWithoutAccountInputSchema: z.ZodType<Prisma.PlaidTransactionUncheckedUpdateManyWithoutAccountInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  plaidId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => PlaidImportStatusSchema),z.lazy(() => EnumPlaidImportStatusFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  vendor: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RevenuePayoutCreateManyPayoutInputSchema: z.ZodType<Prisma.RevenuePayoutCreateManyPayoutInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdById: z.string().optional().nullable(),
  revenueId: z.string(),
  amount: z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' })
}).strict();

export const RevenuePayoutUpdateWithoutPayoutInputSchema: z.ZodType<Prisma.RevenuePayoutUpdateWithoutPayoutInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  createdBy: z.lazy(() => UserUpdateOneWithoutRevenuePayoutsNestedInputSchema).optional(),
  revenue: z.lazy(() => RevenueUpdateOneRequiredWithoutPayoutNestedInputSchema).optional()
}).strict();

export const RevenuePayoutUncheckedUpdateWithoutPayoutInputSchema: z.ZodType<Prisma.RevenuePayoutUncheckedUpdateWithoutPayoutInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  revenueId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RevenuePayoutUncheckedUpdateManyWithoutPayoutInputSchema: z.ZodType<Prisma.RevenuePayoutUncheckedUpdateManyWithoutPayoutInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  revenueId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),DecimalJSLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

/////////////////////////////////////////
// ARGS
/////////////////////////////////////////

export const AccountFindFirstArgsSchema: z.ZodType<Prisma.AccountFindFirstArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  where: AccountWhereInputSchema.optional(),
  orderBy: z.union([ AccountOrderByWithRelationInputSchema.array(),AccountOrderByWithRelationInputSchema ]).optional(),
  cursor: AccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AccountScalarFieldEnumSchema,AccountScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const AccountFindFirstOrThrowArgsSchema: z.ZodType<Prisma.AccountFindFirstOrThrowArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  where: AccountWhereInputSchema.optional(),
  orderBy: z.union([ AccountOrderByWithRelationInputSchema.array(),AccountOrderByWithRelationInputSchema ]).optional(),
  cursor: AccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AccountScalarFieldEnumSchema,AccountScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const AccountFindManyArgsSchema: z.ZodType<Prisma.AccountFindManyArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  where: AccountWhereInputSchema.optional(),
  orderBy: z.union([ AccountOrderByWithRelationInputSchema.array(),AccountOrderByWithRelationInputSchema ]).optional(),
  cursor: AccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AccountScalarFieldEnumSchema,AccountScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const AccountAggregateArgsSchema: z.ZodType<Prisma.AccountAggregateArgs> = z.object({
  where: AccountWhereInputSchema.optional(),
  orderBy: z.union([ AccountOrderByWithRelationInputSchema.array(),AccountOrderByWithRelationInputSchema ]).optional(),
  cursor: AccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const AccountGroupByArgsSchema: z.ZodType<Prisma.AccountGroupByArgs> = z.object({
  where: AccountWhereInputSchema.optional(),
  orderBy: z.union([ AccountOrderByWithAggregationInputSchema.array(),AccountOrderByWithAggregationInputSchema ]).optional(),
  by: AccountScalarFieldEnumSchema.array(),
  having: AccountScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const AccountFindUniqueArgsSchema: z.ZodType<Prisma.AccountFindUniqueArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  where: AccountWhereUniqueInputSchema,
}).strict()

export const AccountFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.AccountFindUniqueOrThrowArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  where: AccountWhereUniqueInputSchema,
}).strict()

export const SessionFindFirstArgsSchema: z.ZodType<Prisma.SessionFindFirstArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithRelationInputSchema.array(),SessionOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SessionScalarFieldEnumSchema,SessionScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const SessionFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SessionFindFirstOrThrowArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithRelationInputSchema.array(),SessionOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SessionScalarFieldEnumSchema,SessionScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const SessionFindManyArgsSchema: z.ZodType<Prisma.SessionFindManyArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithRelationInputSchema.array(),SessionOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SessionScalarFieldEnumSchema,SessionScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const SessionAggregateArgsSchema: z.ZodType<Prisma.SessionAggregateArgs> = z.object({
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithRelationInputSchema.array(),SessionOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const SessionGroupByArgsSchema: z.ZodType<Prisma.SessionGroupByArgs> = z.object({
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithAggregationInputSchema.array(),SessionOrderByWithAggregationInputSchema ]).optional(),
  by: SessionScalarFieldEnumSchema.array(),
  having: SessionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const SessionFindUniqueArgsSchema: z.ZodType<Prisma.SessionFindUniqueArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereUniqueInputSchema,
}).strict()

export const SessionFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SessionFindUniqueOrThrowArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereUniqueInputSchema,
}).strict()

export const UserFindFirstArgsSchema: z.ZodType<Prisma.UserFindFirstArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const UserFindFirstOrThrowArgsSchema: z.ZodType<Prisma.UserFindFirstOrThrowArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const UserFindManyArgsSchema: z.ZodType<Prisma.UserFindManyArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const UserAggregateArgsSchema: z.ZodType<Prisma.UserAggregateArgs> = z.object({
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const UserGroupByArgsSchema: z.ZodType<Prisma.UserGroupByArgs> = z.object({
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithAggregationInputSchema.array(),UserOrderByWithAggregationInputSchema ]).optional(),
  by: UserScalarFieldEnumSchema.array(),
  having: UserScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const UserFindUniqueArgsSchema: z.ZodType<Prisma.UserFindUniqueArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
}).strict()

export const UserFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.UserFindUniqueOrThrowArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
}).strict()

export const VerificationTokenFindFirstArgsSchema: z.ZodType<Prisma.VerificationTokenFindFirstArgs> = z.object({
  select: VerificationTokenSelectSchema.optional(),
  where: VerificationTokenWhereInputSchema.optional(),
  orderBy: z.union([ VerificationTokenOrderByWithRelationInputSchema.array(),VerificationTokenOrderByWithRelationInputSchema ]).optional(),
  cursor: VerificationTokenWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ VerificationTokenScalarFieldEnumSchema,VerificationTokenScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const VerificationTokenFindFirstOrThrowArgsSchema: z.ZodType<Prisma.VerificationTokenFindFirstOrThrowArgs> = z.object({
  select: VerificationTokenSelectSchema.optional(),
  where: VerificationTokenWhereInputSchema.optional(),
  orderBy: z.union([ VerificationTokenOrderByWithRelationInputSchema.array(),VerificationTokenOrderByWithRelationInputSchema ]).optional(),
  cursor: VerificationTokenWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ VerificationTokenScalarFieldEnumSchema,VerificationTokenScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const VerificationTokenFindManyArgsSchema: z.ZodType<Prisma.VerificationTokenFindManyArgs> = z.object({
  select: VerificationTokenSelectSchema.optional(),
  where: VerificationTokenWhereInputSchema.optional(),
  orderBy: z.union([ VerificationTokenOrderByWithRelationInputSchema.array(),VerificationTokenOrderByWithRelationInputSchema ]).optional(),
  cursor: VerificationTokenWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ VerificationTokenScalarFieldEnumSchema,VerificationTokenScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const VerificationTokenAggregateArgsSchema: z.ZodType<Prisma.VerificationTokenAggregateArgs> = z.object({
  where: VerificationTokenWhereInputSchema.optional(),
  orderBy: z.union([ VerificationTokenOrderByWithRelationInputSchema.array(),VerificationTokenOrderByWithRelationInputSchema ]).optional(),
  cursor: VerificationTokenWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const VerificationTokenGroupByArgsSchema: z.ZodType<Prisma.VerificationTokenGroupByArgs> = z.object({
  where: VerificationTokenWhereInputSchema.optional(),
  orderBy: z.union([ VerificationTokenOrderByWithAggregationInputSchema.array(),VerificationTokenOrderByWithAggregationInputSchema ]).optional(),
  by: VerificationTokenScalarFieldEnumSchema.array(),
  having: VerificationTokenScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const VerificationTokenFindUniqueArgsSchema: z.ZodType<Prisma.VerificationTokenFindUniqueArgs> = z.object({
  select: VerificationTokenSelectSchema.optional(),
  where: VerificationTokenWhereUniqueInputSchema,
}).strict()

export const VerificationTokenFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.VerificationTokenFindUniqueOrThrowArgs> = z.object({
  select: VerificationTokenSelectSchema.optional(),
  where: VerificationTokenWhereUniqueInputSchema,
}).strict()

export const OrganizationFindFirstArgsSchema: z.ZodType<Prisma.OrganizationFindFirstArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithRelationInputSchema.array(),OrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: OrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrganizationScalarFieldEnumSchema,OrganizationScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const OrganizationFindFirstOrThrowArgsSchema: z.ZodType<Prisma.OrganizationFindFirstOrThrowArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithRelationInputSchema.array(),OrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: OrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrganizationScalarFieldEnumSchema,OrganizationScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const OrganizationFindManyArgsSchema: z.ZodType<Prisma.OrganizationFindManyArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithRelationInputSchema.array(),OrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: OrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrganizationScalarFieldEnumSchema,OrganizationScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const OrganizationAggregateArgsSchema: z.ZodType<Prisma.OrganizationAggregateArgs> = z.object({
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithRelationInputSchema.array(),OrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: OrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const OrganizationGroupByArgsSchema: z.ZodType<Prisma.OrganizationGroupByArgs> = z.object({
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithAggregationInputSchema.array(),OrganizationOrderByWithAggregationInputSchema ]).optional(),
  by: OrganizationScalarFieldEnumSchema.array(),
  having: OrganizationScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const OrganizationFindUniqueArgsSchema: z.ZodType<Prisma.OrganizationFindUniqueArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereUniqueInputSchema,
}).strict()

export const OrganizationFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.OrganizationFindUniqueOrThrowArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereUniqueInputSchema,
}).strict()

export const BookingPalConnectionFindFirstArgsSchema: z.ZodType<Prisma.BookingPalConnectionFindFirstArgs> = z.object({
  select: BookingPalConnectionSelectSchema.optional(),
  include: BookingPalConnectionIncludeSchema.optional(),
  where: BookingPalConnectionWhereInputSchema.optional(),
  orderBy: z.union([ BookingPalConnectionOrderByWithRelationInputSchema.array(),BookingPalConnectionOrderByWithRelationInputSchema ]).optional(),
  cursor: BookingPalConnectionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ BookingPalConnectionScalarFieldEnumSchema,BookingPalConnectionScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const BookingPalConnectionFindFirstOrThrowArgsSchema: z.ZodType<Prisma.BookingPalConnectionFindFirstOrThrowArgs> = z.object({
  select: BookingPalConnectionSelectSchema.optional(),
  include: BookingPalConnectionIncludeSchema.optional(),
  where: BookingPalConnectionWhereInputSchema.optional(),
  orderBy: z.union([ BookingPalConnectionOrderByWithRelationInputSchema.array(),BookingPalConnectionOrderByWithRelationInputSchema ]).optional(),
  cursor: BookingPalConnectionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ BookingPalConnectionScalarFieldEnumSchema,BookingPalConnectionScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const BookingPalConnectionFindManyArgsSchema: z.ZodType<Prisma.BookingPalConnectionFindManyArgs> = z.object({
  select: BookingPalConnectionSelectSchema.optional(),
  include: BookingPalConnectionIncludeSchema.optional(),
  where: BookingPalConnectionWhereInputSchema.optional(),
  orderBy: z.union([ BookingPalConnectionOrderByWithRelationInputSchema.array(),BookingPalConnectionOrderByWithRelationInputSchema ]).optional(),
  cursor: BookingPalConnectionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ BookingPalConnectionScalarFieldEnumSchema,BookingPalConnectionScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const BookingPalConnectionAggregateArgsSchema: z.ZodType<Prisma.BookingPalConnectionAggregateArgs> = z.object({
  where: BookingPalConnectionWhereInputSchema.optional(),
  orderBy: z.union([ BookingPalConnectionOrderByWithRelationInputSchema.array(),BookingPalConnectionOrderByWithRelationInputSchema ]).optional(),
  cursor: BookingPalConnectionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const BookingPalConnectionGroupByArgsSchema: z.ZodType<Prisma.BookingPalConnectionGroupByArgs> = z.object({
  where: BookingPalConnectionWhereInputSchema.optional(),
  orderBy: z.union([ BookingPalConnectionOrderByWithAggregationInputSchema.array(),BookingPalConnectionOrderByWithAggregationInputSchema ]).optional(),
  by: BookingPalConnectionScalarFieldEnumSchema.array(),
  having: BookingPalConnectionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const BookingPalConnectionFindUniqueArgsSchema: z.ZodType<Prisma.BookingPalConnectionFindUniqueArgs> = z.object({
  select: BookingPalConnectionSelectSchema.optional(),
  include: BookingPalConnectionIncludeSchema.optional(),
  where: BookingPalConnectionWhereUniqueInputSchema,
}).strict()

export const BookingPalConnectionFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.BookingPalConnectionFindUniqueOrThrowArgs> = z.object({
  select: BookingPalConnectionSelectSchema.optional(),
  include: BookingPalConnectionIncludeSchema.optional(),
  where: BookingPalConnectionWhereUniqueInputSchema,
}).strict()

export const PriceLabsConnectionFindFirstArgsSchema: z.ZodType<Prisma.PriceLabsConnectionFindFirstArgs> = z.object({
  select: PriceLabsConnectionSelectSchema.optional(),
  include: PriceLabsConnectionIncludeSchema.optional(),
  where: PriceLabsConnectionWhereInputSchema.optional(),
  orderBy: z.union([ PriceLabsConnectionOrderByWithRelationInputSchema.array(),PriceLabsConnectionOrderByWithRelationInputSchema ]).optional(),
  cursor: PriceLabsConnectionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PriceLabsConnectionScalarFieldEnumSchema,PriceLabsConnectionScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const PriceLabsConnectionFindFirstOrThrowArgsSchema: z.ZodType<Prisma.PriceLabsConnectionFindFirstOrThrowArgs> = z.object({
  select: PriceLabsConnectionSelectSchema.optional(),
  include: PriceLabsConnectionIncludeSchema.optional(),
  where: PriceLabsConnectionWhereInputSchema.optional(),
  orderBy: z.union([ PriceLabsConnectionOrderByWithRelationInputSchema.array(),PriceLabsConnectionOrderByWithRelationInputSchema ]).optional(),
  cursor: PriceLabsConnectionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PriceLabsConnectionScalarFieldEnumSchema,PriceLabsConnectionScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const PriceLabsConnectionFindManyArgsSchema: z.ZodType<Prisma.PriceLabsConnectionFindManyArgs> = z.object({
  select: PriceLabsConnectionSelectSchema.optional(),
  include: PriceLabsConnectionIncludeSchema.optional(),
  where: PriceLabsConnectionWhereInputSchema.optional(),
  orderBy: z.union([ PriceLabsConnectionOrderByWithRelationInputSchema.array(),PriceLabsConnectionOrderByWithRelationInputSchema ]).optional(),
  cursor: PriceLabsConnectionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PriceLabsConnectionScalarFieldEnumSchema,PriceLabsConnectionScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const PriceLabsConnectionAggregateArgsSchema: z.ZodType<Prisma.PriceLabsConnectionAggregateArgs> = z.object({
  where: PriceLabsConnectionWhereInputSchema.optional(),
  orderBy: z.union([ PriceLabsConnectionOrderByWithRelationInputSchema.array(),PriceLabsConnectionOrderByWithRelationInputSchema ]).optional(),
  cursor: PriceLabsConnectionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const PriceLabsConnectionGroupByArgsSchema: z.ZodType<Prisma.PriceLabsConnectionGroupByArgs> = z.object({
  where: PriceLabsConnectionWhereInputSchema.optional(),
  orderBy: z.union([ PriceLabsConnectionOrderByWithAggregationInputSchema.array(),PriceLabsConnectionOrderByWithAggregationInputSchema ]).optional(),
  by: PriceLabsConnectionScalarFieldEnumSchema.array(),
  having: PriceLabsConnectionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const PriceLabsConnectionFindUniqueArgsSchema: z.ZodType<Prisma.PriceLabsConnectionFindUniqueArgs> = z.object({
  select: PriceLabsConnectionSelectSchema.optional(),
  include: PriceLabsConnectionIncludeSchema.optional(),
  where: PriceLabsConnectionWhereUniqueInputSchema,
}).strict()

export const PriceLabsConnectionFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.PriceLabsConnectionFindUniqueOrThrowArgs> = z.object({
  select: PriceLabsConnectionSelectSchema.optional(),
  include: PriceLabsConnectionIncludeSchema.optional(),
  where: PriceLabsConnectionWhereUniqueInputSchema,
}).strict()

export const StripeConnectionFindFirstArgsSchema: z.ZodType<Prisma.StripeConnectionFindFirstArgs> = z.object({
  select: StripeConnectionSelectSchema.optional(),
  include: StripeConnectionIncludeSchema.optional(),
  where: StripeConnectionWhereInputSchema.optional(),
  orderBy: z.union([ StripeConnectionOrderByWithRelationInputSchema.array(),StripeConnectionOrderByWithRelationInputSchema ]).optional(),
  cursor: StripeConnectionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ StripeConnectionScalarFieldEnumSchema,StripeConnectionScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const StripeConnectionFindFirstOrThrowArgsSchema: z.ZodType<Prisma.StripeConnectionFindFirstOrThrowArgs> = z.object({
  select: StripeConnectionSelectSchema.optional(),
  include: StripeConnectionIncludeSchema.optional(),
  where: StripeConnectionWhereInputSchema.optional(),
  orderBy: z.union([ StripeConnectionOrderByWithRelationInputSchema.array(),StripeConnectionOrderByWithRelationInputSchema ]).optional(),
  cursor: StripeConnectionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ StripeConnectionScalarFieldEnumSchema,StripeConnectionScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const StripeConnectionFindManyArgsSchema: z.ZodType<Prisma.StripeConnectionFindManyArgs> = z.object({
  select: StripeConnectionSelectSchema.optional(),
  include: StripeConnectionIncludeSchema.optional(),
  where: StripeConnectionWhereInputSchema.optional(),
  orderBy: z.union([ StripeConnectionOrderByWithRelationInputSchema.array(),StripeConnectionOrderByWithRelationInputSchema ]).optional(),
  cursor: StripeConnectionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ StripeConnectionScalarFieldEnumSchema,StripeConnectionScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const StripeConnectionAggregateArgsSchema: z.ZodType<Prisma.StripeConnectionAggregateArgs> = z.object({
  where: StripeConnectionWhereInputSchema.optional(),
  orderBy: z.union([ StripeConnectionOrderByWithRelationInputSchema.array(),StripeConnectionOrderByWithRelationInputSchema ]).optional(),
  cursor: StripeConnectionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const StripeConnectionGroupByArgsSchema: z.ZodType<Prisma.StripeConnectionGroupByArgs> = z.object({
  where: StripeConnectionWhereInputSchema.optional(),
  orderBy: z.union([ StripeConnectionOrderByWithAggregationInputSchema.array(),StripeConnectionOrderByWithAggregationInputSchema ]).optional(),
  by: StripeConnectionScalarFieldEnumSchema.array(),
  having: StripeConnectionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const StripeConnectionFindUniqueArgsSchema: z.ZodType<Prisma.StripeConnectionFindUniqueArgs> = z.object({
  select: StripeConnectionSelectSchema.optional(),
  include: StripeConnectionIncludeSchema.optional(),
  where: StripeConnectionWhereUniqueInputSchema,
}).strict()

export const StripeConnectionFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.StripeConnectionFindUniqueOrThrowArgs> = z.object({
  select: StripeConnectionSelectSchema.optional(),
  include: StripeConnectionIncludeSchema.optional(),
  where: StripeConnectionWhereUniqueInputSchema,
}).strict()

export const ListingFindFirstArgsSchema: z.ZodType<Prisma.ListingFindFirstArgs> = z.object({
  select: ListingSelectSchema.optional(),
  include: ListingIncludeSchema.optional(),
  where: ListingWhereInputSchema.optional(),
  orderBy: z.union([ ListingOrderByWithRelationInputSchema.array(),ListingOrderByWithRelationInputSchema ]).optional(),
  cursor: ListingWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ListingScalarFieldEnumSchema,ListingScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const ListingFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ListingFindFirstOrThrowArgs> = z.object({
  select: ListingSelectSchema.optional(),
  include: ListingIncludeSchema.optional(),
  where: ListingWhereInputSchema.optional(),
  orderBy: z.union([ ListingOrderByWithRelationInputSchema.array(),ListingOrderByWithRelationInputSchema ]).optional(),
  cursor: ListingWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ListingScalarFieldEnumSchema,ListingScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const ListingFindManyArgsSchema: z.ZodType<Prisma.ListingFindManyArgs> = z.object({
  select: ListingSelectSchema.optional(),
  include: ListingIncludeSchema.optional(),
  where: ListingWhereInputSchema.optional(),
  orderBy: z.union([ ListingOrderByWithRelationInputSchema.array(),ListingOrderByWithRelationInputSchema ]).optional(),
  cursor: ListingWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ListingScalarFieldEnumSchema,ListingScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const ListingAggregateArgsSchema: z.ZodType<Prisma.ListingAggregateArgs> = z.object({
  where: ListingWhereInputSchema.optional(),
  orderBy: z.union([ ListingOrderByWithRelationInputSchema.array(),ListingOrderByWithRelationInputSchema ]).optional(),
  cursor: ListingWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const ListingGroupByArgsSchema: z.ZodType<Prisma.ListingGroupByArgs> = z.object({
  where: ListingWhereInputSchema.optional(),
  orderBy: z.union([ ListingOrderByWithAggregationInputSchema.array(),ListingOrderByWithAggregationInputSchema ]).optional(),
  by: ListingScalarFieldEnumSchema.array(),
  having: ListingScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const ListingFindUniqueArgsSchema: z.ZodType<Prisma.ListingFindUniqueArgs> = z.object({
  select: ListingSelectSchema.optional(),
  include: ListingIncludeSchema.optional(),
  where: ListingWhereUniqueInputSchema,
}).strict()

export const ListingFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ListingFindUniqueOrThrowArgs> = z.object({
  select: ListingSelectSchema.optional(),
  include: ListingIncludeSchema.optional(),
  where: ListingWhereUniqueInputSchema,
}).strict()

export const ListingKeyFindFirstArgsSchema: z.ZodType<Prisma.ListingKeyFindFirstArgs> = z.object({
  select: ListingKeySelectSchema.optional(),
  include: ListingKeyIncludeSchema.optional(),
  where: ListingKeyWhereInputSchema.optional(),
  orderBy: z.union([ ListingKeyOrderByWithRelationInputSchema.array(),ListingKeyOrderByWithRelationInputSchema ]).optional(),
  cursor: ListingKeyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ListingKeyScalarFieldEnumSchema,ListingKeyScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const ListingKeyFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ListingKeyFindFirstOrThrowArgs> = z.object({
  select: ListingKeySelectSchema.optional(),
  include: ListingKeyIncludeSchema.optional(),
  where: ListingKeyWhereInputSchema.optional(),
  orderBy: z.union([ ListingKeyOrderByWithRelationInputSchema.array(),ListingKeyOrderByWithRelationInputSchema ]).optional(),
  cursor: ListingKeyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ListingKeyScalarFieldEnumSchema,ListingKeyScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const ListingKeyFindManyArgsSchema: z.ZodType<Prisma.ListingKeyFindManyArgs> = z.object({
  select: ListingKeySelectSchema.optional(),
  include: ListingKeyIncludeSchema.optional(),
  where: ListingKeyWhereInputSchema.optional(),
  orderBy: z.union([ ListingKeyOrderByWithRelationInputSchema.array(),ListingKeyOrderByWithRelationInputSchema ]).optional(),
  cursor: ListingKeyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ListingKeyScalarFieldEnumSchema,ListingKeyScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const ListingKeyAggregateArgsSchema: z.ZodType<Prisma.ListingKeyAggregateArgs> = z.object({
  where: ListingKeyWhereInputSchema.optional(),
  orderBy: z.union([ ListingKeyOrderByWithRelationInputSchema.array(),ListingKeyOrderByWithRelationInputSchema ]).optional(),
  cursor: ListingKeyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const ListingKeyGroupByArgsSchema: z.ZodType<Prisma.ListingKeyGroupByArgs> = z.object({
  where: ListingKeyWhereInputSchema.optional(),
  orderBy: z.union([ ListingKeyOrderByWithAggregationInputSchema.array(),ListingKeyOrderByWithAggregationInputSchema ]).optional(),
  by: ListingKeyScalarFieldEnumSchema.array(),
  having: ListingKeyScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const ListingKeyFindUniqueArgsSchema: z.ZodType<Prisma.ListingKeyFindUniqueArgs> = z.object({
  select: ListingKeySelectSchema.optional(),
  include: ListingKeyIncludeSchema.optional(),
  where: ListingKeyWhereUniqueInputSchema,
}).strict()

export const ListingKeyFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ListingKeyFindUniqueOrThrowArgs> = z.object({
  select: ListingKeySelectSchema.optional(),
  include: ListingKeyIncludeSchema.optional(),
  where: ListingKeyWhereUniqueInputSchema,
}).strict()

export const ContentFindFirstArgsSchema: z.ZodType<Prisma.ContentFindFirstArgs> = z.object({
  select: ContentSelectSchema.optional(),
  include: ContentIncludeSchema.optional(),
  where: ContentWhereInputSchema.optional(),
  orderBy: z.union([ ContentOrderByWithRelationInputSchema.array(),ContentOrderByWithRelationInputSchema ]).optional(),
  cursor: ContentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ContentScalarFieldEnumSchema,ContentScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const ContentFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ContentFindFirstOrThrowArgs> = z.object({
  select: ContentSelectSchema.optional(),
  include: ContentIncludeSchema.optional(),
  where: ContentWhereInputSchema.optional(),
  orderBy: z.union([ ContentOrderByWithRelationInputSchema.array(),ContentOrderByWithRelationInputSchema ]).optional(),
  cursor: ContentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ContentScalarFieldEnumSchema,ContentScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const ContentFindManyArgsSchema: z.ZodType<Prisma.ContentFindManyArgs> = z.object({
  select: ContentSelectSchema.optional(),
  include: ContentIncludeSchema.optional(),
  where: ContentWhereInputSchema.optional(),
  orderBy: z.union([ ContentOrderByWithRelationInputSchema.array(),ContentOrderByWithRelationInputSchema ]).optional(),
  cursor: ContentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ContentScalarFieldEnumSchema,ContentScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const ContentAggregateArgsSchema: z.ZodType<Prisma.ContentAggregateArgs> = z.object({
  where: ContentWhereInputSchema.optional(),
  orderBy: z.union([ ContentOrderByWithRelationInputSchema.array(),ContentOrderByWithRelationInputSchema ]).optional(),
  cursor: ContentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const ContentGroupByArgsSchema: z.ZodType<Prisma.ContentGroupByArgs> = z.object({
  where: ContentWhereInputSchema.optional(),
  orderBy: z.union([ ContentOrderByWithAggregationInputSchema.array(),ContentOrderByWithAggregationInputSchema ]).optional(),
  by: ContentScalarFieldEnumSchema.array(),
  having: ContentScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const ContentFindUniqueArgsSchema: z.ZodType<Prisma.ContentFindUniqueArgs> = z.object({
  select: ContentSelectSchema.optional(),
  include: ContentIncludeSchema.optional(),
  where: ContentWhereUniqueInputSchema,
}).strict()

export const ContentFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ContentFindUniqueOrThrowArgs> = z.object({
  select: ContentSelectSchema.optional(),
  include: ContentIncludeSchema.optional(),
  where: ContentWhereUniqueInputSchema,
}).strict()

export const RulesFindFirstArgsSchema: z.ZodType<Prisma.RulesFindFirstArgs> = z.object({
  select: RulesSelectSchema.optional(),
  include: RulesIncludeSchema.optional(),
  where: RulesWhereInputSchema.optional(),
  orderBy: z.union([ RulesOrderByWithRelationInputSchema.array(),RulesOrderByWithRelationInputSchema ]).optional(),
  cursor: RulesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RulesScalarFieldEnumSchema,RulesScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const RulesFindFirstOrThrowArgsSchema: z.ZodType<Prisma.RulesFindFirstOrThrowArgs> = z.object({
  select: RulesSelectSchema.optional(),
  include: RulesIncludeSchema.optional(),
  where: RulesWhereInputSchema.optional(),
  orderBy: z.union([ RulesOrderByWithRelationInputSchema.array(),RulesOrderByWithRelationInputSchema ]).optional(),
  cursor: RulesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RulesScalarFieldEnumSchema,RulesScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const RulesFindManyArgsSchema: z.ZodType<Prisma.RulesFindManyArgs> = z.object({
  select: RulesSelectSchema.optional(),
  include: RulesIncludeSchema.optional(),
  where: RulesWhereInputSchema.optional(),
  orderBy: z.union([ RulesOrderByWithRelationInputSchema.array(),RulesOrderByWithRelationInputSchema ]).optional(),
  cursor: RulesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RulesScalarFieldEnumSchema,RulesScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const RulesAggregateArgsSchema: z.ZodType<Prisma.RulesAggregateArgs> = z.object({
  where: RulesWhereInputSchema.optional(),
  orderBy: z.union([ RulesOrderByWithRelationInputSchema.array(),RulesOrderByWithRelationInputSchema ]).optional(),
  cursor: RulesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const RulesGroupByArgsSchema: z.ZodType<Prisma.RulesGroupByArgs> = z.object({
  where: RulesWhereInputSchema.optional(),
  orderBy: z.union([ RulesOrderByWithAggregationInputSchema.array(),RulesOrderByWithAggregationInputSchema ]).optional(),
  by: RulesScalarFieldEnumSchema.array(),
  having: RulesScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const RulesFindUniqueArgsSchema: z.ZodType<Prisma.RulesFindUniqueArgs> = z.object({
  select: RulesSelectSchema.optional(),
  include: RulesIncludeSchema.optional(),
  where: RulesWhereUniqueInputSchema,
}).strict()

export const RulesFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.RulesFindUniqueOrThrowArgs> = z.object({
  select: RulesSelectSchema.optional(),
  include: RulesIncludeSchema.optional(),
  where: RulesWhereUniqueInputSchema,
}).strict()

export const PricingFindFirstArgsSchema: z.ZodType<Prisma.PricingFindFirstArgs> = z.object({
  select: PricingSelectSchema.optional(),
  include: PricingIncludeSchema.optional(),
  where: PricingWhereInputSchema.optional(),
  orderBy: z.union([ PricingOrderByWithRelationInputSchema.array(),PricingOrderByWithRelationInputSchema ]).optional(),
  cursor: PricingWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PricingScalarFieldEnumSchema,PricingScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const PricingFindFirstOrThrowArgsSchema: z.ZodType<Prisma.PricingFindFirstOrThrowArgs> = z.object({
  select: PricingSelectSchema.optional(),
  include: PricingIncludeSchema.optional(),
  where: PricingWhereInputSchema.optional(),
  orderBy: z.union([ PricingOrderByWithRelationInputSchema.array(),PricingOrderByWithRelationInputSchema ]).optional(),
  cursor: PricingWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PricingScalarFieldEnumSchema,PricingScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const PricingFindManyArgsSchema: z.ZodType<Prisma.PricingFindManyArgs> = z.object({
  select: PricingSelectSchema.optional(),
  include: PricingIncludeSchema.optional(),
  where: PricingWhereInputSchema.optional(),
  orderBy: z.union([ PricingOrderByWithRelationInputSchema.array(),PricingOrderByWithRelationInputSchema ]).optional(),
  cursor: PricingWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PricingScalarFieldEnumSchema,PricingScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const PricingAggregateArgsSchema: z.ZodType<Prisma.PricingAggregateArgs> = z.object({
  where: PricingWhereInputSchema.optional(),
  orderBy: z.union([ PricingOrderByWithRelationInputSchema.array(),PricingOrderByWithRelationInputSchema ]).optional(),
  cursor: PricingWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const PricingGroupByArgsSchema: z.ZodType<Prisma.PricingGroupByArgs> = z.object({
  where: PricingWhereInputSchema.optional(),
  orderBy: z.union([ PricingOrderByWithAggregationInputSchema.array(),PricingOrderByWithAggregationInputSchema ]).optional(),
  by: PricingScalarFieldEnumSchema.array(),
  having: PricingScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const PricingFindUniqueArgsSchema: z.ZodType<Prisma.PricingFindUniqueArgs> = z.object({
  select: PricingSelectSchema.optional(),
  include: PricingIncludeSchema.optional(),
  where: PricingWhereUniqueInputSchema,
}).strict()

export const PricingFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.PricingFindUniqueOrThrowArgs> = z.object({
  select: PricingSelectSchema.optional(),
  include: PricingIncludeSchema.optional(),
  where: PricingWhereUniqueInputSchema,
}).strict()

export const PricingDateFindFirstArgsSchema: z.ZodType<Prisma.PricingDateFindFirstArgs> = z.object({
  select: PricingDateSelectSchema.optional(),
  include: PricingDateIncludeSchema.optional(),
  where: PricingDateWhereInputSchema.optional(),
  orderBy: z.union([ PricingDateOrderByWithRelationInputSchema.array(),PricingDateOrderByWithRelationInputSchema ]).optional(),
  cursor: PricingDateWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PricingDateScalarFieldEnumSchema,PricingDateScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const PricingDateFindFirstOrThrowArgsSchema: z.ZodType<Prisma.PricingDateFindFirstOrThrowArgs> = z.object({
  select: PricingDateSelectSchema.optional(),
  include: PricingDateIncludeSchema.optional(),
  where: PricingDateWhereInputSchema.optional(),
  orderBy: z.union([ PricingDateOrderByWithRelationInputSchema.array(),PricingDateOrderByWithRelationInputSchema ]).optional(),
  cursor: PricingDateWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PricingDateScalarFieldEnumSchema,PricingDateScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const PricingDateFindManyArgsSchema: z.ZodType<Prisma.PricingDateFindManyArgs> = z.object({
  select: PricingDateSelectSchema.optional(),
  include: PricingDateIncludeSchema.optional(),
  where: PricingDateWhereInputSchema.optional(),
  orderBy: z.union([ PricingDateOrderByWithRelationInputSchema.array(),PricingDateOrderByWithRelationInputSchema ]).optional(),
  cursor: PricingDateWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PricingDateScalarFieldEnumSchema,PricingDateScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const PricingDateAggregateArgsSchema: z.ZodType<Prisma.PricingDateAggregateArgs> = z.object({
  where: PricingDateWhereInputSchema.optional(),
  orderBy: z.union([ PricingDateOrderByWithRelationInputSchema.array(),PricingDateOrderByWithRelationInputSchema ]).optional(),
  cursor: PricingDateWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const PricingDateGroupByArgsSchema: z.ZodType<Prisma.PricingDateGroupByArgs> = z.object({
  where: PricingDateWhereInputSchema.optional(),
  orderBy: z.union([ PricingDateOrderByWithAggregationInputSchema.array(),PricingDateOrderByWithAggregationInputSchema ]).optional(),
  by: PricingDateScalarFieldEnumSchema.array(),
  having: PricingDateScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const PricingDateFindUniqueArgsSchema: z.ZodType<Prisma.PricingDateFindUniqueArgs> = z.object({
  select: PricingDateSelectSchema.optional(),
  include: PricingDateIncludeSchema.optional(),
  where: PricingDateWhereUniqueInputSchema,
}).strict()

export const PricingDateFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.PricingDateFindUniqueOrThrowArgs> = z.object({
  select: PricingDateSelectSchema.optional(),
  include: PricingDateIncludeSchema.optional(),
  where: PricingDateWhereUniqueInputSchema,
}).strict()

export const DiscountFindFirstArgsSchema: z.ZodType<Prisma.DiscountFindFirstArgs> = z.object({
  select: DiscountSelectSchema.optional(),
  include: DiscountIncludeSchema.optional(),
  where: DiscountWhereInputSchema.optional(),
  orderBy: z.union([ DiscountOrderByWithRelationInputSchema.array(),DiscountOrderByWithRelationInputSchema ]).optional(),
  cursor: DiscountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DiscountScalarFieldEnumSchema,DiscountScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const DiscountFindFirstOrThrowArgsSchema: z.ZodType<Prisma.DiscountFindFirstOrThrowArgs> = z.object({
  select: DiscountSelectSchema.optional(),
  include: DiscountIncludeSchema.optional(),
  where: DiscountWhereInputSchema.optional(),
  orderBy: z.union([ DiscountOrderByWithRelationInputSchema.array(),DiscountOrderByWithRelationInputSchema ]).optional(),
  cursor: DiscountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DiscountScalarFieldEnumSchema,DiscountScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const DiscountFindManyArgsSchema: z.ZodType<Prisma.DiscountFindManyArgs> = z.object({
  select: DiscountSelectSchema.optional(),
  include: DiscountIncludeSchema.optional(),
  where: DiscountWhereInputSchema.optional(),
  orderBy: z.union([ DiscountOrderByWithRelationInputSchema.array(),DiscountOrderByWithRelationInputSchema ]).optional(),
  cursor: DiscountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DiscountScalarFieldEnumSchema,DiscountScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const DiscountAggregateArgsSchema: z.ZodType<Prisma.DiscountAggregateArgs> = z.object({
  where: DiscountWhereInputSchema.optional(),
  orderBy: z.union([ DiscountOrderByWithRelationInputSchema.array(),DiscountOrderByWithRelationInputSchema ]).optional(),
  cursor: DiscountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const DiscountGroupByArgsSchema: z.ZodType<Prisma.DiscountGroupByArgs> = z.object({
  where: DiscountWhereInputSchema.optional(),
  orderBy: z.union([ DiscountOrderByWithAggregationInputSchema.array(),DiscountOrderByWithAggregationInputSchema ]).optional(),
  by: DiscountScalarFieldEnumSchema.array(),
  having: DiscountScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const DiscountFindUniqueArgsSchema: z.ZodType<Prisma.DiscountFindUniqueArgs> = z.object({
  select: DiscountSelectSchema.optional(),
  include: DiscountIncludeSchema.optional(),
  where: DiscountWhereUniqueInputSchema,
}).strict()

export const DiscountFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.DiscountFindUniqueOrThrowArgs> = z.object({
  select: DiscountSelectSchema.optional(),
  include: DiscountIncludeSchema.optional(),
  where: DiscountWhereUniqueInputSchema,
}).strict()

export const AvailabilityFindFirstArgsSchema: z.ZodType<Prisma.AvailabilityFindFirstArgs> = z.object({
  select: AvailabilitySelectSchema.optional(),
  include: AvailabilityIncludeSchema.optional(),
  where: AvailabilityWhereInputSchema.optional(),
  orderBy: z.union([ AvailabilityOrderByWithRelationInputSchema.array(),AvailabilityOrderByWithRelationInputSchema ]).optional(),
  cursor: AvailabilityWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AvailabilityScalarFieldEnumSchema,AvailabilityScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const AvailabilityFindFirstOrThrowArgsSchema: z.ZodType<Prisma.AvailabilityFindFirstOrThrowArgs> = z.object({
  select: AvailabilitySelectSchema.optional(),
  include: AvailabilityIncludeSchema.optional(),
  where: AvailabilityWhereInputSchema.optional(),
  orderBy: z.union([ AvailabilityOrderByWithRelationInputSchema.array(),AvailabilityOrderByWithRelationInputSchema ]).optional(),
  cursor: AvailabilityWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AvailabilityScalarFieldEnumSchema,AvailabilityScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const AvailabilityFindManyArgsSchema: z.ZodType<Prisma.AvailabilityFindManyArgs> = z.object({
  select: AvailabilitySelectSchema.optional(),
  include: AvailabilityIncludeSchema.optional(),
  where: AvailabilityWhereInputSchema.optional(),
  orderBy: z.union([ AvailabilityOrderByWithRelationInputSchema.array(),AvailabilityOrderByWithRelationInputSchema ]).optional(),
  cursor: AvailabilityWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AvailabilityScalarFieldEnumSchema,AvailabilityScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const AvailabilityAggregateArgsSchema: z.ZodType<Prisma.AvailabilityAggregateArgs> = z.object({
  where: AvailabilityWhereInputSchema.optional(),
  orderBy: z.union([ AvailabilityOrderByWithRelationInputSchema.array(),AvailabilityOrderByWithRelationInputSchema ]).optional(),
  cursor: AvailabilityWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const AvailabilityGroupByArgsSchema: z.ZodType<Prisma.AvailabilityGroupByArgs> = z.object({
  where: AvailabilityWhereInputSchema.optional(),
  orderBy: z.union([ AvailabilityOrderByWithAggregationInputSchema.array(),AvailabilityOrderByWithAggregationInputSchema ]).optional(),
  by: AvailabilityScalarFieldEnumSchema.array(),
  having: AvailabilityScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const AvailabilityFindUniqueArgsSchema: z.ZodType<Prisma.AvailabilityFindUniqueArgs> = z.object({
  select: AvailabilitySelectSchema.optional(),
  include: AvailabilityIncludeSchema.optional(),
  where: AvailabilityWhereUniqueInputSchema,
}).strict()

export const AvailabilityFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.AvailabilityFindUniqueOrThrowArgs> = z.object({
  select: AvailabilitySelectSchema.optional(),
  include: AvailabilityIncludeSchema.optional(),
  where: AvailabilityWhereUniqueInputSchema,
}).strict()

export const AmenityFindFirstArgsSchema: z.ZodType<Prisma.AmenityFindFirstArgs> = z.object({
  select: AmenitySelectSchema.optional(),
  include: AmenityIncludeSchema.optional(),
  where: AmenityWhereInputSchema.optional(),
  orderBy: z.union([ AmenityOrderByWithRelationInputSchema.array(),AmenityOrderByWithRelationInputSchema ]).optional(),
  cursor: AmenityWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AmenityScalarFieldEnumSchema,AmenityScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const AmenityFindFirstOrThrowArgsSchema: z.ZodType<Prisma.AmenityFindFirstOrThrowArgs> = z.object({
  select: AmenitySelectSchema.optional(),
  include: AmenityIncludeSchema.optional(),
  where: AmenityWhereInputSchema.optional(),
  orderBy: z.union([ AmenityOrderByWithRelationInputSchema.array(),AmenityOrderByWithRelationInputSchema ]).optional(),
  cursor: AmenityWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AmenityScalarFieldEnumSchema,AmenityScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const AmenityFindManyArgsSchema: z.ZodType<Prisma.AmenityFindManyArgs> = z.object({
  select: AmenitySelectSchema.optional(),
  include: AmenityIncludeSchema.optional(),
  where: AmenityWhereInputSchema.optional(),
  orderBy: z.union([ AmenityOrderByWithRelationInputSchema.array(),AmenityOrderByWithRelationInputSchema ]).optional(),
  cursor: AmenityWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AmenityScalarFieldEnumSchema,AmenityScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const AmenityAggregateArgsSchema: z.ZodType<Prisma.AmenityAggregateArgs> = z.object({
  where: AmenityWhereInputSchema.optional(),
  orderBy: z.union([ AmenityOrderByWithRelationInputSchema.array(),AmenityOrderByWithRelationInputSchema ]).optional(),
  cursor: AmenityWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const AmenityGroupByArgsSchema: z.ZodType<Prisma.AmenityGroupByArgs> = z.object({
  where: AmenityWhereInputSchema.optional(),
  orderBy: z.union([ AmenityOrderByWithAggregationInputSchema.array(),AmenityOrderByWithAggregationInputSchema ]).optional(),
  by: AmenityScalarFieldEnumSchema.array(),
  having: AmenityScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const AmenityFindUniqueArgsSchema: z.ZodType<Prisma.AmenityFindUniqueArgs> = z.object({
  select: AmenitySelectSchema.optional(),
  include: AmenityIncludeSchema.optional(),
  where: AmenityWhereUniqueInputSchema,
}).strict()

export const AmenityFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.AmenityFindUniqueOrThrowArgs> = z.object({
  select: AmenitySelectSchema.optional(),
  include: AmenityIncludeSchema.optional(),
  where: AmenityWhereUniqueInputSchema,
}).strict()

export const FeeFindFirstArgsSchema: z.ZodType<Prisma.FeeFindFirstArgs> = z.object({
  select: FeeSelectSchema.optional(),
  include: FeeIncludeSchema.optional(),
  where: FeeWhereInputSchema.optional(),
  orderBy: z.union([ FeeOrderByWithRelationInputSchema.array(),FeeOrderByWithRelationInputSchema ]).optional(),
  cursor: FeeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FeeScalarFieldEnumSchema,FeeScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const FeeFindFirstOrThrowArgsSchema: z.ZodType<Prisma.FeeFindFirstOrThrowArgs> = z.object({
  select: FeeSelectSchema.optional(),
  include: FeeIncludeSchema.optional(),
  where: FeeWhereInputSchema.optional(),
  orderBy: z.union([ FeeOrderByWithRelationInputSchema.array(),FeeOrderByWithRelationInputSchema ]).optional(),
  cursor: FeeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FeeScalarFieldEnumSchema,FeeScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const FeeFindManyArgsSchema: z.ZodType<Prisma.FeeFindManyArgs> = z.object({
  select: FeeSelectSchema.optional(),
  include: FeeIncludeSchema.optional(),
  where: FeeWhereInputSchema.optional(),
  orderBy: z.union([ FeeOrderByWithRelationInputSchema.array(),FeeOrderByWithRelationInputSchema ]).optional(),
  cursor: FeeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FeeScalarFieldEnumSchema,FeeScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const FeeAggregateArgsSchema: z.ZodType<Prisma.FeeAggregateArgs> = z.object({
  where: FeeWhereInputSchema.optional(),
  orderBy: z.union([ FeeOrderByWithRelationInputSchema.array(),FeeOrderByWithRelationInputSchema ]).optional(),
  cursor: FeeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const FeeGroupByArgsSchema: z.ZodType<Prisma.FeeGroupByArgs> = z.object({
  where: FeeWhereInputSchema.optional(),
  orderBy: z.union([ FeeOrderByWithAggregationInputSchema.array(),FeeOrderByWithAggregationInputSchema ]).optional(),
  by: FeeScalarFieldEnumSchema.array(),
  having: FeeScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const FeeFindUniqueArgsSchema: z.ZodType<Prisma.FeeFindUniqueArgs> = z.object({
  select: FeeSelectSchema.optional(),
  include: FeeIncludeSchema.optional(),
  where: FeeWhereUniqueInputSchema,
}).strict()

export const FeeFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.FeeFindUniqueOrThrowArgs> = z.object({
  select: FeeSelectSchema.optional(),
  include: FeeIncludeSchema.optional(),
  where: FeeWhereUniqueInputSchema,
}).strict()

export const TaxRatesFindFirstArgsSchema: z.ZodType<Prisma.TaxRatesFindFirstArgs> = z.object({
  select: TaxRatesSelectSchema.optional(),
  include: TaxRatesIncludeSchema.optional(),
  where: TaxRatesWhereInputSchema.optional(),
  orderBy: z.union([ TaxRatesOrderByWithRelationInputSchema.array(),TaxRatesOrderByWithRelationInputSchema ]).optional(),
  cursor: TaxRatesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TaxRatesScalarFieldEnumSchema,TaxRatesScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const TaxRatesFindFirstOrThrowArgsSchema: z.ZodType<Prisma.TaxRatesFindFirstOrThrowArgs> = z.object({
  select: TaxRatesSelectSchema.optional(),
  include: TaxRatesIncludeSchema.optional(),
  where: TaxRatesWhereInputSchema.optional(),
  orderBy: z.union([ TaxRatesOrderByWithRelationInputSchema.array(),TaxRatesOrderByWithRelationInputSchema ]).optional(),
  cursor: TaxRatesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TaxRatesScalarFieldEnumSchema,TaxRatesScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const TaxRatesFindManyArgsSchema: z.ZodType<Prisma.TaxRatesFindManyArgs> = z.object({
  select: TaxRatesSelectSchema.optional(),
  include: TaxRatesIncludeSchema.optional(),
  where: TaxRatesWhereInputSchema.optional(),
  orderBy: z.union([ TaxRatesOrderByWithRelationInputSchema.array(),TaxRatesOrderByWithRelationInputSchema ]).optional(),
  cursor: TaxRatesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TaxRatesScalarFieldEnumSchema,TaxRatesScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const TaxRatesAggregateArgsSchema: z.ZodType<Prisma.TaxRatesAggregateArgs> = z.object({
  where: TaxRatesWhereInputSchema.optional(),
  orderBy: z.union([ TaxRatesOrderByWithRelationInputSchema.array(),TaxRatesOrderByWithRelationInputSchema ]).optional(),
  cursor: TaxRatesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const TaxRatesGroupByArgsSchema: z.ZodType<Prisma.TaxRatesGroupByArgs> = z.object({
  where: TaxRatesWhereInputSchema.optional(),
  orderBy: z.union([ TaxRatesOrderByWithAggregationInputSchema.array(),TaxRatesOrderByWithAggregationInputSchema ]).optional(),
  by: TaxRatesScalarFieldEnumSchema.array(),
  having: TaxRatesScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const TaxRatesFindUniqueArgsSchema: z.ZodType<Prisma.TaxRatesFindUniqueArgs> = z.object({
  select: TaxRatesSelectSchema.optional(),
  include: TaxRatesIncludeSchema.optional(),
  where: TaxRatesWhereUniqueInputSchema,
}).strict()

export const TaxRatesFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.TaxRatesFindUniqueOrThrowArgs> = z.object({
  select: TaxRatesSelectSchema.optional(),
  include: TaxRatesIncludeSchema.optional(),
  where: TaxRatesWhereUniqueInputSchema,
}).strict()

export const DeductionsFindFirstArgsSchema: z.ZodType<Prisma.DeductionsFindFirstArgs> = z.object({
  select: DeductionsSelectSchema.optional(),
  include: DeductionsIncludeSchema.optional(),
  where: DeductionsWhereInputSchema.optional(),
  orderBy: z.union([ DeductionsOrderByWithRelationInputSchema.array(),DeductionsOrderByWithRelationInputSchema ]).optional(),
  cursor: DeductionsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DeductionsScalarFieldEnumSchema,DeductionsScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const DeductionsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.DeductionsFindFirstOrThrowArgs> = z.object({
  select: DeductionsSelectSchema.optional(),
  include: DeductionsIncludeSchema.optional(),
  where: DeductionsWhereInputSchema.optional(),
  orderBy: z.union([ DeductionsOrderByWithRelationInputSchema.array(),DeductionsOrderByWithRelationInputSchema ]).optional(),
  cursor: DeductionsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DeductionsScalarFieldEnumSchema,DeductionsScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const DeductionsFindManyArgsSchema: z.ZodType<Prisma.DeductionsFindManyArgs> = z.object({
  select: DeductionsSelectSchema.optional(),
  include: DeductionsIncludeSchema.optional(),
  where: DeductionsWhereInputSchema.optional(),
  orderBy: z.union([ DeductionsOrderByWithRelationInputSchema.array(),DeductionsOrderByWithRelationInputSchema ]).optional(),
  cursor: DeductionsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DeductionsScalarFieldEnumSchema,DeductionsScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const DeductionsAggregateArgsSchema: z.ZodType<Prisma.DeductionsAggregateArgs> = z.object({
  where: DeductionsWhereInputSchema.optional(),
  orderBy: z.union([ DeductionsOrderByWithRelationInputSchema.array(),DeductionsOrderByWithRelationInputSchema ]).optional(),
  cursor: DeductionsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const DeductionsGroupByArgsSchema: z.ZodType<Prisma.DeductionsGroupByArgs> = z.object({
  where: DeductionsWhereInputSchema.optional(),
  orderBy: z.union([ DeductionsOrderByWithAggregationInputSchema.array(),DeductionsOrderByWithAggregationInputSchema ]).optional(),
  by: DeductionsScalarFieldEnumSchema.array(),
  having: DeductionsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const DeductionsFindUniqueArgsSchema: z.ZodType<Prisma.DeductionsFindUniqueArgs> = z.object({
  select: DeductionsSelectSchema.optional(),
  include: DeductionsIncludeSchema.optional(),
  where: DeductionsWhereUniqueInputSchema,
}).strict()

export const DeductionsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.DeductionsFindUniqueOrThrowArgs> = z.object({
  select: DeductionsSelectSchema.optional(),
  include: DeductionsIncludeSchema.optional(),
  where: DeductionsWhereUniqueInputSchema,
}).strict()

export const BedroomFindFirstArgsSchema: z.ZodType<Prisma.BedroomFindFirstArgs> = z.object({
  select: BedroomSelectSchema.optional(),
  include: BedroomIncludeSchema.optional(),
  where: BedroomWhereInputSchema.optional(),
  orderBy: z.union([ BedroomOrderByWithRelationInputSchema.array(),BedroomOrderByWithRelationInputSchema ]).optional(),
  cursor: BedroomWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ BedroomScalarFieldEnumSchema,BedroomScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const BedroomFindFirstOrThrowArgsSchema: z.ZodType<Prisma.BedroomFindFirstOrThrowArgs> = z.object({
  select: BedroomSelectSchema.optional(),
  include: BedroomIncludeSchema.optional(),
  where: BedroomWhereInputSchema.optional(),
  orderBy: z.union([ BedroomOrderByWithRelationInputSchema.array(),BedroomOrderByWithRelationInputSchema ]).optional(),
  cursor: BedroomWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ BedroomScalarFieldEnumSchema,BedroomScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const BedroomFindManyArgsSchema: z.ZodType<Prisma.BedroomFindManyArgs> = z.object({
  select: BedroomSelectSchema.optional(),
  include: BedroomIncludeSchema.optional(),
  where: BedroomWhereInputSchema.optional(),
  orderBy: z.union([ BedroomOrderByWithRelationInputSchema.array(),BedroomOrderByWithRelationInputSchema ]).optional(),
  cursor: BedroomWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ BedroomScalarFieldEnumSchema,BedroomScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const BedroomAggregateArgsSchema: z.ZodType<Prisma.BedroomAggregateArgs> = z.object({
  where: BedroomWhereInputSchema.optional(),
  orderBy: z.union([ BedroomOrderByWithRelationInputSchema.array(),BedroomOrderByWithRelationInputSchema ]).optional(),
  cursor: BedroomWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const BedroomGroupByArgsSchema: z.ZodType<Prisma.BedroomGroupByArgs> = z.object({
  where: BedroomWhereInputSchema.optional(),
  orderBy: z.union([ BedroomOrderByWithAggregationInputSchema.array(),BedroomOrderByWithAggregationInputSchema ]).optional(),
  by: BedroomScalarFieldEnumSchema.array(),
  having: BedroomScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const BedroomFindUniqueArgsSchema: z.ZodType<Prisma.BedroomFindUniqueArgs> = z.object({
  select: BedroomSelectSchema.optional(),
  include: BedroomIncludeSchema.optional(),
  where: BedroomWhereUniqueInputSchema,
}).strict()

export const BedroomFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.BedroomFindUniqueOrThrowArgs> = z.object({
  select: BedroomSelectSchema.optional(),
  include: BedroomIncludeSchema.optional(),
  where: BedroomWhereUniqueInputSchema,
}).strict()

export const CalendarEventFindFirstArgsSchema: z.ZodType<Prisma.CalendarEventFindFirstArgs> = z.object({
  select: CalendarEventSelectSchema.optional(),
  include: CalendarEventIncludeSchema.optional(),
  where: CalendarEventWhereInputSchema.optional(),
  orderBy: z.union([ CalendarEventOrderByWithRelationInputSchema.array(),CalendarEventOrderByWithRelationInputSchema ]).optional(),
  cursor: CalendarEventWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CalendarEventScalarFieldEnumSchema,CalendarEventScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const CalendarEventFindFirstOrThrowArgsSchema: z.ZodType<Prisma.CalendarEventFindFirstOrThrowArgs> = z.object({
  select: CalendarEventSelectSchema.optional(),
  include: CalendarEventIncludeSchema.optional(),
  where: CalendarEventWhereInputSchema.optional(),
  orderBy: z.union([ CalendarEventOrderByWithRelationInputSchema.array(),CalendarEventOrderByWithRelationInputSchema ]).optional(),
  cursor: CalendarEventWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CalendarEventScalarFieldEnumSchema,CalendarEventScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const CalendarEventFindManyArgsSchema: z.ZodType<Prisma.CalendarEventFindManyArgs> = z.object({
  select: CalendarEventSelectSchema.optional(),
  include: CalendarEventIncludeSchema.optional(),
  where: CalendarEventWhereInputSchema.optional(),
  orderBy: z.union([ CalendarEventOrderByWithRelationInputSchema.array(),CalendarEventOrderByWithRelationInputSchema ]).optional(),
  cursor: CalendarEventWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CalendarEventScalarFieldEnumSchema,CalendarEventScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const CalendarEventAggregateArgsSchema: z.ZodType<Prisma.CalendarEventAggregateArgs> = z.object({
  where: CalendarEventWhereInputSchema.optional(),
  orderBy: z.union([ CalendarEventOrderByWithRelationInputSchema.array(),CalendarEventOrderByWithRelationInputSchema ]).optional(),
  cursor: CalendarEventWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const CalendarEventGroupByArgsSchema: z.ZodType<Prisma.CalendarEventGroupByArgs> = z.object({
  where: CalendarEventWhereInputSchema.optional(),
  orderBy: z.union([ CalendarEventOrderByWithAggregationInputSchema.array(),CalendarEventOrderByWithAggregationInputSchema ]).optional(),
  by: CalendarEventScalarFieldEnumSchema.array(),
  having: CalendarEventScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const CalendarEventFindUniqueArgsSchema: z.ZodType<Prisma.CalendarEventFindUniqueArgs> = z.object({
  select: CalendarEventSelectSchema.optional(),
  include: CalendarEventIncludeSchema.optional(),
  where: CalendarEventWhereUniqueInputSchema,
}).strict()

export const CalendarEventFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.CalendarEventFindUniqueOrThrowArgs> = z.object({
  select: CalendarEventSelectSchema.optional(),
  include: CalendarEventIncludeSchema.optional(),
  where: CalendarEventWhereUniqueInputSchema,
}).strict()

export const ReservationFindFirstArgsSchema: z.ZodType<Prisma.ReservationFindFirstArgs> = z.object({
  select: ReservationSelectSchema.optional(),
  include: ReservationIncludeSchema.optional(),
  where: ReservationWhereInputSchema.optional(),
  orderBy: z.union([ ReservationOrderByWithRelationInputSchema.array(),ReservationOrderByWithRelationInputSchema ]).optional(),
  cursor: ReservationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ReservationScalarFieldEnumSchema,ReservationScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const ReservationFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ReservationFindFirstOrThrowArgs> = z.object({
  select: ReservationSelectSchema.optional(),
  include: ReservationIncludeSchema.optional(),
  where: ReservationWhereInputSchema.optional(),
  orderBy: z.union([ ReservationOrderByWithRelationInputSchema.array(),ReservationOrderByWithRelationInputSchema ]).optional(),
  cursor: ReservationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ReservationScalarFieldEnumSchema,ReservationScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const ReservationFindManyArgsSchema: z.ZodType<Prisma.ReservationFindManyArgs> = z.object({
  select: ReservationSelectSchema.optional(),
  include: ReservationIncludeSchema.optional(),
  where: ReservationWhereInputSchema.optional(),
  orderBy: z.union([ ReservationOrderByWithRelationInputSchema.array(),ReservationOrderByWithRelationInputSchema ]).optional(),
  cursor: ReservationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ReservationScalarFieldEnumSchema,ReservationScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const ReservationAggregateArgsSchema: z.ZodType<Prisma.ReservationAggregateArgs> = z.object({
  where: ReservationWhereInputSchema.optional(),
  orderBy: z.union([ ReservationOrderByWithRelationInputSchema.array(),ReservationOrderByWithRelationInputSchema ]).optional(),
  cursor: ReservationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const ReservationGroupByArgsSchema: z.ZodType<Prisma.ReservationGroupByArgs> = z.object({
  where: ReservationWhereInputSchema.optional(),
  orderBy: z.union([ ReservationOrderByWithAggregationInputSchema.array(),ReservationOrderByWithAggregationInputSchema ]).optional(),
  by: ReservationScalarFieldEnumSchema.array(),
  having: ReservationScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const ReservationFindUniqueArgsSchema: z.ZodType<Prisma.ReservationFindUniqueArgs> = z.object({
  select: ReservationSelectSchema.optional(),
  include: ReservationIncludeSchema.optional(),
  where: ReservationWhereUniqueInputSchema,
}).strict()

export const ReservationFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ReservationFindUniqueOrThrowArgs> = z.object({
  select: ReservationSelectSchema.optional(),
  include: ReservationIncludeSchema.optional(),
  where: ReservationWhereUniqueInputSchema,
}).strict()

export const ReservationBpRequestFindFirstArgsSchema: z.ZodType<Prisma.ReservationBpRequestFindFirstArgs> = z.object({
  select: ReservationBpRequestSelectSchema.optional(),
  where: ReservationBpRequestWhereInputSchema.optional(),
  orderBy: z.union([ ReservationBpRequestOrderByWithRelationInputSchema.array(),ReservationBpRequestOrderByWithRelationInputSchema ]).optional(),
  cursor: ReservationBpRequestWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ReservationBpRequestScalarFieldEnumSchema,ReservationBpRequestScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const ReservationBpRequestFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ReservationBpRequestFindFirstOrThrowArgs> = z.object({
  select: ReservationBpRequestSelectSchema.optional(),
  where: ReservationBpRequestWhereInputSchema.optional(),
  orderBy: z.union([ ReservationBpRequestOrderByWithRelationInputSchema.array(),ReservationBpRequestOrderByWithRelationInputSchema ]).optional(),
  cursor: ReservationBpRequestWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ReservationBpRequestScalarFieldEnumSchema,ReservationBpRequestScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const ReservationBpRequestFindManyArgsSchema: z.ZodType<Prisma.ReservationBpRequestFindManyArgs> = z.object({
  select: ReservationBpRequestSelectSchema.optional(),
  where: ReservationBpRequestWhereInputSchema.optional(),
  orderBy: z.union([ ReservationBpRequestOrderByWithRelationInputSchema.array(),ReservationBpRequestOrderByWithRelationInputSchema ]).optional(),
  cursor: ReservationBpRequestWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ReservationBpRequestScalarFieldEnumSchema,ReservationBpRequestScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const ReservationBpRequestAggregateArgsSchema: z.ZodType<Prisma.ReservationBpRequestAggregateArgs> = z.object({
  where: ReservationBpRequestWhereInputSchema.optional(),
  orderBy: z.union([ ReservationBpRequestOrderByWithRelationInputSchema.array(),ReservationBpRequestOrderByWithRelationInputSchema ]).optional(),
  cursor: ReservationBpRequestWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const ReservationBpRequestGroupByArgsSchema: z.ZodType<Prisma.ReservationBpRequestGroupByArgs> = z.object({
  where: ReservationBpRequestWhereInputSchema.optional(),
  orderBy: z.union([ ReservationBpRequestOrderByWithAggregationInputSchema.array(),ReservationBpRequestOrderByWithAggregationInputSchema ]).optional(),
  by: ReservationBpRequestScalarFieldEnumSchema.array(),
  having: ReservationBpRequestScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const ReservationBpRequestFindUniqueArgsSchema: z.ZodType<Prisma.ReservationBpRequestFindUniqueArgs> = z.object({
  select: ReservationBpRequestSelectSchema.optional(),
  where: ReservationBpRequestWhereUniqueInputSchema,
}).strict()

export const ReservationBpRequestFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ReservationBpRequestFindUniqueOrThrowArgs> = z.object({
  select: ReservationBpRequestSelectSchema.optional(),
  where: ReservationBpRequestWhereUniqueInputSchema,
}).strict()

export const GuestFindFirstArgsSchema: z.ZodType<Prisma.GuestFindFirstArgs> = z.object({
  select: GuestSelectSchema.optional(),
  include: GuestIncludeSchema.optional(),
  where: GuestWhereInputSchema.optional(),
  orderBy: z.union([ GuestOrderByWithRelationInputSchema.array(),GuestOrderByWithRelationInputSchema ]).optional(),
  cursor: GuestWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ GuestScalarFieldEnumSchema,GuestScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const GuestFindFirstOrThrowArgsSchema: z.ZodType<Prisma.GuestFindFirstOrThrowArgs> = z.object({
  select: GuestSelectSchema.optional(),
  include: GuestIncludeSchema.optional(),
  where: GuestWhereInputSchema.optional(),
  orderBy: z.union([ GuestOrderByWithRelationInputSchema.array(),GuestOrderByWithRelationInputSchema ]).optional(),
  cursor: GuestWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ GuestScalarFieldEnumSchema,GuestScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const GuestFindManyArgsSchema: z.ZodType<Prisma.GuestFindManyArgs> = z.object({
  select: GuestSelectSchema.optional(),
  include: GuestIncludeSchema.optional(),
  where: GuestWhereInputSchema.optional(),
  orderBy: z.union([ GuestOrderByWithRelationInputSchema.array(),GuestOrderByWithRelationInputSchema ]).optional(),
  cursor: GuestWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ GuestScalarFieldEnumSchema,GuestScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const GuestAggregateArgsSchema: z.ZodType<Prisma.GuestAggregateArgs> = z.object({
  where: GuestWhereInputSchema.optional(),
  orderBy: z.union([ GuestOrderByWithRelationInputSchema.array(),GuestOrderByWithRelationInputSchema ]).optional(),
  cursor: GuestWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const GuestGroupByArgsSchema: z.ZodType<Prisma.GuestGroupByArgs> = z.object({
  where: GuestWhereInputSchema.optional(),
  orderBy: z.union([ GuestOrderByWithAggregationInputSchema.array(),GuestOrderByWithAggregationInputSchema ]).optional(),
  by: GuestScalarFieldEnumSchema.array(),
  having: GuestScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const GuestFindUniqueArgsSchema: z.ZodType<Prisma.GuestFindUniqueArgs> = z.object({
  select: GuestSelectSchema.optional(),
  include: GuestIncludeSchema.optional(),
  where: GuestWhereUniqueInputSchema,
}).strict()

export const GuestFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.GuestFindUniqueOrThrowArgs> = z.object({
  select: GuestSelectSchema.optional(),
  include: GuestIncludeSchema.optional(),
  where: GuestWhereUniqueInputSchema,
}).strict()

export const MessageThreadFindFirstArgsSchema: z.ZodType<Prisma.MessageThreadFindFirstArgs> = z.object({
  select: MessageThreadSelectSchema.optional(),
  include: MessageThreadIncludeSchema.optional(),
  where: MessageThreadWhereInputSchema.optional(),
  orderBy: z.union([ MessageThreadOrderByWithRelationInputSchema.array(),MessageThreadOrderByWithRelationInputSchema ]).optional(),
  cursor: MessageThreadWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MessageThreadScalarFieldEnumSchema,MessageThreadScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const MessageThreadFindFirstOrThrowArgsSchema: z.ZodType<Prisma.MessageThreadFindFirstOrThrowArgs> = z.object({
  select: MessageThreadSelectSchema.optional(),
  include: MessageThreadIncludeSchema.optional(),
  where: MessageThreadWhereInputSchema.optional(),
  orderBy: z.union([ MessageThreadOrderByWithRelationInputSchema.array(),MessageThreadOrderByWithRelationInputSchema ]).optional(),
  cursor: MessageThreadWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MessageThreadScalarFieldEnumSchema,MessageThreadScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const MessageThreadFindManyArgsSchema: z.ZodType<Prisma.MessageThreadFindManyArgs> = z.object({
  select: MessageThreadSelectSchema.optional(),
  include: MessageThreadIncludeSchema.optional(),
  where: MessageThreadWhereInputSchema.optional(),
  orderBy: z.union([ MessageThreadOrderByWithRelationInputSchema.array(),MessageThreadOrderByWithRelationInputSchema ]).optional(),
  cursor: MessageThreadWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MessageThreadScalarFieldEnumSchema,MessageThreadScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const MessageThreadAggregateArgsSchema: z.ZodType<Prisma.MessageThreadAggregateArgs> = z.object({
  where: MessageThreadWhereInputSchema.optional(),
  orderBy: z.union([ MessageThreadOrderByWithRelationInputSchema.array(),MessageThreadOrderByWithRelationInputSchema ]).optional(),
  cursor: MessageThreadWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const MessageThreadGroupByArgsSchema: z.ZodType<Prisma.MessageThreadGroupByArgs> = z.object({
  where: MessageThreadWhereInputSchema.optional(),
  orderBy: z.union([ MessageThreadOrderByWithAggregationInputSchema.array(),MessageThreadOrderByWithAggregationInputSchema ]).optional(),
  by: MessageThreadScalarFieldEnumSchema.array(),
  having: MessageThreadScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const MessageThreadFindUniqueArgsSchema: z.ZodType<Prisma.MessageThreadFindUniqueArgs> = z.object({
  select: MessageThreadSelectSchema.optional(),
  include: MessageThreadIncludeSchema.optional(),
  where: MessageThreadWhereUniqueInputSchema,
}).strict()

export const MessageThreadFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.MessageThreadFindUniqueOrThrowArgs> = z.object({
  select: MessageThreadSelectSchema.optional(),
  include: MessageThreadIncludeSchema.optional(),
  where: MessageThreadWhereUniqueInputSchema,
}).strict()

export const MessageFindFirstArgsSchema: z.ZodType<Prisma.MessageFindFirstArgs> = z.object({
  select: MessageSelectSchema.optional(),
  include: MessageIncludeSchema.optional(),
  where: MessageWhereInputSchema.optional(),
  orderBy: z.union([ MessageOrderByWithRelationInputSchema.array(),MessageOrderByWithRelationInputSchema ]).optional(),
  cursor: MessageWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MessageScalarFieldEnumSchema,MessageScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const MessageFindFirstOrThrowArgsSchema: z.ZodType<Prisma.MessageFindFirstOrThrowArgs> = z.object({
  select: MessageSelectSchema.optional(),
  include: MessageIncludeSchema.optional(),
  where: MessageWhereInputSchema.optional(),
  orderBy: z.union([ MessageOrderByWithRelationInputSchema.array(),MessageOrderByWithRelationInputSchema ]).optional(),
  cursor: MessageWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MessageScalarFieldEnumSchema,MessageScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const MessageFindManyArgsSchema: z.ZodType<Prisma.MessageFindManyArgs> = z.object({
  select: MessageSelectSchema.optional(),
  include: MessageIncludeSchema.optional(),
  where: MessageWhereInputSchema.optional(),
  orderBy: z.union([ MessageOrderByWithRelationInputSchema.array(),MessageOrderByWithRelationInputSchema ]).optional(),
  cursor: MessageWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MessageScalarFieldEnumSchema,MessageScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const MessageAggregateArgsSchema: z.ZodType<Prisma.MessageAggregateArgs> = z.object({
  where: MessageWhereInputSchema.optional(),
  orderBy: z.union([ MessageOrderByWithRelationInputSchema.array(),MessageOrderByWithRelationInputSchema ]).optional(),
  cursor: MessageWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const MessageGroupByArgsSchema: z.ZodType<Prisma.MessageGroupByArgs> = z.object({
  where: MessageWhereInputSchema.optional(),
  orderBy: z.union([ MessageOrderByWithAggregationInputSchema.array(),MessageOrderByWithAggregationInputSchema ]).optional(),
  by: MessageScalarFieldEnumSchema.array(),
  having: MessageScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const MessageFindUniqueArgsSchema: z.ZodType<Prisma.MessageFindUniqueArgs> = z.object({
  select: MessageSelectSchema.optional(),
  include: MessageIncludeSchema.optional(),
  where: MessageWhereUniqueInputSchema,
}).strict()

export const MessageFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.MessageFindUniqueOrThrowArgs> = z.object({
  select: MessageSelectSchema.optional(),
  include: MessageIncludeSchema.optional(),
  where: MessageWhereUniqueInputSchema,
}).strict()

export const MessageTemplateFindFirstArgsSchema: z.ZodType<Prisma.MessageTemplateFindFirstArgs> = z.object({
  select: MessageTemplateSelectSchema.optional(),
  include: MessageTemplateIncludeSchema.optional(),
  where: MessageTemplateWhereInputSchema.optional(),
  orderBy: z.union([ MessageTemplateOrderByWithRelationInputSchema.array(),MessageTemplateOrderByWithRelationInputSchema ]).optional(),
  cursor: MessageTemplateWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MessageTemplateScalarFieldEnumSchema,MessageTemplateScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const MessageTemplateFindFirstOrThrowArgsSchema: z.ZodType<Prisma.MessageTemplateFindFirstOrThrowArgs> = z.object({
  select: MessageTemplateSelectSchema.optional(),
  include: MessageTemplateIncludeSchema.optional(),
  where: MessageTemplateWhereInputSchema.optional(),
  orderBy: z.union([ MessageTemplateOrderByWithRelationInputSchema.array(),MessageTemplateOrderByWithRelationInputSchema ]).optional(),
  cursor: MessageTemplateWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MessageTemplateScalarFieldEnumSchema,MessageTemplateScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const MessageTemplateFindManyArgsSchema: z.ZodType<Prisma.MessageTemplateFindManyArgs> = z.object({
  select: MessageTemplateSelectSchema.optional(),
  include: MessageTemplateIncludeSchema.optional(),
  where: MessageTemplateWhereInputSchema.optional(),
  orderBy: z.union([ MessageTemplateOrderByWithRelationInputSchema.array(),MessageTemplateOrderByWithRelationInputSchema ]).optional(),
  cursor: MessageTemplateWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MessageTemplateScalarFieldEnumSchema,MessageTemplateScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const MessageTemplateAggregateArgsSchema: z.ZodType<Prisma.MessageTemplateAggregateArgs> = z.object({
  where: MessageTemplateWhereInputSchema.optional(),
  orderBy: z.union([ MessageTemplateOrderByWithRelationInputSchema.array(),MessageTemplateOrderByWithRelationInputSchema ]).optional(),
  cursor: MessageTemplateWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const MessageTemplateGroupByArgsSchema: z.ZodType<Prisma.MessageTemplateGroupByArgs> = z.object({
  where: MessageTemplateWhereInputSchema.optional(),
  orderBy: z.union([ MessageTemplateOrderByWithAggregationInputSchema.array(),MessageTemplateOrderByWithAggregationInputSchema ]).optional(),
  by: MessageTemplateScalarFieldEnumSchema.array(),
  having: MessageTemplateScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const MessageTemplateFindUniqueArgsSchema: z.ZodType<Prisma.MessageTemplateFindUniqueArgs> = z.object({
  select: MessageTemplateSelectSchema.optional(),
  include: MessageTemplateIncludeSchema.optional(),
  where: MessageTemplateWhereUniqueInputSchema,
}).strict()

export const MessageTemplateFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.MessageTemplateFindUniqueOrThrowArgs> = z.object({
  select: MessageTemplateSelectSchema.optional(),
  include: MessageTemplateIncludeSchema.optional(),
  where: MessageTemplateWhereUniqueInputSchema,
}).strict()

export const ScheduledMessageFindFirstArgsSchema: z.ZodType<Prisma.ScheduledMessageFindFirstArgs> = z.object({
  select: ScheduledMessageSelectSchema.optional(),
  include: ScheduledMessageIncludeSchema.optional(),
  where: ScheduledMessageWhereInputSchema.optional(),
  orderBy: z.union([ ScheduledMessageOrderByWithRelationInputSchema.array(),ScheduledMessageOrderByWithRelationInputSchema ]).optional(),
  cursor: ScheduledMessageWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ScheduledMessageScalarFieldEnumSchema,ScheduledMessageScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const ScheduledMessageFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ScheduledMessageFindFirstOrThrowArgs> = z.object({
  select: ScheduledMessageSelectSchema.optional(),
  include: ScheduledMessageIncludeSchema.optional(),
  where: ScheduledMessageWhereInputSchema.optional(),
  orderBy: z.union([ ScheduledMessageOrderByWithRelationInputSchema.array(),ScheduledMessageOrderByWithRelationInputSchema ]).optional(),
  cursor: ScheduledMessageWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ScheduledMessageScalarFieldEnumSchema,ScheduledMessageScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const ScheduledMessageFindManyArgsSchema: z.ZodType<Prisma.ScheduledMessageFindManyArgs> = z.object({
  select: ScheduledMessageSelectSchema.optional(),
  include: ScheduledMessageIncludeSchema.optional(),
  where: ScheduledMessageWhereInputSchema.optional(),
  orderBy: z.union([ ScheduledMessageOrderByWithRelationInputSchema.array(),ScheduledMessageOrderByWithRelationInputSchema ]).optional(),
  cursor: ScheduledMessageWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ScheduledMessageScalarFieldEnumSchema,ScheduledMessageScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const ScheduledMessageAggregateArgsSchema: z.ZodType<Prisma.ScheduledMessageAggregateArgs> = z.object({
  where: ScheduledMessageWhereInputSchema.optional(),
  orderBy: z.union([ ScheduledMessageOrderByWithRelationInputSchema.array(),ScheduledMessageOrderByWithRelationInputSchema ]).optional(),
  cursor: ScheduledMessageWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const ScheduledMessageGroupByArgsSchema: z.ZodType<Prisma.ScheduledMessageGroupByArgs> = z.object({
  where: ScheduledMessageWhereInputSchema.optional(),
  orderBy: z.union([ ScheduledMessageOrderByWithAggregationInputSchema.array(),ScheduledMessageOrderByWithAggregationInputSchema ]).optional(),
  by: ScheduledMessageScalarFieldEnumSchema.array(),
  having: ScheduledMessageScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const ScheduledMessageFindUniqueArgsSchema: z.ZodType<Prisma.ScheduledMessageFindUniqueArgs> = z.object({
  select: ScheduledMessageSelectSchema.optional(),
  include: ScheduledMessageIncludeSchema.optional(),
  where: ScheduledMessageWhereUniqueInputSchema,
}).strict()

export const ScheduledMessageFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ScheduledMessageFindUniqueOrThrowArgs> = z.object({
  select: ScheduledMessageSelectSchema.optional(),
  include: ScheduledMessageIncludeSchema.optional(),
  where: ScheduledMessageWhereUniqueInputSchema,
}).strict()

export const RevenueFindFirstArgsSchema: z.ZodType<Prisma.RevenueFindFirstArgs> = z.object({
  select: RevenueSelectSchema.optional(),
  include: RevenueIncludeSchema.optional(),
  where: RevenueWhereInputSchema.optional(),
  orderBy: z.union([ RevenueOrderByWithRelationInputSchema.array(),RevenueOrderByWithRelationInputSchema ]).optional(),
  cursor: RevenueWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RevenueScalarFieldEnumSchema,RevenueScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const RevenueFindFirstOrThrowArgsSchema: z.ZodType<Prisma.RevenueFindFirstOrThrowArgs> = z.object({
  select: RevenueSelectSchema.optional(),
  include: RevenueIncludeSchema.optional(),
  where: RevenueWhereInputSchema.optional(),
  orderBy: z.union([ RevenueOrderByWithRelationInputSchema.array(),RevenueOrderByWithRelationInputSchema ]).optional(),
  cursor: RevenueWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RevenueScalarFieldEnumSchema,RevenueScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const RevenueFindManyArgsSchema: z.ZodType<Prisma.RevenueFindManyArgs> = z.object({
  select: RevenueSelectSchema.optional(),
  include: RevenueIncludeSchema.optional(),
  where: RevenueWhereInputSchema.optional(),
  orderBy: z.union([ RevenueOrderByWithRelationInputSchema.array(),RevenueOrderByWithRelationInputSchema ]).optional(),
  cursor: RevenueWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RevenueScalarFieldEnumSchema,RevenueScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const RevenueAggregateArgsSchema: z.ZodType<Prisma.RevenueAggregateArgs> = z.object({
  where: RevenueWhereInputSchema.optional(),
  orderBy: z.union([ RevenueOrderByWithRelationInputSchema.array(),RevenueOrderByWithRelationInputSchema ]).optional(),
  cursor: RevenueWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const RevenueGroupByArgsSchema: z.ZodType<Prisma.RevenueGroupByArgs> = z.object({
  where: RevenueWhereInputSchema.optional(),
  orderBy: z.union([ RevenueOrderByWithAggregationInputSchema.array(),RevenueOrderByWithAggregationInputSchema ]).optional(),
  by: RevenueScalarFieldEnumSchema.array(),
  having: RevenueScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const RevenueFindUniqueArgsSchema: z.ZodType<Prisma.RevenueFindUniqueArgs> = z.object({
  select: RevenueSelectSchema.optional(),
  include: RevenueIncludeSchema.optional(),
  where: RevenueWhereUniqueInputSchema,
}).strict()

export const RevenueFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.RevenueFindUniqueOrThrowArgs> = z.object({
  select: RevenueSelectSchema.optional(),
  include: RevenueIncludeSchema.optional(),
  where: RevenueWhereUniqueInputSchema,
}).strict()

export const RevenueTaxFindFirstArgsSchema: z.ZodType<Prisma.RevenueTaxFindFirstArgs> = z.object({
  select: RevenueTaxSelectSchema.optional(),
  include: RevenueTaxIncludeSchema.optional(),
  where: RevenueTaxWhereInputSchema.optional(),
  orderBy: z.union([ RevenueTaxOrderByWithRelationInputSchema.array(),RevenueTaxOrderByWithRelationInputSchema ]).optional(),
  cursor: RevenueTaxWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RevenueTaxScalarFieldEnumSchema,RevenueTaxScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const RevenueTaxFindFirstOrThrowArgsSchema: z.ZodType<Prisma.RevenueTaxFindFirstOrThrowArgs> = z.object({
  select: RevenueTaxSelectSchema.optional(),
  include: RevenueTaxIncludeSchema.optional(),
  where: RevenueTaxWhereInputSchema.optional(),
  orderBy: z.union([ RevenueTaxOrderByWithRelationInputSchema.array(),RevenueTaxOrderByWithRelationInputSchema ]).optional(),
  cursor: RevenueTaxWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RevenueTaxScalarFieldEnumSchema,RevenueTaxScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const RevenueTaxFindManyArgsSchema: z.ZodType<Prisma.RevenueTaxFindManyArgs> = z.object({
  select: RevenueTaxSelectSchema.optional(),
  include: RevenueTaxIncludeSchema.optional(),
  where: RevenueTaxWhereInputSchema.optional(),
  orderBy: z.union([ RevenueTaxOrderByWithRelationInputSchema.array(),RevenueTaxOrderByWithRelationInputSchema ]).optional(),
  cursor: RevenueTaxWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RevenueTaxScalarFieldEnumSchema,RevenueTaxScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const RevenueTaxAggregateArgsSchema: z.ZodType<Prisma.RevenueTaxAggregateArgs> = z.object({
  where: RevenueTaxWhereInputSchema.optional(),
  orderBy: z.union([ RevenueTaxOrderByWithRelationInputSchema.array(),RevenueTaxOrderByWithRelationInputSchema ]).optional(),
  cursor: RevenueTaxWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const RevenueTaxGroupByArgsSchema: z.ZodType<Prisma.RevenueTaxGroupByArgs> = z.object({
  where: RevenueTaxWhereInputSchema.optional(),
  orderBy: z.union([ RevenueTaxOrderByWithAggregationInputSchema.array(),RevenueTaxOrderByWithAggregationInputSchema ]).optional(),
  by: RevenueTaxScalarFieldEnumSchema.array(),
  having: RevenueTaxScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const RevenueTaxFindUniqueArgsSchema: z.ZodType<Prisma.RevenueTaxFindUniqueArgs> = z.object({
  select: RevenueTaxSelectSchema.optional(),
  include: RevenueTaxIncludeSchema.optional(),
  where: RevenueTaxWhereUniqueInputSchema,
}).strict()

export const RevenueTaxFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.RevenueTaxFindUniqueOrThrowArgs> = z.object({
  select: RevenueTaxSelectSchema.optional(),
  include: RevenueTaxIncludeSchema.optional(),
  where: RevenueTaxWhereUniqueInputSchema,
}).strict()

export const RevenueFeeFindFirstArgsSchema: z.ZodType<Prisma.RevenueFeeFindFirstArgs> = z.object({
  select: RevenueFeeSelectSchema.optional(),
  include: RevenueFeeIncludeSchema.optional(),
  where: RevenueFeeWhereInputSchema.optional(),
  orderBy: z.union([ RevenueFeeOrderByWithRelationInputSchema.array(),RevenueFeeOrderByWithRelationInputSchema ]).optional(),
  cursor: RevenueFeeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RevenueFeeScalarFieldEnumSchema,RevenueFeeScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const RevenueFeeFindFirstOrThrowArgsSchema: z.ZodType<Prisma.RevenueFeeFindFirstOrThrowArgs> = z.object({
  select: RevenueFeeSelectSchema.optional(),
  include: RevenueFeeIncludeSchema.optional(),
  where: RevenueFeeWhereInputSchema.optional(),
  orderBy: z.union([ RevenueFeeOrderByWithRelationInputSchema.array(),RevenueFeeOrderByWithRelationInputSchema ]).optional(),
  cursor: RevenueFeeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RevenueFeeScalarFieldEnumSchema,RevenueFeeScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const RevenueFeeFindManyArgsSchema: z.ZodType<Prisma.RevenueFeeFindManyArgs> = z.object({
  select: RevenueFeeSelectSchema.optional(),
  include: RevenueFeeIncludeSchema.optional(),
  where: RevenueFeeWhereInputSchema.optional(),
  orderBy: z.union([ RevenueFeeOrderByWithRelationInputSchema.array(),RevenueFeeOrderByWithRelationInputSchema ]).optional(),
  cursor: RevenueFeeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RevenueFeeScalarFieldEnumSchema,RevenueFeeScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const RevenueFeeAggregateArgsSchema: z.ZodType<Prisma.RevenueFeeAggregateArgs> = z.object({
  where: RevenueFeeWhereInputSchema.optional(),
  orderBy: z.union([ RevenueFeeOrderByWithRelationInputSchema.array(),RevenueFeeOrderByWithRelationInputSchema ]).optional(),
  cursor: RevenueFeeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const RevenueFeeGroupByArgsSchema: z.ZodType<Prisma.RevenueFeeGroupByArgs> = z.object({
  where: RevenueFeeWhereInputSchema.optional(),
  orderBy: z.union([ RevenueFeeOrderByWithAggregationInputSchema.array(),RevenueFeeOrderByWithAggregationInputSchema ]).optional(),
  by: RevenueFeeScalarFieldEnumSchema.array(),
  having: RevenueFeeScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const RevenueFeeFindUniqueArgsSchema: z.ZodType<Prisma.RevenueFeeFindUniqueArgs> = z.object({
  select: RevenueFeeSelectSchema.optional(),
  include: RevenueFeeIncludeSchema.optional(),
  where: RevenueFeeWhereUniqueInputSchema,
}).strict()

export const RevenueFeeFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.RevenueFeeFindUniqueOrThrowArgs> = z.object({
  select: RevenueFeeSelectSchema.optional(),
  include: RevenueFeeIncludeSchema.optional(),
  where: RevenueFeeWhereUniqueInputSchema,
}).strict()

export const ExpenseFindFirstArgsSchema: z.ZodType<Prisma.ExpenseFindFirstArgs> = z.object({
  select: ExpenseSelectSchema.optional(),
  include: ExpenseIncludeSchema.optional(),
  where: ExpenseWhereInputSchema.optional(),
  orderBy: z.union([ ExpenseOrderByWithRelationInputSchema.array(),ExpenseOrderByWithRelationInputSchema ]).optional(),
  cursor: ExpenseWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ExpenseScalarFieldEnumSchema,ExpenseScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const ExpenseFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ExpenseFindFirstOrThrowArgs> = z.object({
  select: ExpenseSelectSchema.optional(),
  include: ExpenseIncludeSchema.optional(),
  where: ExpenseWhereInputSchema.optional(),
  orderBy: z.union([ ExpenseOrderByWithRelationInputSchema.array(),ExpenseOrderByWithRelationInputSchema ]).optional(),
  cursor: ExpenseWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ExpenseScalarFieldEnumSchema,ExpenseScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const ExpenseFindManyArgsSchema: z.ZodType<Prisma.ExpenseFindManyArgs> = z.object({
  select: ExpenseSelectSchema.optional(),
  include: ExpenseIncludeSchema.optional(),
  where: ExpenseWhereInputSchema.optional(),
  orderBy: z.union([ ExpenseOrderByWithRelationInputSchema.array(),ExpenseOrderByWithRelationInputSchema ]).optional(),
  cursor: ExpenseWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ExpenseScalarFieldEnumSchema,ExpenseScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const ExpenseAggregateArgsSchema: z.ZodType<Prisma.ExpenseAggregateArgs> = z.object({
  where: ExpenseWhereInputSchema.optional(),
  orderBy: z.union([ ExpenseOrderByWithRelationInputSchema.array(),ExpenseOrderByWithRelationInputSchema ]).optional(),
  cursor: ExpenseWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const ExpenseGroupByArgsSchema: z.ZodType<Prisma.ExpenseGroupByArgs> = z.object({
  where: ExpenseWhereInputSchema.optional(),
  orderBy: z.union([ ExpenseOrderByWithAggregationInputSchema.array(),ExpenseOrderByWithAggregationInputSchema ]).optional(),
  by: ExpenseScalarFieldEnumSchema.array(),
  having: ExpenseScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const ExpenseFindUniqueArgsSchema: z.ZodType<Prisma.ExpenseFindUniqueArgs> = z.object({
  select: ExpenseSelectSchema.optional(),
  include: ExpenseIncludeSchema.optional(),
  where: ExpenseWhereUniqueInputSchema,
}).strict()

export const ExpenseFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ExpenseFindUniqueOrThrowArgs> = z.object({
  select: ExpenseSelectSchema.optional(),
  include: ExpenseIncludeSchema.optional(),
  where: ExpenseWhereUniqueInputSchema,
}).strict()

export const ListingExpenseFindFirstArgsSchema: z.ZodType<Prisma.ListingExpenseFindFirstArgs> = z.object({
  select: ListingExpenseSelectSchema.optional(),
  include: ListingExpenseIncludeSchema.optional(),
  where: ListingExpenseWhereInputSchema.optional(),
  orderBy: z.union([ ListingExpenseOrderByWithRelationInputSchema.array(),ListingExpenseOrderByWithRelationInputSchema ]).optional(),
  cursor: ListingExpenseWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ListingExpenseScalarFieldEnumSchema,ListingExpenseScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const ListingExpenseFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ListingExpenseFindFirstOrThrowArgs> = z.object({
  select: ListingExpenseSelectSchema.optional(),
  include: ListingExpenseIncludeSchema.optional(),
  where: ListingExpenseWhereInputSchema.optional(),
  orderBy: z.union([ ListingExpenseOrderByWithRelationInputSchema.array(),ListingExpenseOrderByWithRelationInputSchema ]).optional(),
  cursor: ListingExpenseWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ListingExpenseScalarFieldEnumSchema,ListingExpenseScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const ListingExpenseFindManyArgsSchema: z.ZodType<Prisma.ListingExpenseFindManyArgs> = z.object({
  select: ListingExpenseSelectSchema.optional(),
  include: ListingExpenseIncludeSchema.optional(),
  where: ListingExpenseWhereInputSchema.optional(),
  orderBy: z.union([ ListingExpenseOrderByWithRelationInputSchema.array(),ListingExpenseOrderByWithRelationInputSchema ]).optional(),
  cursor: ListingExpenseWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ListingExpenseScalarFieldEnumSchema,ListingExpenseScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const ListingExpenseAggregateArgsSchema: z.ZodType<Prisma.ListingExpenseAggregateArgs> = z.object({
  where: ListingExpenseWhereInputSchema.optional(),
  orderBy: z.union([ ListingExpenseOrderByWithRelationInputSchema.array(),ListingExpenseOrderByWithRelationInputSchema ]).optional(),
  cursor: ListingExpenseWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const ListingExpenseGroupByArgsSchema: z.ZodType<Prisma.ListingExpenseGroupByArgs> = z.object({
  where: ListingExpenseWhereInputSchema.optional(),
  orderBy: z.union([ ListingExpenseOrderByWithAggregationInputSchema.array(),ListingExpenseOrderByWithAggregationInputSchema ]).optional(),
  by: ListingExpenseScalarFieldEnumSchema.array(),
  having: ListingExpenseScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const ListingExpenseFindUniqueArgsSchema: z.ZodType<Prisma.ListingExpenseFindUniqueArgs> = z.object({
  select: ListingExpenseSelectSchema.optional(),
  include: ListingExpenseIncludeSchema.optional(),
  where: ListingExpenseWhereUniqueInputSchema,
}).strict()

export const ListingExpenseFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ListingExpenseFindUniqueOrThrowArgs> = z.object({
  select: ListingExpenseSelectSchema.optional(),
  include: ListingExpenseIncludeSchema.optional(),
  where: ListingExpenseWhereUniqueInputSchema,
}).strict()

export const OwnerStatementFindFirstArgsSchema: z.ZodType<Prisma.OwnerStatementFindFirstArgs> = z.object({
  select: OwnerStatementSelectSchema.optional(),
  include: OwnerStatementIncludeSchema.optional(),
  where: OwnerStatementWhereInputSchema.optional(),
  orderBy: z.union([ OwnerStatementOrderByWithRelationInputSchema.array(),OwnerStatementOrderByWithRelationInputSchema ]).optional(),
  cursor: OwnerStatementWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OwnerStatementScalarFieldEnumSchema,OwnerStatementScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const OwnerStatementFindFirstOrThrowArgsSchema: z.ZodType<Prisma.OwnerStatementFindFirstOrThrowArgs> = z.object({
  select: OwnerStatementSelectSchema.optional(),
  include: OwnerStatementIncludeSchema.optional(),
  where: OwnerStatementWhereInputSchema.optional(),
  orderBy: z.union([ OwnerStatementOrderByWithRelationInputSchema.array(),OwnerStatementOrderByWithRelationInputSchema ]).optional(),
  cursor: OwnerStatementWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OwnerStatementScalarFieldEnumSchema,OwnerStatementScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const OwnerStatementFindManyArgsSchema: z.ZodType<Prisma.OwnerStatementFindManyArgs> = z.object({
  select: OwnerStatementSelectSchema.optional(),
  include: OwnerStatementIncludeSchema.optional(),
  where: OwnerStatementWhereInputSchema.optional(),
  orderBy: z.union([ OwnerStatementOrderByWithRelationInputSchema.array(),OwnerStatementOrderByWithRelationInputSchema ]).optional(),
  cursor: OwnerStatementWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OwnerStatementScalarFieldEnumSchema,OwnerStatementScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const OwnerStatementAggregateArgsSchema: z.ZodType<Prisma.OwnerStatementAggregateArgs> = z.object({
  where: OwnerStatementWhereInputSchema.optional(),
  orderBy: z.union([ OwnerStatementOrderByWithRelationInputSchema.array(),OwnerStatementOrderByWithRelationInputSchema ]).optional(),
  cursor: OwnerStatementWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const OwnerStatementGroupByArgsSchema: z.ZodType<Prisma.OwnerStatementGroupByArgs> = z.object({
  where: OwnerStatementWhereInputSchema.optional(),
  orderBy: z.union([ OwnerStatementOrderByWithAggregationInputSchema.array(),OwnerStatementOrderByWithAggregationInputSchema ]).optional(),
  by: OwnerStatementScalarFieldEnumSchema.array(),
  having: OwnerStatementScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const OwnerStatementFindUniqueArgsSchema: z.ZodType<Prisma.OwnerStatementFindUniqueArgs> = z.object({
  select: OwnerStatementSelectSchema.optional(),
  include: OwnerStatementIncludeSchema.optional(),
  where: OwnerStatementWhereUniqueInputSchema,
}).strict()

export const OwnerStatementFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.OwnerStatementFindUniqueOrThrowArgs> = z.object({
  select: OwnerStatementSelectSchema.optional(),
  include: OwnerStatementIncludeSchema.optional(),
  where: OwnerStatementWhereUniqueInputSchema,
}).strict()

export const PlaidItemFindFirstArgsSchema: z.ZodType<Prisma.PlaidItemFindFirstArgs> = z.object({
  select: PlaidItemSelectSchema.optional(),
  include: PlaidItemIncludeSchema.optional(),
  where: PlaidItemWhereInputSchema.optional(),
  orderBy: z.union([ PlaidItemOrderByWithRelationInputSchema.array(),PlaidItemOrderByWithRelationInputSchema ]).optional(),
  cursor: PlaidItemWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PlaidItemScalarFieldEnumSchema,PlaidItemScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const PlaidItemFindFirstOrThrowArgsSchema: z.ZodType<Prisma.PlaidItemFindFirstOrThrowArgs> = z.object({
  select: PlaidItemSelectSchema.optional(),
  include: PlaidItemIncludeSchema.optional(),
  where: PlaidItemWhereInputSchema.optional(),
  orderBy: z.union([ PlaidItemOrderByWithRelationInputSchema.array(),PlaidItemOrderByWithRelationInputSchema ]).optional(),
  cursor: PlaidItemWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PlaidItemScalarFieldEnumSchema,PlaidItemScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const PlaidItemFindManyArgsSchema: z.ZodType<Prisma.PlaidItemFindManyArgs> = z.object({
  select: PlaidItemSelectSchema.optional(),
  include: PlaidItemIncludeSchema.optional(),
  where: PlaidItemWhereInputSchema.optional(),
  orderBy: z.union([ PlaidItemOrderByWithRelationInputSchema.array(),PlaidItemOrderByWithRelationInputSchema ]).optional(),
  cursor: PlaidItemWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PlaidItemScalarFieldEnumSchema,PlaidItemScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const PlaidItemAggregateArgsSchema: z.ZodType<Prisma.PlaidItemAggregateArgs> = z.object({
  where: PlaidItemWhereInputSchema.optional(),
  orderBy: z.union([ PlaidItemOrderByWithRelationInputSchema.array(),PlaidItemOrderByWithRelationInputSchema ]).optional(),
  cursor: PlaidItemWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const PlaidItemGroupByArgsSchema: z.ZodType<Prisma.PlaidItemGroupByArgs> = z.object({
  where: PlaidItemWhereInputSchema.optional(),
  orderBy: z.union([ PlaidItemOrderByWithAggregationInputSchema.array(),PlaidItemOrderByWithAggregationInputSchema ]).optional(),
  by: PlaidItemScalarFieldEnumSchema.array(),
  having: PlaidItemScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const PlaidItemFindUniqueArgsSchema: z.ZodType<Prisma.PlaidItemFindUniqueArgs> = z.object({
  select: PlaidItemSelectSchema.optional(),
  include: PlaidItemIncludeSchema.optional(),
  where: PlaidItemWhereUniqueInputSchema,
}).strict()

export const PlaidItemFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.PlaidItemFindUniqueOrThrowArgs> = z.object({
  select: PlaidItemSelectSchema.optional(),
  include: PlaidItemIncludeSchema.optional(),
  where: PlaidItemWhereUniqueInputSchema,
}).strict()

export const PlaidAccountFindFirstArgsSchema: z.ZodType<Prisma.PlaidAccountFindFirstArgs> = z.object({
  select: PlaidAccountSelectSchema.optional(),
  include: PlaidAccountIncludeSchema.optional(),
  where: PlaidAccountWhereInputSchema.optional(),
  orderBy: z.union([ PlaidAccountOrderByWithRelationInputSchema.array(),PlaidAccountOrderByWithRelationInputSchema ]).optional(),
  cursor: PlaidAccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PlaidAccountScalarFieldEnumSchema,PlaidAccountScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const PlaidAccountFindFirstOrThrowArgsSchema: z.ZodType<Prisma.PlaidAccountFindFirstOrThrowArgs> = z.object({
  select: PlaidAccountSelectSchema.optional(),
  include: PlaidAccountIncludeSchema.optional(),
  where: PlaidAccountWhereInputSchema.optional(),
  orderBy: z.union([ PlaidAccountOrderByWithRelationInputSchema.array(),PlaidAccountOrderByWithRelationInputSchema ]).optional(),
  cursor: PlaidAccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PlaidAccountScalarFieldEnumSchema,PlaidAccountScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const PlaidAccountFindManyArgsSchema: z.ZodType<Prisma.PlaidAccountFindManyArgs> = z.object({
  select: PlaidAccountSelectSchema.optional(),
  include: PlaidAccountIncludeSchema.optional(),
  where: PlaidAccountWhereInputSchema.optional(),
  orderBy: z.union([ PlaidAccountOrderByWithRelationInputSchema.array(),PlaidAccountOrderByWithRelationInputSchema ]).optional(),
  cursor: PlaidAccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PlaidAccountScalarFieldEnumSchema,PlaidAccountScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const PlaidAccountAggregateArgsSchema: z.ZodType<Prisma.PlaidAccountAggregateArgs> = z.object({
  where: PlaidAccountWhereInputSchema.optional(),
  orderBy: z.union([ PlaidAccountOrderByWithRelationInputSchema.array(),PlaidAccountOrderByWithRelationInputSchema ]).optional(),
  cursor: PlaidAccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const PlaidAccountGroupByArgsSchema: z.ZodType<Prisma.PlaidAccountGroupByArgs> = z.object({
  where: PlaidAccountWhereInputSchema.optional(),
  orderBy: z.union([ PlaidAccountOrderByWithAggregationInputSchema.array(),PlaidAccountOrderByWithAggregationInputSchema ]).optional(),
  by: PlaidAccountScalarFieldEnumSchema.array(),
  having: PlaidAccountScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const PlaidAccountFindUniqueArgsSchema: z.ZodType<Prisma.PlaidAccountFindUniqueArgs> = z.object({
  select: PlaidAccountSelectSchema.optional(),
  include: PlaidAccountIncludeSchema.optional(),
  where: PlaidAccountWhereUniqueInputSchema,
}).strict()

export const PlaidAccountFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.PlaidAccountFindUniqueOrThrowArgs> = z.object({
  select: PlaidAccountSelectSchema.optional(),
  include: PlaidAccountIncludeSchema.optional(),
  where: PlaidAccountWhereUniqueInputSchema,
}).strict()

export const PlaidTransactionFindFirstArgsSchema: z.ZodType<Prisma.PlaidTransactionFindFirstArgs> = z.object({
  select: PlaidTransactionSelectSchema.optional(),
  include: PlaidTransactionIncludeSchema.optional(),
  where: PlaidTransactionWhereInputSchema.optional(),
  orderBy: z.union([ PlaidTransactionOrderByWithRelationInputSchema.array(),PlaidTransactionOrderByWithRelationInputSchema ]).optional(),
  cursor: PlaidTransactionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PlaidTransactionScalarFieldEnumSchema,PlaidTransactionScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const PlaidTransactionFindFirstOrThrowArgsSchema: z.ZodType<Prisma.PlaidTransactionFindFirstOrThrowArgs> = z.object({
  select: PlaidTransactionSelectSchema.optional(),
  include: PlaidTransactionIncludeSchema.optional(),
  where: PlaidTransactionWhereInputSchema.optional(),
  orderBy: z.union([ PlaidTransactionOrderByWithRelationInputSchema.array(),PlaidTransactionOrderByWithRelationInputSchema ]).optional(),
  cursor: PlaidTransactionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PlaidTransactionScalarFieldEnumSchema,PlaidTransactionScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const PlaidTransactionFindManyArgsSchema: z.ZodType<Prisma.PlaidTransactionFindManyArgs> = z.object({
  select: PlaidTransactionSelectSchema.optional(),
  include: PlaidTransactionIncludeSchema.optional(),
  where: PlaidTransactionWhereInputSchema.optional(),
  orderBy: z.union([ PlaidTransactionOrderByWithRelationInputSchema.array(),PlaidTransactionOrderByWithRelationInputSchema ]).optional(),
  cursor: PlaidTransactionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PlaidTransactionScalarFieldEnumSchema,PlaidTransactionScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const PlaidTransactionAggregateArgsSchema: z.ZodType<Prisma.PlaidTransactionAggregateArgs> = z.object({
  where: PlaidTransactionWhereInputSchema.optional(),
  orderBy: z.union([ PlaidTransactionOrderByWithRelationInputSchema.array(),PlaidTransactionOrderByWithRelationInputSchema ]).optional(),
  cursor: PlaidTransactionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const PlaidTransactionGroupByArgsSchema: z.ZodType<Prisma.PlaidTransactionGroupByArgs> = z.object({
  where: PlaidTransactionWhereInputSchema.optional(),
  orderBy: z.union([ PlaidTransactionOrderByWithAggregationInputSchema.array(),PlaidTransactionOrderByWithAggregationInputSchema ]).optional(),
  by: PlaidTransactionScalarFieldEnumSchema.array(),
  having: PlaidTransactionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const PlaidTransactionFindUniqueArgsSchema: z.ZodType<Prisma.PlaidTransactionFindUniqueArgs> = z.object({
  select: PlaidTransactionSelectSchema.optional(),
  include: PlaidTransactionIncludeSchema.optional(),
  where: PlaidTransactionWhereUniqueInputSchema,
}).strict()

export const PlaidTransactionFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.PlaidTransactionFindUniqueOrThrowArgs> = z.object({
  select: PlaidTransactionSelectSchema.optional(),
  include: PlaidTransactionIncludeSchema.optional(),
  where: PlaidTransactionWhereUniqueInputSchema,
}).strict()

export const DailyRateFindFirstArgsSchema: z.ZodType<Prisma.DailyRateFindFirstArgs> = z.object({
  select: DailyRateSelectSchema.optional(),
  include: DailyRateIncludeSchema.optional(),
  where: DailyRateWhereInputSchema.optional(),
  orderBy: z.union([ DailyRateOrderByWithRelationInputSchema.array(),DailyRateOrderByWithRelationInputSchema ]).optional(),
  cursor: DailyRateWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DailyRateScalarFieldEnumSchema,DailyRateScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const DailyRateFindFirstOrThrowArgsSchema: z.ZodType<Prisma.DailyRateFindFirstOrThrowArgs> = z.object({
  select: DailyRateSelectSchema.optional(),
  include: DailyRateIncludeSchema.optional(),
  where: DailyRateWhereInputSchema.optional(),
  orderBy: z.union([ DailyRateOrderByWithRelationInputSchema.array(),DailyRateOrderByWithRelationInputSchema ]).optional(),
  cursor: DailyRateWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DailyRateScalarFieldEnumSchema,DailyRateScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const DailyRateFindManyArgsSchema: z.ZodType<Prisma.DailyRateFindManyArgs> = z.object({
  select: DailyRateSelectSchema.optional(),
  include: DailyRateIncludeSchema.optional(),
  where: DailyRateWhereInputSchema.optional(),
  orderBy: z.union([ DailyRateOrderByWithRelationInputSchema.array(),DailyRateOrderByWithRelationInputSchema ]).optional(),
  cursor: DailyRateWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DailyRateScalarFieldEnumSchema,DailyRateScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const DailyRateAggregateArgsSchema: z.ZodType<Prisma.DailyRateAggregateArgs> = z.object({
  where: DailyRateWhereInputSchema.optional(),
  orderBy: z.union([ DailyRateOrderByWithRelationInputSchema.array(),DailyRateOrderByWithRelationInputSchema ]).optional(),
  cursor: DailyRateWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const DailyRateGroupByArgsSchema: z.ZodType<Prisma.DailyRateGroupByArgs> = z.object({
  where: DailyRateWhereInputSchema.optional(),
  orderBy: z.union([ DailyRateOrderByWithAggregationInputSchema.array(),DailyRateOrderByWithAggregationInputSchema ]).optional(),
  by: DailyRateScalarFieldEnumSchema.array(),
  having: DailyRateScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const DailyRateFindUniqueArgsSchema: z.ZodType<Prisma.DailyRateFindUniqueArgs> = z.object({
  select: DailyRateSelectSchema.optional(),
  include: DailyRateIncludeSchema.optional(),
  where: DailyRateWhereUniqueInputSchema,
}).strict()

export const DailyRateFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.DailyRateFindUniqueOrThrowArgs> = z.object({
  select: DailyRateSelectSchema.optional(),
  include: DailyRateIncludeSchema.optional(),
  where: DailyRateWhereUniqueInputSchema,
}).strict()

export const PayoutFindFirstArgsSchema: z.ZodType<Prisma.PayoutFindFirstArgs> = z.object({
  select: PayoutSelectSchema.optional(),
  include: PayoutIncludeSchema.optional(),
  where: PayoutWhereInputSchema.optional(),
  orderBy: z.union([ PayoutOrderByWithRelationInputSchema.array(),PayoutOrderByWithRelationInputSchema ]).optional(),
  cursor: PayoutWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PayoutScalarFieldEnumSchema,PayoutScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const PayoutFindFirstOrThrowArgsSchema: z.ZodType<Prisma.PayoutFindFirstOrThrowArgs> = z.object({
  select: PayoutSelectSchema.optional(),
  include: PayoutIncludeSchema.optional(),
  where: PayoutWhereInputSchema.optional(),
  orderBy: z.union([ PayoutOrderByWithRelationInputSchema.array(),PayoutOrderByWithRelationInputSchema ]).optional(),
  cursor: PayoutWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PayoutScalarFieldEnumSchema,PayoutScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const PayoutFindManyArgsSchema: z.ZodType<Prisma.PayoutFindManyArgs> = z.object({
  select: PayoutSelectSchema.optional(),
  include: PayoutIncludeSchema.optional(),
  where: PayoutWhereInputSchema.optional(),
  orderBy: z.union([ PayoutOrderByWithRelationInputSchema.array(),PayoutOrderByWithRelationInputSchema ]).optional(),
  cursor: PayoutWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PayoutScalarFieldEnumSchema,PayoutScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const PayoutAggregateArgsSchema: z.ZodType<Prisma.PayoutAggregateArgs> = z.object({
  where: PayoutWhereInputSchema.optional(),
  orderBy: z.union([ PayoutOrderByWithRelationInputSchema.array(),PayoutOrderByWithRelationInputSchema ]).optional(),
  cursor: PayoutWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const PayoutGroupByArgsSchema: z.ZodType<Prisma.PayoutGroupByArgs> = z.object({
  where: PayoutWhereInputSchema.optional(),
  orderBy: z.union([ PayoutOrderByWithAggregationInputSchema.array(),PayoutOrderByWithAggregationInputSchema ]).optional(),
  by: PayoutScalarFieldEnumSchema.array(),
  having: PayoutScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const PayoutFindUniqueArgsSchema: z.ZodType<Prisma.PayoutFindUniqueArgs> = z.object({
  select: PayoutSelectSchema.optional(),
  include: PayoutIncludeSchema.optional(),
  where: PayoutWhereUniqueInputSchema,
}).strict()

export const PayoutFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.PayoutFindUniqueOrThrowArgs> = z.object({
  select: PayoutSelectSchema.optional(),
  include: PayoutIncludeSchema.optional(),
  where: PayoutWhereUniqueInputSchema,
}).strict()

export const RevenuePayoutFindFirstArgsSchema: z.ZodType<Prisma.RevenuePayoutFindFirstArgs> = z.object({
  select: RevenuePayoutSelectSchema.optional(),
  include: RevenuePayoutIncludeSchema.optional(),
  where: RevenuePayoutWhereInputSchema.optional(),
  orderBy: z.union([ RevenuePayoutOrderByWithRelationInputSchema.array(),RevenuePayoutOrderByWithRelationInputSchema ]).optional(),
  cursor: RevenuePayoutWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RevenuePayoutScalarFieldEnumSchema,RevenuePayoutScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const RevenuePayoutFindFirstOrThrowArgsSchema: z.ZodType<Prisma.RevenuePayoutFindFirstOrThrowArgs> = z.object({
  select: RevenuePayoutSelectSchema.optional(),
  include: RevenuePayoutIncludeSchema.optional(),
  where: RevenuePayoutWhereInputSchema.optional(),
  orderBy: z.union([ RevenuePayoutOrderByWithRelationInputSchema.array(),RevenuePayoutOrderByWithRelationInputSchema ]).optional(),
  cursor: RevenuePayoutWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RevenuePayoutScalarFieldEnumSchema,RevenuePayoutScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const RevenuePayoutFindManyArgsSchema: z.ZodType<Prisma.RevenuePayoutFindManyArgs> = z.object({
  select: RevenuePayoutSelectSchema.optional(),
  include: RevenuePayoutIncludeSchema.optional(),
  where: RevenuePayoutWhereInputSchema.optional(),
  orderBy: z.union([ RevenuePayoutOrderByWithRelationInputSchema.array(),RevenuePayoutOrderByWithRelationInputSchema ]).optional(),
  cursor: RevenuePayoutWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RevenuePayoutScalarFieldEnumSchema,RevenuePayoutScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const RevenuePayoutAggregateArgsSchema: z.ZodType<Prisma.RevenuePayoutAggregateArgs> = z.object({
  where: RevenuePayoutWhereInputSchema.optional(),
  orderBy: z.union([ RevenuePayoutOrderByWithRelationInputSchema.array(),RevenuePayoutOrderByWithRelationInputSchema ]).optional(),
  cursor: RevenuePayoutWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const RevenuePayoutGroupByArgsSchema: z.ZodType<Prisma.RevenuePayoutGroupByArgs> = z.object({
  where: RevenuePayoutWhereInputSchema.optional(),
  orderBy: z.union([ RevenuePayoutOrderByWithAggregationInputSchema.array(),RevenuePayoutOrderByWithAggregationInputSchema ]).optional(),
  by: RevenuePayoutScalarFieldEnumSchema.array(),
  having: RevenuePayoutScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const RevenuePayoutFindUniqueArgsSchema: z.ZodType<Prisma.RevenuePayoutFindUniqueArgs> = z.object({
  select: RevenuePayoutSelectSchema.optional(),
  include: RevenuePayoutIncludeSchema.optional(),
  where: RevenuePayoutWhereUniqueInputSchema,
}).strict()

export const RevenuePayoutFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.RevenuePayoutFindUniqueOrThrowArgs> = z.object({
  select: RevenuePayoutSelectSchema.optional(),
  include: RevenuePayoutIncludeSchema.optional(),
  where: RevenuePayoutWhereUniqueInputSchema,
}).strict()

export const AccountCreateArgsSchema: z.ZodType<Prisma.AccountCreateArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  data: z.union([ AccountCreateInputSchema,AccountUncheckedCreateInputSchema ]),
}).strict()

export const AccountUpsertArgsSchema: z.ZodType<Prisma.AccountUpsertArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  where: AccountWhereUniqueInputSchema,
  create: z.union([ AccountCreateInputSchema,AccountUncheckedCreateInputSchema ]),
  update: z.union([ AccountUpdateInputSchema,AccountUncheckedUpdateInputSchema ]),
}).strict()

export const AccountCreateManyArgsSchema: z.ZodType<Prisma.AccountCreateManyArgs> = z.object({
  data: z.union([ AccountCreateManyInputSchema,AccountCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const AccountDeleteArgsSchema: z.ZodType<Prisma.AccountDeleteArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  where: AccountWhereUniqueInputSchema,
}).strict()

export const AccountUpdateArgsSchema: z.ZodType<Prisma.AccountUpdateArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  data: z.union([ AccountUpdateInputSchema,AccountUncheckedUpdateInputSchema ]),
  where: AccountWhereUniqueInputSchema,
}).strict()

export const AccountUpdateManyArgsSchema: z.ZodType<Prisma.AccountUpdateManyArgs> = z.object({
  data: z.union([ AccountUpdateManyMutationInputSchema,AccountUncheckedUpdateManyInputSchema ]),
  where: AccountWhereInputSchema.optional(),
}).strict()

export const AccountDeleteManyArgsSchema: z.ZodType<Prisma.AccountDeleteManyArgs> = z.object({
  where: AccountWhereInputSchema.optional(),
}).strict()

export const SessionCreateArgsSchema: z.ZodType<Prisma.SessionCreateArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  data: z.union([ SessionCreateInputSchema,SessionUncheckedCreateInputSchema ]),
}).strict()

export const SessionUpsertArgsSchema: z.ZodType<Prisma.SessionUpsertArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereUniqueInputSchema,
  create: z.union([ SessionCreateInputSchema,SessionUncheckedCreateInputSchema ]),
  update: z.union([ SessionUpdateInputSchema,SessionUncheckedUpdateInputSchema ]),
}).strict()

export const SessionCreateManyArgsSchema: z.ZodType<Prisma.SessionCreateManyArgs> = z.object({
  data: z.union([ SessionCreateManyInputSchema,SessionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const SessionDeleteArgsSchema: z.ZodType<Prisma.SessionDeleteArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereUniqueInputSchema,
}).strict()

export const SessionUpdateArgsSchema: z.ZodType<Prisma.SessionUpdateArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  data: z.union([ SessionUpdateInputSchema,SessionUncheckedUpdateInputSchema ]),
  where: SessionWhereUniqueInputSchema,
}).strict()

export const SessionUpdateManyArgsSchema: z.ZodType<Prisma.SessionUpdateManyArgs> = z.object({
  data: z.union([ SessionUpdateManyMutationInputSchema,SessionUncheckedUpdateManyInputSchema ]),
  where: SessionWhereInputSchema.optional(),
}).strict()

export const SessionDeleteManyArgsSchema: z.ZodType<Prisma.SessionDeleteManyArgs> = z.object({
  where: SessionWhereInputSchema.optional(),
}).strict()

export const UserCreateArgsSchema: z.ZodType<Prisma.UserCreateArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  data: z.union([ UserCreateInputSchema,UserUncheckedCreateInputSchema ]),
}).strict()

export const UserUpsertArgsSchema: z.ZodType<Prisma.UserUpsertArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
  create: z.union([ UserCreateInputSchema,UserUncheckedCreateInputSchema ]),
  update: z.union([ UserUpdateInputSchema,UserUncheckedUpdateInputSchema ]),
}).strict()

export const UserCreateManyArgsSchema: z.ZodType<Prisma.UserCreateManyArgs> = z.object({
  data: z.union([ UserCreateManyInputSchema,UserCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const UserDeleteArgsSchema: z.ZodType<Prisma.UserDeleteArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
}).strict()

export const UserUpdateArgsSchema: z.ZodType<Prisma.UserUpdateArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  data: z.union([ UserUpdateInputSchema,UserUncheckedUpdateInputSchema ]),
  where: UserWhereUniqueInputSchema,
}).strict()

export const UserUpdateManyArgsSchema: z.ZodType<Prisma.UserUpdateManyArgs> = z.object({
  data: z.union([ UserUpdateManyMutationInputSchema,UserUncheckedUpdateManyInputSchema ]),
  where: UserWhereInputSchema.optional(),
}).strict()

export const UserDeleteManyArgsSchema: z.ZodType<Prisma.UserDeleteManyArgs> = z.object({
  where: UserWhereInputSchema.optional(),
}).strict()

export const VerificationTokenCreateArgsSchema: z.ZodType<Prisma.VerificationTokenCreateArgs> = z.object({
  select: VerificationTokenSelectSchema.optional(),
  data: z.union([ VerificationTokenCreateInputSchema,VerificationTokenUncheckedCreateInputSchema ]),
}).strict()

export const VerificationTokenUpsertArgsSchema: z.ZodType<Prisma.VerificationTokenUpsertArgs> = z.object({
  select: VerificationTokenSelectSchema.optional(),
  where: VerificationTokenWhereUniqueInputSchema,
  create: z.union([ VerificationTokenCreateInputSchema,VerificationTokenUncheckedCreateInputSchema ]),
  update: z.union([ VerificationTokenUpdateInputSchema,VerificationTokenUncheckedUpdateInputSchema ]),
}).strict()

export const VerificationTokenCreateManyArgsSchema: z.ZodType<Prisma.VerificationTokenCreateManyArgs> = z.object({
  data: z.union([ VerificationTokenCreateManyInputSchema,VerificationTokenCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const VerificationTokenDeleteArgsSchema: z.ZodType<Prisma.VerificationTokenDeleteArgs> = z.object({
  select: VerificationTokenSelectSchema.optional(),
  where: VerificationTokenWhereUniqueInputSchema,
}).strict()

export const VerificationTokenUpdateArgsSchema: z.ZodType<Prisma.VerificationTokenUpdateArgs> = z.object({
  select: VerificationTokenSelectSchema.optional(),
  data: z.union([ VerificationTokenUpdateInputSchema,VerificationTokenUncheckedUpdateInputSchema ]),
  where: VerificationTokenWhereUniqueInputSchema,
}).strict()

export const VerificationTokenUpdateManyArgsSchema: z.ZodType<Prisma.VerificationTokenUpdateManyArgs> = z.object({
  data: z.union([ VerificationTokenUpdateManyMutationInputSchema,VerificationTokenUncheckedUpdateManyInputSchema ]),
  where: VerificationTokenWhereInputSchema.optional(),
}).strict()

export const VerificationTokenDeleteManyArgsSchema: z.ZodType<Prisma.VerificationTokenDeleteManyArgs> = z.object({
  where: VerificationTokenWhereInputSchema.optional(),
}).strict()

export const OrganizationCreateArgsSchema: z.ZodType<Prisma.OrganizationCreateArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  data: z.union([ OrganizationCreateInputSchema,OrganizationUncheckedCreateInputSchema ]),
}).strict()

export const OrganizationUpsertArgsSchema: z.ZodType<Prisma.OrganizationUpsertArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereUniqueInputSchema,
  create: z.union([ OrganizationCreateInputSchema,OrganizationUncheckedCreateInputSchema ]),
  update: z.union([ OrganizationUpdateInputSchema,OrganizationUncheckedUpdateInputSchema ]),
}).strict()

export const OrganizationCreateManyArgsSchema: z.ZodType<Prisma.OrganizationCreateManyArgs> = z.object({
  data: z.union([ OrganizationCreateManyInputSchema,OrganizationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const OrganizationDeleteArgsSchema: z.ZodType<Prisma.OrganizationDeleteArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereUniqueInputSchema,
}).strict()

export const OrganizationUpdateArgsSchema: z.ZodType<Prisma.OrganizationUpdateArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  data: z.union([ OrganizationUpdateInputSchema,OrganizationUncheckedUpdateInputSchema ]),
  where: OrganizationWhereUniqueInputSchema,
}).strict()

export const OrganizationUpdateManyArgsSchema: z.ZodType<Prisma.OrganizationUpdateManyArgs> = z.object({
  data: z.union([ OrganizationUpdateManyMutationInputSchema,OrganizationUncheckedUpdateManyInputSchema ]),
  where: OrganizationWhereInputSchema.optional(),
}).strict()

export const OrganizationDeleteManyArgsSchema: z.ZodType<Prisma.OrganizationDeleteManyArgs> = z.object({
  where: OrganizationWhereInputSchema.optional(),
}).strict()

export const BookingPalConnectionCreateArgsSchema: z.ZodType<Prisma.BookingPalConnectionCreateArgs> = z.object({
  select: BookingPalConnectionSelectSchema.optional(),
  include: BookingPalConnectionIncludeSchema.optional(),
  data: z.union([ BookingPalConnectionCreateInputSchema,BookingPalConnectionUncheckedCreateInputSchema ]),
}).strict()

export const BookingPalConnectionUpsertArgsSchema: z.ZodType<Prisma.BookingPalConnectionUpsertArgs> = z.object({
  select: BookingPalConnectionSelectSchema.optional(),
  include: BookingPalConnectionIncludeSchema.optional(),
  where: BookingPalConnectionWhereUniqueInputSchema,
  create: z.union([ BookingPalConnectionCreateInputSchema,BookingPalConnectionUncheckedCreateInputSchema ]),
  update: z.union([ BookingPalConnectionUpdateInputSchema,BookingPalConnectionUncheckedUpdateInputSchema ]),
}).strict()

export const BookingPalConnectionCreateManyArgsSchema: z.ZodType<Prisma.BookingPalConnectionCreateManyArgs> = z.object({
  data: z.union([ BookingPalConnectionCreateManyInputSchema,BookingPalConnectionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const BookingPalConnectionDeleteArgsSchema: z.ZodType<Prisma.BookingPalConnectionDeleteArgs> = z.object({
  select: BookingPalConnectionSelectSchema.optional(),
  include: BookingPalConnectionIncludeSchema.optional(),
  where: BookingPalConnectionWhereUniqueInputSchema,
}).strict()

export const BookingPalConnectionUpdateArgsSchema: z.ZodType<Prisma.BookingPalConnectionUpdateArgs> = z.object({
  select: BookingPalConnectionSelectSchema.optional(),
  include: BookingPalConnectionIncludeSchema.optional(),
  data: z.union([ BookingPalConnectionUpdateInputSchema,BookingPalConnectionUncheckedUpdateInputSchema ]),
  where: BookingPalConnectionWhereUniqueInputSchema,
}).strict()

export const BookingPalConnectionUpdateManyArgsSchema: z.ZodType<Prisma.BookingPalConnectionUpdateManyArgs> = z.object({
  data: z.union([ BookingPalConnectionUpdateManyMutationInputSchema,BookingPalConnectionUncheckedUpdateManyInputSchema ]),
  where: BookingPalConnectionWhereInputSchema.optional(),
}).strict()

export const BookingPalConnectionDeleteManyArgsSchema: z.ZodType<Prisma.BookingPalConnectionDeleteManyArgs> = z.object({
  where: BookingPalConnectionWhereInputSchema.optional(),
}).strict()

export const PriceLabsConnectionCreateArgsSchema: z.ZodType<Prisma.PriceLabsConnectionCreateArgs> = z.object({
  select: PriceLabsConnectionSelectSchema.optional(),
  include: PriceLabsConnectionIncludeSchema.optional(),
  data: z.union([ PriceLabsConnectionCreateInputSchema,PriceLabsConnectionUncheckedCreateInputSchema ]),
}).strict()

export const PriceLabsConnectionUpsertArgsSchema: z.ZodType<Prisma.PriceLabsConnectionUpsertArgs> = z.object({
  select: PriceLabsConnectionSelectSchema.optional(),
  include: PriceLabsConnectionIncludeSchema.optional(),
  where: PriceLabsConnectionWhereUniqueInputSchema,
  create: z.union([ PriceLabsConnectionCreateInputSchema,PriceLabsConnectionUncheckedCreateInputSchema ]),
  update: z.union([ PriceLabsConnectionUpdateInputSchema,PriceLabsConnectionUncheckedUpdateInputSchema ]),
}).strict()

export const PriceLabsConnectionCreateManyArgsSchema: z.ZodType<Prisma.PriceLabsConnectionCreateManyArgs> = z.object({
  data: z.union([ PriceLabsConnectionCreateManyInputSchema,PriceLabsConnectionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const PriceLabsConnectionDeleteArgsSchema: z.ZodType<Prisma.PriceLabsConnectionDeleteArgs> = z.object({
  select: PriceLabsConnectionSelectSchema.optional(),
  include: PriceLabsConnectionIncludeSchema.optional(),
  where: PriceLabsConnectionWhereUniqueInputSchema,
}).strict()

export const PriceLabsConnectionUpdateArgsSchema: z.ZodType<Prisma.PriceLabsConnectionUpdateArgs> = z.object({
  select: PriceLabsConnectionSelectSchema.optional(),
  include: PriceLabsConnectionIncludeSchema.optional(),
  data: z.union([ PriceLabsConnectionUpdateInputSchema,PriceLabsConnectionUncheckedUpdateInputSchema ]),
  where: PriceLabsConnectionWhereUniqueInputSchema,
}).strict()

export const PriceLabsConnectionUpdateManyArgsSchema: z.ZodType<Prisma.PriceLabsConnectionUpdateManyArgs> = z.object({
  data: z.union([ PriceLabsConnectionUpdateManyMutationInputSchema,PriceLabsConnectionUncheckedUpdateManyInputSchema ]),
  where: PriceLabsConnectionWhereInputSchema.optional(),
}).strict()

export const PriceLabsConnectionDeleteManyArgsSchema: z.ZodType<Prisma.PriceLabsConnectionDeleteManyArgs> = z.object({
  where: PriceLabsConnectionWhereInputSchema.optional(),
}).strict()

export const StripeConnectionCreateArgsSchema: z.ZodType<Prisma.StripeConnectionCreateArgs> = z.object({
  select: StripeConnectionSelectSchema.optional(),
  include: StripeConnectionIncludeSchema.optional(),
  data: z.union([ StripeConnectionCreateInputSchema,StripeConnectionUncheckedCreateInputSchema ]),
}).strict()

export const StripeConnectionUpsertArgsSchema: z.ZodType<Prisma.StripeConnectionUpsertArgs> = z.object({
  select: StripeConnectionSelectSchema.optional(),
  include: StripeConnectionIncludeSchema.optional(),
  where: StripeConnectionWhereUniqueInputSchema,
  create: z.union([ StripeConnectionCreateInputSchema,StripeConnectionUncheckedCreateInputSchema ]),
  update: z.union([ StripeConnectionUpdateInputSchema,StripeConnectionUncheckedUpdateInputSchema ]),
}).strict()

export const StripeConnectionCreateManyArgsSchema: z.ZodType<Prisma.StripeConnectionCreateManyArgs> = z.object({
  data: z.union([ StripeConnectionCreateManyInputSchema,StripeConnectionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const StripeConnectionDeleteArgsSchema: z.ZodType<Prisma.StripeConnectionDeleteArgs> = z.object({
  select: StripeConnectionSelectSchema.optional(),
  include: StripeConnectionIncludeSchema.optional(),
  where: StripeConnectionWhereUniqueInputSchema,
}).strict()

export const StripeConnectionUpdateArgsSchema: z.ZodType<Prisma.StripeConnectionUpdateArgs> = z.object({
  select: StripeConnectionSelectSchema.optional(),
  include: StripeConnectionIncludeSchema.optional(),
  data: z.union([ StripeConnectionUpdateInputSchema,StripeConnectionUncheckedUpdateInputSchema ]),
  where: StripeConnectionWhereUniqueInputSchema,
}).strict()

export const StripeConnectionUpdateManyArgsSchema: z.ZodType<Prisma.StripeConnectionUpdateManyArgs> = z.object({
  data: z.union([ StripeConnectionUpdateManyMutationInputSchema,StripeConnectionUncheckedUpdateManyInputSchema ]),
  where: StripeConnectionWhereInputSchema.optional(),
}).strict()

export const StripeConnectionDeleteManyArgsSchema: z.ZodType<Prisma.StripeConnectionDeleteManyArgs> = z.object({
  where: StripeConnectionWhereInputSchema.optional(),
}).strict()

export const ListingCreateArgsSchema: z.ZodType<Prisma.ListingCreateArgs> = z.object({
  select: ListingSelectSchema.optional(),
  include: ListingIncludeSchema.optional(),
  data: z.union([ ListingCreateInputSchema,ListingUncheckedCreateInputSchema ]),
}).strict()

export const ListingUpsertArgsSchema: z.ZodType<Prisma.ListingUpsertArgs> = z.object({
  select: ListingSelectSchema.optional(),
  include: ListingIncludeSchema.optional(),
  where: ListingWhereUniqueInputSchema,
  create: z.union([ ListingCreateInputSchema,ListingUncheckedCreateInputSchema ]),
  update: z.union([ ListingUpdateInputSchema,ListingUncheckedUpdateInputSchema ]),
}).strict()

export const ListingCreateManyArgsSchema: z.ZodType<Prisma.ListingCreateManyArgs> = z.object({
  data: z.union([ ListingCreateManyInputSchema,ListingCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const ListingDeleteArgsSchema: z.ZodType<Prisma.ListingDeleteArgs> = z.object({
  select: ListingSelectSchema.optional(),
  include: ListingIncludeSchema.optional(),
  where: ListingWhereUniqueInputSchema,
}).strict()

export const ListingUpdateArgsSchema: z.ZodType<Prisma.ListingUpdateArgs> = z.object({
  select: ListingSelectSchema.optional(),
  include: ListingIncludeSchema.optional(),
  data: z.union([ ListingUpdateInputSchema,ListingUncheckedUpdateInputSchema ]),
  where: ListingWhereUniqueInputSchema,
}).strict()

export const ListingUpdateManyArgsSchema: z.ZodType<Prisma.ListingUpdateManyArgs> = z.object({
  data: z.union([ ListingUpdateManyMutationInputSchema,ListingUncheckedUpdateManyInputSchema ]),
  where: ListingWhereInputSchema.optional(),
}).strict()

export const ListingDeleteManyArgsSchema: z.ZodType<Prisma.ListingDeleteManyArgs> = z.object({
  where: ListingWhereInputSchema.optional(),
}).strict()

export const ListingKeyCreateArgsSchema: z.ZodType<Prisma.ListingKeyCreateArgs> = z.object({
  select: ListingKeySelectSchema.optional(),
  include: ListingKeyIncludeSchema.optional(),
  data: z.union([ ListingKeyCreateInputSchema,ListingKeyUncheckedCreateInputSchema ]),
}).strict()

export const ListingKeyUpsertArgsSchema: z.ZodType<Prisma.ListingKeyUpsertArgs> = z.object({
  select: ListingKeySelectSchema.optional(),
  include: ListingKeyIncludeSchema.optional(),
  where: ListingKeyWhereUniqueInputSchema,
  create: z.union([ ListingKeyCreateInputSchema,ListingKeyUncheckedCreateInputSchema ]),
  update: z.union([ ListingKeyUpdateInputSchema,ListingKeyUncheckedUpdateInputSchema ]),
}).strict()

export const ListingKeyCreateManyArgsSchema: z.ZodType<Prisma.ListingKeyCreateManyArgs> = z.object({
  data: z.union([ ListingKeyCreateManyInputSchema,ListingKeyCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const ListingKeyDeleteArgsSchema: z.ZodType<Prisma.ListingKeyDeleteArgs> = z.object({
  select: ListingKeySelectSchema.optional(),
  include: ListingKeyIncludeSchema.optional(),
  where: ListingKeyWhereUniqueInputSchema,
}).strict()

export const ListingKeyUpdateArgsSchema: z.ZodType<Prisma.ListingKeyUpdateArgs> = z.object({
  select: ListingKeySelectSchema.optional(),
  include: ListingKeyIncludeSchema.optional(),
  data: z.union([ ListingKeyUpdateInputSchema,ListingKeyUncheckedUpdateInputSchema ]),
  where: ListingKeyWhereUniqueInputSchema,
}).strict()

export const ListingKeyUpdateManyArgsSchema: z.ZodType<Prisma.ListingKeyUpdateManyArgs> = z.object({
  data: z.union([ ListingKeyUpdateManyMutationInputSchema,ListingKeyUncheckedUpdateManyInputSchema ]),
  where: ListingKeyWhereInputSchema.optional(),
}).strict()

export const ListingKeyDeleteManyArgsSchema: z.ZodType<Prisma.ListingKeyDeleteManyArgs> = z.object({
  where: ListingKeyWhereInputSchema.optional(),
}).strict()

export const ContentCreateArgsSchema: z.ZodType<Prisma.ContentCreateArgs> = z.object({
  select: ContentSelectSchema.optional(),
  include: ContentIncludeSchema.optional(),
  data: z.union([ ContentCreateInputSchema,ContentUncheckedCreateInputSchema ]),
}).strict()

export const ContentUpsertArgsSchema: z.ZodType<Prisma.ContentUpsertArgs> = z.object({
  select: ContentSelectSchema.optional(),
  include: ContentIncludeSchema.optional(),
  where: ContentWhereUniqueInputSchema,
  create: z.union([ ContentCreateInputSchema,ContentUncheckedCreateInputSchema ]),
  update: z.union([ ContentUpdateInputSchema,ContentUncheckedUpdateInputSchema ]),
}).strict()

export const ContentCreateManyArgsSchema: z.ZodType<Prisma.ContentCreateManyArgs> = z.object({
  data: z.union([ ContentCreateManyInputSchema,ContentCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const ContentDeleteArgsSchema: z.ZodType<Prisma.ContentDeleteArgs> = z.object({
  select: ContentSelectSchema.optional(),
  include: ContentIncludeSchema.optional(),
  where: ContentWhereUniqueInputSchema,
}).strict()

export const ContentUpdateArgsSchema: z.ZodType<Prisma.ContentUpdateArgs> = z.object({
  select: ContentSelectSchema.optional(),
  include: ContentIncludeSchema.optional(),
  data: z.union([ ContentUpdateInputSchema,ContentUncheckedUpdateInputSchema ]),
  where: ContentWhereUniqueInputSchema,
}).strict()

export const ContentUpdateManyArgsSchema: z.ZodType<Prisma.ContentUpdateManyArgs> = z.object({
  data: z.union([ ContentUpdateManyMutationInputSchema,ContentUncheckedUpdateManyInputSchema ]),
  where: ContentWhereInputSchema.optional(),
}).strict()

export const ContentDeleteManyArgsSchema: z.ZodType<Prisma.ContentDeleteManyArgs> = z.object({
  where: ContentWhereInputSchema.optional(),
}).strict()

export const RulesCreateArgsSchema: z.ZodType<Prisma.RulesCreateArgs> = z.object({
  select: RulesSelectSchema.optional(),
  include: RulesIncludeSchema.optional(),
  data: z.union([ RulesCreateInputSchema,RulesUncheckedCreateInputSchema ]),
}).strict()

export const RulesUpsertArgsSchema: z.ZodType<Prisma.RulesUpsertArgs> = z.object({
  select: RulesSelectSchema.optional(),
  include: RulesIncludeSchema.optional(),
  where: RulesWhereUniqueInputSchema,
  create: z.union([ RulesCreateInputSchema,RulesUncheckedCreateInputSchema ]),
  update: z.union([ RulesUpdateInputSchema,RulesUncheckedUpdateInputSchema ]),
}).strict()

export const RulesCreateManyArgsSchema: z.ZodType<Prisma.RulesCreateManyArgs> = z.object({
  data: z.union([ RulesCreateManyInputSchema,RulesCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const RulesDeleteArgsSchema: z.ZodType<Prisma.RulesDeleteArgs> = z.object({
  select: RulesSelectSchema.optional(),
  include: RulesIncludeSchema.optional(),
  where: RulesWhereUniqueInputSchema,
}).strict()

export const RulesUpdateArgsSchema: z.ZodType<Prisma.RulesUpdateArgs> = z.object({
  select: RulesSelectSchema.optional(),
  include: RulesIncludeSchema.optional(),
  data: z.union([ RulesUpdateInputSchema,RulesUncheckedUpdateInputSchema ]),
  where: RulesWhereUniqueInputSchema,
}).strict()

export const RulesUpdateManyArgsSchema: z.ZodType<Prisma.RulesUpdateManyArgs> = z.object({
  data: z.union([ RulesUpdateManyMutationInputSchema,RulesUncheckedUpdateManyInputSchema ]),
  where: RulesWhereInputSchema.optional(),
}).strict()

export const RulesDeleteManyArgsSchema: z.ZodType<Prisma.RulesDeleteManyArgs> = z.object({
  where: RulesWhereInputSchema.optional(),
}).strict()

export const PricingCreateArgsSchema: z.ZodType<Prisma.PricingCreateArgs> = z.object({
  select: PricingSelectSchema.optional(),
  include: PricingIncludeSchema.optional(),
  data: z.union([ PricingCreateInputSchema,PricingUncheckedCreateInputSchema ]),
}).strict()

export const PricingUpsertArgsSchema: z.ZodType<Prisma.PricingUpsertArgs> = z.object({
  select: PricingSelectSchema.optional(),
  include: PricingIncludeSchema.optional(),
  where: PricingWhereUniqueInputSchema,
  create: z.union([ PricingCreateInputSchema,PricingUncheckedCreateInputSchema ]),
  update: z.union([ PricingUpdateInputSchema,PricingUncheckedUpdateInputSchema ]),
}).strict()

export const PricingCreateManyArgsSchema: z.ZodType<Prisma.PricingCreateManyArgs> = z.object({
  data: z.union([ PricingCreateManyInputSchema,PricingCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const PricingDeleteArgsSchema: z.ZodType<Prisma.PricingDeleteArgs> = z.object({
  select: PricingSelectSchema.optional(),
  include: PricingIncludeSchema.optional(),
  where: PricingWhereUniqueInputSchema,
}).strict()

export const PricingUpdateArgsSchema: z.ZodType<Prisma.PricingUpdateArgs> = z.object({
  select: PricingSelectSchema.optional(),
  include: PricingIncludeSchema.optional(),
  data: z.union([ PricingUpdateInputSchema,PricingUncheckedUpdateInputSchema ]),
  where: PricingWhereUniqueInputSchema,
}).strict()

export const PricingUpdateManyArgsSchema: z.ZodType<Prisma.PricingUpdateManyArgs> = z.object({
  data: z.union([ PricingUpdateManyMutationInputSchema,PricingUncheckedUpdateManyInputSchema ]),
  where: PricingWhereInputSchema.optional(),
}).strict()

export const PricingDeleteManyArgsSchema: z.ZodType<Prisma.PricingDeleteManyArgs> = z.object({
  where: PricingWhereInputSchema.optional(),
}).strict()

export const PricingDateCreateArgsSchema: z.ZodType<Prisma.PricingDateCreateArgs> = z.object({
  select: PricingDateSelectSchema.optional(),
  include: PricingDateIncludeSchema.optional(),
  data: z.union([ PricingDateCreateInputSchema,PricingDateUncheckedCreateInputSchema ]),
}).strict()

export const PricingDateUpsertArgsSchema: z.ZodType<Prisma.PricingDateUpsertArgs> = z.object({
  select: PricingDateSelectSchema.optional(),
  include: PricingDateIncludeSchema.optional(),
  where: PricingDateWhereUniqueInputSchema,
  create: z.union([ PricingDateCreateInputSchema,PricingDateUncheckedCreateInputSchema ]),
  update: z.union([ PricingDateUpdateInputSchema,PricingDateUncheckedUpdateInputSchema ]),
}).strict()

export const PricingDateCreateManyArgsSchema: z.ZodType<Prisma.PricingDateCreateManyArgs> = z.object({
  data: z.union([ PricingDateCreateManyInputSchema,PricingDateCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const PricingDateDeleteArgsSchema: z.ZodType<Prisma.PricingDateDeleteArgs> = z.object({
  select: PricingDateSelectSchema.optional(),
  include: PricingDateIncludeSchema.optional(),
  where: PricingDateWhereUniqueInputSchema,
}).strict()

export const PricingDateUpdateArgsSchema: z.ZodType<Prisma.PricingDateUpdateArgs> = z.object({
  select: PricingDateSelectSchema.optional(),
  include: PricingDateIncludeSchema.optional(),
  data: z.union([ PricingDateUpdateInputSchema,PricingDateUncheckedUpdateInputSchema ]),
  where: PricingDateWhereUniqueInputSchema,
}).strict()

export const PricingDateUpdateManyArgsSchema: z.ZodType<Prisma.PricingDateUpdateManyArgs> = z.object({
  data: z.union([ PricingDateUpdateManyMutationInputSchema,PricingDateUncheckedUpdateManyInputSchema ]),
  where: PricingDateWhereInputSchema.optional(),
}).strict()

export const PricingDateDeleteManyArgsSchema: z.ZodType<Prisma.PricingDateDeleteManyArgs> = z.object({
  where: PricingDateWhereInputSchema.optional(),
}).strict()

export const DiscountCreateArgsSchema: z.ZodType<Prisma.DiscountCreateArgs> = z.object({
  select: DiscountSelectSchema.optional(),
  include: DiscountIncludeSchema.optional(),
  data: z.union([ DiscountCreateInputSchema,DiscountUncheckedCreateInputSchema ]),
}).strict()

export const DiscountUpsertArgsSchema: z.ZodType<Prisma.DiscountUpsertArgs> = z.object({
  select: DiscountSelectSchema.optional(),
  include: DiscountIncludeSchema.optional(),
  where: DiscountWhereUniqueInputSchema,
  create: z.union([ DiscountCreateInputSchema,DiscountUncheckedCreateInputSchema ]),
  update: z.union([ DiscountUpdateInputSchema,DiscountUncheckedUpdateInputSchema ]),
}).strict()

export const DiscountCreateManyArgsSchema: z.ZodType<Prisma.DiscountCreateManyArgs> = z.object({
  data: z.union([ DiscountCreateManyInputSchema,DiscountCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const DiscountDeleteArgsSchema: z.ZodType<Prisma.DiscountDeleteArgs> = z.object({
  select: DiscountSelectSchema.optional(),
  include: DiscountIncludeSchema.optional(),
  where: DiscountWhereUniqueInputSchema,
}).strict()

export const DiscountUpdateArgsSchema: z.ZodType<Prisma.DiscountUpdateArgs> = z.object({
  select: DiscountSelectSchema.optional(),
  include: DiscountIncludeSchema.optional(),
  data: z.union([ DiscountUpdateInputSchema,DiscountUncheckedUpdateInputSchema ]),
  where: DiscountWhereUniqueInputSchema,
}).strict()

export const DiscountUpdateManyArgsSchema: z.ZodType<Prisma.DiscountUpdateManyArgs> = z.object({
  data: z.union([ DiscountUpdateManyMutationInputSchema,DiscountUncheckedUpdateManyInputSchema ]),
  where: DiscountWhereInputSchema.optional(),
}).strict()

export const DiscountDeleteManyArgsSchema: z.ZodType<Prisma.DiscountDeleteManyArgs> = z.object({
  where: DiscountWhereInputSchema.optional(),
}).strict()

export const AvailabilityCreateArgsSchema: z.ZodType<Prisma.AvailabilityCreateArgs> = z.object({
  select: AvailabilitySelectSchema.optional(),
  include: AvailabilityIncludeSchema.optional(),
  data: z.union([ AvailabilityCreateInputSchema,AvailabilityUncheckedCreateInputSchema ]),
}).strict()

export const AvailabilityUpsertArgsSchema: z.ZodType<Prisma.AvailabilityUpsertArgs> = z.object({
  select: AvailabilitySelectSchema.optional(),
  include: AvailabilityIncludeSchema.optional(),
  where: AvailabilityWhereUniqueInputSchema,
  create: z.union([ AvailabilityCreateInputSchema,AvailabilityUncheckedCreateInputSchema ]),
  update: z.union([ AvailabilityUpdateInputSchema,AvailabilityUncheckedUpdateInputSchema ]),
}).strict()

export const AvailabilityCreateManyArgsSchema: z.ZodType<Prisma.AvailabilityCreateManyArgs> = z.object({
  data: z.union([ AvailabilityCreateManyInputSchema,AvailabilityCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const AvailabilityDeleteArgsSchema: z.ZodType<Prisma.AvailabilityDeleteArgs> = z.object({
  select: AvailabilitySelectSchema.optional(),
  include: AvailabilityIncludeSchema.optional(),
  where: AvailabilityWhereUniqueInputSchema,
}).strict()

export const AvailabilityUpdateArgsSchema: z.ZodType<Prisma.AvailabilityUpdateArgs> = z.object({
  select: AvailabilitySelectSchema.optional(),
  include: AvailabilityIncludeSchema.optional(),
  data: z.union([ AvailabilityUpdateInputSchema,AvailabilityUncheckedUpdateInputSchema ]),
  where: AvailabilityWhereUniqueInputSchema,
}).strict()

export const AvailabilityUpdateManyArgsSchema: z.ZodType<Prisma.AvailabilityUpdateManyArgs> = z.object({
  data: z.union([ AvailabilityUpdateManyMutationInputSchema,AvailabilityUncheckedUpdateManyInputSchema ]),
  where: AvailabilityWhereInputSchema.optional(),
}).strict()

export const AvailabilityDeleteManyArgsSchema: z.ZodType<Prisma.AvailabilityDeleteManyArgs> = z.object({
  where: AvailabilityWhereInputSchema.optional(),
}).strict()

export const AmenityCreateArgsSchema: z.ZodType<Prisma.AmenityCreateArgs> = z.object({
  select: AmenitySelectSchema.optional(),
  include: AmenityIncludeSchema.optional(),
  data: z.union([ AmenityCreateInputSchema,AmenityUncheckedCreateInputSchema ]),
}).strict()

export const AmenityUpsertArgsSchema: z.ZodType<Prisma.AmenityUpsertArgs> = z.object({
  select: AmenitySelectSchema.optional(),
  include: AmenityIncludeSchema.optional(),
  where: AmenityWhereUniqueInputSchema,
  create: z.union([ AmenityCreateInputSchema,AmenityUncheckedCreateInputSchema ]),
  update: z.union([ AmenityUpdateInputSchema,AmenityUncheckedUpdateInputSchema ]),
}).strict()

export const AmenityCreateManyArgsSchema: z.ZodType<Prisma.AmenityCreateManyArgs> = z.object({
  data: z.union([ AmenityCreateManyInputSchema,AmenityCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const AmenityDeleteArgsSchema: z.ZodType<Prisma.AmenityDeleteArgs> = z.object({
  select: AmenitySelectSchema.optional(),
  include: AmenityIncludeSchema.optional(),
  where: AmenityWhereUniqueInputSchema,
}).strict()

export const AmenityUpdateArgsSchema: z.ZodType<Prisma.AmenityUpdateArgs> = z.object({
  select: AmenitySelectSchema.optional(),
  include: AmenityIncludeSchema.optional(),
  data: z.union([ AmenityUpdateInputSchema,AmenityUncheckedUpdateInputSchema ]),
  where: AmenityWhereUniqueInputSchema,
}).strict()

export const AmenityUpdateManyArgsSchema: z.ZodType<Prisma.AmenityUpdateManyArgs> = z.object({
  data: z.union([ AmenityUpdateManyMutationInputSchema,AmenityUncheckedUpdateManyInputSchema ]),
  where: AmenityWhereInputSchema.optional(),
}).strict()

export const AmenityDeleteManyArgsSchema: z.ZodType<Prisma.AmenityDeleteManyArgs> = z.object({
  where: AmenityWhereInputSchema.optional(),
}).strict()

export const FeeCreateArgsSchema: z.ZodType<Prisma.FeeCreateArgs> = z.object({
  select: FeeSelectSchema.optional(),
  include: FeeIncludeSchema.optional(),
  data: z.union([ FeeCreateInputSchema,FeeUncheckedCreateInputSchema ]),
}).strict()

export const FeeUpsertArgsSchema: z.ZodType<Prisma.FeeUpsertArgs> = z.object({
  select: FeeSelectSchema.optional(),
  include: FeeIncludeSchema.optional(),
  where: FeeWhereUniqueInputSchema,
  create: z.union([ FeeCreateInputSchema,FeeUncheckedCreateInputSchema ]),
  update: z.union([ FeeUpdateInputSchema,FeeUncheckedUpdateInputSchema ]),
}).strict()

export const FeeCreateManyArgsSchema: z.ZodType<Prisma.FeeCreateManyArgs> = z.object({
  data: z.union([ FeeCreateManyInputSchema,FeeCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const FeeDeleteArgsSchema: z.ZodType<Prisma.FeeDeleteArgs> = z.object({
  select: FeeSelectSchema.optional(),
  include: FeeIncludeSchema.optional(),
  where: FeeWhereUniqueInputSchema,
}).strict()

export const FeeUpdateArgsSchema: z.ZodType<Prisma.FeeUpdateArgs> = z.object({
  select: FeeSelectSchema.optional(),
  include: FeeIncludeSchema.optional(),
  data: z.union([ FeeUpdateInputSchema,FeeUncheckedUpdateInputSchema ]),
  where: FeeWhereUniqueInputSchema,
}).strict()

export const FeeUpdateManyArgsSchema: z.ZodType<Prisma.FeeUpdateManyArgs> = z.object({
  data: z.union([ FeeUpdateManyMutationInputSchema,FeeUncheckedUpdateManyInputSchema ]),
  where: FeeWhereInputSchema.optional(),
}).strict()

export const FeeDeleteManyArgsSchema: z.ZodType<Prisma.FeeDeleteManyArgs> = z.object({
  where: FeeWhereInputSchema.optional(),
}).strict()

export const TaxRatesCreateArgsSchema: z.ZodType<Prisma.TaxRatesCreateArgs> = z.object({
  select: TaxRatesSelectSchema.optional(),
  include: TaxRatesIncludeSchema.optional(),
  data: z.union([ TaxRatesCreateInputSchema,TaxRatesUncheckedCreateInputSchema ]),
}).strict()

export const TaxRatesUpsertArgsSchema: z.ZodType<Prisma.TaxRatesUpsertArgs> = z.object({
  select: TaxRatesSelectSchema.optional(),
  include: TaxRatesIncludeSchema.optional(),
  where: TaxRatesWhereUniqueInputSchema,
  create: z.union([ TaxRatesCreateInputSchema,TaxRatesUncheckedCreateInputSchema ]),
  update: z.union([ TaxRatesUpdateInputSchema,TaxRatesUncheckedUpdateInputSchema ]),
}).strict()

export const TaxRatesCreateManyArgsSchema: z.ZodType<Prisma.TaxRatesCreateManyArgs> = z.object({
  data: z.union([ TaxRatesCreateManyInputSchema,TaxRatesCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const TaxRatesDeleteArgsSchema: z.ZodType<Prisma.TaxRatesDeleteArgs> = z.object({
  select: TaxRatesSelectSchema.optional(),
  include: TaxRatesIncludeSchema.optional(),
  where: TaxRatesWhereUniqueInputSchema,
}).strict()

export const TaxRatesUpdateArgsSchema: z.ZodType<Prisma.TaxRatesUpdateArgs> = z.object({
  select: TaxRatesSelectSchema.optional(),
  include: TaxRatesIncludeSchema.optional(),
  data: z.union([ TaxRatesUpdateInputSchema,TaxRatesUncheckedUpdateInputSchema ]),
  where: TaxRatesWhereUniqueInputSchema,
}).strict()

export const TaxRatesUpdateManyArgsSchema: z.ZodType<Prisma.TaxRatesUpdateManyArgs> = z.object({
  data: z.union([ TaxRatesUpdateManyMutationInputSchema,TaxRatesUncheckedUpdateManyInputSchema ]),
  where: TaxRatesWhereInputSchema.optional(),
}).strict()

export const TaxRatesDeleteManyArgsSchema: z.ZodType<Prisma.TaxRatesDeleteManyArgs> = z.object({
  where: TaxRatesWhereInputSchema.optional(),
}).strict()

export const DeductionsCreateArgsSchema: z.ZodType<Prisma.DeductionsCreateArgs> = z.object({
  select: DeductionsSelectSchema.optional(),
  include: DeductionsIncludeSchema.optional(),
  data: z.union([ DeductionsCreateInputSchema,DeductionsUncheckedCreateInputSchema ]),
}).strict()

export const DeductionsUpsertArgsSchema: z.ZodType<Prisma.DeductionsUpsertArgs> = z.object({
  select: DeductionsSelectSchema.optional(),
  include: DeductionsIncludeSchema.optional(),
  where: DeductionsWhereUniqueInputSchema,
  create: z.union([ DeductionsCreateInputSchema,DeductionsUncheckedCreateInputSchema ]),
  update: z.union([ DeductionsUpdateInputSchema,DeductionsUncheckedUpdateInputSchema ]),
}).strict()

export const DeductionsCreateManyArgsSchema: z.ZodType<Prisma.DeductionsCreateManyArgs> = z.object({
  data: z.union([ DeductionsCreateManyInputSchema,DeductionsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const DeductionsDeleteArgsSchema: z.ZodType<Prisma.DeductionsDeleteArgs> = z.object({
  select: DeductionsSelectSchema.optional(),
  include: DeductionsIncludeSchema.optional(),
  where: DeductionsWhereUniqueInputSchema,
}).strict()

export const DeductionsUpdateArgsSchema: z.ZodType<Prisma.DeductionsUpdateArgs> = z.object({
  select: DeductionsSelectSchema.optional(),
  include: DeductionsIncludeSchema.optional(),
  data: z.union([ DeductionsUpdateInputSchema,DeductionsUncheckedUpdateInputSchema ]),
  where: DeductionsWhereUniqueInputSchema,
}).strict()

export const DeductionsUpdateManyArgsSchema: z.ZodType<Prisma.DeductionsUpdateManyArgs> = z.object({
  data: z.union([ DeductionsUpdateManyMutationInputSchema,DeductionsUncheckedUpdateManyInputSchema ]),
  where: DeductionsWhereInputSchema.optional(),
}).strict()

export const DeductionsDeleteManyArgsSchema: z.ZodType<Prisma.DeductionsDeleteManyArgs> = z.object({
  where: DeductionsWhereInputSchema.optional(),
}).strict()

export const BedroomCreateArgsSchema: z.ZodType<Prisma.BedroomCreateArgs> = z.object({
  select: BedroomSelectSchema.optional(),
  include: BedroomIncludeSchema.optional(),
  data: z.union([ BedroomCreateInputSchema,BedroomUncheckedCreateInputSchema ]),
}).strict()

export const BedroomUpsertArgsSchema: z.ZodType<Prisma.BedroomUpsertArgs> = z.object({
  select: BedroomSelectSchema.optional(),
  include: BedroomIncludeSchema.optional(),
  where: BedroomWhereUniqueInputSchema,
  create: z.union([ BedroomCreateInputSchema,BedroomUncheckedCreateInputSchema ]),
  update: z.union([ BedroomUpdateInputSchema,BedroomUncheckedUpdateInputSchema ]),
}).strict()

export const BedroomCreateManyArgsSchema: z.ZodType<Prisma.BedroomCreateManyArgs> = z.object({
  data: z.union([ BedroomCreateManyInputSchema,BedroomCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const BedroomDeleteArgsSchema: z.ZodType<Prisma.BedroomDeleteArgs> = z.object({
  select: BedroomSelectSchema.optional(),
  include: BedroomIncludeSchema.optional(),
  where: BedroomWhereUniqueInputSchema,
}).strict()

export const BedroomUpdateArgsSchema: z.ZodType<Prisma.BedroomUpdateArgs> = z.object({
  select: BedroomSelectSchema.optional(),
  include: BedroomIncludeSchema.optional(),
  data: z.union([ BedroomUpdateInputSchema,BedroomUncheckedUpdateInputSchema ]),
  where: BedroomWhereUniqueInputSchema,
}).strict()

export const BedroomUpdateManyArgsSchema: z.ZodType<Prisma.BedroomUpdateManyArgs> = z.object({
  data: z.union([ BedroomUpdateManyMutationInputSchema,BedroomUncheckedUpdateManyInputSchema ]),
  where: BedroomWhereInputSchema.optional(),
}).strict()

export const BedroomDeleteManyArgsSchema: z.ZodType<Prisma.BedroomDeleteManyArgs> = z.object({
  where: BedroomWhereInputSchema.optional(),
}).strict()

export const CalendarEventCreateArgsSchema: z.ZodType<Prisma.CalendarEventCreateArgs> = z.object({
  select: CalendarEventSelectSchema.optional(),
  include: CalendarEventIncludeSchema.optional(),
  data: z.union([ CalendarEventCreateInputSchema,CalendarEventUncheckedCreateInputSchema ]),
}).strict()

export const CalendarEventUpsertArgsSchema: z.ZodType<Prisma.CalendarEventUpsertArgs> = z.object({
  select: CalendarEventSelectSchema.optional(),
  include: CalendarEventIncludeSchema.optional(),
  where: CalendarEventWhereUniqueInputSchema,
  create: z.union([ CalendarEventCreateInputSchema,CalendarEventUncheckedCreateInputSchema ]),
  update: z.union([ CalendarEventUpdateInputSchema,CalendarEventUncheckedUpdateInputSchema ]),
}).strict()

export const CalendarEventCreateManyArgsSchema: z.ZodType<Prisma.CalendarEventCreateManyArgs> = z.object({
  data: z.union([ CalendarEventCreateManyInputSchema,CalendarEventCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const CalendarEventDeleteArgsSchema: z.ZodType<Prisma.CalendarEventDeleteArgs> = z.object({
  select: CalendarEventSelectSchema.optional(),
  include: CalendarEventIncludeSchema.optional(),
  where: CalendarEventWhereUniqueInputSchema,
}).strict()

export const CalendarEventUpdateArgsSchema: z.ZodType<Prisma.CalendarEventUpdateArgs> = z.object({
  select: CalendarEventSelectSchema.optional(),
  include: CalendarEventIncludeSchema.optional(),
  data: z.union([ CalendarEventUpdateInputSchema,CalendarEventUncheckedUpdateInputSchema ]),
  where: CalendarEventWhereUniqueInputSchema,
}).strict()

export const CalendarEventUpdateManyArgsSchema: z.ZodType<Prisma.CalendarEventUpdateManyArgs> = z.object({
  data: z.union([ CalendarEventUpdateManyMutationInputSchema,CalendarEventUncheckedUpdateManyInputSchema ]),
  where: CalendarEventWhereInputSchema.optional(),
}).strict()

export const CalendarEventDeleteManyArgsSchema: z.ZodType<Prisma.CalendarEventDeleteManyArgs> = z.object({
  where: CalendarEventWhereInputSchema.optional(),
}).strict()

export const ReservationCreateArgsSchema: z.ZodType<Prisma.ReservationCreateArgs> = z.object({
  select: ReservationSelectSchema.optional(),
  include: ReservationIncludeSchema.optional(),
  data: z.union([ ReservationCreateInputSchema,ReservationUncheckedCreateInputSchema ]),
}).strict()

export const ReservationUpsertArgsSchema: z.ZodType<Prisma.ReservationUpsertArgs> = z.object({
  select: ReservationSelectSchema.optional(),
  include: ReservationIncludeSchema.optional(),
  where: ReservationWhereUniqueInputSchema,
  create: z.union([ ReservationCreateInputSchema,ReservationUncheckedCreateInputSchema ]),
  update: z.union([ ReservationUpdateInputSchema,ReservationUncheckedUpdateInputSchema ]),
}).strict()

export const ReservationCreateManyArgsSchema: z.ZodType<Prisma.ReservationCreateManyArgs> = z.object({
  data: z.union([ ReservationCreateManyInputSchema,ReservationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const ReservationDeleteArgsSchema: z.ZodType<Prisma.ReservationDeleteArgs> = z.object({
  select: ReservationSelectSchema.optional(),
  include: ReservationIncludeSchema.optional(),
  where: ReservationWhereUniqueInputSchema,
}).strict()

export const ReservationUpdateArgsSchema: z.ZodType<Prisma.ReservationUpdateArgs> = z.object({
  select: ReservationSelectSchema.optional(),
  include: ReservationIncludeSchema.optional(),
  data: z.union([ ReservationUpdateInputSchema,ReservationUncheckedUpdateInputSchema ]),
  where: ReservationWhereUniqueInputSchema,
}).strict()

export const ReservationUpdateManyArgsSchema: z.ZodType<Prisma.ReservationUpdateManyArgs> = z.object({
  data: z.union([ ReservationUpdateManyMutationInputSchema,ReservationUncheckedUpdateManyInputSchema ]),
  where: ReservationWhereInputSchema.optional(),
}).strict()

export const ReservationDeleteManyArgsSchema: z.ZodType<Prisma.ReservationDeleteManyArgs> = z.object({
  where: ReservationWhereInputSchema.optional(),
}).strict()

export const ReservationBpRequestCreateArgsSchema: z.ZodType<Prisma.ReservationBpRequestCreateArgs> = z.object({
  select: ReservationBpRequestSelectSchema.optional(),
  data: z.union([ ReservationBpRequestCreateInputSchema,ReservationBpRequestUncheckedCreateInputSchema ]),
}).strict()

export const ReservationBpRequestUpsertArgsSchema: z.ZodType<Prisma.ReservationBpRequestUpsertArgs> = z.object({
  select: ReservationBpRequestSelectSchema.optional(),
  where: ReservationBpRequestWhereUniqueInputSchema,
  create: z.union([ ReservationBpRequestCreateInputSchema,ReservationBpRequestUncheckedCreateInputSchema ]),
  update: z.union([ ReservationBpRequestUpdateInputSchema,ReservationBpRequestUncheckedUpdateInputSchema ]),
}).strict()

export const ReservationBpRequestCreateManyArgsSchema: z.ZodType<Prisma.ReservationBpRequestCreateManyArgs> = z.object({
  data: z.union([ ReservationBpRequestCreateManyInputSchema,ReservationBpRequestCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const ReservationBpRequestDeleteArgsSchema: z.ZodType<Prisma.ReservationBpRequestDeleteArgs> = z.object({
  select: ReservationBpRequestSelectSchema.optional(),
  where: ReservationBpRequestWhereUniqueInputSchema,
}).strict()

export const ReservationBpRequestUpdateArgsSchema: z.ZodType<Prisma.ReservationBpRequestUpdateArgs> = z.object({
  select: ReservationBpRequestSelectSchema.optional(),
  data: z.union([ ReservationBpRequestUpdateInputSchema,ReservationBpRequestUncheckedUpdateInputSchema ]),
  where: ReservationBpRequestWhereUniqueInputSchema,
}).strict()

export const ReservationBpRequestUpdateManyArgsSchema: z.ZodType<Prisma.ReservationBpRequestUpdateManyArgs> = z.object({
  data: z.union([ ReservationBpRequestUpdateManyMutationInputSchema,ReservationBpRequestUncheckedUpdateManyInputSchema ]),
  where: ReservationBpRequestWhereInputSchema.optional(),
}).strict()

export const ReservationBpRequestDeleteManyArgsSchema: z.ZodType<Prisma.ReservationBpRequestDeleteManyArgs> = z.object({
  where: ReservationBpRequestWhereInputSchema.optional(),
}).strict()

export const GuestCreateArgsSchema: z.ZodType<Prisma.GuestCreateArgs> = z.object({
  select: GuestSelectSchema.optional(),
  include: GuestIncludeSchema.optional(),
  data: z.union([ GuestCreateInputSchema,GuestUncheckedCreateInputSchema ]),
}).strict()

export const GuestUpsertArgsSchema: z.ZodType<Prisma.GuestUpsertArgs> = z.object({
  select: GuestSelectSchema.optional(),
  include: GuestIncludeSchema.optional(),
  where: GuestWhereUniqueInputSchema,
  create: z.union([ GuestCreateInputSchema,GuestUncheckedCreateInputSchema ]),
  update: z.union([ GuestUpdateInputSchema,GuestUncheckedUpdateInputSchema ]),
}).strict()

export const GuestCreateManyArgsSchema: z.ZodType<Prisma.GuestCreateManyArgs> = z.object({
  data: z.union([ GuestCreateManyInputSchema,GuestCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const GuestDeleteArgsSchema: z.ZodType<Prisma.GuestDeleteArgs> = z.object({
  select: GuestSelectSchema.optional(),
  include: GuestIncludeSchema.optional(),
  where: GuestWhereUniqueInputSchema,
}).strict()

export const GuestUpdateArgsSchema: z.ZodType<Prisma.GuestUpdateArgs> = z.object({
  select: GuestSelectSchema.optional(),
  include: GuestIncludeSchema.optional(),
  data: z.union([ GuestUpdateInputSchema,GuestUncheckedUpdateInputSchema ]),
  where: GuestWhereUniqueInputSchema,
}).strict()

export const GuestUpdateManyArgsSchema: z.ZodType<Prisma.GuestUpdateManyArgs> = z.object({
  data: z.union([ GuestUpdateManyMutationInputSchema,GuestUncheckedUpdateManyInputSchema ]),
  where: GuestWhereInputSchema.optional(),
}).strict()

export const GuestDeleteManyArgsSchema: z.ZodType<Prisma.GuestDeleteManyArgs> = z.object({
  where: GuestWhereInputSchema.optional(),
}).strict()

export const MessageThreadCreateArgsSchema: z.ZodType<Prisma.MessageThreadCreateArgs> = z.object({
  select: MessageThreadSelectSchema.optional(),
  include: MessageThreadIncludeSchema.optional(),
  data: z.union([ MessageThreadCreateInputSchema,MessageThreadUncheckedCreateInputSchema ]),
}).strict()

export const MessageThreadUpsertArgsSchema: z.ZodType<Prisma.MessageThreadUpsertArgs> = z.object({
  select: MessageThreadSelectSchema.optional(),
  include: MessageThreadIncludeSchema.optional(),
  where: MessageThreadWhereUniqueInputSchema,
  create: z.union([ MessageThreadCreateInputSchema,MessageThreadUncheckedCreateInputSchema ]),
  update: z.union([ MessageThreadUpdateInputSchema,MessageThreadUncheckedUpdateInputSchema ]),
}).strict()

export const MessageThreadCreateManyArgsSchema: z.ZodType<Prisma.MessageThreadCreateManyArgs> = z.object({
  data: z.union([ MessageThreadCreateManyInputSchema,MessageThreadCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const MessageThreadDeleteArgsSchema: z.ZodType<Prisma.MessageThreadDeleteArgs> = z.object({
  select: MessageThreadSelectSchema.optional(),
  include: MessageThreadIncludeSchema.optional(),
  where: MessageThreadWhereUniqueInputSchema,
}).strict()

export const MessageThreadUpdateArgsSchema: z.ZodType<Prisma.MessageThreadUpdateArgs> = z.object({
  select: MessageThreadSelectSchema.optional(),
  include: MessageThreadIncludeSchema.optional(),
  data: z.union([ MessageThreadUpdateInputSchema,MessageThreadUncheckedUpdateInputSchema ]),
  where: MessageThreadWhereUniqueInputSchema,
}).strict()

export const MessageThreadUpdateManyArgsSchema: z.ZodType<Prisma.MessageThreadUpdateManyArgs> = z.object({
  data: z.union([ MessageThreadUpdateManyMutationInputSchema,MessageThreadUncheckedUpdateManyInputSchema ]),
  where: MessageThreadWhereInputSchema.optional(),
}).strict()

export const MessageThreadDeleteManyArgsSchema: z.ZodType<Prisma.MessageThreadDeleteManyArgs> = z.object({
  where: MessageThreadWhereInputSchema.optional(),
}).strict()

export const MessageCreateArgsSchema: z.ZodType<Prisma.MessageCreateArgs> = z.object({
  select: MessageSelectSchema.optional(),
  include: MessageIncludeSchema.optional(),
  data: z.union([ MessageCreateInputSchema,MessageUncheckedCreateInputSchema ]),
}).strict()

export const MessageUpsertArgsSchema: z.ZodType<Prisma.MessageUpsertArgs> = z.object({
  select: MessageSelectSchema.optional(),
  include: MessageIncludeSchema.optional(),
  where: MessageWhereUniqueInputSchema,
  create: z.union([ MessageCreateInputSchema,MessageUncheckedCreateInputSchema ]),
  update: z.union([ MessageUpdateInputSchema,MessageUncheckedUpdateInputSchema ]),
}).strict()

export const MessageCreateManyArgsSchema: z.ZodType<Prisma.MessageCreateManyArgs> = z.object({
  data: z.union([ MessageCreateManyInputSchema,MessageCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const MessageDeleteArgsSchema: z.ZodType<Prisma.MessageDeleteArgs> = z.object({
  select: MessageSelectSchema.optional(),
  include: MessageIncludeSchema.optional(),
  where: MessageWhereUniqueInputSchema,
}).strict()

export const MessageUpdateArgsSchema: z.ZodType<Prisma.MessageUpdateArgs> = z.object({
  select: MessageSelectSchema.optional(),
  include: MessageIncludeSchema.optional(),
  data: z.union([ MessageUpdateInputSchema,MessageUncheckedUpdateInputSchema ]),
  where: MessageWhereUniqueInputSchema,
}).strict()

export const MessageUpdateManyArgsSchema: z.ZodType<Prisma.MessageUpdateManyArgs> = z.object({
  data: z.union([ MessageUpdateManyMutationInputSchema,MessageUncheckedUpdateManyInputSchema ]),
  where: MessageWhereInputSchema.optional(),
}).strict()

export const MessageDeleteManyArgsSchema: z.ZodType<Prisma.MessageDeleteManyArgs> = z.object({
  where: MessageWhereInputSchema.optional(),
}).strict()

export const MessageTemplateCreateArgsSchema: z.ZodType<Prisma.MessageTemplateCreateArgs> = z.object({
  select: MessageTemplateSelectSchema.optional(),
  include: MessageTemplateIncludeSchema.optional(),
  data: z.union([ MessageTemplateCreateInputSchema,MessageTemplateUncheckedCreateInputSchema ]),
}).strict()

export const MessageTemplateUpsertArgsSchema: z.ZodType<Prisma.MessageTemplateUpsertArgs> = z.object({
  select: MessageTemplateSelectSchema.optional(),
  include: MessageTemplateIncludeSchema.optional(),
  where: MessageTemplateWhereUniqueInputSchema,
  create: z.union([ MessageTemplateCreateInputSchema,MessageTemplateUncheckedCreateInputSchema ]),
  update: z.union([ MessageTemplateUpdateInputSchema,MessageTemplateUncheckedUpdateInputSchema ]),
}).strict()

export const MessageTemplateCreateManyArgsSchema: z.ZodType<Prisma.MessageTemplateCreateManyArgs> = z.object({
  data: z.union([ MessageTemplateCreateManyInputSchema,MessageTemplateCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const MessageTemplateDeleteArgsSchema: z.ZodType<Prisma.MessageTemplateDeleteArgs> = z.object({
  select: MessageTemplateSelectSchema.optional(),
  include: MessageTemplateIncludeSchema.optional(),
  where: MessageTemplateWhereUniqueInputSchema,
}).strict()

export const MessageTemplateUpdateArgsSchema: z.ZodType<Prisma.MessageTemplateUpdateArgs> = z.object({
  select: MessageTemplateSelectSchema.optional(),
  include: MessageTemplateIncludeSchema.optional(),
  data: z.union([ MessageTemplateUpdateInputSchema,MessageTemplateUncheckedUpdateInputSchema ]),
  where: MessageTemplateWhereUniqueInputSchema,
}).strict()

export const MessageTemplateUpdateManyArgsSchema: z.ZodType<Prisma.MessageTemplateUpdateManyArgs> = z.object({
  data: z.union([ MessageTemplateUpdateManyMutationInputSchema,MessageTemplateUncheckedUpdateManyInputSchema ]),
  where: MessageTemplateWhereInputSchema.optional(),
}).strict()

export const MessageTemplateDeleteManyArgsSchema: z.ZodType<Prisma.MessageTemplateDeleteManyArgs> = z.object({
  where: MessageTemplateWhereInputSchema.optional(),
}).strict()

export const ScheduledMessageCreateArgsSchema: z.ZodType<Prisma.ScheduledMessageCreateArgs> = z.object({
  select: ScheduledMessageSelectSchema.optional(),
  include: ScheduledMessageIncludeSchema.optional(),
  data: z.union([ ScheduledMessageCreateInputSchema,ScheduledMessageUncheckedCreateInputSchema ]),
}).strict()

export const ScheduledMessageUpsertArgsSchema: z.ZodType<Prisma.ScheduledMessageUpsertArgs> = z.object({
  select: ScheduledMessageSelectSchema.optional(),
  include: ScheduledMessageIncludeSchema.optional(),
  where: ScheduledMessageWhereUniqueInputSchema,
  create: z.union([ ScheduledMessageCreateInputSchema,ScheduledMessageUncheckedCreateInputSchema ]),
  update: z.union([ ScheduledMessageUpdateInputSchema,ScheduledMessageUncheckedUpdateInputSchema ]),
}).strict()

export const ScheduledMessageCreateManyArgsSchema: z.ZodType<Prisma.ScheduledMessageCreateManyArgs> = z.object({
  data: z.union([ ScheduledMessageCreateManyInputSchema,ScheduledMessageCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const ScheduledMessageDeleteArgsSchema: z.ZodType<Prisma.ScheduledMessageDeleteArgs> = z.object({
  select: ScheduledMessageSelectSchema.optional(),
  include: ScheduledMessageIncludeSchema.optional(),
  where: ScheduledMessageWhereUniqueInputSchema,
}).strict()

export const ScheduledMessageUpdateArgsSchema: z.ZodType<Prisma.ScheduledMessageUpdateArgs> = z.object({
  select: ScheduledMessageSelectSchema.optional(),
  include: ScheduledMessageIncludeSchema.optional(),
  data: z.union([ ScheduledMessageUpdateInputSchema,ScheduledMessageUncheckedUpdateInputSchema ]),
  where: ScheduledMessageWhereUniqueInputSchema,
}).strict()

export const ScheduledMessageUpdateManyArgsSchema: z.ZodType<Prisma.ScheduledMessageUpdateManyArgs> = z.object({
  data: z.union([ ScheduledMessageUpdateManyMutationInputSchema,ScheduledMessageUncheckedUpdateManyInputSchema ]),
  where: ScheduledMessageWhereInputSchema.optional(),
}).strict()

export const ScheduledMessageDeleteManyArgsSchema: z.ZodType<Prisma.ScheduledMessageDeleteManyArgs> = z.object({
  where: ScheduledMessageWhereInputSchema.optional(),
}).strict()

export const RevenueCreateArgsSchema: z.ZodType<Prisma.RevenueCreateArgs> = z.object({
  select: RevenueSelectSchema.optional(),
  include: RevenueIncludeSchema.optional(),
  data: z.union([ RevenueCreateInputSchema,RevenueUncheckedCreateInputSchema ]),
}).strict()

export const RevenueUpsertArgsSchema: z.ZodType<Prisma.RevenueUpsertArgs> = z.object({
  select: RevenueSelectSchema.optional(),
  include: RevenueIncludeSchema.optional(),
  where: RevenueWhereUniqueInputSchema,
  create: z.union([ RevenueCreateInputSchema,RevenueUncheckedCreateInputSchema ]),
  update: z.union([ RevenueUpdateInputSchema,RevenueUncheckedUpdateInputSchema ]),
}).strict()

export const RevenueCreateManyArgsSchema: z.ZodType<Prisma.RevenueCreateManyArgs> = z.object({
  data: z.union([ RevenueCreateManyInputSchema,RevenueCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const RevenueDeleteArgsSchema: z.ZodType<Prisma.RevenueDeleteArgs> = z.object({
  select: RevenueSelectSchema.optional(),
  include: RevenueIncludeSchema.optional(),
  where: RevenueWhereUniqueInputSchema,
}).strict()

export const RevenueUpdateArgsSchema: z.ZodType<Prisma.RevenueUpdateArgs> = z.object({
  select: RevenueSelectSchema.optional(),
  include: RevenueIncludeSchema.optional(),
  data: z.union([ RevenueUpdateInputSchema,RevenueUncheckedUpdateInputSchema ]),
  where: RevenueWhereUniqueInputSchema,
}).strict()

export const RevenueUpdateManyArgsSchema: z.ZodType<Prisma.RevenueUpdateManyArgs> = z.object({
  data: z.union([ RevenueUpdateManyMutationInputSchema,RevenueUncheckedUpdateManyInputSchema ]),
  where: RevenueWhereInputSchema.optional(),
}).strict()

export const RevenueDeleteManyArgsSchema: z.ZodType<Prisma.RevenueDeleteManyArgs> = z.object({
  where: RevenueWhereInputSchema.optional(),
}).strict()

export const RevenueTaxCreateArgsSchema: z.ZodType<Prisma.RevenueTaxCreateArgs> = z.object({
  select: RevenueTaxSelectSchema.optional(),
  include: RevenueTaxIncludeSchema.optional(),
  data: z.union([ RevenueTaxCreateInputSchema,RevenueTaxUncheckedCreateInputSchema ]),
}).strict()

export const RevenueTaxUpsertArgsSchema: z.ZodType<Prisma.RevenueTaxUpsertArgs> = z.object({
  select: RevenueTaxSelectSchema.optional(),
  include: RevenueTaxIncludeSchema.optional(),
  where: RevenueTaxWhereUniqueInputSchema,
  create: z.union([ RevenueTaxCreateInputSchema,RevenueTaxUncheckedCreateInputSchema ]),
  update: z.union([ RevenueTaxUpdateInputSchema,RevenueTaxUncheckedUpdateInputSchema ]),
}).strict()

export const RevenueTaxCreateManyArgsSchema: z.ZodType<Prisma.RevenueTaxCreateManyArgs> = z.object({
  data: z.union([ RevenueTaxCreateManyInputSchema,RevenueTaxCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const RevenueTaxDeleteArgsSchema: z.ZodType<Prisma.RevenueTaxDeleteArgs> = z.object({
  select: RevenueTaxSelectSchema.optional(),
  include: RevenueTaxIncludeSchema.optional(),
  where: RevenueTaxWhereUniqueInputSchema,
}).strict()

export const RevenueTaxUpdateArgsSchema: z.ZodType<Prisma.RevenueTaxUpdateArgs> = z.object({
  select: RevenueTaxSelectSchema.optional(),
  include: RevenueTaxIncludeSchema.optional(),
  data: z.union([ RevenueTaxUpdateInputSchema,RevenueTaxUncheckedUpdateInputSchema ]),
  where: RevenueTaxWhereUniqueInputSchema,
}).strict()

export const RevenueTaxUpdateManyArgsSchema: z.ZodType<Prisma.RevenueTaxUpdateManyArgs> = z.object({
  data: z.union([ RevenueTaxUpdateManyMutationInputSchema,RevenueTaxUncheckedUpdateManyInputSchema ]),
  where: RevenueTaxWhereInputSchema.optional(),
}).strict()

export const RevenueTaxDeleteManyArgsSchema: z.ZodType<Prisma.RevenueTaxDeleteManyArgs> = z.object({
  where: RevenueTaxWhereInputSchema.optional(),
}).strict()

export const RevenueFeeCreateArgsSchema: z.ZodType<Prisma.RevenueFeeCreateArgs> = z.object({
  select: RevenueFeeSelectSchema.optional(),
  include: RevenueFeeIncludeSchema.optional(),
  data: z.union([ RevenueFeeCreateInputSchema,RevenueFeeUncheckedCreateInputSchema ]),
}).strict()

export const RevenueFeeUpsertArgsSchema: z.ZodType<Prisma.RevenueFeeUpsertArgs> = z.object({
  select: RevenueFeeSelectSchema.optional(),
  include: RevenueFeeIncludeSchema.optional(),
  where: RevenueFeeWhereUniqueInputSchema,
  create: z.union([ RevenueFeeCreateInputSchema,RevenueFeeUncheckedCreateInputSchema ]),
  update: z.union([ RevenueFeeUpdateInputSchema,RevenueFeeUncheckedUpdateInputSchema ]),
}).strict()

export const RevenueFeeCreateManyArgsSchema: z.ZodType<Prisma.RevenueFeeCreateManyArgs> = z.object({
  data: z.union([ RevenueFeeCreateManyInputSchema,RevenueFeeCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const RevenueFeeDeleteArgsSchema: z.ZodType<Prisma.RevenueFeeDeleteArgs> = z.object({
  select: RevenueFeeSelectSchema.optional(),
  include: RevenueFeeIncludeSchema.optional(),
  where: RevenueFeeWhereUniqueInputSchema,
}).strict()

export const RevenueFeeUpdateArgsSchema: z.ZodType<Prisma.RevenueFeeUpdateArgs> = z.object({
  select: RevenueFeeSelectSchema.optional(),
  include: RevenueFeeIncludeSchema.optional(),
  data: z.union([ RevenueFeeUpdateInputSchema,RevenueFeeUncheckedUpdateInputSchema ]),
  where: RevenueFeeWhereUniqueInputSchema,
}).strict()

export const RevenueFeeUpdateManyArgsSchema: z.ZodType<Prisma.RevenueFeeUpdateManyArgs> = z.object({
  data: z.union([ RevenueFeeUpdateManyMutationInputSchema,RevenueFeeUncheckedUpdateManyInputSchema ]),
  where: RevenueFeeWhereInputSchema.optional(),
}).strict()

export const RevenueFeeDeleteManyArgsSchema: z.ZodType<Prisma.RevenueFeeDeleteManyArgs> = z.object({
  where: RevenueFeeWhereInputSchema.optional(),
}).strict()

export const ExpenseCreateArgsSchema: z.ZodType<Prisma.ExpenseCreateArgs> = z.object({
  select: ExpenseSelectSchema.optional(),
  include: ExpenseIncludeSchema.optional(),
  data: z.union([ ExpenseCreateInputSchema,ExpenseUncheckedCreateInputSchema ]),
}).strict()

export const ExpenseUpsertArgsSchema: z.ZodType<Prisma.ExpenseUpsertArgs> = z.object({
  select: ExpenseSelectSchema.optional(),
  include: ExpenseIncludeSchema.optional(),
  where: ExpenseWhereUniqueInputSchema,
  create: z.union([ ExpenseCreateInputSchema,ExpenseUncheckedCreateInputSchema ]),
  update: z.union([ ExpenseUpdateInputSchema,ExpenseUncheckedUpdateInputSchema ]),
}).strict()

export const ExpenseCreateManyArgsSchema: z.ZodType<Prisma.ExpenseCreateManyArgs> = z.object({
  data: z.union([ ExpenseCreateManyInputSchema,ExpenseCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const ExpenseDeleteArgsSchema: z.ZodType<Prisma.ExpenseDeleteArgs> = z.object({
  select: ExpenseSelectSchema.optional(),
  include: ExpenseIncludeSchema.optional(),
  where: ExpenseWhereUniqueInputSchema,
}).strict()

export const ExpenseUpdateArgsSchema: z.ZodType<Prisma.ExpenseUpdateArgs> = z.object({
  select: ExpenseSelectSchema.optional(),
  include: ExpenseIncludeSchema.optional(),
  data: z.union([ ExpenseUpdateInputSchema,ExpenseUncheckedUpdateInputSchema ]),
  where: ExpenseWhereUniqueInputSchema,
}).strict()

export const ExpenseUpdateManyArgsSchema: z.ZodType<Prisma.ExpenseUpdateManyArgs> = z.object({
  data: z.union([ ExpenseUpdateManyMutationInputSchema,ExpenseUncheckedUpdateManyInputSchema ]),
  where: ExpenseWhereInputSchema.optional(),
}).strict()

export const ExpenseDeleteManyArgsSchema: z.ZodType<Prisma.ExpenseDeleteManyArgs> = z.object({
  where: ExpenseWhereInputSchema.optional(),
}).strict()

export const ListingExpenseCreateArgsSchema: z.ZodType<Prisma.ListingExpenseCreateArgs> = z.object({
  select: ListingExpenseSelectSchema.optional(),
  include: ListingExpenseIncludeSchema.optional(),
  data: z.union([ ListingExpenseCreateInputSchema,ListingExpenseUncheckedCreateInputSchema ]),
}).strict()

export const ListingExpenseUpsertArgsSchema: z.ZodType<Prisma.ListingExpenseUpsertArgs> = z.object({
  select: ListingExpenseSelectSchema.optional(),
  include: ListingExpenseIncludeSchema.optional(),
  where: ListingExpenseWhereUniqueInputSchema,
  create: z.union([ ListingExpenseCreateInputSchema,ListingExpenseUncheckedCreateInputSchema ]),
  update: z.union([ ListingExpenseUpdateInputSchema,ListingExpenseUncheckedUpdateInputSchema ]),
}).strict()

export const ListingExpenseCreateManyArgsSchema: z.ZodType<Prisma.ListingExpenseCreateManyArgs> = z.object({
  data: z.union([ ListingExpenseCreateManyInputSchema,ListingExpenseCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const ListingExpenseDeleteArgsSchema: z.ZodType<Prisma.ListingExpenseDeleteArgs> = z.object({
  select: ListingExpenseSelectSchema.optional(),
  include: ListingExpenseIncludeSchema.optional(),
  where: ListingExpenseWhereUniqueInputSchema,
}).strict()

export const ListingExpenseUpdateArgsSchema: z.ZodType<Prisma.ListingExpenseUpdateArgs> = z.object({
  select: ListingExpenseSelectSchema.optional(),
  include: ListingExpenseIncludeSchema.optional(),
  data: z.union([ ListingExpenseUpdateInputSchema,ListingExpenseUncheckedUpdateInputSchema ]),
  where: ListingExpenseWhereUniqueInputSchema,
}).strict()

export const ListingExpenseUpdateManyArgsSchema: z.ZodType<Prisma.ListingExpenseUpdateManyArgs> = z.object({
  data: z.union([ ListingExpenseUpdateManyMutationInputSchema,ListingExpenseUncheckedUpdateManyInputSchema ]),
  where: ListingExpenseWhereInputSchema.optional(),
}).strict()

export const ListingExpenseDeleteManyArgsSchema: z.ZodType<Prisma.ListingExpenseDeleteManyArgs> = z.object({
  where: ListingExpenseWhereInputSchema.optional(),
}).strict()

export const OwnerStatementCreateArgsSchema: z.ZodType<Prisma.OwnerStatementCreateArgs> = z.object({
  select: OwnerStatementSelectSchema.optional(),
  include: OwnerStatementIncludeSchema.optional(),
  data: z.union([ OwnerStatementCreateInputSchema,OwnerStatementUncheckedCreateInputSchema ]),
}).strict()

export const OwnerStatementUpsertArgsSchema: z.ZodType<Prisma.OwnerStatementUpsertArgs> = z.object({
  select: OwnerStatementSelectSchema.optional(),
  include: OwnerStatementIncludeSchema.optional(),
  where: OwnerStatementWhereUniqueInputSchema,
  create: z.union([ OwnerStatementCreateInputSchema,OwnerStatementUncheckedCreateInputSchema ]),
  update: z.union([ OwnerStatementUpdateInputSchema,OwnerStatementUncheckedUpdateInputSchema ]),
}).strict()

export const OwnerStatementCreateManyArgsSchema: z.ZodType<Prisma.OwnerStatementCreateManyArgs> = z.object({
  data: z.union([ OwnerStatementCreateManyInputSchema,OwnerStatementCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const OwnerStatementDeleteArgsSchema: z.ZodType<Prisma.OwnerStatementDeleteArgs> = z.object({
  select: OwnerStatementSelectSchema.optional(),
  include: OwnerStatementIncludeSchema.optional(),
  where: OwnerStatementWhereUniqueInputSchema,
}).strict()

export const OwnerStatementUpdateArgsSchema: z.ZodType<Prisma.OwnerStatementUpdateArgs> = z.object({
  select: OwnerStatementSelectSchema.optional(),
  include: OwnerStatementIncludeSchema.optional(),
  data: z.union([ OwnerStatementUpdateInputSchema,OwnerStatementUncheckedUpdateInputSchema ]),
  where: OwnerStatementWhereUniqueInputSchema,
}).strict()

export const OwnerStatementUpdateManyArgsSchema: z.ZodType<Prisma.OwnerStatementUpdateManyArgs> = z.object({
  data: z.union([ OwnerStatementUpdateManyMutationInputSchema,OwnerStatementUncheckedUpdateManyInputSchema ]),
  where: OwnerStatementWhereInputSchema.optional(),
}).strict()

export const OwnerStatementDeleteManyArgsSchema: z.ZodType<Prisma.OwnerStatementDeleteManyArgs> = z.object({
  where: OwnerStatementWhereInputSchema.optional(),
}).strict()

export const PlaidItemCreateArgsSchema: z.ZodType<Prisma.PlaidItemCreateArgs> = z.object({
  select: PlaidItemSelectSchema.optional(),
  include: PlaidItemIncludeSchema.optional(),
  data: z.union([ PlaidItemCreateInputSchema,PlaidItemUncheckedCreateInputSchema ]),
}).strict()

export const PlaidItemUpsertArgsSchema: z.ZodType<Prisma.PlaidItemUpsertArgs> = z.object({
  select: PlaidItemSelectSchema.optional(),
  include: PlaidItemIncludeSchema.optional(),
  where: PlaidItemWhereUniqueInputSchema,
  create: z.union([ PlaidItemCreateInputSchema,PlaidItemUncheckedCreateInputSchema ]),
  update: z.union([ PlaidItemUpdateInputSchema,PlaidItemUncheckedUpdateInputSchema ]),
}).strict()

export const PlaidItemCreateManyArgsSchema: z.ZodType<Prisma.PlaidItemCreateManyArgs> = z.object({
  data: z.union([ PlaidItemCreateManyInputSchema,PlaidItemCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const PlaidItemDeleteArgsSchema: z.ZodType<Prisma.PlaidItemDeleteArgs> = z.object({
  select: PlaidItemSelectSchema.optional(),
  include: PlaidItemIncludeSchema.optional(),
  where: PlaidItemWhereUniqueInputSchema,
}).strict()

export const PlaidItemUpdateArgsSchema: z.ZodType<Prisma.PlaidItemUpdateArgs> = z.object({
  select: PlaidItemSelectSchema.optional(),
  include: PlaidItemIncludeSchema.optional(),
  data: z.union([ PlaidItemUpdateInputSchema,PlaidItemUncheckedUpdateInputSchema ]),
  where: PlaidItemWhereUniqueInputSchema,
}).strict()

export const PlaidItemUpdateManyArgsSchema: z.ZodType<Prisma.PlaidItemUpdateManyArgs> = z.object({
  data: z.union([ PlaidItemUpdateManyMutationInputSchema,PlaidItemUncheckedUpdateManyInputSchema ]),
  where: PlaidItemWhereInputSchema.optional(),
}).strict()

export const PlaidItemDeleteManyArgsSchema: z.ZodType<Prisma.PlaidItemDeleteManyArgs> = z.object({
  where: PlaidItemWhereInputSchema.optional(),
}).strict()

export const PlaidAccountCreateArgsSchema: z.ZodType<Prisma.PlaidAccountCreateArgs> = z.object({
  select: PlaidAccountSelectSchema.optional(),
  include: PlaidAccountIncludeSchema.optional(),
  data: z.union([ PlaidAccountCreateInputSchema,PlaidAccountUncheckedCreateInputSchema ]),
}).strict()

export const PlaidAccountUpsertArgsSchema: z.ZodType<Prisma.PlaidAccountUpsertArgs> = z.object({
  select: PlaidAccountSelectSchema.optional(),
  include: PlaidAccountIncludeSchema.optional(),
  where: PlaidAccountWhereUniqueInputSchema,
  create: z.union([ PlaidAccountCreateInputSchema,PlaidAccountUncheckedCreateInputSchema ]),
  update: z.union([ PlaidAccountUpdateInputSchema,PlaidAccountUncheckedUpdateInputSchema ]),
}).strict()

export const PlaidAccountCreateManyArgsSchema: z.ZodType<Prisma.PlaidAccountCreateManyArgs> = z.object({
  data: z.union([ PlaidAccountCreateManyInputSchema,PlaidAccountCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const PlaidAccountDeleteArgsSchema: z.ZodType<Prisma.PlaidAccountDeleteArgs> = z.object({
  select: PlaidAccountSelectSchema.optional(),
  include: PlaidAccountIncludeSchema.optional(),
  where: PlaidAccountWhereUniqueInputSchema,
}).strict()

export const PlaidAccountUpdateArgsSchema: z.ZodType<Prisma.PlaidAccountUpdateArgs> = z.object({
  select: PlaidAccountSelectSchema.optional(),
  include: PlaidAccountIncludeSchema.optional(),
  data: z.union([ PlaidAccountUpdateInputSchema,PlaidAccountUncheckedUpdateInputSchema ]),
  where: PlaidAccountWhereUniqueInputSchema,
}).strict()

export const PlaidAccountUpdateManyArgsSchema: z.ZodType<Prisma.PlaidAccountUpdateManyArgs> = z.object({
  data: z.union([ PlaidAccountUpdateManyMutationInputSchema,PlaidAccountUncheckedUpdateManyInputSchema ]),
  where: PlaidAccountWhereInputSchema.optional(),
}).strict()

export const PlaidAccountDeleteManyArgsSchema: z.ZodType<Prisma.PlaidAccountDeleteManyArgs> = z.object({
  where: PlaidAccountWhereInputSchema.optional(),
}).strict()

export const PlaidTransactionCreateArgsSchema: z.ZodType<Prisma.PlaidTransactionCreateArgs> = z.object({
  select: PlaidTransactionSelectSchema.optional(),
  include: PlaidTransactionIncludeSchema.optional(),
  data: z.union([ PlaidTransactionCreateInputSchema,PlaidTransactionUncheckedCreateInputSchema ]),
}).strict()

export const PlaidTransactionUpsertArgsSchema: z.ZodType<Prisma.PlaidTransactionUpsertArgs> = z.object({
  select: PlaidTransactionSelectSchema.optional(),
  include: PlaidTransactionIncludeSchema.optional(),
  where: PlaidTransactionWhereUniqueInputSchema,
  create: z.union([ PlaidTransactionCreateInputSchema,PlaidTransactionUncheckedCreateInputSchema ]),
  update: z.union([ PlaidTransactionUpdateInputSchema,PlaidTransactionUncheckedUpdateInputSchema ]),
}).strict()

export const PlaidTransactionCreateManyArgsSchema: z.ZodType<Prisma.PlaidTransactionCreateManyArgs> = z.object({
  data: z.union([ PlaidTransactionCreateManyInputSchema,PlaidTransactionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const PlaidTransactionDeleteArgsSchema: z.ZodType<Prisma.PlaidTransactionDeleteArgs> = z.object({
  select: PlaidTransactionSelectSchema.optional(),
  include: PlaidTransactionIncludeSchema.optional(),
  where: PlaidTransactionWhereUniqueInputSchema,
}).strict()

export const PlaidTransactionUpdateArgsSchema: z.ZodType<Prisma.PlaidTransactionUpdateArgs> = z.object({
  select: PlaidTransactionSelectSchema.optional(),
  include: PlaidTransactionIncludeSchema.optional(),
  data: z.union([ PlaidTransactionUpdateInputSchema,PlaidTransactionUncheckedUpdateInputSchema ]),
  where: PlaidTransactionWhereUniqueInputSchema,
}).strict()

export const PlaidTransactionUpdateManyArgsSchema: z.ZodType<Prisma.PlaidTransactionUpdateManyArgs> = z.object({
  data: z.union([ PlaidTransactionUpdateManyMutationInputSchema,PlaidTransactionUncheckedUpdateManyInputSchema ]),
  where: PlaidTransactionWhereInputSchema.optional(),
}).strict()

export const PlaidTransactionDeleteManyArgsSchema: z.ZodType<Prisma.PlaidTransactionDeleteManyArgs> = z.object({
  where: PlaidTransactionWhereInputSchema.optional(),
}).strict()

export const DailyRateCreateArgsSchema: z.ZodType<Prisma.DailyRateCreateArgs> = z.object({
  select: DailyRateSelectSchema.optional(),
  include: DailyRateIncludeSchema.optional(),
  data: z.union([ DailyRateCreateInputSchema,DailyRateUncheckedCreateInputSchema ]),
}).strict()

export const DailyRateUpsertArgsSchema: z.ZodType<Prisma.DailyRateUpsertArgs> = z.object({
  select: DailyRateSelectSchema.optional(),
  include: DailyRateIncludeSchema.optional(),
  where: DailyRateWhereUniqueInputSchema,
  create: z.union([ DailyRateCreateInputSchema,DailyRateUncheckedCreateInputSchema ]),
  update: z.union([ DailyRateUpdateInputSchema,DailyRateUncheckedUpdateInputSchema ]),
}).strict()

export const DailyRateCreateManyArgsSchema: z.ZodType<Prisma.DailyRateCreateManyArgs> = z.object({
  data: z.union([ DailyRateCreateManyInputSchema,DailyRateCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const DailyRateDeleteArgsSchema: z.ZodType<Prisma.DailyRateDeleteArgs> = z.object({
  select: DailyRateSelectSchema.optional(),
  include: DailyRateIncludeSchema.optional(),
  where: DailyRateWhereUniqueInputSchema,
}).strict()

export const DailyRateUpdateArgsSchema: z.ZodType<Prisma.DailyRateUpdateArgs> = z.object({
  select: DailyRateSelectSchema.optional(),
  include: DailyRateIncludeSchema.optional(),
  data: z.union([ DailyRateUpdateInputSchema,DailyRateUncheckedUpdateInputSchema ]),
  where: DailyRateWhereUniqueInputSchema,
}).strict()

export const DailyRateUpdateManyArgsSchema: z.ZodType<Prisma.DailyRateUpdateManyArgs> = z.object({
  data: z.union([ DailyRateUpdateManyMutationInputSchema,DailyRateUncheckedUpdateManyInputSchema ]),
  where: DailyRateWhereInputSchema.optional(),
}).strict()

export const DailyRateDeleteManyArgsSchema: z.ZodType<Prisma.DailyRateDeleteManyArgs> = z.object({
  where: DailyRateWhereInputSchema.optional(),
}).strict()

export const PayoutCreateArgsSchema: z.ZodType<Prisma.PayoutCreateArgs> = z.object({
  select: PayoutSelectSchema.optional(),
  include: PayoutIncludeSchema.optional(),
  data: z.union([ PayoutCreateInputSchema,PayoutUncheckedCreateInputSchema ]),
}).strict()

export const PayoutUpsertArgsSchema: z.ZodType<Prisma.PayoutUpsertArgs> = z.object({
  select: PayoutSelectSchema.optional(),
  include: PayoutIncludeSchema.optional(),
  where: PayoutWhereUniqueInputSchema,
  create: z.union([ PayoutCreateInputSchema,PayoutUncheckedCreateInputSchema ]),
  update: z.union([ PayoutUpdateInputSchema,PayoutUncheckedUpdateInputSchema ]),
}).strict()

export const PayoutCreateManyArgsSchema: z.ZodType<Prisma.PayoutCreateManyArgs> = z.object({
  data: z.union([ PayoutCreateManyInputSchema,PayoutCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const PayoutDeleteArgsSchema: z.ZodType<Prisma.PayoutDeleteArgs> = z.object({
  select: PayoutSelectSchema.optional(),
  include: PayoutIncludeSchema.optional(),
  where: PayoutWhereUniqueInputSchema,
}).strict()

export const PayoutUpdateArgsSchema: z.ZodType<Prisma.PayoutUpdateArgs> = z.object({
  select: PayoutSelectSchema.optional(),
  include: PayoutIncludeSchema.optional(),
  data: z.union([ PayoutUpdateInputSchema,PayoutUncheckedUpdateInputSchema ]),
  where: PayoutWhereUniqueInputSchema,
}).strict()

export const PayoutUpdateManyArgsSchema: z.ZodType<Prisma.PayoutUpdateManyArgs> = z.object({
  data: z.union([ PayoutUpdateManyMutationInputSchema,PayoutUncheckedUpdateManyInputSchema ]),
  where: PayoutWhereInputSchema.optional(),
}).strict()

export const PayoutDeleteManyArgsSchema: z.ZodType<Prisma.PayoutDeleteManyArgs> = z.object({
  where: PayoutWhereInputSchema.optional(),
}).strict()

export const RevenuePayoutCreateArgsSchema: z.ZodType<Prisma.RevenuePayoutCreateArgs> = z.object({
  select: RevenuePayoutSelectSchema.optional(),
  include: RevenuePayoutIncludeSchema.optional(),
  data: z.union([ RevenuePayoutCreateInputSchema,RevenuePayoutUncheckedCreateInputSchema ]),
}).strict()

export const RevenuePayoutUpsertArgsSchema: z.ZodType<Prisma.RevenuePayoutUpsertArgs> = z.object({
  select: RevenuePayoutSelectSchema.optional(),
  include: RevenuePayoutIncludeSchema.optional(),
  where: RevenuePayoutWhereUniqueInputSchema,
  create: z.union([ RevenuePayoutCreateInputSchema,RevenuePayoutUncheckedCreateInputSchema ]),
  update: z.union([ RevenuePayoutUpdateInputSchema,RevenuePayoutUncheckedUpdateInputSchema ]),
}).strict()

export const RevenuePayoutCreateManyArgsSchema: z.ZodType<Prisma.RevenuePayoutCreateManyArgs> = z.object({
  data: z.union([ RevenuePayoutCreateManyInputSchema,RevenuePayoutCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const RevenuePayoutDeleteArgsSchema: z.ZodType<Prisma.RevenuePayoutDeleteArgs> = z.object({
  select: RevenuePayoutSelectSchema.optional(),
  include: RevenuePayoutIncludeSchema.optional(),
  where: RevenuePayoutWhereUniqueInputSchema,
}).strict()

export const RevenuePayoutUpdateArgsSchema: z.ZodType<Prisma.RevenuePayoutUpdateArgs> = z.object({
  select: RevenuePayoutSelectSchema.optional(),
  include: RevenuePayoutIncludeSchema.optional(),
  data: z.union([ RevenuePayoutUpdateInputSchema,RevenuePayoutUncheckedUpdateInputSchema ]),
  where: RevenuePayoutWhereUniqueInputSchema,
}).strict()

export const RevenuePayoutUpdateManyArgsSchema: z.ZodType<Prisma.RevenuePayoutUpdateManyArgs> = z.object({
  data: z.union([ RevenuePayoutUpdateManyMutationInputSchema,RevenuePayoutUncheckedUpdateManyInputSchema ]),
  where: RevenuePayoutWhereInputSchema.optional(),
}).strict()

export const RevenuePayoutDeleteManyArgsSchema: z.ZodType<Prisma.RevenuePayoutDeleteManyArgs> = z.object({
  where: RevenuePayoutWhereInputSchema.optional(),
}).strict()